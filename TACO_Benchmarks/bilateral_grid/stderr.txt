Generator bilateral_grid has base_path ./bin/bilateral_grid_auto_schedule
Creating initial loop nests...
Injecting realization of { bilateral_grid }
Inlining interpolated
Injecting realization of { blury }
Injecting realization of { blurx }
Injecting realization of { blurz }
Injecting realization of { histogram }
Skipping injecting memoization...
Injecting tracing...
Adding checks for parameters
Computing bounds of each function's value
Adding checks for images
Failed to prove, but could not find a counter-example:
 (v0 != 0.000000f)
Original expression:
(r_sigma != 0.000000f)
Failed to prove, but could not find a counter-example:
 (v0 != 0.000000f)
Original expression:
(r_sigma != 0.000000f)
Failed to prove, but could not find a counter-example:
 (v0 != 0.000000f)
Original expression:
(r_sigma != 0.000000f)
Failed to prove, but could not find a counter-example:
 (v0 != 0.000000f)
Original expression:
(r_sigma != 0.000000f)
Performing computation bounds inference...
Removing extern loops...
Performing sliding window optimization...
Simplifying correlated differences...
Performing allocation bounds inference...
Failed to prove, but could not find a counter-example:
 (v0 != 0.000000f)
Original expression:
(r_sigma != 0.000000f)
Failed to prove, but could not find a counter-example:
 (v0 != 0.000000f)
Original expression:
(r_sigma != 0.000000f)
Failed to prove, but could not find a counter-example:
 (v0 != 0.000000f)
Original expression:
(r_sigma != 0.000000f)
Failed to prove, but could not find a counter-example:
 (v0 != 0.000000f)
Original expression:
(r_sigma != 0.000000f)
Removing code that depends on undef values...
Uniquifying variable names...
Simplifying...
Performing storage folding optimization...
Injecting debug_to_file calls...
Injecting prefetches...
Dynamically skipping stages...
Forking asynchronous producers...
Destructuring tuple-valued realizations...
Canonicalizing GPU var names...
Performing storage flattening...
Unpacking buffer arguments...
Skipping rewriting memoized allocations...
Selecting a GPU API for GPU loops...
Injecting host <-> dev buffer copies...
Selecting a GPU API for extern stages...
Simplifying...
Reduce prefetch dimension...
Simplifying correlated differences...
Unrolling...
Vectorizing...
Injecting per-block gpu synchronization...
Detecting vector interleavings...
Partitioning loops to simplify boundary conditions...
Failed to prove, but could not find a counter-example:
 (let v0 = (v2 - ((v3 + v4)*8)) in (max(min(max(((v1 + v2) - ((v3 + v4)*8)), v0), 4), -4) <= max(min(v0, 4), -4)))
Original expression:
(let t2662 = (.__thread_id_x + blurz.s0.x.x_i.base) in (let t2663 = min(max(((input.min.0 - (t2662*8)) + 4), 0), (8 + 0)) in (max((min((((input.extent.0 + input.min.0) - (t2662*8)) + 3), ((0 + 8) - 1)) + 1), t2663) <= t2663)))
Trimming loops to the region over which they do something...
Failed to prove, but could not find a counter-example:
 (let v0 = (v3 == 0) in (!v0 || (max(min(v1, 1.000000f), 0.000000f) == max(min(v2, 1.000000f), 0.000000f))))
Original expression:
(let t2675 = (histogram.s1.c == 0) in (select(t2675, max(min(t2673.s.min, 1.000000f), 0.000000f), 1.000000f) == select(t2675, max(min(t2673.s.max, 1.000000f), 0.000000f), 1.000000f)))
Failed to prove, but could not find a counter-example:
 (let v0 = (v3 == 0) in (!v0 || (max(min(v1, 1.000000f), 0.000000f) == max(min(v2, 1.000000f), 0.000000f))))
Original expression:
(let t2679 = (histogram.s1.c == 0) in (select(t2679, max(min(t2677.s.min, 1.000000f), 0.000000f), 1.000000f) == select(t2679, max(min(t2677.s.max, 1.000000f), 0.000000f), 1.000000f)))
Failed to prove, but could not find a counter-example:
 (let v0 = (v3 == 0) in (!v0 || (max(min(v1, 1.000000f), 0.000000f) == max(min(v2, 1.000000f), 0.000000f))))
Original expression:
(let t2683 = (histogram.s1.c == 0) in (select(t2683, max(min(t2681.s.min, 1.000000f), 0.000000f), 1.000000f) == select(t2683, max(min(t2681.s.max, 1.000000f), 0.000000f), 1.000000f)))
Failed to prove, but could not find a counter-example:
 (let v0 = (v3 == 0) in (!v0 || (max(min(v1, 1.000000f), 0.000000f) == max(min(v2, 1.000000f), 0.000000f))))
Original expression:
(let t2687 = (histogram.s1.c == 0) in (select(t2687, max(min(t2685.s.min, 1.000000f), 0.000000f), 1.000000f) == select(t2687, max(min(t2685.s.max, 1.000000f), 0.000000f), 1.000000f)))
Failed to prove, but could not find a counter-example:
 (let v0 = (v3 == 0) in (!v0 || (max(min(v1, 1.000000f), 0.000000f) == max(min(v2, 1.000000f), 0.000000f))))
Original expression:
(let t2691 = (histogram.s1.c == 0) in (select(t2691, max(min(t2689.s.min, 1.000000f), 0.000000f), 1.000000f) == select(t2691, max(min(t2689.s.max, 1.000000f), 0.000000f), 1.000000f)))
Failed to prove, but could not find a counter-example:
 (let v0 = (v3 == 0) in (!v0 || (max(min(v1, 1.000000f), 0.000000f) == max(min(v2, 1.000000f), 0.000000f))))
Original expression:
(let t2695 = (histogram.s1.c == 0) in (select(t2695, max(min(t2693.s.min, 1.000000f), 0.000000f), 1.000000f) == select(t2695, max(min(t2693.s.max, 1.000000f), 0.000000f), 1.000000f)))
Failed to prove, but could not find a counter-example:
 (let v0 = (v3 == 0) in (!v0 || (max(min(v1, 1.000000f), 0.000000f) == max(min(v2, 1.000000f), 0.000000f))))
Original expression:
(let t2699 = (histogram.s1.c == 0) in (select(t2699, max(min(t2697.s.min, 1.000000f), 0.000000f), 1.000000f) == select(t2699, max(min(t2697.s.max, 1.000000f), 0.000000f), 1.000000f)))
Failed to prove, but could not find a counter-example:
 (let v0 = (v3 == 0) in (!v0 || (max(min(v1, 1.000000f), 0.000000f) == max(min(v2, 1.000000f), 0.000000f))))
Original expression:
(let t2703 = (histogram.s1.c == 0) in (select(t2703, max(min(t2701.s.min, 1.000000f), 0.000000f), 1.000000f) == select(t2703, max(min(t2701.s.max, 1.000000f), 0.000000f), 1.000000f)))
Failed to prove, but could not find a counter-example:
 (let v0 = (v3 == 0) in (!v0 || (max(min(v1, 1.000000f), 0.000000f) == max(min(v2, 1.000000f), 0.000000f))))
Original expression:
(let t2707 = (histogram.s1.c == 0) in (select(t2707, max(min(t2705.s.min, 1.000000f), 0.000000f), 1.000000f) == select(t2707, max(min(t2705.s.max, 1.000000f), 0.000000f), 1.000000f)))
Failed to prove, but could not find a counter-example:
 (let v0 = (v3 == 0) in (!v0 || (max(min(v1, 1.000000f), 0.000000f) == max(min(v2, 1.000000f), 0.000000f))))
Original expression:
(let t2711 = (histogram.s1.c == 0) in (select(t2711, max(min(t2709.s.min, 1.000000f), 0.000000f), 1.000000f) == select(t2711, max(min(t2709.s.max, 1.000000f), 0.000000f), 1.000000f)))
Failed to prove, but could not find a counter-example:
 (let v0 = (v3 == 0) in (!v0 || (max(min(v1, 1.000000f), 0.000000f) == max(min(v2, 1.000000f), 0.000000f))))
Original expression:
(let t2715 = (histogram.s1.c == 0) in (select(t2715, max(min(t2713.s.min, 1.000000f), 0.000000f), 1.000000f) == select(t2715, max(min(t2713.s.max, 1.000000f), 0.000000f), 1.000000f)))
Failed to prove, but could not find a counter-example:
 (let v0 = (v3 == 0) in (!v0 || (max(min(v1, 1.000000f), 0.000000f) == max(min(v2, 1.000000f), 0.000000f))))
Original expression:
(let t2719 = (histogram.s1.c == 0) in (select(t2719, max(min(t2717.s.min, 1.000000f), 0.000000f), 1.000000f) == select(t2719, max(min(t2717.s.max, 1.000000f), 0.000000f), 1.000000f)))
Failed to prove, but could not find a counter-example:
 (let v0 = (v3 == 0) in (!v0 || (max(min(v1, 1.000000f), 0.000000f) == max(min(v2, 1.000000f), 0.000000f))))
Original expression:
(let t2726 = (histogram.s1.c == 0) in (select(t2726, max(min(t2724.s.min, 1.000000f), 0.000000f), 1.000000f) == select(t2726, max(min(t2724.s.max, 1.000000f), 0.000000f), 1.000000f)))
Failed to prove, but could not find a counter-example:
 (let v0 = (v3 == 0) in (!v0 || (max(min(v1, 1.000000f), 0.000000f) == max(min(v2, 1.000000f), 0.000000f))))
Original expression:
(let t2730 = (histogram.s1.c == 0) in (select(t2730, max(min(t2728.s.min, 1.000000f), 0.000000f), 1.000000f) == select(t2730, max(min(t2728.s.max, 1.000000f), 0.000000f), 1.000000f)))
Failed to prove, but could not find a counter-example:
 (let v0 = (v3 == 0) in (!v0 || (max(min(v1, 1.000000f), 0.000000f) == max(min(v2, 1.000000f), 0.000000f))))
Original expression:
(let t2734 = (histogram.s1.c == 0) in (select(t2734, max(min(t2732.s.min, 1.000000f), 0.000000f), 1.000000f) == select(t2734, max(min(t2732.s.max, 1.000000f), 0.000000f), 1.000000f)))
Injecting early frees...
Simplifying correlated differences...
Warning: expression is non-monotonic in loop variable blurz.s0.y.y_o.__block_id_y: (let t2737 = min((((bilateral_grid.extent.1 + bilateral_grid.min.1) + -33)/8), (((bilateral_grid.min.1/8) + (blurz.s0.y.y_o.__block_id_y*8)) + -2)) in (max(min((((input.extent.1 + input.min.1) - (.__thread_id_y*8)) - (t2737*8)), 4), -4) - max(min(((input.min.1 - (.__thread_id_y*8)) - (t2737*8)), 4), -4)))
Warning: expression is non-monotonic in loop variable blurz.s0.x.x_o.__block_id_x: (let t2739 = min((((bilateral_grid.extent.0 + bilateral_grid.min.0) + -33)/8), (((bilateral_grid.min.0/8) + (blurz.s0.x.x_o.__block_id_x*8)) + -2)) in (max(min((((input.extent.0 + input.min.0) - (.__thread_id_x*8)) - (t2739*8)), 4), -4) - max(min(((input.min.0 - (.__thread_id_x*8)) - (t2739*8)), 4), -4)))
Warning: expression is non-monotonic in loop variable .__thread_id_y: (let t2741 = min((((bilateral_grid.extent.1 + bilateral_grid.min.1) + -33)/8), (((bilateral_grid.min.1/8) + (blurz.s0.y.y_o.__block_id_y*8)) + -2)) in (max(min((((input.extent.1 + input.min.1) - (t2741*8)) - (.__thread_id_y*8)), 4), -4) - max(min(((input.min.1 - (t2741*8)) - (.__thread_id_y*8)), 4), -4)))
Warning: expression is non-monotonic in loop variable .__thread_id_x: (let t2743 = min((((bilateral_grid.extent.0 + bilateral_grid.min.0) + -33)/8), (((bilateral_grid.min.0/8) + (blurz.s0.x.x_o.__block_id_x*8)) + -2)) in (max(min((((input.extent.0 + input.min.0) - (t2743*8)) - (.__thread_id_x*8)), 4), -4) - max(min(((input.min.0 - (t2743*8)) - (.__thread_id_x*8)), 4), -4)))
Bounding small allocations...
Injecting warp shuffles...
Simplifying...
Lowering unsafe promises...
Lowering after final simplification:
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
assert((reinterpret(uint64, bilateral_grid.buffer) != (uint64)0), halide_error_buffer_argument_is_null("bilateral_grid"))
let bilateral_grid = _halide_buffer_get_host(bilateral_grid.buffer)
let bilateral_grid.type = _halide_buffer_get_type(bilateral_grid.buffer)
let bilateral_grid.dimensions = _halide_buffer_get_dimensions(bilateral_grid.buffer)
let bilateral_grid.min.0 = _halide_buffer_get_min(bilateral_grid.buffer, 0)
let bilateral_grid.extent.0 = _halide_buffer_get_extent(bilateral_grid.buffer, 0)
let bilateral_grid.stride.0 = _halide_buffer_get_stride(bilateral_grid.buffer, 0)
let bilateral_grid.min.1 = _halide_buffer_get_min(bilateral_grid.buffer, 1)
let bilateral_grid.extent.1 = _halide_buffer_get_extent(bilateral_grid.buffer, 1)
let bilateral_grid.stride.1 = _halide_buffer_get_stride(bilateral_grid.buffer, 1)
let input = _halide_buffer_get_host(input.buffer)
let input.type = _halide_buffer_get_type(input.buffer)
let input.dimensions = _halide_buffer_get_dimensions(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.extent.0 = _halide_buffer_get_extent(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.extent.1 = _halide_buffer_get_extent(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let blury.s0.z.max.s = int32(max((1.000000f/r_sigma), 0.000000f))
let blury.s0.z.min = int32(min((1.000000f/r_sigma), 0.000000f))
let bilateral_grid.extent.0.required.s = (min((((bilateral_grid.extent.0 + -1)/32)*32), (bilateral_grid.extent.0 + -32)) - min(bilateral_grid.extent.0, 32))
let bilateral_grid.extent.1.required.s = (min((((bilateral_grid.extent.1 + -1)/32)*32), (bilateral_grid.extent.1 + -32)) - min(bilateral_grid.extent.1, 32))
let input.extent.0.required = (max(max(min((((((bilateral_grid.extent.0 + bilateral_grid.min.0) + 23)/8)*8) + 4), (input.extent.0 + input.min.0)), (bilateral_grid.extent.0 + bilateral_grid.min.0)), (input.min.0 + 1)) - min(max((min(((bilateral_grid.min.0/8)*8), ((input.extent.0 + input.min.0) + 19)) + -20), input.min.0), ((min(bilateral_grid.extent.0, 32) + bilateral_grid.min.0) + -32)))
let input.min.0.required = min(max((min(((bilateral_grid.min.0/8)*8), ((input.extent.0 + input.min.0) + 19)) + -20), input.min.0), ((min(bilateral_grid.extent.0, 32) + bilateral_grid.min.0) + -32))
let input.extent.1.required = (max(max(min((((((bilateral_grid.extent.1 + bilateral_grid.min.1) + 23)/8)*8) + 4), (input.extent.1 + input.min.1)), (bilateral_grid.extent.1 + bilateral_grid.min.1)), (input.min.1 + 1)) - min(max((min(((bilateral_grid.min.1/8)*8), ((input.extent.1 + input.min.1) + 19)) + -20), input.min.1), ((min(bilateral_grid.extent.1, 32) + bilateral_grid.min.1) + -32)))
let input.min.1.required = min(max((min(((bilateral_grid.min.1/8)*8), ((input.extent.1 + input.min.1) + 19)) + -20), input.min.1), ((min(bilateral_grid.extent.1, 32) + bilateral_grid.min.1) + -32))
if (_halide_buffer_is_bounds_query(bilateral_grid.buffer)) {
  _halide_buffer_init(bilateral_grid.buffer, _halide_buffer_get_shape(bilateral_grid.buffer), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 2, 32, 2, make_struct((halide_dimension_t *), ((min(bilateral_grid.extent.0, 32) + bilateral_grid.min.0) + -32), (bilateral_grid.extent.0.required.s + 64), 1, 0, ((min(bilateral_grid.extent.1, 32) + bilateral_grid.min.1) + -32), (bilateral_grid.extent.1.required.s + 64), (bilateral_grid.extent.0.required.s + 64), 0), (uint64)0)
}
if (_halide_buffer_is_bounds_query(input.buffer)) {
  _halide_buffer_init(input.buffer, _halide_buffer_get_shape(input.buffer), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 2, 32, 2, make_struct((halide_dimension_t *), input.min.0.required, input.extent.0.required, 1, 0, input.min.1.required, input.extent.1.required, input.extent.0.required, 0), (uint64)0)
}
if (!(_halide_buffer_is_bounds_query(bilateral_grid.buffer) || _halide_buffer_is_bounds_query(input.buffer))) {
  assert((bilateral_grid.type == (uint32)73730), halide_error_bad_type("Output buffer bilateral_grid", bilateral_grid.type, (uint32)73730))
  assert((bilateral_grid.dimensions == 2), halide_error_bad_dimensions("Output buffer bilateral_grid", bilateral_grid.dimensions, 2))
  assert((input.type == (uint32)73730), halide_error_bad_type("Input buffer input", input.type, (uint32)73730))
  assert((input.dimensions == 2), halide_error_bad_dimensions("Input buffer input", input.dimensions, 2))
  assert(((32 <= bilateral_grid.extent.0) && ((((min(bilateral_grid.extent.0, 32) + bilateral_grid.min.0) + bilateral_grid.extent.0.required.s) + 32) <= (bilateral_grid.extent.0 + bilateral_grid.min.0))), halide_error_access_out_of_bounds("Output buffer bilateral_grid", 0, ((min(bilateral_grid.extent.0, 32) + bilateral_grid.min.0) + -32), (((min(bilateral_grid.extent.0, 32) + bilateral_grid.min.0) + bilateral_grid.extent.0.required.s) + 31), bilateral_grid.min.0, ((bilateral_grid.extent.0 + bilateral_grid.min.0) + -1)))
  assert(((32 <= bilateral_grid.extent.1) && ((((min(bilateral_grid.extent.1, 32) + bilateral_grid.min.1) + bilateral_grid.extent.1.required.s) + 32) <= (bilateral_grid.extent.1 + bilateral_grid.min.1))), halide_error_access_out_of_bounds("Output buffer bilateral_grid", 1, ((min(bilateral_grid.extent.1, 32) + bilateral_grid.min.1) + -32), (((min(bilateral_grid.extent.1, 32) + bilateral_grid.min.1) + bilateral_grid.extent.1.required.s) + 31), bilateral_grid.min.1, ((bilateral_grid.extent.1 + bilateral_grid.min.1) + -1)))
  assert(((input.min.0 <= input.min.0.required) && ((input.extent.0.required + input.min.0.required) <= (input.extent.0 + input.min.0))), halide_error_access_out_of_bounds("Input buffer input", 0, input.min.0.required, ((input.extent.0.required + input.min.0.required) + -1), input.min.0, ((input.extent.0 + input.min.0) + -1)))
  assert((0 <= input.extent.0), halide_error_buffer_extents_negative("Input buffer input", 0, input.extent.0))
  assert(((input.min.1 <= input.min.1.required) && ((input.extent.1.required + input.min.1.required) <= (input.extent.1 + input.min.1))), halide_error_access_out_of_bounds("Input buffer input", 1, input.min.1.required, ((input.extent.1.required + input.min.1.required) + -1), input.min.1, ((input.extent.1 + input.min.1) + -1)))
  assert((0 <= input.extent.1), halide_error_buffer_extents_negative("Input buffer input", 1, input.extent.1))
  assert((bilateral_grid.stride.0 == 1), halide_error_constraint_violated("bilateral_grid.stride.0", bilateral_grid.stride.0, "1", 1))
  assert((input.stride.0 == 1), halide_error_constraint_violated("input.stride.0", input.stride.0, "1", 1))
  let bilateral_grid.total_extent.1 = (int64(bilateral_grid.extent.1)*int64(bilateral_grid.extent.0))
  let input.total_extent.1 = (int64(input.extent.1)*int64(input.extent.0))
  assert((abs(int64(bilateral_grid.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("bilateral_grid", abs(int64(bilateral_grid.extent.0)), (uint64)2147483647))
  assert((abs((int64(bilateral_grid.extent.1)*int64(bilateral_grid.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("bilateral_grid", abs((int64(bilateral_grid.extent.1)*int64(bilateral_grid.stride.1))), (uint64)2147483647))
  assert((bilateral_grid.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("bilateral_grid", bilateral_grid.total_extent.1, (int64)2147483647))
  assert((abs(int64(input.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("input", abs(int64(input.extent.0)), (uint64)2147483647))
  assert((abs((int64(input.extent.1)*int64(input.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("input", abs((int64(input.extent.1)*int64(input.stride.1))), (uint64)2147483647))
  assert((input.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("input", input.total_extent.1, (int64)2147483647))
  let blurz.y.extent_realized.s = (max(min((((bilateral_grid.extent.1 + bilateral_grid.min.1) + 23)/8), (((bilateral_grid.min.1/8) + (((((((bilateral_grid.extent.1 + bilateral_grid.min.1) + 23)/8) - (bilateral_grid.min.1/8)) + 2)/8)*8)) + 5)), (min((((bilateral_grid.extent.1 + bilateral_grid.min.1) + 7)/8), (((bilateral_grid.min.1/8) + ((((((bilateral_grid.extent.1 + bilateral_grid.min.1) + 7)/8) - (bilateral_grid.min.1/8))/28)*28)) + 27)) + 2)) - (((min(bilateral_grid.extent.1, 209) + bilateral_grid.min.1) + -225)/8))
  let blurz.x.extent_realized.s = (max(min((((bilateral_grid.extent.0 + bilateral_grid.min.0) + 23)/8), (((bilateral_grid.min.0/8) + (((((((bilateral_grid.extent.0 + bilateral_grid.min.0) + 23)/8) - (bilateral_grid.min.0/8)) + 2)/8)*8)) + 5)), (min((((bilateral_grid.extent.0 + bilateral_grid.min.0) + 7)/8), (((bilateral_grid.min.0/8) + ((((((bilateral_grid.extent.0 + bilateral_grid.min.0) + 7)/8) - (bilateral_grid.min.0/8))/8)*8)) + 7)) + 2)) - (((min(bilateral_grid.extent.0, 49) + bilateral_grid.min.0) + -65)/8))
  let blurz.stride.2 = ((blurz.x.extent_realized.s + 1)*(blurz.y.extent_realized.s + 1))
  allocate blurz[float32 * (blurz.x.extent_realized.s + 1) * (blurz.y.extent_realized.s + 1) * ((blury.s0.z.max.s - blury.s0.z.min) + 2) * 2] if (uint1)0
  let blurz.buffer = _halide_buffer_init(alloca(size_of_halide_buffer_t()), make_struct((halide_dimension_t *), (((min(bilateral_grid.extent.0, 49) + bilateral_grid.min.0) + -65)/8), (blurz.x.extent_realized.s + 1), 1, 0, (((min(bilateral_grid.extent.1, 209) + bilateral_grid.min.1) + -225)/8), (blurz.y.extent_realized.s + 1), (blurz.x.extent_realized.s + 1), 0, blury.s0.z.min, ((blury.s0.z.max.s - blury.s0.z.min) + 2), blurz.stride.2, 0, 0, 2, (((blury.s0.z.max.s - blury.s0.z.min) + 2)*blurz.stride.2), 0), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 2, 32, 4, make_struct((halide_dimension_t *), (((min(bilateral_grid.extent.0, 49) + bilateral_grid.min.0) + -65)/8), (blurz.x.extent_realized.s + 1), 1, 0, (((min(bilateral_grid.extent.1, 209) + bilateral_grid.min.1) + -225)/8), (blurz.y.extent_realized.s + 1), (blurz.x.extent_realized.s + 1), 0, blury.s0.z.min, ((blury.s0.z.max.s - blury.s0.z.min) + 2), blurz.stride.2, 0, 0, 2, (((blury.s0.z.max.s - blury.s0.z.min) + 2)*blurz.stride.2), 0), (uint64)0)
  register_destructor("halide_device_free_as_destructor", blurz.buffer)
  let blurz.s0.x.x_o.loop_extent.s = ((((bilateral_grid.extent.0 + bilateral_grid.min.0) + 23)/8) - (bilateral_grid.min.0/8))
  let blurz.s0.y.y_o.loop_extent.s = ((((bilateral_grid.extent.1 + bilateral_grid.min.1) + 23)/8) - (bilateral_grid.min.1/8))
  produce blurz {
    let halide_device_malloc_result$1 = halide_device_malloc(blurz.buffer, halide_cuda_device_interface())
    assert((halide_device_malloc_result$1 == 0), halide_device_malloc_result$1)
    let halide_copy_to_device_result$1 = halide_copy_to_device(input.buffer, halide_cuda_device_interface())
    assert((halide_copy_to_device_result$1 == 0), halide_copy_to_device_result$1)
    let t2666 = (let t3043 = quiet_div(1.000000f, r_sigma) in (((max(max(int32((max(t3043, 0.000000f) + 0.500000f)), int32((max((1.000000f/r_sigma), 0.000000f) + 0.500000f))), (blury.s0.z.max.s + 3)) - min(min(min(min((blury.s0.z.min + -2), int32((min(t3043, 0.000000f) + 0.500000f))), blury.s0.z.min), (blury.s0.z.min + 1)), int32((min((1.000000f/r_sigma), 0.000000f) + 0.500000f))))*128) + 128))
    let t2667 = max((blury.s0.z.max.s + 3), int32((max((1.000000f/r_sigma), 0.000000f) + 0.500000f)))
    let t2668 = min((blury.s0.z.min + -2), int32((min((1.000000f/r_sigma), 0.000000f) + 0.500000f)))
    let t2669 = min(min(min(min((blury.s0.z.min + -2), int32((min(quiet_div(1.000000f, r_sigma), 0.000000f) + 0.500000f))), blury.s0.z.min), (blury.s0.z.min + 1)), t2668)
    let t2670 = max(max((blury.s0.z.max.s + 3), int32((max(quiet_div(1.000000f, r_sigma), 0.000000f) + 0.500000f))), t2667)
    let t2824 = (1.000000f/r_sigma)
    let t3119 = (input.extent.0 + input.min.0)
    let t3120 = (input.extent.1 + input.min.1)
    let t3121 = ((blury.s0.z.max.s - blury.s0.z.min) + 2)
    let t3115 = (((min(bilateral_grid.extent.1, 209) + bilateral_grid.min.1) + -225)/8)
    let t3114 = (((min(bilateral_grid.extent.0, 49) + bilateral_grid.min.0) + -65)/8)
    let t3103 = (((bilateral_grid.extent.1 + bilateral_grid.min.1) + -33)/8)
    let t3105 = (((bilateral_grid.extent.0 + bilateral_grid.min.0) + -33)/8)
    let t3100 = ((blurz.s0.y.y_o.loop_extent.s + 10)/8)
    let t3101 = ((blurz.s0.x.x_o.loop_extent.s + 10)/8)
    let t3102 = (t2666*4)
    let t3104 = ((bilateral_grid.min.1/8) + -2)
    let t3106 = ((bilateral_grid.min.0/8) + -2)
    let t3108 = (((t2670 - t2669)*64) + 64)
    let t3111 = ((input.min.1*input.stride.1) + input.min.0)
    let t3107 = ((t2667 - t2668) + 1)
    let t3116 = (blurz.x.extent_realized.s + 1)
    gpu_block<CUDA> (blurz.s0.y.y_o.__block_id_y, 0, t3100) {
      gpu_block<CUDA> (blurz.s0.x.x_o.__block_id_x, 0, t3101) {
        allocate __shared[uint8 * t3102] in GPUShared
        gpu_thread<CUDA> (.__thread_id_y, 0, 8) {
          gpu_thread<CUDA> (.__thread_id_x, 0, 8) {
            let blurz.s0.y.y_i.base = min(((blurz.s0.y.y_o.__block_id_y*8) + t3104), t3103)
            let blurz.s0.x.x_i.base = min(((blurz.s0.x.x_o.__block_id_x*8) + t3106), t3105)
            produce histogram {
              let t3122 = ((.__thread_id_y*8) + .__thread_id_x)
              for (histogram.s0.z, t2668, t3107) {
                let t2837 = (((histogram.s0.z - t2669)*64) + t3122)
                for (histogram.s0.c, 0, 2) {
                  __shared[((histogram.s0.c*t3108) + t2837)] = 0.000000f
                }
              }
              gpu_thread_barrier()
              let histogram.s1.r$y.prologue.s = (input.min.1 - ((.__thread_id_y + blurz.s0.y.y_i.base)*8))
              let histogram.s1.r$y.epilogue.s = (t3120 - ((.__thread_id_y + blurz.s0.y.y_i.base)*8))
              let t3124 = ((.__thread_id_y + blurz.s0.y.y_i.base)*8)
              let t3126 = ((.__thread_id_x + blurz.s0.x.x_i.base)*8)
              let t3123 = (max(min(histogram.s1.r$y.prologue.s, 4), -4) + 4)
              let t3128 = ((.__thread_id_y*8) + .__thread_id_x)
              let t3125 = (t3120 + 3)
              let t3127 = (t3119 + 3)
              for (histogram.s1.r$y, 0, t3123) {
                let t2844 = ((max((min((histogram.s1.r$y + t3124), t3125) + -4), input.min.1)*input.stride.1) - t3111)
                for (histogram.s1.r$x, 0, 8) {
                  let t2845.s = max((min((histogram.s1.r$x + t3126), t3127) + -4), input.min.0)
                  let t3129 = (t2844 + t2845.s)
                  for (histogram.s1.c, 0, 2) {
                    __shared[((histogram.s1.c*t3108) + (((int32(((max(min(input[t3129], 1.000000f), 0.000000f)*t2824) + 0.500000f)) - t2669)*64) + t3128))] = (let t3044.s = input[t3129] in (__shared[((histogram.s1.c*t3108) + (((int32(((max(min(t3044.s, 1.000000f), 0.000000f)*t2824) + 0.500000f)) - t2669)*64) + t3128))] + select((histogram.s1.c == 0), max(min(t3044.s, 1.000000f), 0.000000f), 1.000000f)))
                  }
                }
              }
              let t2858.s = min(((blurz.s0.y.y_o.__block_id_y*8) + t3104), t3103)
              let t2859.s = min(((blurz.s0.x.x_o.__block_id_x*8) + t3106), t3105)
              let t2854 = (max(min(((t3119 - (t2859.s*8)) - (.__thread_id_x*8)), 4), -4) - max(min(((input.min.0 - (t2859.s*8)) - (.__thread_id_x*8)), 4), -4))
              let t2847 = (max(min(((t3120 - (t2858.s*8)) - (.__thread_id_y*8)), 4), -4) - max(min(((input.min.1 - (t2858.s*8)) - (.__thread_id_y*8)), 4), -4))
              let t2849 = (t3119 - ((.__thread_id_x + blurz.s0.x.x_i.base)*8))
              let t2855.s = (((.__thread_id_x + blurz.s0.x.x_i.base)*8) - t3111)
              let t3139 = max(min(t2849, 4), -4)
              let t3140 = ((.__thread_id_x + blurz.s0.x.x_i.base)*8)
              let t3137 = (4 - t3139)
              let t3138 = (t3139 + 4)
              let t3130 = (max(min(histogram.s1.r$y.prologue.s, 4), -4) + 4)
              let t3131 = (((.__thread_id_y + blurz.s0.y.y_i.base)*8) + -4)
              let t3135 = ((.__thread_id_y*8) + .__thread_id_x)
              let t3134 = (t3119 + 3)
              let t3136 = (t2855.s + -4)
              for (histogram.s1.r$y, t3130, t2847) {
                let t2862 = (((histogram.s1.r$y + t3131)*input.stride.1) - t3111)
                let t3141 = (max(min((input.min.0 - t3140), 4), -4) + 4)
                for (histogram.s1.r$x, 0, t3141) {
                  let t2863.s = max((min((histogram.s1.r$x + t3140), t3134) + -4), input.min.0)
                  let t3142 = (t2862 + t2863.s)
                  for (histogram.s1.c, 0, 2) {
                    __shared[((histogram.s1.c*t3108) + (((int32(((max(min(input[t3142], 1.000000f), 0.000000f)*t2824) + 0.500000f)) - t2669)*64) + t3135))] = (let t3045.s = input[t3142] in (__shared[((histogram.s1.c*t3108) + (((int32(((max(min(t3045.s, 1.000000f), 0.000000f)*t2824) + 0.500000f)) - t2669)*64) + t3135))] + select((histogram.s1.c == 0), max(min(t3045.s, 1.000000f), 0.000000f), 1.000000f)))
                  }
                }
                let t3143 = (max(min((input.min.0 - t3140), 4), -4) + 4)
                let t3144 = (((histogram.s1.r$y + t3131)*input.stride.1) + t3136)
                for (histogram.s1.r$x, t3143, t2854) {
                  let t3145 = (histogram.s1.r$x + t3144)
                  for (histogram.s1.c, 0, 2) {
                    __shared[((histogram.s1.c*t3108) + (((int32(((max(min(input[t3145], 1.000000f), 0.000000f)*t2824) + 0.500000f)) - t2669)*64) + t3135))] = (let t3046.s = input[t3145] in (__shared[((histogram.s1.c*t3108) + (((int32(((max(min(t3046.s, 1.000000f), 0.000000f)*t2824) + 0.500000f)) - t2669)*64) + t3135))] + select((histogram.s1.c == 0), max(min(t3046.s, 1.000000f), 0.000000f), 1.000000f)))
                  }
                }
                let t2869 = (((histogram.s1.r$y + t3131)*input.stride.1) - t3111)
                for (histogram.s1.r$x, t3138, t3137) {
                  let t2871.s = max((min((histogram.s1.r$x + t3140), t3134) + -4), input.min.0)
                  let t3146 = (t2869 + t2871.s)
                  for (histogram.s1.c, 0, 2) {
                    __shared[((histogram.s1.c*t3108) + (((int32(((max(min(input[t3146], 1.000000f), 0.000000f)*t2824) + 0.500000f)) - t2669)*64) + t3135))] = (let t3047.s = input[t3146] in (__shared[((histogram.s1.c*t3108) + (((int32(((max(min(t3047.s, 1.000000f), 0.000000f)*t2824) + 0.500000f)) - t2669)*64) + t3135))] + select((histogram.s1.c == 0), max(min(t3047.s, 1.000000f), 0.000000f), 1.000000f)))
                  }
                }
              }
              let t2873 = (4 - max(min(histogram.s1.r$y.epilogue.s, 4), -4))
              let t3148 = ((.__thread_id_y + blurz.s0.y.y_i.base)*8)
              let t3150 = ((.__thread_id_x + blurz.s0.x.x_i.base)*8)
              let t3147 = (max(min(histogram.s1.r$y.epilogue.s, 4), -4) + 4)
              let t3152 = ((.__thread_id_y*8) + .__thread_id_x)
              let t3149 = (t3120 + 3)
              let t3151 = (t3119 + 3)
              for (histogram.s1.r$y, t3147, t2873) {
                let t2880 = ((max((min((histogram.s1.r$y + t3148), t3149) + -4), input.min.1)*input.stride.1) - t3111)
                for (histogram.s1.r$x, 0, 8) {
                  let t2881.s = max((min((histogram.s1.r$x + t3150), t3151) + -4), input.min.0)
                  let t3153 = (t2880 + t2881.s)
                  for (histogram.s1.c, 0, 2) {
                    __shared[((histogram.s1.c*t3108) + (((int32(((max(min(input[t3153], 1.000000f), 0.000000f)*t2824) + 0.500000f)) - t2669)*64) + t3152))] = (let t3048.s = input[t3153] in (__shared[((histogram.s1.c*t3108) + (((int32(((max(min(t3048.s, 1.000000f), 0.000000f)*t2824) + 0.500000f)) - t2669)*64) + t3152))] + select((histogram.s1.c == 0), max(min(t3048.s, 1.000000f), 0.000000f), 1.000000f)))
                  }
                }
              }
            }
            gpu_thread_barrier()
            consume histogram {
              let t2887.s = ((((blurz.s0.y.y_i.base - t3115) + .__thread_id_y)*t3116) + (blurz.s0.x.x_i.base - t3114))
              let t3156 = ((.__thread_id_y*8) + .__thread_id_x)
              let t3154 = (.__thread_id_x + t2887.s)
              for (blurz.s0.c, 0, 2) {
                let t2895 = (((blurz.stride.2*t3121)*blurz.s0.c) + t3154)
                let t3157 = ((blurz.s0.c*t3108) + t3156)
                for (blurz.s0.z, blury.s0.z.min, t3121) {
                  blurz[(((blurz.s0.z - blury.s0.z.min)*blurz.stride.2) + t2895)] = (__shared[((((blurz.s0.z - t2669)*64) + t3157) + 128)] + ((__shared[((((blurz.s0.z - t2669)*64) + t3157) + 64)]*4.000000f) + ((__shared[(((blurz.s0.z - t2669)*64) + t3157)]*6.000000f) + (__shared[((((blurz.s0.z - t2669)*64) + t3157) + -128)] + (__shared[((((blurz.s0.z - t2669)*64) + t3157) + -64)]*4.000000f)))))
                }
              }
            }
          }
        }
        free __shared
      }
    }
    _halide_buffer_set_device_dirty(blurz.buffer, (uint1)1)
  }
  let blury.z.min_realized = min(blury.s0.z.min, int32(min(quiet_div(1.000000f, r_sigma), 0.000000f)))
  let blury.z.extent_realized.s.s = max(blury.s0.z.max.s, int32(max(quiet_div(1.000000f, r_sigma), 0.000000f)))
  let blury.y.extent_realized.s = ((((bilateral_grid.extent.1 + bilateral_grid.min.1) + 7)/8) - (((min(bilateral_grid.extent.1, 209) + bilateral_grid.min.1) + -209)/8))
  let blury.x.extent_realized.s = ((((bilateral_grid.extent.0 + bilateral_grid.min.0) + 7)/8) - (((min(bilateral_grid.extent.0, 49) + bilateral_grid.min.0) + -49)/8))
  let blury.stride.2 = ((blury.x.extent_realized.s + 1)*(blury.y.extent_realized.s + 1))
  allocate blury[float32 * (blury.x.extent_realized.s + 1) * (blury.y.extent_realized.s + 1) * ((blury.z.extent_realized.s.s - blury.z.min_realized) + 2) * 2] if (uint1)0
  let blury.buffer = _halide_buffer_init(alloca(size_of_halide_buffer_t()), make_struct((halide_dimension_t *), (((min(bilateral_grid.extent.0, 49) + bilateral_grid.min.0) + -49)/8), (blury.x.extent_realized.s + 1), 1, 0, (((min(bilateral_grid.extent.1, 209) + bilateral_grid.min.1) + -209)/8), (blury.y.extent_realized.s + 1), (blury.x.extent_realized.s + 1), 0, blury.z.min_realized, ((blury.z.extent_realized.s.s - blury.z.min_realized) + 2), blury.stride.2, 0, 0, 2, (((blury.z.extent_realized.s.s - blury.z.min_realized) + 2)*blury.stride.2), 0), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 2, 32, 4, make_struct((halide_dimension_t *), (((min(bilateral_grid.extent.0, 49) + bilateral_grid.min.0) + -49)/8), (blury.x.extent_realized.s + 1), 1, 0, (((min(bilateral_grid.extent.1, 209) + bilateral_grid.min.1) + -209)/8), (blury.y.extent_realized.s + 1), (blury.x.extent_realized.s + 1), 0, blury.z.min_realized, ((blury.z.extent_realized.s.s - blury.z.min_realized) + 2), blury.stride.2, 0, 0, 2, (((blury.z.extent_realized.s.s - blury.z.min_realized) + 2)*blury.stride.2), 0), (uint64)0)
  register_destructor("halide_device_free_as_destructor", blury.buffer)
  let blury.s0.x.x_o.loop_extent.s = ((((bilateral_grid.extent.0 + bilateral_grid.min.0) + 7)/8) - (bilateral_grid.min.0/8))
  let blury.s0.y.y_o.loop_extent.s = ((((bilateral_grid.extent.1 + bilateral_grid.min.1) + 7)/8) - (bilateral_grid.min.1/8))
  produce blury {
    consume blurz {
      let halide_device_malloc_result = halide_device_malloc(blury.buffer, halide_cuda_device_interface())
      assert((halide_device_malloc_result == 0), halide_device_malloc_result)
      let t2905.s = ((216 - min(bilateral_grid.extent.1, 209)) - bilateral_grid.min.1)
      let t3179 = (blury.s0.z.max.s - blury.s0.z.min)
      let t3180 = (t3179 + 2)
      let t3181 = min(bilateral_grid.extent.0, 49)
      let t3182 = (bilateral_grid.min.0 + t3181)
      let t3176 = (((min(bilateral_grid.extent.1, 209) + bilateral_grid.min.1) + -209)/8)
      let t3175 = ((t3182 + -49)/8)
      let t3167 = ((t3182 + -65)/8)
      let t3161 = (((bilateral_grid.extent.1 + bilateral_grid.min.1) + -209)/8)
      let t3163 = (((bilateral_grid.extent.0 + bilateral_grid.min.0) + -49)/8)
      let t3165 = (t2905.s/8)
      let t3162 = (bilateral_grid.min.1/8)
      let t3164 = (bilateral_grid.min.0/8)
      let t3178 = (((blury.z.extent_realized.s.s - blury.z.min_realized) + 2)*blury.stride.2)
      let t3168 = ((88 - t3181) - bilateral_grid.min.0)
      let t3169 = ((80 - t3181) - bilateral_grid.min.0)
      let t3170 = ((64 - t3181) - bilateral_grid.min.0)
      let t3171 = ((56 - t3181) - bilateral_grid.min.0)
      let t3158 = ((blury.s0.y.y_o.loop_extent.s/28) + 1)
      let t3159 = ((blury.s0.x.x_o.loop_extent.s/8) + 1)
      let t3160 = ((t3179*2048) + 4096)
      let t3174 = ((t3179*256) + 512)
      let t3166 = (blurz.x.extent_realized.s + 1)
      let t3177 = (blury.x.extent_realized.s + 1)
      gpu_block<CUDA> (blury.s0.y.y_o.__block_id_y, 0, t3158) {
        gpu_block<CUDA> (blury.s0.x.x_o.__block_id_x, 0, t3159) {
          allocate __shared[uint8 * t3160] in GPUShared
          gpu_thread<CUDA> (.__thread_id_y, 0, 32) {
            gpu_thread<CUDA> (.__thread_id_x, 0, 8) {
              let blury.s0.y.y_i.base = min(((blury.s0.y.y_o.__block_id_y*28) + t3162), t3161)
              let blury.s0.x.x_i.base = min(((blury.s0.x.x_o.__block_id_x*8) + t3164), t3163)
              produce blurx {
                let t2917 = (((blury.s0.y.y_i.base + t3165) + .__thread_id_y)*t3166)
                let t2921 = (blury.s0.x.x_i.base - t3167)
                let t3183 = ((.__thread_id_y*8) + .__thread_id_x)
                let t3188 = ((((t3171/8) + blury.s0.x.x_i.base) + t2917) + .__thread_id_x)
                let t3189 = ((((t3170/8) + blury.s0.x.x_i.base) + t2917) + .__thread_id_x)
                let t3186 = ((((t3169/8) + blury.s0.x.x_i.base) + t2917) + .__thread_id_x)
                let t3185 = ((((t3168/8) + blury.s0.x.x_i.base) + t2917) + .__thread_id_x)
                let t3187 = ((t2917 + t2921) + .__thread_id_x)
                for (blurx.s0.z, blury.s0.z.min, t3180) {
                  let t2932 = (((blurx.s0.z - blury.s0.z.min)*256) + t3183)
                  let t3190 = ((blurx.s0.z - blury.s0.z.min)*blurz.stride.2)
                  let t3191 = (blurz.stride.2*t3180)
                  for (blurx.s0.c, 0, 2) {
                    __shared[((blurx.s0.c*t3174) + t2932)] = (blurz[((blurx.s0.c*t3191) + (t3185 + t3190))] + ((blurz[((blurx.s0.c*t3191) + (t3186 + t3190))]*4.000000f) + ((blurz[((blurx.s0.c*t3191) + (t3187 + t3190))]*6.000000f) + (blurz[((blurx.s0.c*t3191) + (t3188 + t3190))] + (blurz[((blurx.s0.c*t3191) + (t3189 + t3190))]*4.000000f)))))
                  }
                }
              }
              gpu_thread_barrier()
              consume blurx {
                if ((.__thread_id_y < 28)) {
                  let t2939.s = ((((blury.s0.y.y_i.base - t3176) + .__thread_id_y)*t3177) + (blury.s0.x.x_i.base - t3175))
                  let t3193 = ((.__thread_id_y*8) + .__thread_id_x)
                  let t3192 = (.__thread_id_x + t2939.s)
                  for (blury.s0.c, 0, 2) {
                    let t2946 = ((blury.s0.c*t3178) + t3192)
                    let t3194 = ((blury.s0.c*t3174) + t3193)
                    for (blury.s0.z, blury.s0.z.min, t3180) {
                      blury[(((blury.s0.z - blury.z.min_realized)*blury.stride.2) + t2946)] = (__shared[((((blury.s0.z - blury.s0.z.min)*256) + t3194) + 32)] + ((__shared[((((blury.s0.z - blury.s0.z.min)*256) + t3194) + 24)]*4.000000f) + ((__shared[((((blury.s0.z - blury.s0.z.min)*256) + t3194) + 16)]*6.000000f) + (__shared[(((blury.s0.z - blury.s0.z.min)*256) + t3194)] + (__shared[((((blury.s0.z - blury.s0.z.min)*256) + t3194) + 8)]*4.000000f)))))
                    }
                  }
                }
              }
            }
          }
          free __shared
        }
      }
      let halide_device_free_result$1 = halide_device_free(blurz.buffer)
      assert((halide_device_free_result$1 == 0), halide_device_free_result$1)
      free blurz
      _halide_buffer_set_device_dirty(blury.buffer, (uint1)1)
    }
  }
  produce bilateral_grid {
    consume blury {
      let halide_copy_to_device_result = halide_copy_to_device(bilateral_grid.buffer, halide_cuda_device_interface())
      assert((halide_copy_to_device_result == 0), halide_copy_to_device_result)
      let t2952 = (1.000000f/r_sigma)
      let t2951.s = (bilateral_grid.min.0 - (input.min.1*input.stride.1))
      let t2957 = (0 - (bilateral_grid.min.1*bilateral_grid.stride.1))
      let t2960.s = ((bilateral_grid.extent.0 + bilateral_grid.min.0) - (bilateral_grid.min.1*bilateral_grid.stride.1))
      let t3202 = min(bilateral_grid.extent.0, 49)
      let t3200 = (((min(bilateral_grid.extent.1, 209) + bilateral_grid.min.1) + -209)/8)
      let t3195 = ((bilateral_grid.extent.1 + 31)/32)
      let t3196 = ((bilateral_grid.extent.0 + 31)/32)
      let t3198 = (bilateral_grid.extent.0/32)
      let t3203 = (((blury.z.extent_realized.s.s - blury.z.min_realized) + 2)*blury.stride.2)
      let t3205 = (input.min.1*input.stride.1)
      let t3199 = (t2951.s - input.min.0)
      let t3206 = ((t2960.s - bilateral_grid.min.0) + -32)
      let t3197 = (bilateral_grid.extent.1 + -32)
      let t3204 = (bilateral_grid.extent.0 + bilateral_grid.min.0)
      gpu_block<CUDA> (bilateral_grid.s0.y.y_o.__block_id_y, 0, t3195) {
        gpu_block<CUDA> (bilateral_grid.s0.x.x_o.__block_id_x, 0, t3196) {
          gpu_thread<CUDA> (.__thread_id_y, 0, 32) {
            gpu_thread<CUDA> (.__thread_id_x, 0, 32) {
              let bilateral_grid.s0.y.y_i.base.s = min((bilateral_grid.s0.y.y_o.__block_id_y*32), t3197)
              if ((bilateral_grid.s0.x.x_o.__block_id_x < t3198)) {
                bilateral_grid[(((((bilateral_grid.min.1 + bilateral_grid.s0.y.y_i.base.s) + .__thread_id_y)*bilateral_grid.stride.1) + ((bilateral_grid.s0.x.x_o.__block_id_x*32) + t2957)) + .__thread_id_x)] = (let t3058.s = input[(((((bilateral_grid.min.1 + bilateral_grid.s0.y.y_i.base.s) + .__thread_id_y)*input.stride.1) + ((bilateral_grid.s0.x.x_o.__block_id_x*32) + t3199)) + .__thread_id_x)] in (let t3059 = int32((max(min(t3058.s, 1.000000f), 0.000000f)*t2952)) in (let t3060 = float32(((((bilateral_grid.s0.x.x_o.__block_id_x*32) + bilateral_grid.min.0) + .__thread_id_x) % 8)) in (let t3061 = float32((((bilateral_grid.min.1 + bilateral_grid.s0.y.y_i.base.s) + .__thread_id_y) % 8)) in (let t3062 = ((max(min(t3058.s, 1.000000f), 0.000000f)*t2952) - float32(t3059)) in (let t3063 = (((((bilateral_grid.min.1 + bilateral_grid.s0.y.y_i.base.s) + .__thread_id_y)/8) - t3200)*(blury.x.extent_realized.s + 1)) in (let t3066 = (blury.stride.2 - (((bilateral_grid.min.0 + t3202) + -49)/8)) in (let t3067 = (t3203 - (((bilateral_grid.min.0 + t3202) + -49)/8)) in (let t3070 = (((t3059 - blury.z.min_realized)*blury.stride.2) + (((.__thread_id_x + bilateral_grid.min.0)/8) + (((bilateral_grid.s0.x.x_o.__block_id_x*4) + (blury.x.extent_realized.s - (((bilateral_grid.min.0 + t3202) + -49)/8))) + t3063))) in (let t3071 = (((t3059 - blury.z.min_realized)*blury.stride.2) + (((.__thread_id_x + bilateral_grid.min.0)/8) + (((bilateral_grid.s0.x.x_o.__block_id_x*4) + t3066) + t3063))) in (let t3072 = (((t3059 - blury.z.min_realized)*blury.stride.2) + (((.__thread_id_x + bilateral_grid.min.0)/8) + (((bilateral_grid.s0.x.x_o.__block_id_x*4) + (blury.x.extent_realized.s + t3066)) + t3063))) in (let t3073 = (((t3059 - blury.z.min_realized)*blury.stride.2) + (((.__thread_id_x + bilateral_grid.min.0)/8) + (((bilateral_grid.s0.x.x_o.__block_id_x*4) + t3067) + t3063))) in (let t3074 = (((t3059 - blury.z.min_realized)*blury.stride.2) + (((.__thread_id_x + bilateral_grid.min.0)/8) + (((bilateral_grid.s0.x.x_o.__block_id_x*4) + (blury.x.extent_realized.s + t3067)) + t3063))) in (let t3076 = (((t3059 - blury.z.min_realized)*blury.stride.2) + (((.__thread_id_x + bilateral_grid.min.0)/8) + (((bilateral_grid.s0.x.x_o.__block_id_x*4) + (blury.stride.2 + t3067)) + t3063))) in (let t3077 = (((t3059 - blury.z.min_realized)*blury.stride.2) + (((.__thread_id_x + bilateral_grid.min.0)/8) + (((bilateral_grid.s0.x.x_o.__block_id_x*4) + ((blury.stride.2 + t3067) + blury.x.extent_realized.s)) + t3063))) in (lerp(lerp(lerp(blury[(((t3059 - blury.z.min_realized)*blury.stride.2) + (((.__thread_id_x + bilateral_grid.min.0)/8) + (((bilateral_grid.s0.x.x_o.__block_id_x*4) - (((bilateral_grid.min.0 + t3202) + -49)/8)) + t3063)))], blury[(((t3059 - blury.z.min_realized)*blury.stride.2) + (((.__thread_id_x + bilateral_grid.min.0)/8) + (((((64 - t3202) - bilateral_grid.min.0)/8) + (bilateral_grid.s0.x.x_o.__block_id_x*4)) + t3063)))], (t3060*0.125000f)), lerp(blury[(t3070 + 1)], blury[(t3070 + 2)], (t3060*0.125000f)), (t3061*0.125000f)), lerp(lerp(blury[t3071], blury[(t3071 + 1)], (t3060*0.125000f)), lerp(blury[(t3072 + 1)], blury[(t3072 + 2)], (t3060*0.125000f)), (t3061*0.125000f)), t3062)/lerp(lerp(lerp(blury[t3073], blury[(t3073 + 1)], (t3060*0.125000f)), lerp(blury[(t3074 + 1)], blury[(t3074 + 2)], (t3060*0.125000f)), (t3061*0.125000f)), lerp(lerp(blury[t3076], blury[(t3076 + 1)], (t3060*0.125000f)), lerp(blury[(t3077 + 1)], blury[(t3077 + 2)], (t3060*0.125000f)), (t3061*0.125000f)), t3062)))))))))))))))))
              } else {
                bilateral_grid[(((((bilateral_grid.min.1 + bilateral_grid.s0.y.y_i.base.s) + .__thread_id_y)*bilateral_grid.stride.1) + t3206) + .__thread_id_x)] = (let t3080.s = input[((((((bilateral_grid.min.1 + bilateral_grid.s0.y.y_i.base.s) + .__thread_id_y)*input.stride.1) + ((t3204 - t3205) - input.min.0)) + .__thread_id_x) + -32)] in (let t3081 = int32((max(min(t3080.s, 1.000000f), 0.000000f)*t2952)) in (let t3083 = float32(((.__thread_id_x + t3204) % 8)) in (let t3084 = float32((((bilateral_grid.min.1 + bilateral_grid.s0.y.y_i.base.s) + .__thread_id_y) % 8)) in (let t3085 = ((max(min(t3080.s, 1.000000f), 0.000000f)*t2952) - float32(t3081)) in (let t3086 = (((((bilateral_grid.min.1 + bilateral_grid.s0.y.y_i.base.s) + .__thread_id_y)/8) - t3200)*(blury.x.extent_realized.s + 1)) in (let t3089 = (blury.stride.2 - (((bilateral_grid.min.0 + t3202) + -49)/8)) in (let t3090 = (t3203 - (((bilateral_grid.min.0 + t3202) + -49)/8)) in (let t3092 = (((t3081 - blury.z.min_realized)*blury.stride.2) + (((.__thread_id_x + t3204)/8) + ((blury.x.extent_realized.s - (((bilateral_grid.min.0 + t3202) + -49)/8)) + t3086))) in (let t3093 = (((t3081 - blury.z.min_realized)*blury.stride.2) + (((.__thread_id_x + t3204)/8) + (t3086 + t3089))) in (let t3094 = (((t3081 - blury.z.min_realized)*blury.stride.2) + (((.__thread_id_x + t3204)/8) + ((blury.x.extent_realized.s + t3089) + t3086))) in (let t3095 = (((t3081 - blury.z.min_realized)*blury.stride.2) + (((.__thread_id_x + t3204)/8) + (t3086 + t3090))) in (let t3096 = (((t3081 - blury.z.min_realized)*blury.stride.2) + (((.__thread_id_x + t3204)/8) + ((blury.x.extent_realized.s + t3090) + t3086))) in (let t3098 = (((t3081 - blury.z.min_realized)*blury.stride.2) + (((.__thread_id_x + t3204)/8) + ((blury.stride.2 + t3090) + t3086))) in (let t3099 = (((t3081 - blury.z.min_realized)*blury.stride.2) + (((.__thread_id_x + t3204)/8) + (((blury.stride.2 + t3090) + blury.x.extent_realized.s) + t3086))) in (lerp(lerp(lerp(blury[(((t3081 - blury.z.min_realized)*blury.stride.2) + (((.__thread_id_x + t3204)/8) + ((((24 - t3202) - bilateral_grid.min.0)/8) + t3086)))], blury[(((t3081 - blury.z.min_realized)*blury.stride.2) + (((.__thread_id_x + t3204)/8) + ((((32 - t3202) - bilateral_grid.min.0)/8) + t3086)))], (t3083*0.125000f)), lerp(blury[(t3092 + -3)], blury[(t3092 + -2)], (t3083*0.125000f)), (t3084*0.125000f)), lerp(lerp(blury[(t3093 + -4)], blury[(t3093 + -3)], (t3083*0.125000f)), lerp(blury[(t3094 + -3)], blury[(t3094 + -2)], (t3083*0.125000f)), (t3084*0.125000f)), t3085)/lerp(lerp(lerp(blury[(t3095 + -4)], blury[(t3095 + -3)], (t3083*0.125000f)), lerp(blury[(t3096 + -3)], blury[(t3096 + -2)], (t3083*0.125000f)), (t3084*0.125000f)), lerp(lerp(blury[(t3098 + -4)], blury[(t3098 + -3)], (t3083*0.125000f)), lerp(blury[(t3099 + -3)], blury[(t3099 + -2)], (t3083*0.125000f)), (t3084*0.125000f)), t3085)))))))))))))))))
              }
            }
          }
        }
      }
      _halide_buffer_set_device_dirty(bilateral_grid.buffer, (uint1)1)
      let halide_device_free_result = halide_device_free(blury.buffer)
      assert((halide_device_free_result == 0), halide_device_free_result)
      free blury
    }
  }
}


Skipping Hexagon offload...
Constructing CUDA device codegen
Target triple of initial module: x86_64--linux-gnu
Generating llvm bitcode...
Generating llvm bitcode prolog for function bilateral_grid_auto_schedule...
Generating llvm bitcode for function bilateral_grid_auto_schedule...
Generating llvm bitcode for kernel...
Generating llvm bitcode for kernel...
Generating llvm bitcode for kernel...
PTX kernel:
//
// Generated by LLVM NVPTX Back-End
//

.version 5.0
.target sm_61
.address_size 64

	// .globl	kernel_blurz_s0_y_y_o___block_id_y // -- Begin function kernel_blurz_s0_y_y_o___block_id_y
                                        // @kernel_blurz_s0_y_y_o___block_id_y
.visible .entry kernel_blurz_s0_y_y_o___block_id_y(
	.param .u32 kernel_blurz_s0_y_y_o___block_id_y_param_0,
	.param .u32 kernel_blurz_s0_y_y_o___block_id_y_param_1,
	.param .u32 kernel_blurz_s0_y_y_o___block_id_y_param_2,
	.param .u32 kernel_blurz_s0_y_y_o___block_id_y_param_3,
	.param .u32 kernel_blurz_s0_y_y_o___block_id_y_param_4,
	.param .u32 kernel_blurz_s0_y_y_o___block_id_y_param_5,
	.param .u32 kernel_blurz_s0_y_y_o___block_id_y_param_6,
	.param .u32 kernel_blurz_s0_y_y_o___block_id_y_param_7,
	.param .u32 kernel_blurz_s0_y_y_o___block_id_y_param_8,
	.param .u32 kernel_blurz_s0_y_y_o___block_id_y_param_9,
	.param .u32 kernel_blurz_s0_y_y_o___block_id_y_param_10,
	.param .u32 kernel_blurz_s0_y_y_o___block_id_y_param_11,
	.param .u32 kernel_blurz_s0_y_y_o___block_id_y_param_12,
	.param .u32 kernel_blurz_s0_y_y_o___block_id_y_param_13,
	.param .u32 kernel_blurz_s0_y_y_o___block_id_y_param_14,
	.param .f32 kernel_blurz_s0_y_y_o___block_id_y_param_15,
	.param .u32 kernel_blurz_s0_y_y_o___block_id_y_param_16,
	.param .u32 kernel_blurz_s0_y_y_o___block_id_y_param_17,
	.param .u32 kernel_blurz_s0_y_y_o___block_id_y_param_18,
	.param .u32 kernel_blurz_s0_y_y_o___block_id_y_param_19,
	.param .u32 kernel_blurz_s0_y_y_o___block_id_y_param_20,
	.param .u32 kernel_blurz_s0_y_y_o___block_id_y_param_21,
	.param .u64 kernel_blurz_s0_y_y_o___block_id_y_param_22,
	.param .u64 kernel_blurz_s0_y_y_o___block_id_y_param_23
)
{
	.reg .pred 	%p<31>;
	.reg .f32 	%f<238>;
	.reg .b32 	%r<531>;
	.reg .b64 	%rd<129>;

// %bb.0:                               // %entry
	ld.param.u32 	%r156, [kernel_blurz_s0_y_y_o___block_id_y_param_19];
	ld.param.u32 	%r153, [kernel_blurz_s0_y_y_o___block_id_y_param_16];
	ld.param.u32 	%r152, [kernel_blurz_s0_y_y_o___block_id_y_param_13];
	ld.param.u32 	%r151, [kernel_blurz_s0_y_y_o___block_id_y_param_12];
	ld.param.u32 	%r150, [kernel_blurz_s0_y_y_o___block_id_y_param_11];
	ld.param.u32 	%r149, [kernel_blurz_s0_y_y_o___block_id_y_param_10];
	ld.param.u32 	%r148, [kernel_blurz_s0_y_y_o___block_id_y_param_9];
	ld.param.u32 	%r147, [kernel_blurz_s0_y_y_o___block_id_y_param_8];
	ld.param.u32 	%r142, [kernel_blurz_s0_y_y_o___block_id_y_param_3];
	ld.param.u32 	%r141, [kernel_blurz_s0_y_y_o___block_id_y_param_2];
	ld.param.u64 	%rd3, [kernel_blurz_s0_y_y_o___block_id_y_param_23];
	mov.u32 	%r159, %ctaid.y;
	mov.u32 	%r160, %ctaid.x;
	mov.u32 	%r1, %tid.y;
	mov.u32 	%r2, %tid.x;
	shl.b32 	%r3, %r159, 3;
	add.s32 	%r161, %r3, %r151;
	min.s32 	%r4, %r161, %r152;
	shl.b32 	%r5, %r160, 3;
	add.s32 	%r162, %r5, %r149;
	min.s32 	%r6, %r162, %r150;
	shl.b32 	%r7, %r1, 3;
	setp.lt.s32 	%p1, %r148, 1;
	@%p1 bra 	LBB0_7;
// %bb.1:                               // %"for histogram.s0.z.preheader"
	ld.param.u32 	%r154, [kernel_blurz_s0_y_y_o___block_id_y_param_17];
	add.s32 	%r9, %r148, -1;
	and.b32  	%r10, %r148, 3;
	setp.eq.s32 	%p2, %r10, 0;
	mov.u32 	%r505, %r154;
	@%p2 bra 	LBB0_4;
// %bb.2:                               // %"for histogram.s0.z.prol.preheader"
	shl.b32 	%r163, %r154, 6;
	add.s32 	%r164, %r2, %r163;
	add.s32 	%r165, %r164, %r7;
	shl.b32 	%r166, %r153, 6;
	sub.s32 	%r503, %r165, %r166;
	neg.s32 	%r502, %r10;
	mul.wide.s32 	%rd6, %r147, 4;
	mov.u32 	%r505, %r154;
LBB0_3:                                 // %"for histogram.s0.z.prol"
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.wide.s32 	%rd5, %r503, 4;
	mov.u32 	%r167, 0;
	st.shared.u32 	[%rd5], %r167;
	add.s64 	%rd7, %rd5, %rd6;
	st.shared.u32 	[%rd7], %r167;
	add.s32 	%r505, %r505, 1;
	add.s32 	%r503, %r503, 64;
	add.s32 	%r502, %r502, 1;
	setp.ne.s32 	%p3, %r502, 0;
	@%p3 bra 	LBB0_3;
LBB0_4:                                 // %"for histogram.s0.z.prol.loopexit"
	setp.lt.u32 	%p4, %r9, 3;
	@%p4 bra 	LBB0_7;
// %bb.5:                               // %"for histogram.s0.z.preheader.new"
	add.s32 	%r168, %r154, %r148;
	sub.s32 	%r507, %r168, %r505;
	shl.b32 	%r169, %r505, 6;
	add.s32 	%r170, %r2, %r169;
	add.s32 	%r171, %r170, %r7;
	add.s32 	%r172, %r171, 192;
	shl.b32 	%r173, %r153, 6;
	sub.s32 	%r506, %r172, %r173;
	mul.wide.s32 	%rd9, %r147, 4;
LBB0_6:                                 // %"for histogram.s0.z"
                                        // =>This Inner Loop Header: Depth=1
	add.s32 	%r174, %r506, -192;
	mul.wide.s32 	%rd8, %r174, 4;
	mov.u32 	%r175, 0;
	st.shared.u32 	[%rd8], %r175;
	add.s64 	%rd10, %rd8, %rd9;
	st.shared.u32 	[%rd10], %r175;
	add.s32 	%r176, %r506, -128;
	mul.wide.s32 	%rd11, %r176, 4;
	st.shared.u32 	[%rd11], %r175;
	add.s64 	%rd12, %rd11, %rd9;
	st.shared.u32 	[%rd12], %r175;
	add.s32 	%r177, %r506, -64;
	mul.wide.s32 	%rd13, %r177, 4;
	st.shared.u32 	[%rd13], %r175;
	add.s64 	%rd14, %rd13, %rd9;
	st.shared.u32 	[%rd14], %r175;
	mul.wide.s32 	%rd15, %r506, 4;
	st.shared.u32 	[%rd15], %r175;
	add.s64 	%rd16, %rd15, %rd9;
	st.shared.u32 	[%rd16], %r175;
	add.s32 	%r507, %r507, -4;
	add.s32 	%r506, %r506, 256;
	setp.ne.s32 	%p5, %r507, 0;
	@%p5 bra 	LBB0_6;
LBB0_7:                                 // %"end for histogram.s0.z"
	ld.param.u32 	%r157, [kernel_blurz_s0_y_y_o___block_id_y_param_20];
	ld.param.u32 	%r155, [kernel_blurz_s0_y_y_o___block_id_y_param_18];
	ld.param.f32 	%f1, [kernel_blurz_s0_y_y_o___block_id_y_param_15];
	ld.param.u32 	%r146, [kernel_blurz_s0_y_y_o___block_id_y_param_7];
	cvta.to.global.u64 	%rd1, %rd3;
	add.s32 	%r8, %r7, %r2;
	bar.sync 	0;
	add.s32 	%r178, %r4, %r1;
	shl.b32 	%r26, %r178, 3;
	sub.s32 	%r179, %r156, %r26;
	add.s32 	%r180, %r6, %r2;
	shl.b32 	%r28, %r180, 3;
	min.s32 	%r181, %r179, 4;
	setp.lt.s32 	%p6, %r181, -3;
	setp.gt.s32 	%p7, %r181, -4;
	add.s32 	%r182, %r181, 4;
	selp.b32 	%r511, %r182, 0, %p7;
	add.s32 	%r30, %r141, 3;
	add.s32 	%r31, %r142, 3;
	@%p6 bra 	LBB0_10;
// %bb.8:                               // %"for histogram.s1.r$y.preheader"
	min.s32 	%r183, %r28, %r31;
	add.s32 	%r184, %r183, -4;
	max.s32 	%r32, %r184, %r157;
	add.s32 	%r33, %r8, %r147;
	or.b32  	%r185, %r28, 1;
	min.s32 	%r186, %r185, %r31;
	add.s32 	%r187, %r186, -4;
	max.s32 	%r34, %r187, %r157;
	or.b32  	%r188, %r28, 2;
	min.s32 	%r189, %r188, %r31;
	add.s32 	%r190, %r189, -4;
	max.s32 	%r35, %r190, %r157;
	or.b32  	%r191, %r28, 3;
	min.s32 	%r192, %r191, %r31;
	add.s32 	%r193, %r192, -4;
	max.s32 	%r36, %r193, %r157;
	or.b32  	%r194, %r28, 4;
	min.s32 	%r195, %r194, %r31;
	add.s32 	%r196, %r195, -4;
	max.s32 	%r37, %r196, %r157;
	or.b32  	%r197, %r28, 5;
	min.s32 	%r198, %r197, %r31;
	add.s32 	%r199, %r198, -4;
	max.s32 	%r38, %r199, %r157;
	or.b32  	%r200, %r28, 6;
	min.s32 	%r201, %r200, %r31;
	add.s32 	%r202, %r201, -4;
	max.s32 	%r39, %r202, %r157;
	or.b32  	%r203, %r28, 7;
	min.s32 	%r204, %r203, %r31;
	add.s32 	%r205, %r204, -4;
	max.s32 	%r40, %r205, %r157;
	add.s32 	%r206, %r7, -8;
	not.b32 	%r207, %r151;
	sub.s32 	%r208, %r207, %r3;
	not.b32 	%r209, %r152;
	max.s32 	%r210, %r208, %r209;
	shl.b32 	%r211, %r210, 3;
	sub.s32 	%r509, %r206, %r211;
	mov.u32 	%r508, %r511;
LBB0_9:                                 // %"for histogram.s1.r$y"
                                        // =>This Inner Loop Header: Depth=1
	min.s32 	%r212, %r509, %r30;
	add.s32 	%r213, %r212, -4;
	max.s32 	%r214, %r213, %r156;
	mul.lo.s32 	%r215, %r214, %r155;
	sub.s32 	%r216, %r215, %r146;
	add.s32 	%r217, %r216, %r32;
	mul.wide.s32 	%rd17, %r217, 4;
	add.s64 	%rd18, %rd1, %rd17;
	ld.global.nc.f32 	%f2, [%rd18];
	min.ftz.f32 	%f3, %f2, 0f3F800000;
	max.ftz.f32 	%f4, %f3, 0f00000000;
	fma.rn.ftz.f32 	%f5, %f4, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r218, %f5;
	sub.s32 	%r219, %r218, %r153;
	shl.b32 	%r220, %r219, 6;
	add.s32 	%r221, %r8, %r220;
	mul.wide.s32 	%rd19, %r221, 4;
	ld.shared.f32 	%f6, [%rd19];
	add.ftz.f32 	%f7, %f6, %f4;
	st.shared.f32 	[%rd19], %f7;
	add.s32 	%r222, %r33, %r220;
	mul.wide.s32 	%rd20, %r222, 4;
	ld.shared.f32 	%f8, [%rd20];
	add.ftz.f32 	%f9, %f8, 0f3F800000;
	st.shared.f32 	[%rd20], %f9;
	add.s32 	%r223, %r216, %r34;
	mul.wide.s32 	%rd21, %r223, 4;
	add.s64 	%rd22, %rd1, %rd21;
	ld.global.nc.f32 	%f10, [%rd22];
	min.ftz.f32 	%f11, %f10, 0f3F800000;
	max.ftz.f32 	%f12, %f11, 0f00000000;
	fma.rn.ftz.f32 	%f13, %f12, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r224, %f13;
	sub.s32 	%r225, %r224, %r153;
	shl.b32 	%r226, %r225, 6;
	add.s32 	%r227, %r8, %r226;
	mul.wide.s32 	%rd23, %r227, 4;
	ld.shared.f32 	%f14, [%rd23];
	add.ftz.f32 	%f15, %f14, %f12;
	st.shared.f32 	[%rd23], %f15;
	add.s32 	%r228, %r33, %r226;
	mul.wide.s32 	%rd24, %r228, 4;
	ld.shared.f32 	%f16, [%rd24];
	add.ftz.f32 	%f17, %f16, 0f3F800000;
	st.shared.f32 	[%rd24], %f17;
	add.s32 	%r229, %r216, %r35;
	mul.wide.s32 	%rd25, %r229, 4;
	add.s64 	%rd26, %rd1, %rd25;
	ld.global.nc.f32 	%f18, [%rd26];
	min.ftz.f32 	%f19, %f18, 0f3F800000;
	max.ftz.f32 	%f20, %f19, 0f00000000;
	fma.rn.ftz.f32 	%f21, %f20, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r230, %f21;
	sub.s32 	%r231, %r230, %r153;
	shl.b32 	%r232, %r231, 6;
	add.s32 	%r233, %r8, %r232;
	mul.wide.s32 	%rd27, %r233, 4;
	ld.shared.f32 	%f22, [%rd27];
	add.ftz.f32 	%f23, %f22, %f20;
	st.shared.f32 	[%rd27], %f23;
	add.s32 	%r234, %r33, %r232;
	mul.wide.s32 	%rd28, %r234, 4;
	ld.shared.f32 	%f24, [%rd28];
	add.ftz.f32 	%f25, %f24, 0f3F800000;
	st.shared.f32 	[%rd28], %f25;
	add.s32 	%r235, %r216, %r36;
	mul.wide.s32 	%rd29, %r235, 4;
	add.s64 	%rd30, %rd1, %rd29;
	ld.global.nc.f32 	%f26, [%rd30];
	min.ftz.f32 	%f27, %f26, 0f3F800000;
	max.ftz.f32 	%f28, %f27, 0f00000000;
	fma.rn.ftz.f32 	%f29, %f28, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r236, %f29;
	sub.s32 	%r237, %r236, %r153;
	shl.b32 	%r238, %r237, 6;
	add.s32 	%r239, %r8, %r238;
	mul.wide.s32 	%rd31, %r239, 4;
	ld.shared.f32 	%f30, [%rd31];
	add.ftz.f32 	%f31, %f30, %f28;
	st.shared.f32 	[%rd31], %f31;
	add.s32 	%r240, %r33, %r238;
	mul.wide.s32 	%rd32, %r240, 4;
	ld.shared.f32 	%f32, [%rd32];
	add.ftz.f32 	%f33, %f32, 0f3F800000;
	st.shared.f32 	[%rd32], %f33;
	add.s32 	%r241, %r216, %r37;
	mul.wide.s32 	%rd33, %r241, 4;
	add.s64 	%rd34, %rd1, %rd33;
	ld.global.nc.f32 	%f34, [%rd34];
	min.ftz.f32 	%f35, %f34, 0f3F800000;
	max.ftz.f32 	%f36, %f35, 0f00000000;
	fma.rn.ftz.f32 	%f37, %f36, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r242, %f37;
	sub.s32 	%r243, %r242, %r153;
	shl.b32 	%r244, %r243, 6;
	add.s32 	%r245, %r8, %r244;
	mul.wide.s32 	%rd35, %r245, 4;
	ld.shared.f32 	%f38, [%rd35];
	add.ftz.f32 	%f39, %f38, %f36;
	st.shared.f32 	[%rd35], %f39;
	add.s32 	%r246, %r33, %r244;
	mul.wide.s32 	%rd36, %r246, 4;
	ld.shared.f32 	%f40, [%rd36];
	add.ftz.f32 	%f41, %f40, 0f3F800000;
	st.shared.f32 	[%rd36], %f41;
	add.s32 	%r247, %r216, %r38;
	mul.wide.s32 	%rd37, %r247, 4;
	add.s64 	%rd38, %rd1, %rd37;
	ld.global.nc.f32 	%f42, [%rd38];
	min.ftz.f32 	%f43, %f42, 0f3F800000;
	max.ftz.f32 	%f44, %f43, 0f00000000;
	fma.rn.ftz.f32 	%f45, %f44, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r248, %f45;
	sub.s32 	%r249, %r248, %r153;
	shl.b32 	%r250, %r249, 6;
	add.s32 	%r251, %r8, %r250;
	mul.wide.s32 	%rd39, %r251, 4;
	ld.shared.f32 	%f46, [%rd39];
	add.ftz.f32 	%f47, %f46, %f44;
	st.shared.f32 	[%rd39], %f47;
	add.s32 	%r252, %r33, %r250;
	mul.wide.s32 	%rd40, %r252, 4;
	ld.shared.f32 	%f48, [%rd40];
	add.ftz.f32 	%f49, %f48, 0f3F800000;
	st.shared.f32 	[%rd40], %f49;
	add.s32 	%r253, %r216, %r39;
	mul.wide.s32 	%rd41, %r253, 4;
	add.s64 	%rd42, %rd1, %rd41;
	ld.global.nc.f32 	%f50, [%rd42];
	min.ftz.f32 	%f51, %f50, 0f3F800000;
	max.ftz.f32 	%f52, %f51, 0f00000000;
	fma.rn.ftz.f32 	%f53, %f52, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r254, %f53;
	sub.s32 	%r255, %r254, %r153;
	shl.b32 	%r256, %r255, 6;
	add.s32 	%r257, %r8, %r256;
	mul.wide.s32 	%rd43, %r257, 4;
	ld.shared.f32 	%f54, [%rd43];
	add.ftz.f32 	%f55, %f54, %f52;
	st.shared.f32 	[%rd43], %f55;
	add.s32 	%r258, %r33, %r256;
	mul.wide.s32 	%rd44, %r258, 4;
	ld.shared.f32 	%f56, [%rd44];
	add.ftz.f32 	%f57, %f56, 0f3F800000;
	st.shared.f32 	[%rd44], %f57;
	add.s32 	%r259, %r216, %r40;
	mul.wide.s32 	%rd45, %r259, 4;
	add.s64 	%rd46, %rd1, %rd45;
	ld.global.nc.f32 	%f58, [%rd46];
	min.ftz.f32 	%f59, %f58, 0f3F800000;
	max.ftz.f32 	%f60, %f59, 0f00000000;
	fma.rn.ftz.f32 	%f61, %f60, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r260, %f61;
	sub.s32 	%r261, %r260, %r153;
	shl.b32 	%r262, %r261, 6;
	add.s32 	%r263, %r8, %r262;
	mul.wide.s32 	%rd47, %r263, 4;
	ld.shared.f32 	%f62, [%rd47];
	add.ftz.f32 	%f63, %f62, %f60;
	st.shared.f32 	[%rd47], %f63;
	add.s32 	%r264, %r33, %r262;
	mul.wide.s32 	%rd48, %r264, 4;
	ld.shared.f32 	%f64, [%rd48];
	add.ftz.f32 	%f65, %f64, 0f3F800000;
	st.shared.f32 	[%rd48], %f65;
	add.s32 	%r509, %r509, 1;
	add.s32 	%r508, %r508, -1;
	setp.ne.s32 	%p8, %r508, 0;
	@%p8 bra 	LBB0_9;
LBB0_10:                                // %"end for histogram.s1.r$y"
	sub.s32 	%r27, %r141, %r26;
	shl.b32 	%r273, %r4, 3;
	sub.s32 	%r274, %r141, %r273;
	sub.s32 	%r275, %r274, %r7;
	min.s32 	%r276, %r275, 4;
	max.s32 	%r277, %r276, -4;
	sub.s32 	%r278, %r156, %r273;
	sub.s32 	%r279, %r278, %r7;
	min.s32 	%r280, %r279, 4;
	max.s32 	%r49, %r280, -4;
	sub.s32 	%r281, %r277, %r49;
	setp.lt.s32 	%p9, %r281, 1;
	@%p9 bra 	LBB0_15;
// %bb.11:                              // %"for histogram.s1.r$y1.preheader"
	shl.b32 	%r265, %r6, 3;
	sub.s32 	%r266, %r142, %r265;
	shl.b32 	%r46, %r2, 3;
	sub.s32 	%r267, %r266, %r46;
	min.s32 	%r268, %r267, 4;
	max.s32 	%r47, %r268, -4;
	sub.s32 	%r269, %r157, %r265;
	sub.s32 	%r270, %r269, %r46;
	min.s32 	%r271, %r270, 4;
	max.s32 	%r272, %r271, -4;
	sub.s32 	%r48, %r47, %r272;
	sub.s32 	%r282, %r142, %r28;
	min.s32 	%r283, %r282, 4;
	max.s32 	%r50, %r283, -4;
	add.s32 	%r51, %r50, 4;
	add.s32 	%r52, %r26, -4;
	add.s32 	%r53, %r281, %r511;
	sub.s32 	%r284, %r157, %r28;
	min.s32 	%r54, %r284, 4;
	setp.gt.s32 	%p10, %r54, -4;
	add.s32 	%r285, %r54, 4;
	selp.b32 	%r55, %r285, 0, %p10;
	mov.u32 	%r286, -4;
	sub.s32 	%r287, %r286, %r146;
	add.s32 	%r56, %r287, %r28;
	add.s32 	%r57, %r8, %r147;
	and.b32  	%r58, %r55, 1;
	and.b32  	%r59, %r48, 1;
	sub.s32 	%r60, %r55, %r58;
	and.b32  	%r61, %r47, 1;
	add.s32 	%r62, %r55, 1;
	add.s32 	%r63, %r55, -3;
	add.s32 	%r288, %r51, %r28;
	min.s32 	%r289, %r288, %r31;
	add.s32 	%r290, %r289, -4;
	max.s32 	%r64, %r290, %r157;
	add.s32 	%r65, %r50, 5;
	not.b32 	%r291, %r149;
	sub.s32 	%r292, %r291, %r5;
	not.b32 	%r293, %r150;
	max.s32 	%r294, %r292, %r293;
	shl.b32 	%r295, %r294, 3;
	sub.s32 	%r66, %r46, %r295;
	add.s32 	%r67, %r47, 4;
	add.s32 	%r296, %r49, %r7;
	add.s32 	%r297, %r296, -8;
	not.b32 	%r298, %r151;
	sub.s32 	%r299, %r298, %r3;
	not.b32 	%r300, %r152;
	max.s32 	%r301, %r299, %r300;
	shl.b32 	%r302, %r301, 3;
	sub.s32 	%r303, %r297, %r302;
	mad.lo.s32 	%r304, %r155, %r303, %r46;
	add.s32 	%r305, %r304, -11;
	sub.s32 	%r306, %r305, %r146;
	sub.s32 	%r510, %r306, %r295;
	setp.lt.s32 	%p11, %r54, -3;
	setp.eq.s32 	%p12, %r55, 1;
	setp.eq.s32 	%p14, %r58, 0;
	setp.lt.s32 	%p15, %r48, 1;
LBB0_12:                                // %"for histogram.s1.r$y1"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_21 Depth 2
                                        //     Child Loop BB0_30 Depth 2
                                        //     Child Loop BB0_35 Depth 2
	add.s32 	%r307, %r52, %r511;
	mul.lo.s32 	%r71, %r307, %r155;
	sub.s32 	%r72, %r71, %r146;
	@%p11 bra 	LBB0_25;
// %bb.13:                              // %"for histogram.s1.r$x4.preheader"
                                        //   in Loop: Header=BB0_12 Depth=1
	@%p12 bra 	LBB0_14;
	bra.uni 	LBB0_20;
LBB0_14:                                //   in Loop: Header=BB0_12 Depth=1
	mov.u32 	%r513, 0;
	@%p14 bra 	LBB0_25;
	bra.uni 	LBB0_24;
LBB0_20:                                // %"for histogram.s1.r$x4.preheader.new"
                                        //   in Loop: Header=BB0_12 Depth=1
	mov.u32 	%r512, 0;
LBB0_21:                                // %"for histogram.s1.r$x4"
                                        //   Parent Loop BB0_12 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add.s32 	%r310, %r66, %r512;
	add.s32 	%r311, %r310, -8;
	min.s32 	%r312, %r311, %r31;
	add.s32 	%r313, %r312, -4;
	max.s32 	%r314, %r313, %r157;
	add.s32 	%r315, %r314, %r72;
	mul.wide.s32 	%rd49, %r315, 4;
	add.s64 	%rd50, %rd1, %rd49;
	ld.global.nc.f32 	%f66, [%rd50];
	min.ftz.f32 	%f67, %f66, 0f3F800000;
	max.ftz.f32 	%f68, %f67, 0f00000000;
	fma.rn.ftz.f32 	%f69, %f68, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r316, %f69;
	sub.s32 	%r317, %r316, %r153;
	shl.b32 	%r318, %r317, 6;
	add.s32 	%r319, %r8, %r318;
	mul.wide.s32 	%rd51, %r319, 4;
	ld.shared.f32 	%f70, [%rd51];
	add.ftz.f32 	%f71, %f70, %f68;
	st.shared.f32 	[%rd51], %f71;
	add.s32 	%r320, %r57, %r318;
	mul.wide.s32 	%rd52, %r320, 4;
	ld.shared.f32 	%f72, [%rd52];
	add.ftz.f32 	%f73, %f72, 0f3F800000;
	st.shared.f32 	[%rd52], %f73;
	add.s32 	%r321, %r310, -7;
	min.s32 	%r322, %r321, %r31;
	add.s32 	%r323, %r322, -4;
	max.s32 	%r324, %r323, %r157;
	add.s32 	%r325, %r324, %r72;
	mul.wide.s32 	%rd53, %r325, 4;
	add.s64 	%rd54, %rd1, %rd53;
	ld.global.nc.f32 	%f74, [%rd54];
	min.ftz.f32 	%f75, %f74, 0f3F800000;
	max.ftz.f32 	%f76, %f75, 0f00000000;
	fma.rn.ftz.f32 	%f77, %f76, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r326, %f77;
	sub.s32 	%r327, %r326, %r153;
	shl.b32 	%r328, %r327, 6;
	add.s32 	%r329, %r8, %r328;
	mul.wide.s32 	%rd55, %r329, 4;
	ld.shared.f32 	%f78, [%rd55];
	add.ftz.f32 	%f79, %f78, %f76;
	st.shared.f32 	[%rd55], %f79;
	add.s32 	%r330, %r57, %r328;
	mul.wide.s32 	%rd56, %r330, 4;
	ld.shared.f32 	%f80, [%rd56];
	add.ftz.f32 	%f81, %f80, 0f3F800000;
	st.shared.f32 	[%rd56], %f81;
	add.s32 	%r512, %r512, 2;
	setp.ne.s32 	%p13, %r60, %r512;
	@%p13 bra 	LBB0_21;
// %bb.22:                              //   in Loop: Header=BB0_12 Depth=1
	mov.u32 	%r513, %r60;
	@%p14 bra 	LBB0_25;
LBB0_24:                                // %"for histogram.s1.r$x4.epil"
                                        //   in Loop: Header=BB0_12 Depth=1
	add.s32 	%r331, %r513, %r28;
	min.s32 	%r332, %r331, %r31;
	add.s32 	%r333, %r332, -4;
	max.s32 	%r334, %r333, %r157;
	add.s32 	%r335, %r334, %r72;
	mul.wide.s32 	%rd57, %r335, 4;
	add.s64 	%rd58, %rd1, %rd57;
	ld.global.nc.f32 	%f82, [%rd58];
	min.ftz.f32 	%f83, %f82, 0f3F800000;
	max.ftz.f32 	%f84, %f83, 0f00000000;
	fma.rn.ftz.f32 	%f85, %f84, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r336, %f85;
	sub.s32 	%r337, %r336, %r153;
	shl.b32 	%r338, %r337, 6;
	add.s32 	%r339, %r8, %r338;
	mul.wide.s32 	%rd59, %r339, 4;
	ld.shared.f32 	%f86, [%rd59];
	add.ftz.f32 	%f87, %f86, %f84;
	st.shared.f32 	[%rd59], %f87;
	add.s32 	%r340, %r57, %r338;
	mul.wide.s32 	%rd60, %r340, 4;
	ld.shared.f32 	%f88, [%rd60];
	add.ftz.f32 	%f89, %f88, 0f3F800000;
	st.shared.f32 	[%rd60], %f89;
LBB0_25:                                // %"end for histogram.s1.r$x5"
                                        //   in Loop: Header=BB0_12 Depth=1
	@%p15 bra 	LBB0_31;
// %bb.26:                              // %"for histogram.s1.r$x10.preheader"
                                        //   in Loop: Header=BB0_12 Depth=1
	setp.eq.s32 	%p16, %r59, 0;
	mov.u32 	%r514, %r55;
	@%p16 bra 	LBB0_28;
// %bb.27:                              // %"for histogram.s1.r$x10.prol"
                                        //   in Loop: Header=BB0_12 Depth=1
	add.s32 	%r88, %r56, %r71;
	add.s32 	%r341, %r88, %r55;
	mul.wide.s32 	%rd61, %r341, 4;
	add.s64 	%rd62, %rd1, %rd61;
	ld.global.nc.f32 	%f90, [%rd62];
	min.ftz.f32 	%f91, %f90, 0f3F800000;
	max.ftz.f32 	%f92, %f91, 0f00000000;
	fma.rn.ftz.f32 	%f93, %f92, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r342, %f93;
	sub.s32 	%r343, %r342, %r153;
	shl.b32 	%r344, %r343, 6;
	add.s32 	%r345, %r8, %r344;
	mul.wide.s32 	%rd63, %r345, 4;
	ld.shared.f32 	%f94, [%rd63];
	add.ftz.f32 	%f95, %f94, %f92;
	st.shared.f32 	[%rd63], %f95;
	add.s32 	%r346, %r57, %r344;
	mul.wide.s32 	%rd64, %r346, 4;
	ld.shared.f32 	%f96, [%rd64];
	add.ftz.f32 	%f97, %f96, 0f3F800000;
	st.shared.f32 	[%rd64], %f97;
	mov.u32 	%r514, %r62;
LBB0_28:                                // %"for histogram.s1.r$x10.prol.loopexit"
                                        //   in Loop: Header=BB0_12 Depth=1
	setp.eq.s32 	%p17, %r47, %r63;
	@%p17 bra 	LBB0_31;
// %bb.29:                              // %"for histogram.s1.r$x10.preheader.new"
                                        //   in Loop: Header=BB0_12 Depth=1
	sub.s32 	%r516, %r67, %r514;
	add.s32 	%r515, %r514, %r510;
LBB0_30:                                // %"for histogram.s1.r$x10"
                                        //   Parent Loop BB0_12 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add.s32 	%r347, %r515, -1;
	mul.wide.s32 	%rd65, %r347, 4;
	add.s64 	%rd66, %rd1, %rd65;
	ld.global.nc.f32 	%f98, [%rd66];
	min.ftz.f32 	%f99, %f98, 0f3F800000;
	max.ftz.f32 	%f100, %f99, 0f00000000;
	fma.rn.ftz.f32 	%f101, %f100, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r348, %f101;
	sub.s32 	%r349, %r348, %r153;
	shl.b32 	%r350, %r349, 6;
	add.s32 	%r351, %r8, %r350;
	mul.wide.s32 	%rd67, %r351, 4;
	ld.shared.f32 	%f102, [%rd67];
	add.ftz.f32 	%f103, %f102, %f100;
	st.shared.f32 	[%rd67], %f103;
	add.s32 	%r352, %r57, %r350;
	mul.wide.s32 	%rd68, %r352, 4;
	ld.shared.f32 	%f104, [%rd68];
	add.ftz.f32 	%f105, %f104, 0f3F800000;
	st.shared.f32 	[%rd68], %f105;
	mul.wide.s32 	%rd69, %r515, 4;
	add.s64 	%rd70, %rd1, %rd69;
	ld.global.nc.f32 	%f106, [%rd70];
	min.ftz.f32 	%f107, %f106, 0f3F800000;
	max.ftz.f32 	%f108, %f107, 0f00000000;
	fma.rn.ftz.f32 	%f109, %f108, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r353, %f109;
	sub.s32 	%r354, %r353, %r153;
	shl.b32 	%r355, %r354, 6;
	add.s32 	%r356, %r8, %r355;
	mul.wide.s32 	%rd71, %r356, 4;
	ld.shared.f32 	%f110, [%rd71];
	add.ftz.f32 	%f111, %f110, %f108;
	st.shared.f32 	[%rd71], %f111;
	add.s32 	%r357, %r57, %r355;
	mul.wide.s32 	%rd72, %r357, 4;
	ld.shared.f32 	%f112, [%rd72];
	add.ftz.f32 	%f113, %f112, 0f3F800000;
	st.shared.f32 	[%rd72], %f113;
	add.s32 	%r516, %r516, -2;
	add.s32 	%r515, %r515, 2;
	setp.ne.s32 	%p18, %r516, 0;
	@%p18 bra 	LBB0_30;
LBB0_31:                                // %"end for histogram.s1.r$x11"
                                        //   in Loop: Header=BB0_12 Depth=1
	setp.gt.s32 	%p19, %r50, 3;
	@%p19 bra 	LBB0_36;
// %bb.32:                              // %"for histogram.s1.r$x16.preheader"
                                        //   in Loop: Header=BB0_12 Depth=1
	setp.eq.s32 	%p20, %r61, 0;
	mov.u32 	%r518, %r51;
	@%p20 bra 	LBB0_34;
// %bb.33:                              // %"for histogram.s1.r$x16.prol"
                                        //   in Loop: Header=BB0_12 Depth=1
	add.s32 	%r358, %r64, %r72;
	mul.wide.s32 	%rd73, %r358, 4;
	add.s64 	%rd74, %rd1, %rd73;
	ld.global.nc.f32 	%f114, [%rd74];
	min.ftz.f32 	%f115, %f114, 0f3F800000;
	max.ftz.f32 	%f116, %f115, 0f00000000;
	fma.rn.ftz.f32 	%f117, %f116, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r359, %f117;
	sub.s32 	%r360, %r359, %r153;
	shl.b32 	%r361, %r360, 6;
	add.s32 	%r362, %r8, %r361;
	mul.wide.s32 	%rd75, %r362, 4;
	ld.shared.f32 	%f118, [%rd75];
	add.ftz.f32 	%f119, %f118, %f116;
	st.shared.f32 	[%rd75], %f119;
	add.s32 	%r363, %r57, %r361;
	mul.wide.s32 	%rd76, %r363, 4;
	ld.shared.f32 	%f120, [%rd76];
	add.ftz.f32 	%f121, %f120, 0f3F800000;
	st.shared.f32 	[%rd76], %f121;
	mov.u32 	%r518, %r65;
LBB0_34:                                // %"for histogram.s1.r$x16.prol.loopexit"
                                        //   in Loop: Header=BB0_12 Depth=1
	setp.eq.s32 	%p21, %r47, 3;
	@%p21 bra 	LBB0_36;
LBB0_35:                                // %"for histogram.s1.r$x16"
                                        //   Parent Loop BB0_12 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add.s32 	%r364, %r66, %r518;
	add.s32 	%r365, %r364, -8;
	min.s32 	%r366, %r365, %r31;
	add.s32 	%r367, %r366, -4;
	max.s32 	%r368, %r367, %r157;
	add.s32 	%r369, %r368, %r72;
	mul.wide.s32 	%rd77, %r369, 4;
	add.s64 	%rd78, %rd1, %rd77;
	ld.global.nc.f32 	%f122, [%rd78];
	min.ftz.f32 	%f123, %f122, 0f3F800000;
	max.ftz.f32 	%f124, %f123, 0f00000000;
	fma.rn.ftz.f32 	%f125, %f124, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r370, %f125;
	sub.s32 	%r371, %r370, %r153;
	shl.b32 	%r372, %r371, 6;
	add.s32 	%r373, %r8, %r372;
	mul.wide.s32 	%rd79, %r373, 4;
	ld.shared.f32 	%f126, [%rd79];
	add.ftz.f32 	%f127, %f126, %f124;
	st.shared.f32 	[%rd79], %f127;
	add.s32 	%r374, %r57, %r372;
	mul.wide.s32 	%rd80, %r374, 4;
	ld.shared.f32 	%f128, [%rd80];
	add.ftz.f32 	%f129, %f128, 0f3F800000;
	st.shared.f32 	[%rd80], %f129;
	add.s32 	%r375, %r364, -7;
	min.s32 	%r376, %r375, %r31;
	add.s32 	%r377, %r376, -4;
	max.s32 	%r378, %r377, %r157;
	add.s32 	%r379, %r378, %r72;
	mul.wide.s32 	%rd81, %r379, 4;
	add.s64 	%rd82, %rd1, %rd81;
	ld.global.nc.f32 	%f130, [%rd82];
	min.ftz.f32 	%f131, %f130, 0f3F800000;
	max.ftz.f32 	%f132, %f131, 0f00000000;
	fma.rn.ftz.f32 	%f133, %f132, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r380, %f133;
	sub.s32 	%r381, %r380, %r153;
	shl.b32 	%r382, %r381, 6;
	add.s32 	%r383, %r8, %r382;
	mul.wide.s32 	%rd83, %r383, 4;
	ld.shared.f32 	%f134, [%rd83];
	add.ftz.f32 	%f135, %f134, %f132;
	st.shared.f32 	[%rd83], %f135;
	add.s32 	%r384, %r57, %r382;
	mul.wide.s32 	%rd84, %r384, 4;
	ld.shared.f32 	%f136, [%rd84];
	add.ftz.f32 	%f137, %f136, 0f3F800000;
	st.shared.f32 	[%rd84], %f137;
	add.s32 	%r518, %r518, 2;
	setp.ne.s32 	%p22, %r518, 8;
	@%p22 bra 	LBB0_35;
LBB0_36:                                // %"end for histogram.s1.r$x17"
                                        //   in Loop: Header=BB0_12 Depth=1
	add.s32 	%r511, %r511, 1;
	add.s32 	%r510, %r510, %r155;
	setp.eq.s32 	%p23, %r511, %r53;
	@%p23 bra 	LBB0_15;
	bra.uni 	LBB0_12;
LBB0_15:                                // %"end for histogram.s1.r$y2"
	ld.param.u32 	%r530, [kernel_blurz_s0_y_y_o___block_id_y_param_1];
	min.s32 	%r385, %r27, 4;
	max.s32 	%r73, %r385, -4;
	setp.gt.s32 	%p24, %r73, 3;
	@%p24 bra 	LBB0_18;
// %bb.16:                              // %"for histogram.s1.r$y22.preheader"
	min.s32 	%r386, %r28, %r31;
	add.s32 	%r387, %r386, -4;
	max.s32 	%r74, %r387, %r157;
	add.s32 	%r75, %r8, %r147;
	or.b32  	%r388, %r28, 1;
	min.s32 	%r389, %r388, %r31;
	add.s32 	%r390, %r389, -4;
	max.s32 	%r76, %r390, %r157;
	or.b32  	%r391, %r28, 2;
	min.s32 	%r392, %r391, %r31;
	add.s32 	%r393, %r392, -4;
	max.s32 	%r77, %r393, %r157;
	or.b32  	%r394, %r28, 3;
	min.s32 	%r395, %r394, %r31;
	add.s32 	%r396, %r395, -4;
	max.s32 	%r78, %r396, %r157;
	or.b32  	%r397, %r28, 4;
	min.s32 	%r398, %r397, %r31;
	add.s32 	%r399, %r398, -4;
	max.s32 	%r79, %r399, %r157;
	or.b32  	%r400, %r28, 5;
	min.s32 	%r401, %r400, %r31;
	add.s32 	%r402, %r401, -4;
	max.s32 	%r80, %r402, %r157;
	or.b32  	%r403, %r28, 6;
	min.s32 	%r404, %r403, %r31;
	add.s32 	%r405, %r404, -4;
	max.s32 	%r81, %r405, %r157;
	or.b32  	%r406, %r28, 7;
	min.s32 	%r407, %r406, %r31;
	add.s32 	%r408, %r407, -4;
	max.s32 	%r82, %r408, %r157;
	not.b32 	%r409, %r151;
	sub.s32 	%r410, %r409, %r3;
	not.b32 	%r411, %r152;
	max.s32 	%r412, %r410, %r411;
	shl.b32 	%r413, %r412, 3;
	sub.s32 	%r83, %r7, %r413;
	add.s32 	%r519, %r73, -4;
LBB0_17:                                // %"for histogram.s1.r$y22"
                                        // =>This Inner Loop Header: Depth=1
	add.s32 	%r414, %r83, %r519;
	min.s32 	%r415, %r414, %r30;
	add.s32 	%r416, %r415, -4;
	max.s32 	%r417, %r416, %r156;
	mul.lo.s32 	%r418, %r417, %r155;
	sub.s32 	%r419, %r418, %r146;
	add.s32 	%r420, %r419, %r74;
	mul.wide.s32 	%rd85, %r420, 4;
	add.s64 	%rd86, %rd1, %rd85;
	ld.global.nc.f32 	%f138, [%rd86];
	min.ftz.f32 	%f139, %f138, 0f3F800000;
	max.ftz.f32 	%f140, %f139, 0f00000000;
	fma.rn.ftz.f32 	%f141, %f140, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r421, %f141;
	sub.s32 	%r422, %r421, %r153;
	shl.b32 	%r423, %r422, 6;
	add.s32 	%r424, %r8, %r423;
	mul.wide.s32 	%rd87, %r424, 4;
	ld.shared.f32 	%f142, [%rd87];
	add.ftz.f32 	%f143, %f142, %f140;
	st.shared.f32 	[%rd87], %f143;
	add.s32 	%r425, %r75, %r423;
	mul.wide.s32 	%rd88, %r425, 4;
	ld.shared.f32 	%f144, [%rd88];
	add.ftz.f32 	%f145, %f144, 0f3F800000;
	st.shared.f32 	[%rd88], %f145;
	add.s32 	%r426, %r419, %r76;
	mul.wide.s32 	%rd89, %r426, 4;
	add.s64 	%rd90, %rd1, %rd89;
	ld.global.nc.f32 	%f146, [%rd90];
	min.ftz.f32 	%f147, %f146, 0f3F800000;
	max.ftz.f32 	%f148, %f147, 0f00000000;
	fma.rn.ftz.f32 	%f149, %f148, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r427, %f149;
	sub.s32 	%r428, %r427, %r153;
	shl.b32 	%r429, %r428, 6;
	add.s32 	%r430, %r8, %r429;
	mul.wide.s32 	%rd91, %r430, 4;
	ld.shared.f32 	%f150, [%rd91];
	add.ftz.f32 	%f151, %f150, %f148;
	st.shared.f32 	[%rd91], %f151;
	add.s32 	%r431, %r75, %r429;
	mul.wide.s32 	%rd92, %r431, 4;
	ld.shared.f32 	%f152, [%rd92];
	add.ftz.f32 	%f153, %f152, 0f3F800000;
	st.shared.f32 	[%rd92], %f153;
	add.s32 	%r432, %r419, %r77;
	mul.wide.s32 	%rd93, %r432, 4;
	add.s64 	%rd94, %rd1, %rd93;
	ld.global.nc.f32 	%f154, [%rd94];
	min.ftz.f32 	%f155, %f154, 0f3F800000;
	max.ftz.f32 	%f156, %f155, 0f00000000;
	fma.rn.ftz.f32 	%f157, %f156, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r433, %f157;
	sub.s32 	%r434, %r433, %r153;
	shl.b32 	%r435, %r434, 6;
	add.s32 	%r436, %r8, %r435;
	mul.wide.s32 	%rd95, %r436, 4;
	ld.shared.f32 	%f158, [%rd95];
	add.ftz.f32 	%f159, %f158, %f156;
	st.shared.f32 	[%rd95], %f159;
	add.s32 	%r437, %r75, %r435;
	mul.wide.s32 	%rd96, %r437, 4;
	ld.shared.f32 	%f160, [%rd96];
	add.ftz.f32 	%f161, %f160, 0f3F800000;
	st.shared.f32 	[%rd96], %f161;
	add.s32 	%r438, %r419, %r78;
	mul.wide.s32 	%rd97, %r438, 4;
	add.s64 	%rd98, %rd1, %rd97;
	ld.global.nc.f32 	%f162, [%rd98];
	min.ftz.f32 	%f163, %f162, 0f3F800000;
	max.ftz.f32 	%f164, %f163, 0f00000000;
	fma.rn.ftz.f32 	%f165, %f164, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r439, %f165;
	sub.s32 	%r440, %r439, %r153;
	shl.b32 	%r441, %r440, 6;
	add.s32 	%r442, %r8, %r441;
	mul.wide.s32 	%rd99, %r442, 4;
	ld.shared.f32 	%f166, [%rd99];
	add.ftz.f32 	%f167, %f166, %f164;
	st.shared.f32 	[%rd99], %f167;
	add.s32 	%r443, %r75, %r441;
	mul.wide.s32 	%rd100, %r443, 4;
	ld.shared.f32 	%f168, [%rd100];
	add.ftz.f32 	%f169, %f168, 0f3F800000;
	st.shared.f32 	[%rd100], %f169;
	add.s32 	%r444, %r419, %r79;
	mul.wide.s32 	%rd101, %r444, 4;
	add.s64 	%rd102, %rd1, %rd101;
	ld.global.nc.f32 	%f170, [%rd102];
	min.ftz.f32 	%f171, %f170, 0f3F800000;
	max.ftz.f32 	%f172, %f171, 0f00000000;
	fma.rn.ftz.f32 	%f173, %f172, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r445, %f173;
	sub.s32 	%r446, %r445, %r153;
	shl.b32 	%r447, %r446, 6;
	add.s32 	%r448, %r8, %r447;
	mul.wide.s32 	%rd103, %r448, 4;
	ld.shared.f32 	%f174, [%rd103];
	add.ftz.f32 	%f175, %f174, %f172;
	st.shared.f32 	[%rd103], %f175;
	add.s32 	%r449, %r75, %r447;
	mul.wide.s32 	%rd104, %r449, 4;
	ld.shared.f32 	%f176, [%rd104];
	add.ftz.f32 	%f177, %f176, 0f3F800000;
	st.shared.f32 	[%rd104], %f177;
	add.s32 	%r450, %r419, %r80;
	mul.wide.s32 	%rd105, %r450, 4;
	add.s64 	%rd106, %rd1, %rd105;
	ld.global.nc.f32 	%f178, [%rd106];
	min.ftz.f32 	%f179, %f178, 0f3F800000;
	max.ftz.f32 	%f180, %f179, 0f00000000;
	fma.rn.ftz.f32 	%f181, %f180, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r451, %f181;
	sub.s32 	%r452, %r451, %r153;
	shl.b32 	%r453, %r452, 6;
	add.s32 	%r454, %r8, %r453;
	mul.wide.s32 	%rd107, %r454, 4;
	ld.shared.f32 	%f182, [%rd107];
	add.ftz.f32 	%f183, %f182, %f180;
	st.shared.f32 	[%rd107], %f183;
	add.s32 	%r455, %r75, %r453;
	mul.wide.s32 	%rd108, %r455, 4;
	ld.shared.f32 	%f184, [%rd108];
	add.ftz.f32 	%f185, %f184, 0f3F800000;
	st.shared.f32 	[%rd108], %f185;
	add.s32 	%r456, %r419, %r81;
	mul.wide.s32 	%rd109, %r456, 4;
	add.s64 	%rd110, %rd1, %rd109;
	ld.global.nc.f32 	%f186, [%rd110];
	min.ftz.f32 	%f187, %f186, 0f3F800000;
	max.ftz.f32 	%f188, %f187, 0f00000000;
	fma.rn.ftz.f32 	%f189, %f188, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r457, %f189;
	sub.s32 	%r458, %r457, %r153;
	shl.b32 	%r459, %r458, 6;
	add.s32 	%r460, %r8, %r459;
	mul.wide.s32 	%rd111, %r460, 4;
	ld.shared.f32 	%f190, [%rd111];
	add.ftz.f32 	%f191, %f190, %f188;
	st.shared.f32 	[%rd111], %f191;
	add.s32 	%r461, %r75, %r459;
	mul.wide.s32 	%rd112, %r461, 4;
	ld.shared.f32 	%f192, [%rd112];
	add.ftz.f32 	%f193, %f192, 0f3F800000;
	st.shared.f32 	[%rd112], %f193;
	add.s32 	%r462, %r419, %r82;
	mul.wide.s32 	%rd113, %r462, 4;
	add.s64 	%rd114, %rd1, %rd113;
	ld.global.nc.f32 	%f194, [%rd114];
	min.ftz.f32 	%f195, %f194, 0f3F800000;
	max.ftz.f32 	%f196, %f195, 0f00000000;
	fma.rn.ftz.f32 	%f197, %f196, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r463, %f197;
	sub.s32 	%r464, %r463, %r153;
	shl.b32 	%r465, %r464, 6;
	add.s32 	%r466, %r8, %r465;
	mul.wide.s32 	%rd115, %r466, 4;
	ld.shared.f32 	%f198, [%rd115];
	add.ftz.f32 	%f199, %f198, %f196;
	st.shared.f32 	[%rd115], %f199;
	add.s32 	%r467, %r75, %r465;
	mul.wide.s32 	%rd116, %r467, 4;
	ld.shared.f32 	%f200, [%rd116];
	add.ftz.f32 	%f201, %f200, 0f3F800000;
	st.shared.f32 	[%rd116], %f201;
	add.s32 	%r519, %r519, 1;
	setp.ne.s32 	%p25, %r519, 0;
	@%p25 bra 	LBB0_17;
LBB0_18:                                // %"end for histogram.s1.r$y23"
	bar.sync 	0;
	setp.lt.s32 	%p26, %r530, 1;
	@%p26 bra 	LBB0_44;
// %bb.19:                              // %"for blurz.s0.z.us.preheader"
	ld.param.u64 	%rd4, [kernel_blurz_s0_y_y_o___block_id_y_param_22];
	ld.param.u32 	%r145, [kernel_blurz_s0_y_y_o___block_id_y_param_6];
	ld.param.u32 	%r144, [kernel_blurz_s0_y_y_o___block_id_y_param_5];
	ld.param.u32 	%r143, [kernel_blurz_s0_y_y_o___block_id_y_param_4];
	ld.param.u32 	%r158, [kernel_blurz_s0_y_y_o___block_id_y_param_21];
	cvta.to.global.u64 	%rd2, %rd4;
	sub.s32 	%r468, %r1, %r144;
	add.s32 	%r469, %r468, %r4;
	mul.lo.s32 	%r103, %r469, %r143;
	and.b32  	%r472, %r530, 1;
	setp.eq.b32 	%p27, %r472, 1;
	mov.u32 	%r520, %r158;
	@!%p27 bra 	LBB0_38;
	bra.uni 	LBB0_37;
LBB0_37:                                // %"for blurz.s0.z.us.prol"
	sub.s32 	%r470, %r2, %r145;
	add.s32 	%r471, %r470, %r6;
	add.s32 	%r104, %r471, %r103;
	sub.s32 	%r473, %r158, %r153;
	shl.b32 	%r474, %r473, 6;
	add.s32 	%r475, %r8, %r474;
	mul.wide.s32 	%rd117, %r475, 4;
	ld.shared.f32 	%f202, [%rd117+512];
	ld.shared.f32 	%f203, [%rd117+256];
	ld.shared.f32 	%f204, [%rd117];
	ld.shared.f32 	%f205, [%rd117+-512];
	ld.shared.f32 	%f206, [%rd117+-256];
	fma.rn.ftz.f32 	%f207, %f206, 0f40800000, %f205;
	fma.rn.ftz.f32 	%f208, %f204, 0f40C00000, %f207;
	fma.rn.ftz.f32 	%f209, %f203, 0f40800000, %f208;
	add.ftz.f32 	%f210, %f202, %f209;
	mul.wide.s32 	%rd118, %r104, 4;
	add.s64 	%rd119, %rd2, %rd118;
	st.global.f32 	[%rd119], %f210;
	add.s32 	%r520, %r158, 1;
LBB0_38:                                // %"for blurz.s0.z.us.prol.loopexit"
	ld.param.u32 	%r139, [kernel_blurz_s0_y_y_o___block_id_y_param_0];
	setp.ne.s32 	%p28, %r530, 1;
	@%p28 bra 	LBB0_40;
// %bb.39:                              // %"for blurz.s0.z.us.prol.loopexit.end for blurz.s0.z.loopexit.us_crit_edge"
	not.b32 	%r107, %r149;
	sub.s32 	%r527, %r107, %r5;
	not.b32 	%r526, %r150;
	shl.b32 	%r525, %r153, 6;
	bra.uni 	LBB0_42;
LBB0_40:                                // %"for blurz.s0.z.us.preheader.new"
	add.s32 	%r476, %r158, %r530;
	sub.s32 	%r524, %r476, %r520;
	add.s32 	%r477, %r520, 1;
	sub.s32 	%r478, %r477, %r158;
	mad.lo.s32 	%r479, %r139, %r478, %r103;
	add.s32 	%r480, %r479, -1;
	sub.s32 	%r481, %r480, %r145;
	not.b32 	%r112, %r149;
	sub.s32 	%r527, %r112, %r5;
	not.b32 	%r526, %r150;
	max.s32 	%r482, %r527, %r526;
	sub.s32 	%r523, %r481, %r482;
	shl.b32 	%r116, %r139, 1;
	shl.b32 	%r483, %r520, 6;
	add.s32 	%r484, %r483, %r7;
	shl.b32 	%r525, %r153, 6;
	sub.s32 	%r522, %r484, %r525;
	sub.s32 	%r485, %r520, %r158;
	mad.lo.s32 	%r486, %r139, %r485, %r103;
	add.s32 	%r487, %r486, -1;
	sub.s32 	%r488, %r487, %r145;
	sub.s32 	%r521, %r488, %r482;
LBB0_41:                                // %"for blurz.s0.z.us"
                                        // =>This Inner Loop Header: Depth=1
	add.s32 	%r489, %r2, %r522;
	mul.wide.s32 	%rd120, %r489, 4;
	ld.shared.f32 	%f211, [%rd120+512];
	ld.shared.f32 	%f212, [%rd120+256];
	ld.shared.f32 	%f213, [%rd120];
	ld.shared.f32 	%f214, [%rd120+-512];
	ld.shared.f32 	%f215, [%rd120+-256];
	fma.rn.ftz.f32 	%f216, %f215, 0f40800000, %f214;
	fma.rn.ftz.f32 	%f217, %f213, 0f40C00000, %f216;
	fma.rn.ftz.f32 	%f218, %f212, 0f40800000, %f217;
	add.ftz.f32 	%f219, %f211, %f218;
	add.s32 	%r490, %r2, %r521;
	mul.wide.s32 	%rd121, %r490, 4;
	add.s64 	%rd122, %rd2, %rd121;
	st.global.f32 	[%rd122], %f219;
	add.s32 	%r491, %r489, 64;
	mul.wide.s32 	%rd123, %r491, 4;
	ld.shared.f32 	%f220, [%rd123+512];
	ld.shared.f32 	%f221, [%rd123+256];
	ld.shared.f32 	%f222, [%rd123];
	ld.shared.f32 	%f223, [%rd123+-512];
	ld.shared.f32 	%f224, [%rd123+-256];
	fma.rn.ftz.f32 	%f225, %f224, 0f40800000, %f223;
	fma.rn.ftz.f32 	%f226, %f222, 0f40C00000, %f225;
	fma.rn.ftz.f32 	%f227, %f221, 0f40800000, %f226;
	add.ftz.f32 	%f228, %f220, %f227;
	add.s32 	%r492, %r2, %r523;
	mul.wide.s32 	%rd124, %r492, 4;
	add.s64 	%rd125, %rd2, %rd124;
	st.global.f32 	[%rd125], %f228;
	add.s32 	%r524, %r524, -2;
	add.s32 	%r523, %r523, %r116;
	add.s32 	%r522, %r522, 128;
	add.s32 	%r521, %r521, %r116;
	setp.ne.s32 	%p29, %r524, 0;
	@%p29 bra 	LBB0_41;
LBB0_42:                                // %"end for blurz.s0.z.loopexit.us"
	mad.lo.s32 	%r493, %r530, %r139, %r2;
	add.s32 	%r494, %r493, %r103;
	add.s32 	%r495, %r494, -1;
	sub.s32 	%r496, %r495, %r145;
	max.s32 	%r497, %r527, %r526;
	sub.s32 	%r529, %r496, %r497;
	add.s32 	%r498, %r2, %r147;
	shl.b32 	%r499, %r158, 6;
	add.s32 	%r500, %r498, %r499;
	add.s32 	%r501, %r500, %r7;
	sub.s32 	%r528, %r501, %r525;
LBB0_43:                                // %"for blurz.s0.z.us.1"
                                        // =>This Inner Loop Header: Depth=1
	mul.wide.s32 	%rd126, %r528, 4;
	ld.shared.f32 	%f229, [%rd126+512];
	ld.shared.f32 	%f230, [%rd126+256];
	ld.shared.f32 	%f231, [%rd126];
	ld.shared.f32 	%f232, [%rd126+-512];
	ld.shared.f32 	%f233, [%rd126+-256];
	fma.rn.ftz.f32 	%f234, %f233, 0f40800000, %f232;
	fma.rn.ftz.f32 	%f235, %f231, 0f40C00000, %f234;
	fma.rn.ftz.f32 	%f236, %f230, 0f40800000, %f235;
	add.ftz.f32 	%f237, %f229, %f236;
	mul.wide.s32 	%rd127, %r529, 4;
	add.s64 	%rd128, %rd2, %rd127;
	st.global.f32 	[%rd128], %f237;
	add.s32 	%r530, %r530, -1;
	add.s32 	%r529, %r529, %r139;
	add.s32 	%r528, %r528, 64;
	setp.eq.s32 	%p30, %r530, 0;
	@%p30 bra 	LBB0_44;
	bra.uni 	LBB0_43;
LBB0_44:                                // %"end for blurz.s0.c"
	ret;
}
                                        // -- End function
	// .globl	kernel_blury_s0_y_y_o___block_id_y // -- Begin function kernel_blury_s0_y_y_o___block_id_y
.visible .entry kernel_blury_s0_y_y_o___block_id_y(
	.param .u32 kernel_blury_s0_y_y_o___block_id_y_param_0,
	.param .u32 kernel_blury_s0_y_y_o___block_id_y_param_1,
	.param .u32 kernel_blury_s0_y_y_o___block_id_y_param_2,
	.param .u32 kernel_blury_s0_y_y_o___block_id_y_param_3,
	.param .u32 kernel_blury_s0_y_y_o___block_id_y_param_4,
	.param .u32 kernel_blury_s0_y_y_o___block_id_y_param_5,
	.param .u32 kernel_blury_s0_y_y_o___block_id_y_param_6,
	.param .u32 kernel_blury_s0_y_y_o___block_id_y_param_7,
	.param .u32 kernel_blury_s0_y_y_o___block_id_y_param_8,
	.param .u32 kernel_blury_s0_y_y_o___block_id_y_param_9,
	.param .u32 kernel_blury_s0_y_y_o___block_id_y_param_10,
	.param .u32 kernel_blury_s0_y_y_o___block_id_y_param_11,
	.param .u32 kernel_blury_s0_y_y_o___block_id_y_param_12,
	.param .u32 kernel_blury_s0_y_y_o___block_id_y_param_13,
	.param .u32 kernel_blury_s0_y_y_o___block_id_y_param_14,
	.param .u32 kernel_blury_s0_y_y_o___block_id_y_param_15,
	.param .u32 kernel_blury_s0_y_y_o___block_id_y_param_16,
	.param .u32 kernel_blury_s0_y_y_o___block_id_y_param_17,
	.param .u32 kernel_blury_s0_y_y_o___block_id_y_param_18,
	.param .u32 kernel_blury_s0_y_y_o___block_id_y_param_19,
	.param .u32 kernel_blury_s0_y_y_o___block_id_y_param_20,
	.param .u32 kernel_blury_s0_y_y_o___block_id_y_param_21,
	.param .u64 kernel_blury_s0_y_y_o___block_id_y_param_22,
	.param .u64 kernel_blury_s0_y_y_o___block_id_y_param_23
)                                       // @kernel_blury_s0_y_y_o___block_id_y
{
	.reg .pred 	%p<11>;
	.reg .f32 	%f<73>;
	.reg .b32 	%r<224>;
	.reg .b64 	%rd<46>;

// %bb.0:                               // %entry
	ld.param.u32 	%r92, [kernel_blury_s0_y_y_o___block_id_y_param_15];
	ld.param.u32 	%r91, [kernel_blury_s0_y_y_o___block_id_y_param_14];
	ld.param.u32 	%r83, [kernel_blury_s0_y_y_o___block_id_y_param_6];
	ld.param.u32 	%r78, [kernel_blury_s0_y_y_o___block_id_y_param_1];
	mov.u32 	%r96, %ctaid.y;
	mov.u32 	%r97, %ctaid.x;
	mov.u32 	%r1, %tid.y;
	mov.u32 	%r2, %tid.x;
	ld.param.u32 	%r98, [kernel_blury_s0_y_y_o___block_id_y_param_16];
	mad.lo.s32 	%r99, %r96, 28, %r98;
	ld.param.u32 	%r100, [kernel_blury_s0_y_y_o___block_id_y_param_17];
	min.s32 	%r3, %r99, %r100;
	shl.b32 	%r4, %r97, 3;
	shl.b32 	%r6, %r1, 3;
	setp.lt.s32 	%p1, %r78, 1;
	@%p1 bra 	LBB1_3;
// %bb.1:                               // %"for blurx.s0.z.preheader"
	ld.param.u32 	%r93, [kernel_blury_s0_y_y_o___block_id_y_param_19];
	ld.param.u32 	%r90, [kernel_blury_s0_y_y_o___block_id_y_param_13];
	ld.param.u32 	%r89, [kernel_blury_s0_y_y_o___block_id_y_param_12];
	ld.param.u32 	%r88, [kernel_blury_s0_y_y_o___block_id_y_param_11];
	ld.param.u32 	%r87, [kernel_blury_s0_y_y_o___block_id_y_param_10];
	ld.param.u32 	%r86, [kernel_blury_s0_y_y_o___block_id_y_param_9];
	ld.param.u32 	%r85, [kernel_blury_s0_y_y_o___block_id_y_param_8];
	ld.param.u32 	%r84, [kernel_blury_s0_y_y_o___block_id_y_param_7];
	ld.param.u64 	%rd3, [kernel_blury_s0_y_y_o___block_id_y_param_23];
	cvta.to.global.u64 	%rd1, %rd3;
	add.s32 	%r102, %r1, %r90;
	add.s32 	%r103, %r102, %r3;
	mul.lo.s32 	%r104, %r103, %r89;
	shr.s32 	%r105, %r87, 3;
	shr.s32 	%r106, %r86, 3;
	shr.s32 	%r107, %r85, 3;
	shr.s32 	%r108, %r84, 3;
	mul.lo.s32 	%r109, %r93, %r78;
	add.s32 	%r110, %r107, %r104;
	add.s32 	%r111, %r110, -1;
	not.b32 	%r112, %r91;
	sub.s32 	%r113, %r112, %r4;
	not.b32 	%r114, %r92;
	max.s32 	%r115, %r113, %r114;
	sub.s32 	%r211, %r111, %r115;
	add.s32 	%r116, %r107, %r109;
	add.s32 	%r117, %r116, %r104;
	add.s32 	%r118, %r117, -1;
	sub.s32 	%r210, %r118, %r115;
	add.s32 	%r119, %r108, %r104;
	add.s32 	%r120, %r119, -1;
	sub.s32 	%r209, %r120, %r115;
	add.s32 	%r121, %r108, %r109;
	add.s32 	%r122, %r121, %r104;
	add.s32 	%r123, %r122, -1;
	sub.s32 	%r208, %r123, %r115;
	add.s32 	%r124, %r104, -1;
	sub.s32 	%r125, %r124, %r88;
	sub.s32 	%r207, %r125, %r115;
	add.s32 	%r126, %r109, %r104;
	add.s32 	%r127, %r126, -1;
	sub.s32 	%r128, %r127, %r88;
	sub.s32 	%r206, %r128, %r115;
	add.s32 	%r129, %r106, %r104;
	add.s32 	%r130, %r129, -1;
	sub.s32 	%r205, %r130, %r115;
	add.s32 	%r131, %r106, %r109;
	add.s32 	%r132, %r131, %r104;
	add.s32 	%r133, %r132, -1;
	sub.s32 	%r204, %r133, %r115;
	add.s32 	%r134, %r105, %r104;
	add.s32 	%r135, %r134, -1;
	sub.s32 	%r203, %r135, %r115;
	add.s32 	%r136, %r105, %r109;
	add.s32 	%r137, %r136, %r104;
	add.s32 	%r138, %r137, -1;
	sub.s32 	%r202, %r138, %r115;
	mul.wide.s32 	%rd26, %r83, 4;
	mov.u32 	%r212, %r6;
	mov.u32 	%r213, %r78;
LBB1_2:                                 // %"for blurx.s0.z"
                                        // =>This Inner Loop Header: Depth=1
	add.s32 	%r139, %r2, %r212;
	add.s32 	%r140, %r2, %r203;
	add.s32 	%r141, %r2, %r205;
	add.s32 	%r142, %r2, %r207;
	add.s32 	%r143, %r2, %r209;
	add.s32 	%r144, %r2, %r211;
	mul.wide.s32 	%rd5, %r140, 4;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	mul.wide.s32 	%rd7, %r141, 4;
	add.s64 	%rd8, %rd1, %rd7;
	ld.global.nc.f32 	%f2, [%rd8];
	mul.wide.s32 	%rd9, %r142, 4;
	add.s64 	%rd10, %rd1, %rd9;
	ld.global.nc.f32 	%f3, [%rd10];
	mul.wide.s32 	%rd11, %r143, 4;
	add.s64 	%rd12, %rd1, %rd11;
	ld.global.nc.f32 	%f4, [%rd12];
	mul.wide.s32 	%rd13, %r144, 4;
	add.s64 	%rd14, %rd1, %rd13;
	ld.global.nc.f32 	%f5, [%rd14];
	fma.rn.ftz.f32 	%f6, %f5, 0f40800000, %f4;
	fma.rn.ftz.f32 	%f7, %f3, 0f40C00000, %f6;
	fma.rn.ftz.f32 	%f8, %f2, 0f40800000, %f7;
	add.ftz.f32 	%f9, %f1, %f8;
	mul.wide.s32 	%rd15, %r139, 4;
	st.shared.f32 	[%rd15], %f9;
	add.s32 	%r145, %r2, %r202;
	mul.wide.s32 	%rd16, %r145, 4;
	add.s64 	%rd17, %rd1, %rd16;
	ld.global.nc.f32 	%f10, [%rd17];
	add.s32 	%r146, %r2, %r204;
	mul.wide.s32 	%rd18, %r146, 4;
	add.s64 	%rd19, %rd1, %rd18;
	ld.global.nc.f32 	%f11, [%rd19];
	add.s32 	%r147, %r2, %r206;
	mul.wide.s32 	%rd20, %r147, 4;
	add.s64 	%rd21, %rd1, %rd20;
	ld.global.nc.f32 	%f12, [%rd21];
	add.s32 	%r148, %r2, %r208;
	mul.wide.s32 	%rd22, %r148, 4;
	add.s64 	%rd23, %rd1, %rd22;
	ld.global.nc.f32 	%f13, [%rd23];
	add.s32 	%r149, %r2, %r210;
	mul.wide.s32 	%rd24, %r149, 4;
	add.s64 	%rd25, %rd1, %rd24;
	ld.global.nc.f32 	%f14, [%rd25];
	fma.rn.ftz.f32 	%f15, %f14, 0f40800000, %f13;
	fma.rn.ftz.f32 	%f16, %f12, 0f40C00000, %f15;
	fma.rn.ftz.f32 	%f17, %f11, 0f40800000, %f16;
	add.ftz.f32 	%f18, %f10, %f17;
	add.s64 	%rd27, %rd15, %rd26;
	st.shared.f32 	[%rd27], %f18;
	add.s32 	%r213, %r213, -1;
	add.s32 	%r212, %r212, 256;
	add.s32 	%r211, %r211, %r93;
	add.s32 	%r210, %r210, %r93;
	add.s32 	%r209, %r209, %r93;
	add.s32 	%r208, %r208, %r93;
	add.s32 	%r207, %r207, %r93;
	add.s32 	%r206, %r206, %r93;
	add.s32 	%r205, %r205, %r93;
	add.s32 	%r204, %r204, %r93;
	add.s32 	%r203, %r203, %r93;
	add.s32 	%r202, %r202, %r93;
	setp.ne.s32 	%p2, %r213, 0;
	@%p2 bra 	LBB1_2;
LBB1_3:                                 // %"end for blurx.s0.z"
	bar.sync 	0;
	setp.gt.u32 	%p3, %r1, 27;
	@%p3 bra 	LBB1_15;
// %bb.4:                               // %true_bb
	@%p1 bra 	LBB1_15;
// %bb.5:                               // %"for blury.s0.z.us.preheader"
	ld.param.u64 	%rd4, [kernel_blury_s0_y_y_o___block_id_y_param_22];
	add.s32 	%r101, %r4, %r91;
	ld.param.u32 	%r95, [kernel_blury_s0_y_y_o___block_id_y_param_21];
	ld.param.u32 	%r94, [kernel_blury_s0_y_y_o___block_id_y_param_20];
	ld.param.u32 	%r82, [kernel_blury_s0_y_y_o___block_id_y_param_5];
	ld.param.u32 	%r81, [kernel_blury_s0_y_y_o___block_id_y_param_4];
	ld.param.u32 	%r80, [kernel_blury_s0_y_y_o___block_id_y_param_3];
	ld.param.u32 	%r77, [kernel_blury_s0_y_y_o___block_id_y_param_0];
	cvta.to.global.u64 	%rd2, %rd4;
	min.s32 	%r5, %r101, %r92;
	add.s32 	%r7, %r6, %r2;
	sub.s32 	%r150, %r1, %r81;
	add.s32 	%r151, %r150, %r3;
	mul.lo.s32 	%r42, %r151, %r80;
	add.s32 	%r152, %r5, %r2;
	sub.s32 	%r153, %r152, %r82;
	add.s32 	%r43, %r153, %r42;
	and.b32  	%r44, %r78, 1;
	setp.eq.s32 	%p5, %r44, 0;
	mov.u32 	%r214, %r95;
	@%p5 bra 	LBB1_7;
// %bb.6:                               // %"for blury.s0.z.us.prol"
	mul.wide.u32 	%rd28, %r7, 4;
	ld.shared.f32 	%f19, [%rd28+128];
	ld.shared.f32 	%f20, [%rd28+96];
	ld.shared.f32 	%f21, [%rd28+64];
	ld.shared.f32 	%f22, [%rd28];
	ld.shared.f32 	%f23, [%rd28+32];
	fma.rn.ftz.f32 	%f24, %f23, 0f40800000, %f22;
	fma.rn.ftz.f32 	%f25, %f21, 0f40C00000, %f24;
	fma.rn.ftz.f32 	%f26, %f20, 0f40800000, %f25;
	add.ftz.f32 	%f27, %f19, %f26;
	sub.s32 	%r154, %r95, %r94;
	mad.lo.s32 	%r155, %r154, %r77, %r43;
	mul.wide.s32 	%rd29, %r155, 4;
	add.s64 	%rd30, %rd2, %rd29;
	st.global.f32 	[%rd30], %f27;
	add.s32 	%r214, %r95, 1;
LBB1_7:                                 // %"for blury.s0.z.us.prol.loopexit"
	setp.eq.s32 	%p6, %r78, 1;
	@%p6 bra 	LBB1_10;
// %bb.8:                               // %"for blury.s0.z.us.preheader.new"
	add.s32 	%r156, %r95, %r78;
	sub.s32 	%r218, %r156, %r214;
	add.s32 	%r157, %r214, 1;
	sub.s32 	%r158, %r157, %r94;
	mad.lo.s32 	%r159, %r77, %r158, %r42;
	add.s32 	%r160, %r159, -1;
	sub.s32 	%r161, %r160, %r82;
	not.b32 	%r162, %r91;
	sub.s32 	%r163, %r162, %r4;
	not.b32 	%r164, %r92;
	max.s32 	%r165, %r163, %r164;
	sub.s32 	%r217, %r161, %r165;
	shl.b32 	%r49, %r77, 1;
	shl.b32 	%r166, %r214, 8;
	add.s32 	%r167, %r166, %r6;
	shl.b32 	%r168, %r95, 8;
	sub.s32 	%r216, %r167, %r168;
	sub.s32 	%r169, %r214, %r94;
	mad.lo.s32 	%r170, %r77, %r169, %r42;
	add.s32 	%r171, %r170, -1;
	sub.s32 	%r172, %r171, %r82;
	sub.s32 	%r215, %r172, %r165;
LBB1_9:                                 // %"for blury.s0.z.us"
                                        // =>This Inner Loop Header: Depth=1
	add.s32 	%r173, %r2, %r216;
	mul.wide.s32 	%rd31, %r173, 4;
	ld.shared.f32 	%f28, [%rd31+128];
	ld.shared.f32 	%f29, [%rd31+96];
	ld.shared.f32 	%f30, [%rd31+64];
	ld.shared.f32 	%f31, [%rd31];
	ld.shared.f32 	%f32, [%rd31+32];
	fma.rn.ftz.f32 	%f33, %f32, 0f40800000, %f31;
	fma.rn.ftz.f32 	%f34, %f30, 0f40C00000, %f33;
	fma.rn.ftz.f32 	%f35, %f29, 0f40800000, %f34;
	add.ftz.f32 	%f36, %f28, %f35;
	add.s32 	%r174, %r2, %r215;
	mul.wide.s32 	%rd32, %r174, 4;
	add.s64 	%rd33, %rd2, %rd32;
	st.global.f32 	[%rd33], %f36;
	add.s32 	%r175, %r173, 256;
	mul.wide.s32 	%rd34, %r175, 4;
	ld.shared.f32 	%f37, [%rd34+128];
	ld.shared.f32 	%f38, [%rd34+96];
	ld.shared.f32 	%f39, [%rd34+64];
	ld.shared.f32 	%f40, [%rd34];
	ld.shared.f32 	%f41, [%rd34+32];
	fma.rn.ftz.f32 	%f42, %f41, 0f40800000, %f40;
	fma.rn.ftz.f32 	%f43, %f39, 0f40C00000, %f42;
	fma.rn.ftz.f32 	%f44, %f38, 0f40800000, %f43;
	add.ftz.f32 	%f45, %f37, %f44;
	add.s32 	%r176, %r2, %r217;
	mul.wide.s32 	%rd35, %r176, 4;
	add.s64 	%rd36, %rd2, %rd35;
	st.global.f32 	[%rd36], %f45;
	add.s32 	%r218, %r218, -2;
	add.s32 	%r217, %r217, %r49;
	add.s32 	%r216, %r216, 512;
	add.s32 	%r215, %r215, %r49;
	setp.ne.s32 	%p7, %r218, 0;
	@%p7 bra 	LBB1_9;
LBB1_10:                                // %"end for blury.s0.z.loopexit.us"
	ld.param.u32 	%r79, [kernel_blury_s0_y_y_o___block_id_y_param_2];
	mov.u32 	%r219, %r95;
	@%p5 bra 	LBB1_12;
// %bb.11:                              // %"for blury.s0.z.us.1.prol"
	add.s32 	%r60, %r7, %r83;
	add.s32 	%r61, %r43, %r79;
	mul.wide.s32 	%rd37, %r60, 4;
	ld.shared.f32 	%f46, [%rd37+128];
	ld.shared.f32 	%f47, [%rd37+96];
	ld.shared.f32 	%f48, [%rd37+64];
	ld.shared.f32 	%f49, [%rd37];
	ld.shared.f32 	%f50, [%rd37+32];
	fma.rn.ftz.f32 	%f51, %f50, 0f40800000, %f49;
	fma.rn.ftz.f32 	%f52, %f48, 0f40C00000, %f51;
	fma.rn.ftz.f32 	%f53, %f47, 0f40800000, %f52;
	add.ftz.f32 	%f54, %f46, %f53;
	sub.s32 	%r177, %r95, %r94;
	mad.lo.s32 	%r178, %r177, %r77, %r61;
	mul.wide.s32 	%rd38, %r178, 4;
	add.s64 	%rd39, %rd2, %rd38;
	st.global.f32 	[%rd39], %f54;
	add.s32 	%r219, %r95, 1;
LBB1_12:                                // %"for blury.s0.z.us.1.prol.loopexit"
	@%p6 bra 	LBB1_15;
// %bb.13:                              // %"end for blury.s0.z.loopexit.us.new"
	add.s32 	%r179, %r95, %r78;
	sub.s32 	%r223, %r179, %r219;
	add.s32 	%r180, %r79, %r42;
	add.s32 	%r181, %r219, 1;
	sub.s32 	%r182, %r181, %r94;
	mad.lo.s32 	%r183, %r77, %r182, %r180;
	add.s32 	%r184, %r183, -1;
	sub.s32 	%r185, %r184, %r82;
	not.b32 	%r186, %r91;
	sub.s32 	%r187, %r186, %r4;
	not.b32 	%r188, %r92;
	max.s32 	%r189, %r187, %r188;
	sub.s32 	%r222, %r185, %r189;
	shl.b32 	%r66, %r77, 1;
	shl.b32 	%r190, %r219, 8;
	add.s32 	%r191, %r83, %r190;
	add.s32 	%r192, %r191, %r6;
	shl.b32 	%r193, %r95, 8;
	sub.s32 	%r221, %r192, %r193;
	sub.s32 	%r194, %r219, %r94;
	mad.lo.s32 	%r195, %r77, %r194, %r180;
	add.s32 	%r196, %r195, -1;
	sub.s32 	%r197, %r196, %r82;
	sub.s32 	%r220, %r197, %r189;
LBB1_14:                                // %"for blury.s0.z.us.1"
                                        // =>This Inner Loop Header: Depth=1
	add.s32 	%r198, %r2, %r221;
	mul.wide.s32 	%rd40, %r198, 4;
	ld.shared.f32 	%f55, [%rd40+128];
	ld.shared.f32 	%f56, [%rd40+96];
	ld.shared.f32 	%f57, [%rd40+64];
	ld.shared.f32 	%f58, [%rd40];
	ld.shared.f32 	%f59, [%rd40+32];
	fma.rn.ftz.f32 	%f60, %f59, 0f40800000, %f58;
	fma.rn.ftz.f32 	%f61, %f57, 0f40C00000, %f60;
	fma.rn.ftz.f32 	%f62, %f56, 0f40800000, %f61;
	add.ftz.f32 	%f63, %f55, %f62;
	add.s32 	%r199, %r2, %r220;
	mul.wide.s32 	%rd41, %r199, 4;
	add.s64 	%rd42, %rd2, %rd41;
	st.global.f32 	[%rd42], %f63;
	add.s32 	%r200, %r198, 256;
	mul.wide.s32 	%rd43, %r200, 4;
	ld.shared.f32 	%f64, [%rd43+128];
	ld.shared.f32 	%f65, [%rd43+96];
	ld.shared.f32 	%f66, [%rd43+64];
	ld.shared.f32 	%f67, [%rd43];
	ld.shared.f32 	%f68, [%rd43+32];
	fma.rn.ftz.f32 	%f69, %f68, 0f40800000, %f67;
	fma.rn.ftz.f32 	%f70, %f66, 0f40C00000, %f69;
	fma.rn.ftz.f32 	%f71, %f65, 0f40800000, %f70;
	add.ftz.f32 	%f72, %f64, %f71;
	add.s32 	%r201, %r2, %r222;
	mul.wide.s32 	%rd44, %r201, 4;
	add.s64 	%rd45, %rd2, %rd44;
	st.global.f32 	[%rd45], %f72;
	add.s32 	%r223, %r223, -2;
	add.s32 	%r222, %r222, %r66;
	add.s32 	%r221, %r221, 512;
	add.s32 	%r220, %r220, %r66;
	setp.eq.s32 	%p10, %r223, 0;
	@%p10 bra 	LBB1_15;
	bra.uni 	LBB1_14;
LBB1_15:                                // %after_bb
	ret;
}
                                        // -- End function
	// .globl	kernel_bilateral_grid_s0_y_y_o___block_id_y // -- Begin function kernel_bilateral_grid_s0_y_y_o___block_id_y
.visible .entry kernel_bilateral_grid_s0_y_y_o___block_id_y(
	.param .u32 kernel_bilateral_grid_s0_y_y_o___block_id_y_param_0,
	.param .u32 kernel_bilateral_grid_s0_y_y_o___block_id_y_param_1,
	.param .u32 kernel_bilateral_grid_s0_y_y_o___block_id_y_param_2,
	.param .u32 kernel_bilateral_grid_s0_y_y_o___block_id_y_param_3,
	.param .u32 kernel_bilateral_grid_s0_y_y_o___block_id_y_param_4,
	.param .u32 kernel_bilateral_grid_s0_y_y_o___block_id_y_param_5,
	.param .u32 kernel_bilateral_grid_s0_y_y_o___block_id_y_param_6,
	.param .u32 kernel_bilateral_grid_s0_y_y_o___block_id_y_param_7,
	.param .u32 kernel_bilateral_grid_s0_y_y_o___block_id_y_param_8,
	.param .u32 kernel_bilateral_grid_s0_y_y_o___block_id_y_param_9,
	.param .u32 kernel_bilateral_grid_s0_y_y_o___block_id_y_param_10,
	.param .f32 kernel_bilateral_grid_s0_y_y_o___block_id_y_param_11,
	.param .u32 kernel_bilateral_grid_s0_y_y_o___block_id_y_param_12,
	.param .u32 kernel_bilateral_grid_s0_y_y_o___block_id_y_param_13,
	.param .u32 kernel_bilateral_grid_s0_y_y_o___block_id_y_param_14,
	.param .u32 kernel_bilateral_grid_s0_y_y_o___block_id_y_param_15,
	.param .u32 kernel_bilateral_grid_s0_y_y_o___block_id_y_param_16,
	.param .u32 kernel_bilateral_grid_s0_y_y_o___block_id_y_param_17,
	.param .u32 kernel_bilateral_grid_s0_y_y_o___block_id_y_param_18,
	.param .u64 kernel_bilateral_grid_s0_y_y_o___block_id_y_param_19,
	.param .u64 kernel_bilateral_grid_s0_y_y_o___block_id_y_param_20,
	.param .u64 kernel_bilateral_grid_s0_y_y_o___block_id_y_param_21
)                                       // @kernel_bilateral_grid_s0_y_y_o___block_id_y
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<144>;
	.reg .b32 	%r<136>;
	.reg .b64 	%rd<49>;

// %bb.0:                               // %entry
	ld.param.u32 	%r21, [kernel_bilateral_grid_s0_y_y_o___block_id_y_param_18];
	ld.param.u32 	%r20, [kernel_bilateral_grid_s0_y_y_o___block_id_y_param_17];
	ld.param.u32 	%r19, [kernel_bilateral_grid_s0_y_y_o___block_id_y_param_16];
	ld.param.u32 	%r18, [kernel_bilateral_grid_s0_y_y_o___block_id_y_param_15];
	ld.param.u32 	%r17, [kernel_bilateral_grid_s0_y_y_o___block_id_y_param_14];
	ld.param.f32 	%f4, [kernel_bilateral_grid_s0_y_y_o___block_id_y_param_11];
	ld.param.u32 	%r13, [kernel_bilateral_grid_s0_y_y_o___block_id_y_param_6];
	ld.param.u32 	%r12, [kernel_bilateral_grid_s0_y_y_o___block_id_y_param_5];
	ld.param.u32 	%r11, [kernel_bilateral_grid_s0_y_y_o___block_id_y_param_4];
	ld.param.u32 	%r22, [kernel_bilateral_grid_s0_y_y_o___block_id_y_param_0];
	ld.param.u64 	%rd4, [kernel_bilateral_grid_s0_y_y_o___block_id_y_param_21];
	cvta.to.global.u64 	%rd1, %rd4;
	ld.param.u64 	%rd5, [kernel_bilateral_grid_s0_y_y_o___block_id_y_param_20];
	cvta.to.global.u64 	%rd2, %rd5;
	ld.param.u64 	%rd6, [kernel_bilateral_grid_s0_y_y_o___block_id_y_param_19];
	cvta.to.global.u64 	%rd3, %rd6;
	mov.u32 	%r23, %ctaid.y;
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r24, %tid.y;
	mov.u32 	%r2, %tid.x;
	shl.b32 	%r25, %r23, 5;
	ld.param.u32 	%r26, [kernel_bilateral_grid_s0_y_y_o___block_id_y_param_8];
	ld.param.u32 	%r27, [kernel_bilateral_grid_s0_y_y_o___block_id_y_param_9];
	min.s32 	%r28, %r25, %r27;
	setp.ge.s32 	%p1, %r1, %r26;
	add.s32 	%r29, %r24, %r22;
	ld.param.u32 	%r30, [kernel_bilateral_grid_s0_y_y_o___block_id_y_param_12];
	add.s32 	%r3, %r29, %r28;
	mul.lo.s32 	%r4, %r3, %r30;
	@%p1 bra 	LBB2_2;
// %bb.1:                               // %true_bb
	ld.param.u32 	%r15, [kernel_bilateral_grid_s0_y_y_o___block_id_y_param_10];
	ld.param.u32 	%r14, [kernel_bilateral_grid_s0_y_y_o___block_id_y_param_7];
	shl.b32 	%r80, %r1, 5;
	add.s32 	%r81, %r2, %r80;
	add.s32 	%r82, %r81, %r14;
	add.s32 	%r83, %r82, %r4;
	mul.wide.s32 	%rd27, %r83, 4;
	add.s64 	%rd28, %rd1, %rd27;
	ld.global.nc.f32 	%f74, [%rd28];
	min.ftz.f32 	%f75, %f74, 0f3F800000;
	max.ftz.f32 	%f76, %f75, 0f00000000;
	mul.ftz.f32 	%f77, %f76, %f4;
	cvt.rzi.ftz.s32.f32 	%r84, %f77;
	add.s32 	%r85, %r2, %r21;
	and.b32  	%r86, %r85, 7;
	cvt.rn.f32.s32 	%f78, %r86;
	and.b32  	%r87, %r3, 7;
	cvt.rn.f32.s32 	%f79, %r87;
	cvt.rn.f32.s32 	%f80, %r84;
	neg.ftz.f32 	%f81, %f80;
	fma.rn.ftz.f32 	%f82, %f76, %f4, %f81;
	shr.s32 	%r88, %r3, 3;
	sub.s32 	%r89, %r88, %r13;
	add.s32 	%r90, %r18, 1;
	add.s32 	%r91, %r12, %r21;
	add.s32 	%r92, %r91, -49;
	shr.s32 	%r93, %r92, 3;
	sub.s32 	%r94, %r19, %r93;
	sub.s32 	%r95, %r11, %r93;
	sub.s32 	%r96, %r84, %r17;
	mul.lo.s32 	%r97, %r96, %r19;
	shr.s32 	%r98, %r85, 3;
	shl.b32 	%r99, %r1, 2;
	mad.lo.s32 	%r100, %r89, %r90, %r98;
	add.s32 	%r101, %r100, %r18;
	sub.s32 	%r102, %r101, %r93;
	add.s32 	%r103, %r102, %r99;
	add.s32 	%r104, %r103, %r97;
	add.s32 	%r105, %r100, %r94;
	add.s32 	%r106, %r105, %r99;
	add.s32 	%r107, %r106, %r97;
	add.s32 	%r108, %r101, %r94;
	add.s32 	%r109, %r108, %r99;
	add.s32 	%r110, %r109, %r97;
	add.s32 	%r111, %r100, %r95;
	add.s32 	%r112, %r111, %r99;
	add.s32 	%r113, %r112, %r97;
	add.s32 	%r114, %r101, %r95;
	add.s32 	%r115, %r114, %r99;
	add.s32 	%r116, %r115, %r97;
	add.s32 	%r117, %r95, %r19;
	add.s32 	%r118, %r100, %r117;
	add.s32 	%r119, %r118, %r99;
	add.s32 	%r120, %r119, %r97;
	add.s32 	%r121, %r101, %r117;
	add.s32 	%r122, %r121, %r99;
	add.s32 	%r123, %r122, %r97;
	sub.s32 	%r124, %r100, %r93;
	add.s32 	%r125, %r124, %r99;
	add.s32 	%r126, %r125, %r97;
	mul.wide.s32 	%rd29, %r126, 4;
	add.s64 	%rd30, %rd2, %rd29;
	ld.global.nc.f32 	%f83, [%rd30];
	fma.rn.ftz.f32 	%f84, %f78, 0fBE000000, 0f3F800000;
	mov.u32 	%r127, 64;
	sub.s32 	%r128, %r127, %r12;
	sub.s32 	%r129, %r128, %r21;
	shr.s32 	%r130, %r129, 3;
	add.s32 	%r131, %r100, %r130;
	add.s32 	%r132, %r131, %r99;
	add.s32 	%r133, %r132, %r97;
	mul.wide.s32 	%rd31, %r133, 4;
	add.s64 	%rd32, %rd2, %rd31;
	ld.global.nc.f32 	%f85, [%rd32];
	mul.ftz.f32 	%f86, %f85, %f78;
	mul.ftz.f32 	%f87, %f86, 0f3E000000;
	fma.rn.ftz.f32 	%f88, %f84, %f83, %f87;
	fma.rn.ftz.f32 	%f89, %f79, 0fBE000000, 0f3F800000;
	mul.wide.s32 	%rd33, %r104, 4;
	add.s64 	%rd34, %rd2, %rd33;
	ld.global.nc.f32 	%f90, [%rd34+4];
	ld.global.nc.f32 	%f91, [%rd34+8];
	mul.ftz.f32 	%f92, %f91, %f78;
	mul.ftz.f32 	%f93, %f92, 0f3E000000;
	fma.rn.ftz.f32 	%f94, %f84, %f90, %f93;
	mul.ftz.f32 	%f95, %f94, %f79;
	mul.ftz.f32 	%f96, %f95, 0f3E000000;
	fma.rn.ftz.f32 	%f97, %f89, %f88, %f96;
	mov.f32 	%f98, 0f3F800000;
	sub.ftz.f32 	%f99, %f98, %f82;
	mul.wide.s32 	%rd35, %r107, 4;
	add.s64 	%rd36, %rd2, %rd35;
	ld.global.nc.f32 	%f100, [%rd36];
	ld.global.nc.f32 	%f101, [%rd36+4];
	mul.ftz.f32 	%f102, %f101, %f78;
	mul.ftz.f32 	%f103, %f102, 0f3E000000;
	fma.rn.ftz.f32 	%f104, %f84, %f100, %f103;
	mul.wide.s32 	%rd37, %r110, 4;
	add.s64 	%rd38, %rd2, %rd37;
	ld.global.nc.f32 	%f105, [%rd38+4];
	ld.global.nc.f32 	%f106, [%rd38+8];
	mul.ftz.f32 	%f107, %f106, %f78;
	mul.ftz.f32 	%f108, %f107, 0f3E000000;
	fma.rn.ftz.f32 	%f109, %f84, %f105, %f108;
	mul.ftz.f32 	%f110, %f109, %f79;
	mul.ftz.f32 	%f111, %f110, 0f3E000000;
	fma.rn.ftz.f32 	%f112, %f89, %f104, %f111;
	mul.ftz.f32 	%f113, %f82, %f112;
	fma.rn.ftz.f32 	%f114, %f99, %f97, %f113;
	mul.wide.s32 	%rd39, %r113, 4;
	add.s64 	%rd40, %rd2, %rd39;
	ld.global.nc.f32 	%f115, [%rd40];
	ld.global.nc.f32 	%f116, [%rd40+4];
	mul.ftz.f32 	%f117, %f116, %f78;
	mul.ftz.f32 	%f118, %f117, 0f3E000000;
	fma.rn.ftz.f32 	%f119, %f84, %f115, %f118;
	mul.wide.s32 	%rd41, %r116, 4;
	add.s64 	%rd42, %rd2, %rd41;
	ld.global.nc.f32 	%f120, [%rd42+4];
	ld.global.nc.f32 	%f121, [%rd42+8];
	mul.ftz.f32 	%f122, %f121, %f78;
	mul.ftz.f32 	%f123, %f122, 0f3E000000;
	fma.rn.ftz.f32 	%f124, %f84, %f120, %f123;
	mul.ftz.f32 	%f125, %f124, %f79;
	mul.ftz.f32 	%f126, %f125, 0f3E000000;
	fma.rn.ftz.f32 	%f127, %f89, %f119, %f126;
	mul.wide.s32 	%rd43, %r120, 4;
	add.s64 	%rd44, %rd2, %rd43;
	ld.global.nc.f32 	%f128, [%rd44];
	ld.global.nc.f32 	%f129, [%rd44+4];
	mul.ftz.f32 	%f130, %f129, %f78;
	mul.ftz.f32 	%f131, %f130, 0f3E000000;
	fma.rn.ftz.f32 	%f132, %f84, %f128, %f131;
	mul.wide.s32 	%rd45, %r123, 4;
	add.s64 	%rd46, %rd2, %rd45;
	ld.global.nc.f32 	%f133, [%rd46+4];
	ld.global.nc.f32 	%f134, [%rd46+8];
	mul.ftz.f32 	%f135, %f134, %f78;
	mul.ftz.f32 	%f136, %f135, 0f3E000000;
	fma.rn.ftz.f32 	%f137, %f84, %f133, %f136;
	mul.ftz.f32 	%f138, %f137, %f79;
	mul.ftz.f32 	%f139, %f138, 0f3E000000;
	fma.rn.ftz.f32 	%f140, %f89, %f132, %f139;
	mul.ftz.f32 	%f141, %f82, %f140;
	fma.rn.ftz.f32 	%f142, %f99, %f127, %f141;
	div.approx.ftz.f32 	%f143, %f114, %f142;
	add.s32 	%r135, %r81, %r15;
	bra.uni 	LBB2_3;
LBB2_2:                                 // %false_bb
	ld.param.u32 	%r16, [kernel_bilateral_grid_s0_y_y_o___block_id_y_param_13];
	ld.param.u32 	%r10, [kernel_bilateral_grid_s0_y_y_o___block_id_y_param_3];
	ld.param.u32 	%r9, [kernel_bilateral_grid_s0_y_y_o___block_id_y_param_2];
	ld.param.u32 	%r8, [kernel_bilateral_grid_s0_y_y_o___block_id_y_param_1];
	add.s32 	%r31, %r4, %r2;
	add.s32 	%r32, %r31, -32;
	sub.s32 	%r33, %r32, %r9;
	add.s32 	%r34, %r33, %r10;
	sub.s32 	%r35, %r34, %r16;
	mul.wide.s32 	%rd7, %r35, 4;
	add.s64 	%rd8, %rd1, %rd7;
	ld.global.nc.f32 	%f5, [%rd8];
	min.ftz.f32 	%f6, %f5, 0f3F800000;
	max.ftz.f32 	%f7, %f6, 0f00000000;
	mul.ftz.f32 	%f8, %f7, %f4;
	cvt.rzi.ftz.s32.f32 	%r36, %f8;
	add.s32 	%r37, %r2, %r10;
	and.b32  	%r38, %r37, 7;
	cvt.rn.f32.s32 	%f9, %r38;
	and.b32  	%r39, %r3, 7;
	cvt.rn.f32.s32 	%f10, %r39;
	cvt.rn.f32.s32 	%f11, %r36;
	neg.ftz.f32 	%f12, %f11;
	fma.rn.ftz.f32 	%f13, %f7, %f4, %f12;
	shr.s32 	%r40, %r3, 3;
	sub.s32 	%r41, %r40, %r13;
	add.s32 	%r42, %r18, 1;
	add.s32 	%r43, %r12, %r21;
	add.s32 	%r44, %r43, -49;
	shr.s32 	%r45, %r44, 3;
	sub.s32 	%r46, %r19, %r45;
	sub.s32 	%r47, %r11, %r45;
	sub.s32 	%r48, %r36, %r17;
	mul.lo.s32 	%r49, %r48, %r19;
	shr.s32 	%r50, %r37, 3;
	mad.lo.s32 	%r51, %r41, %r42, %r50;
	add.s32 	%r52, %r51, %r18;
	sub.s32 	%r53, %r52, %r45;
	add.s32 	%r54, %r53, %r49;
	add.s32 	%r55, %r51, %r46;
	add.s32 	%r56, %r55, %r49;
	add.s32 	%r57, %r52, %r46;
	add.s32 	%r58, %r57, %r49;
	add.s32 	%r59, %r51, %r47;
	add.s32 	%r60, %r59, %r49;
	add.s32 	%r61, %r52, %r47;
	add.s32 	%r62, %r61, %r49;
	add.s32 	%r63, %r47, %r19;
	add.s32 	%r64, %r51, %r63;
	add.s32 	%r65, %r64, %r49;
	add.s32 	%r66, %r52, %r63;
	add.s32 	%r67, %r66, %r49;
	mov.u32 	%r68, 24;
	sub.s32 	%r69, %r68, %r12;
	sub.s32 	%r70, %r69, %r21;
	shr.s32 	%r71, %r70, 3;
	add.s32 	%r72, %r51, %r71;
	add.s32 	%r73, %r72, %r49;
	mul.wide.s32 	%rd9, %r73, 4;
	add.s64 	%rd10, %rd2, %rd9;
	ld.global.nc.f32 	%f14, [%rd10];
	fma.rn.ftz.f32 	%f15, %f9, 0fBE000000, 0f3F800000;
	mov.u32 	%r74, 32;
	sub.s32 	%r75, %r74, %r12;
	sub.s32 	%r76, %r75, %r21;
	shr.s32 	%r77, %r76, 3;
	add.s32 	%r78, %r51, %r77;
	add.s32 	%r79, %r78, %r49;
	mul.wide.s32 	%rd11, %r79, 4;
	add.s64 	%rd12, %rd2, %rd11;
	ld.global.nc.f32 	%f16, [%rd12];
	mul.ftz.f32 	%f17, %f16, %f9;
	mul.ftz.f32 	%f18, %f17, 0f3E000000;
	fma.rn.ftz.f32 	%f19, %f15, %f14, %f18;
	fma.rn.ftz.f32 	%f20, %f10, 0fBE000000, 0f3F800000;
	mul.wide.s32 	%rd13, %r54, 4;
	add.s64 	%rd14, %rd2, %rd13;
	ld.global.nc.f32 	%f21, [%rd14+-12];
	ld.global.nc.f32 	%f22, [%rd14+-8];
	mul.ftz.f32 	%f23, %f22, %f9;
	mul.ftz.f32 	%f24, %f23, 0f3E000000;
	fma.rn.ftz.f32 	%f25, %f15, %f21, %f24;
	mul.ftz.f32 	%f26, %f25, %f10;
	mul.ftz.f32 	%f27, %f26, 0f3E000000;
	fma.rn.ftz.f32 	%f28, %f20, %f19, %f27;
	mov.f32 	%f29, 0f3F800000;
	sub.ftz.f32 	%f30, %f29, %f13;
	mul.wide.s32 	%rd15, %r56, 4;
	add.s64 	%rd16, %rd2, %rd15;
	ld.global.nc.f32 	%f31, [%rd16+-16];
	ld.global.nc.f32 	%f32, [%rd16+-12];
	mul.ftz.f32 	%f33, %f32, %f9;
	mul.ftz.f32 	%f34, %f33, 0f3E000000;
	fma.rn.ftz.f32 	%f35, %f15, %f31, %f34;
	mul.wide.s32 	%rd17, %r58, 4;
	add.s64 	%rd18, %rd2, %rd17;
	ld.global.nc.f32 	%f36, [%rd18+-12];
	ld.global.nc.f32 	%f37, [%rd18+-8];
	mul.ftz.f32 	%f38, %f37, %f9;
	mul.ftz.f32 	%f39, %f38, 0f3E000000;
	fma.rn.ftz.f32 	%f40, %f15, %f36, %f39;
	mul.ftz.f32 	%f41, %f40, %f10;
	mul.ftz.f32 	%f42, %f41, 0f3E000000;
	fma.rn.ftz.f32 	%f43, %f20, %f35, %f42;
	mul.ftz.f32 	%f44, %f13, %f43;
	fma.rn.ftz.f32 	%f45, %f30, %f28, %f44;
	mul.wide.s32 	%rd19, %r60, 4;
	add.s64 	%rd20, %rd2, %rd19;
	ld.global.nc.f32 	%f46, [%rd20+-16];
	ld.global.nc.f32 	%f47, [%rd20+-12];
	mul.ftz.f32 	%f48, %f47, %f9;
	mul.ftz.f32 	%f49, %f48, 0f3E000000;
	fma.rn.ftz.f32 	%f50, %f15, %f46, %f49;
	mul.wide.s32 	%rd21, %r62, 4;
	add.s64 	%rd22, %rd2, %rd21;
	ld.global.nc.f32 	%f51, [%rd22+-12];
	ld.global.nc.f32 	%f52, [%rd22+-8];
	mul.ftz.f32 	%f53, %f52, %f9;
	mul.ftz.f32 	%f54, %f53, 0f3E000000;
	fma.rn.ftz.f32 	%f55, %f15, %f51, %f54;
	mul.ftz.f32 	%f56, %f55, %f10;
	mul.ftz.f32 	%f57, %f56, 0f3E000000;
	fma.rn.ftz.f32 	%f58, %f20, %f50, %f57;
	mul.wide.s32 	%rd23, %r65, 4;
	add.s64 	%rd24, %rd2, %rd23;
	ld.global.nc.f32 	%f59, [%rd24+-16];
	ld.global.nc.f32 	%f60, [%rd24+-12];
	mul.ftz.f32 	%f61, %f60, %f9;
	mul.ftz.f32 	%f62, %f61, 0f3E000000;
	fma.rn.ftz.f32 	%f63, %f15, %f59, %f62;
	mul.wide.s32 	%rd25, %r67, 4;
	add.s64 	%rd26, %rd2, %rd25;
	ld.global.nc.f32 	%f64, [%rd26+-12];
	ld.global.nc.f32 	%f65, [%rd26+-8];
	mul.ftz.f32 	%f66, %f65, %f9;
	mul.ftz.f32 	%f67, %f66, 0f3E000000;
	fma.rn.ftz.f32 	%f68, %f15, %f64, %f67;
	mul.ftz.f32 	%f69, %f68, %f10;
	mul.ftz.f32 	%f70, %f69, 0f3E000000;
	fma.rn.ftz.f32 	%f71, %f20, %f63, %f70;
	mul.ftz.f32 	%f72, %f13, %f71;
	fma.rn.ftz.f32 	%f73, %f30, %f58, %f72;
	div.approx.ftz.f32 	%f143, %f45, %f73;
	add.s32 	%r135, %r2, %r8;
LBB2_3:                                 // %after_bb
	mad.lo.s32 	%r134, %r3, %r20, %r135;
	mul.wide.s32 	%rd47, %r134, 4;
	add.s64 	%rd48, %rd3, %rd47;
	st.global.f32 	[%rd48], %f143;
	ret;
}
                                        // -- End function


add_temp_object_file: /tmp/1WtzJP/bilateral_grid_auto_schedule.a.o
Module.compile(): temporary object_name /tmp/1WtzJP/bilateral_grid_auto_schedule.a.o
emit_file.Compiling to native code...
Module.compile(): static_library_name ./bin/bilateral_grid_auto_schedule.a
file_unlink: /tmp/1WtzJP/bilateral_grid_auto_schedule.a.o
dir_rmdir: /tmp/1WtzJP
Module.compile(): c_header_name ./bin/bilateral_grid_auto_schedule.h
Module.compile(): schedule_name ./bin/bilateral_grid_auto_schedule.schedule
