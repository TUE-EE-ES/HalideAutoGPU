Registering autoscheduler...
JIT compiling shared runtime for x86-64-linux-avx-avx2-cuda-f16c-fma-jit-no_runtime-sse41
JIT compiling cuda for x86-64-linux-avx-avx2-cuda-f16c-fma-jit-no_runtime-sse41
Generator bilateral_grid has base_path ./bin/bilateral_grid_classic_auto_schedule
Dropout seed = 1561459402
Node: bilateral_grid
  Symbolic region required: 
    bilateral_grid.x.min, bilateral_grid.x.max
    bilateral_grid.y.min, bilateral_grid.y.max
  Region computed: 
    bilateral_grid.x.min, bilateral_grid.x.max
    bilateral_grid.y.min, bilateral_grid.y.max
  Stage 0:
    x bilateral_grid.x.min bilateral_grid.x.max
    y bilateral_grid.y.min bilateral_grid.y.max
    Featurization for type UInt32
     Op histogram:
      Constant:   2
      Cast:       0
      Variable:   6
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
    Featurization for type Float
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        1
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   2
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 1
      Transpose:      0 0 0 1
      Broadcast:      0 0 0 1
      Slice:          2 0 0 1
  pointwise: 0 boundary condition: 0 wrapper: 0 input: 0 output: 1
Node: interpolated
  Symbolic region required: 
    interpolated.x.min, interpolated.x.max
    interpolated.y.min, interpolated.y.max
    interpolated.c.min, interpolated.c.max
  Region computed: 
    interpolated.x.min, interpolated.x.max
    interpolated.y.min, interpolated.y.max
    interpolated.c.min, interpolated.c.max
  Stage 0:
    x interpolated.x.min interpolated.x.max
    y interpolated.y.min interpolated.y.max
    c interpolated.c.min interpolated.c.max
    Featurization for type UInt32
     Op histogram:
      Constant:   30
      Cast:       0
      Variable:   40
      Param:      0
      Add:        12
      Sub:        0
      Mod:        2
      Mul:        0
      Div:        16
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
    Featurization for type Float
     Op histogram:
      Constant:   9
      Cast:       0
      Variable:   8
      Param:      1
      Add:        0
      Sub:        1
      Mod:        0
      Mul:        7
      Div:        1
      Min:        1
      Max:        1
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   9
      SelfCall:   0
      ExternCall: 7
      Let:        4
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 1
      Transpose:      0 0 0 1
      Broadcast:      0 0 0 1
      Slice:          0 0 0 1
  pointwise: 0 boundary condition: 0 wrapper: 0 input: 0 output: 0
Node: blury
  Symbolic region required: 
    blury.x.min, blury.x.max
    blury.y.min, blury.y.max
    blury.z.min, blury.z.max
    blury.c.min, blury.c.max
  Region computed: 
    blury.x.min, blury.x.max
    blury.y.min, blury.y.max
    blury.z.min, blury.z.max
    blury.c.min, blury.c.max
  Stage 0:
    x blury.x.min blury.x.max
    y blury.y.min blury.y.max
    z blury.z.min blury.z.max
    c blury.c.min blury.c.max
    Featurization for type UInt32
     Op histogram:
      Constant:   4
      Cast:       0
      Variable:   24
      Param:      0
      Add:        4
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
    Featurization for type Float
     Op histogram:
      Constant:   3
      Cast:       0
      Variable:   0
      Param:      0
      Add:        4
      Sub:        0
      Mod:        0
      Mul:        3
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   5
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      5 0 0 1
      Transpose:      5 0 0 1
      Broadcast:      5 0 0 1
      Slice:          5 0 0 1
  pointwise: 0 boundary condition: 0 wrapper: 0 input: 0 output: 0
Node: blurx
  Symbolic region required: 
    blurx.x.min, blurx.x.max
    blurx.y.min, blurx.y.max
    blurx.z.min, blurx.z.max
    blurx.c.min, blurx.c.max
  Region computed: 
    blurx.x.min, blurx.x.max
    blurx.y.min, blurx.y.max
    blurx.z.min, blurx.z.max
    blurx.c.min, blurx.c.max
  Stage 0:
    x blurx.x.min blurx.x.max
    y blurx.y.min blurx.y.max
    z blurx.z.min blurx.z.max
    c blurx.c.min blurx.c.max
    Featurization for type UInt32
     Op histogram:
      Constant:   4
      Cast:       0
      Variable:   24
      Param:      0
      Add:        4
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
    Featurization for type Float
     Op histogram:
      Constant:   3
      Cast:       0
      Variable:   0
      Param:      0
      Add:        4
      Sub:        0
      Mod:        0
      Mul:        3
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   5
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      5 0 0 1
      Transpose:      5 0 0 1
      Broadcast:      5 0 0 1
      Slice:          5 0 0 1
  pointwise: 0 boundary condition: 0 wrapper: 0 input: 0 output: 0
Node: blurz
  Symbolic region required: 
    blurz.x.min, blurz.x.max
    blurz.y.min, blurz.y.max
    blurz.z.min, blurz.z.max
    blurz.c.min, blurz.c.max
  Region computed: 
    blurz.x.min, blurz.x.max
    blurz.y.min, blurz.y.max
    blurz.z.min, blurz.z.max
    blurz.c.min, blurz.c.max
  Stage 0:
    x blurz.x.min blurz.x.max
    y blurz.y.min blurz.y.max
    z blurz.z.min blurz.z.max
    c blurz.c.min blurz.c.max
    Featurization for type UInt32
     Op histogram:
      Constant:   4
      Cast:       0
      Variable:   24
      Param:      0
      Add:        4
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
    Featurization for type Float
     Op histogram:
      Constant:   3
      Cast:       0
      Variable:   0
      Param:      0
      Add:        4
      Sub:        0
      Mod:        0
      Mul:        3
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   5
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      5 0 0 1
      Transpose:      5 0 0 1
      Broadcast:      5 0 0 1
      Slice:          5 0 0 1
  pointwise: 0 boundary condition: 0 wrapper: 0 input: 0 output: 0
Node: histogram
  Symbolic region required: 
    histogram.x.min, histogram.x.max
    histogram.y.min, histogram.y.max
    histogram.z.min, histogram.z.max
    histogram.c.min, histogram.c.max
  Region computed: 
    histogram.x.min, histogram.x.max
    histogram.y.min, histogram.y.max
    min(histogram.z.min, 0), max(histogram.z.max, 10)
    histogram.c.min, histogram.c.max
  Stage 0:
    x histogram.x.min histogram.x.max
    y histogram.y.min histogram.y.max
    z histogram.z.min histogram.z.max
    c histogram.c.min histogram.c.max
    Featurization for type UInt32
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   4
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
    Featurization for type Float
     Op histogram:
      Constant:   1
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 1
      Transpose:      0 0 0 1
      Broadcast:      0 0 0 1
      Slice:          0 0 0 1
  Stage 1:
    r4$x 0 7
    r4$y 0 7
    x histogram.x.min histogram.x.max
    y histogram.y.min histogram.y.max
    c histogram.c.min histogram.c.max
    Featurization for type Bool
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         1
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
    Featurization for type UInt32
     Op histogram:
      Constant:   9
      Cast:       0
      Variable:   15
      Param:      0
      Add:        8
      Sub:        0
      Mod:        0
      Mul:        4
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
    Featurization for type Float
     Op histogram:
      Constant:   9
      Cast:       0
      Variable:   2
      Param:      2
      Add:        3
      Sub:        0
      Mod:        0
      Mul:        2
      Div:        2
      Min:        2
      Max:        2
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     1
      ImageCall:  0
      FuncCall:   2
      SelfCall:   1
      ExternCall: 0
      Let:        1
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
  pointwise: 0 boundary condition: 0 wrapper: 0 input: 0 output: 0
Node: repeat_edge
  Symbolic region required: 
    repeat_edge._0.min, repeat_edge._0.max
    repeat_edge._1.min, repeat_edge._1.max
  Region computed: 
    repeat_edge._0.min, repeat_edge._0.max
    repeat_edge._1.min, repeat_edge._1.max
  Stage 0:
    _0 repeat_edge._0.min repeat_edge._0.max
    _1 repeat_edge._1.min repeat_edge._1.max
    Featurization for type UInt32
     Op histogram:
      Constant:   2
      Cast:       0
      Variable:   4
      Param:      6
      Add:        4
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        2
      Max:        2
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 2
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
    Featurization for type Float
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   1
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 1
      Transpose:      0 0 0 1
      Broadcast:      0 0 0 1
      Slice:          0 0 0 1
  pointwise: 0 boundary condition: 1 wrapper: 0 input: 0 output: 0
Node: lambda_0
  Symbolic region required: 
    lambda_0._0.min, lambda_0._0.max
    lambda_0._1.min, lambda_0._1.max
  Region computed: 
    lambda_0._0.min, lambda_0._0.max
    lambda_0._1.min, lambda_0._1.max
  Stage 0:
    _0 lambda_0._0.min lambda_0._0.max
    _1 lambda_0._1.min lambda_0._1.max
    Featurization for type UInt32
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   4
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
    Featurization for type Float
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   1
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      1 0 0 1
      Transpose:      1 0 0 1
      Broadcast:      1 0 0 1
      Slice:          1 0 0 1
  pointwise: 1 boundary condition: 0 wrapper: 1 input: 0 output: 0
Node: input_im
  Symbolic region required: 
    input_im._0.min, input_im._0.max
    input_im._1.min, input_im._1.max
  Region computed: 
    input_im._0.min, input_im._0.max
    input_im._1.min, input_im._1.max
  Stage 0:
    _0 input_im._0.min input_im._0.max
    _1 input_im._1.min input_im._1.max
    Featurization for type UInt32
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   4
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
    Featurization for type Float
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  1
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 1 1
      Transpose:      0 0 1 1
      Broadcast:      0 0 1 1
      Slice:          0 0 1 1
  pointwise: 1 boundary condition: 0 wrapper: 1 input: 1 output: 0
Edge: interpolated -> bilateral_grid
  Footprint: 
    Min 0: bilateral_grid.x.min
    Max 0: bilateral_grid.x.max
    Min 1: bilateral_grid.y.min
    Max 1: bilateral_grid.y.max
    Min 2: 0
    Max 2: 1
  Load Jacobians:
  2 x
    [ 1   0  ]
    [ 0   1  ]
    [ 0   0  ]

Edge: blury -> interpolated
  Footprint: 
    Min 0: (interpolated.x.min/8)
    Max 0: ((interpolated.x.max/8) + 1)
    Min 1: (interpolated.y.min/8)
    Max 1: ((interpolated.y.max/8) + 1)
    Min 2: 0
    Max 2: 11
    Min 3: interpolated.c.min
    Max 3: interpolated.c.max
  Load Jacobians:
  8 x
    [1/8  0   0  ]
    [ 0  1/8  0  ]
    [ _   _   0  ]
    [ 0   0   1  ]

Edge: input_im -> interpolated
  Footprint: 
    Min 0: interpolated.x.min
    Max 0: interpolated.x.max
    Min 1: interpolated.y.min
    Max 1: interpolated.y.max
  Load Jacobians:
    [ 1   0   0  ]
    [ 0   1   0  ]

Edge: blurx -> blury
  Footprint: 
    Min 0: blury.x.min
    Max 0: blury.x.max
    Min 1: (blury.y.min + -2)
    Max 1: (blury.y.max + 2)
    Min 2: blury.z.min
    Max 2: blury.z.max
    Min 3: blury.c.min
    Max 3: blury.c.max
  Load Jacobians:
  5 x
    [ 1   0   0   0  ]
    [ 0   1   0   0  ]
    [ 0   0   1   0  ]
    [ 0   0   0   1  ]

Edge: blurz -> blurx
  Footprint: 
    Min 0: (blurx.x.min + -2)
    Max 0: (blurx.x.max + 2)
    Min 1: blurx.y.min
    Max 1: blurx.y.max
    Min 2: blurx.z.min
    Max 2: blurx.z.max
    Min 3: blurx.c.min
    Max 3: blurx.c.max
  Load Jacobians:
  5 x
    [ 1   0   0   0  ]
    [ 0   1   0   0  ]
    [ 0   0   1   0  ]
    [ 0   0   0   1  ]

Edge: histogram -> blurz
  Footprint: 
    Min 0: blurz.x.min
    Max 0: blurz.x.max
    Min 1: blurz.y.min
    Max 1: blurz.y.max
    Min 2: (blurz.z.min + -2)
    Max 2: (blurz.z.max + 2)
    Min 3: blurz.c.min
    Max 3: blurz.c.max
  Load Jacobians:
  5 x
    [ 1   0   0   0  ]
    [ 0   1   0   0  ]
    [ 0   0   1   0  ]
    [ 0   0   0   1  ]

Edge: repeat_edge -> histogram.update(0)
  Footprint: 
    Min 0: (((histogram.x.min*8) + histogram.r4$x.min) + -4)
    Max 0: (((histogram.x.max*8) + histogram.r4$x.max) + -4)
    Min 1: (((histogram.y.min*8) + histogram.r4$y.min) + -4)
    Max 1: (((histogram.y.max*8) + histogram.r4$y.max) + -4)
  Load Jacobians:
  2 x
    [ 1   0   8   0   0  ]
    [ 0   1   0   8   0  ]

Edge: lambda_0 -> repeat_edge
  Footprint: 
    Min 0: max(min(repeat_edge._0.min, 1535), 0)
    Max 0: max(min(repeat_edge._0.max, 1535), 0)
    Min 1: max(min(repeat_edge._1.min, 2559), 0)
    Max 1: max(min(repeat_edge._1.max, 2559), 0)
  Load Jacobians:
    [ _   0  ]
    [ 0   _  ]

Edge: input_im -> lambda_0
  Footprint: 
    Min 0: lambda_0._0.min
    Max 0: lambda_0._0.max
    Min 1: lambda_0._1.min
    Max 1: lambda_0._1.max
  Load Jacobians:
    [ 1   0  ]
    [ 0   1  ]

Warning: Huge number of states generated (812784).

Pass 0 result:
State with cost 100000000000000007629769841091887003294964970946560.000000:
 gpu_none
realize: bilateral_grid [1536, 2560] with 1 stages
realize: interpolated [1536, 2560, 2] with 1 stages
realize: blurx [193, 325, 12, 2] with 1 stages
realize: blurz [197, 325, 12, 2] with 1 stages
realize: histogram [197, 325, 16, 2] with 2 stages
histogram 2 2 2 1 (3, 3) t gpu_block
 histogram 13c 21c 1c 1 (3, 3) t gpu_thread
  histogram 8c 8c 8c 2 (3, 3) t gpu_serial
   histogram 1c 1c 1c 1vc (3, 3) *
histogram 1c 1c 2 2 1 (4, 3) t gpu_block
 histogram 1c 1c 13c 21c 1 (4, 3) t gpu_thread
  histogram 8c 8c 8c 8c 2 (4, 3) t gpu_serial
   histogram 1c 1c 1c 1c 1vc (4, 3) *
    inlined: repeat_edge 2
    inlined: lambda_0 2
blurz 2 11 1 1 (3, 3) t gpu_block
 blurz 50c 8c 2 1 (3, 3) t gpu_thread
  blurz 2c 4c 6c 2 (3, 3) t gpu_serial
   blurz 1c 1c 1c 1vc (3, 3) *
blurx 97 21 12 1 (3, 3) t gpu_block
 blurx 1c 2c 1c 1 (3, 3) t gpu_thread
  blurx 2c 8c 1c 2 (3, 3) t gpu_serial
   blurx 1c 1c 1c 1vc (3, 3) *
interpolated 3 160 1 (2, 2) t gpu_block
 interpolated 64c 8c 1 (2, 2) t gpu_thread
  interpolated 8c 2c 2 (2, 2) t gpu_serial
   interpolated 1c 1c 1vc (2, 2) *
    inlined: blury 8
bilateral_grid 96 40 (0, 0) t gpu_block
 bilateral_grid 16c 64c (0, 0) t gpu_thread
  bilateral_grid 1c 1c (0, 0) t gpu_serial
   bilateral_grid 1vc 1c (0, 0) *
Warning: Huge number of states generated (338011).
Warning: Huge number of states generated (338011).
Warning: Huge number of states generated (589868).

Pass 1 result:
State with cost 100000000000000007629769841091887003294964970946560.000000:
 gpu_none
realize: bilateral_grid [1536, 2560] with 1 stages
realize: interpolated [1536, 2560, 2] with 1 stages
realize: blurx [193, 325, 12, 2] with 1 stages
realize: blurz [197, 325, 12, 2] with 1 stages
realize: histogram [197, 325, 16, 2] with 2 stages
realize: repeat_edge [1576, 2600] with 1 stages
repeat_edge 4 163 (0, 0) t gpu_block
 repeat_edge 50c 2c (0, 0) t gpu_thread
  repeat_edge 8c 8c (0, 0) t gpu_serial
   repeat_edge 1vc 1c (0, 0) *
    inlined: lambda_0 1
histogram 4 21 8 1 (3, 3) t gpu_block
 histogram 13c 2c 1c 1 (3, 3) t gpu_thread
  histogram 4c 8c 2c 2 (3, 3) t gpu_serial
   histogram 1c 1c 1c 1vc (3, 3) *
histogram 1c 1c 4 21 1 (4, 3) t gpu_block
 histogram 1c 1c 13c 2c 1 (4, 3) t gpu_thread
  histogram 8c 8c 4c 8c 2 (4, 3) t gpu_serial
   histogram 1c 1c 1c 1c 1vc (4, 3) *
blurz 99 82 12 1 (3, 3) t gpu_block
 blurz 2c 4c 1c 1 (3, 3) t gpu_thread
  blurz 1c 1c 1c 2 (3, 3) t gpu_serial
   blurz 1c 1c 1c 1vc (3, 3) *
blurx 25 2 2 1 (1, 1) t gpu_block
 blurx 1c 41c 1c 1 (1, 1) t gpu_thread
  blurx 8c 4c 6c 2 (1, 1) t gpu_serial
   blurx 1c 1vc 1c 1c (1, 1) *
interpolated 6 320 1 (2, 2) t gpu_block
 interpolated 32c 8c 1 (2, 2) t gpu_thread
  interpolated 8c 1c 2 (2, 2) t gpu_serial
   interpolated 1c 1c 1vc (2, 2) *
    inlined: blury 8
bilateral_grid 48 40 (0, 0) t gpu_block
 bilateral_grid 32c 32c (0, 0) t gpu_thread
  bilateral_grid 1c 2c (0, 0) t gpu_serial
   bilateral_grid 1vc 1c (0, 0) *
Warning: Huge number of states generated (424344).
Warning: Huge number of states generated (424344).
Warning: Huge number of states generated (579084).

Pass 2 result:
State with cost 100000000000000007629769841091887003294964970946560.000000:
 gpu_none
realize: bilateral_grid [1536, 2560] with 1 stages
realize: interpolated [1536, 2560, 2] with 1 stages
realize: blurx [193, 325, 12, 2] with 1 stages
realize: blurz [197, 325, 12, 2] with 1 stages
realize: histogram [197, 325, 16, 2] with 2 stages
realize: repeat_edge [1576, 2600] with 1 stages
repeat_edge 4 163 (0, 0) t gpu_block
 repeat_edge 50c 2c (0, 0) t gpu_thread
  repeat_edge 8c 8c (0, 0) t gpu_serial
   repeat_edge 1vc 1c (0, 0) *
    inlined: lambda_0 1
histogram 13 6 4 1 (3, 3) t gpu_block
 histogram 4c 28c 2c 1 (3, 3) t gpu_thread
  histogram 4c 2c 2c 2 (3, 3) t gpu_serial
   histogram 1c 1c 1c 1vc (3, 3) *
histogram 1c 1c 13 6 1 (4, 3) t gpu_block
 histogram 1c 1c 4c 28c 1 (4, 3) t gpu_thread
  histogram 8c 8c 4c 2c 2 (4, 3) t gpu_serial
   histogram 1c 1c 1c 1c 1vc (4, 3) *
blurz 50 6 2 2 (1, 1) t gpu_block
 blurz 1c 28c 3c 1c (1, 1) t gpu_thread
  blurz 4c 2c 2c 1c (1, 1) t gpu_serial
   blurz 1c 1vc 1c 1c (1, 1) *
blurx 7 3 2 1 (1, 1) t gpu_block
 blurx 4c 28c 3c 1 (1, 1) t gpu_thread
  blurx 8c 4c 2c 2 (1, 1) t gpu_serial
   blurx 1c 1vc 1c 1c (1, 1) *
interpolated 6 80 1 (2, 2) t gpu_block
 interpolated 32c 16c 1 (2, 2) t gpu_thread
  interpolated 8c 2c 2 (2, 2) t gpu_serial
   interpolated 1c 1c 1vc (2, 2) *
    inlined: blury 8
bilateral_grid 48 40 (0, 0) t gpu_block
 bilateral_grid 32c 32c (0, 0) t gpu_thread
  bilateral_grid 1c 2c (0, 0) t gpu_serial
   bilateral_grid 1vc 1c (0, 0) *
Warning: Huge number of states generated (424344).
Warning: Huge number of states generated (424344).
Warning: Huge number of states generated (590064).

Pass 3 result:
State with cost 100000000000000007629769841091887003294964970946560.000000:
 gpu_none
realize: bilateral_grid [1536, 2560] with 1 stages
realize: interpolated [1536, 2560, 2] with 1 stages
realize: blurx [193, 325, 12, 2] with 1 stages
realize: blurz [197, 325, 12, 2] with 1 stages
realize: histogram [197, 325, 16, 2] with 2 stages
realize: repeat_edge [1576, 2600] with 1 stages
repeat_edge 394 82 (1, 1) t gpu_block
 repeat_edge 1c 32c (1, 1) t gpu_thread
  repeat_edge 4c 1c (1, 1) t gpu_serial
   repeat_edge 1c 1vc (1, 1) *
    inlined: lambda_0 1
histogram 25 6 4 2 (1, 1) t gpu_block
 histogram 1c 14c 4c 1c (1, 1) t gpu_thread
  histogram 8c 4c 1c 1c (1, 1) t gpu_serial
   histogram 1c 1vc 1c 1c (1, 1) *
histogram 1c 1c 25 6 2 (3, 1) t gpu_block
 histogram 1c 1c 1c 14c 1c (3, 1) t gpu_thread
  histogram 8c 8c 8c 4c 1c (3, 1) t gpu_serial
   histogram 1c 1c 1c 1vc 1c (3, 1) *
blurz 13 3 2 1 (0, 0) t gpu_block
 blurz 16c 14c 1c 2 (0, 0) t gpu_thread
  blurz 1c 8c 6c 1c (0, 0) t gpu_serial
   blurz 1vc 1c 1c 1c (0, 0) *
blurx 13 3 2 1 (1, 1) t gpu_block
 blurx 2c 28c 6c 1 (1, 1) t gpu_thread
  blurx 8c 4c 1c 2 (1, 1) t gpu_serial
   blurx 1c 1vc 1c 1c (1, 1) *
interpolated 6 80 1 (2, 2) t gpu_block
 interpolated 32c 8c 2 (2, 2) t gpu_thread
  interpolated 8c 4c 1c (2, 2) t gpu_serial
   interpolated 1c 1c 1vc (2, 2) *
    inlined: blury 8
bilateral_grid 48 80 (0, 0) t gpu_block
 bilateral_grid 16c 32c (0, 0) t gpu_thread
  bilateral_grid 2c 1c (0, 0) t gpu_serial
   bilateral_grid 1vc 1c (0, 0) *
Warning: Huge number of states generated (345216).
Warning: Huge number of states generated (337208).
Warning: Huge number of states generated (862864).

Pass 4 result:
State with cost 100000000000000007629769841091887003294964970946560.000000:
 gpu_none
realize: bilateral_grid [1536, 2560] with 1 stages
realize: interpolated [1536, 2560, 2] with 1 stages
realize: blurx [193, 325, 12, 2] with 1 stages
realize: blurz [197, 325, 12, 2] with 1 stages
realize: histogram [197, 325, 16, 2] with 2 stages
realize: repeat_edge [1576, 2600] with 1 stages
repeat_edge 788 11 (1, 1) t gpu_block
 repeat_edge 2c 60c (1, 1) t gpu_thread
  repeat_edge 1c 4c (1, 1) t gpu_serial
   repeat_edge 1c 1vc (1, 1) *
    inlined: lambda_0 1
histogram 2 21 1 1 (3, 3) t gpu_block
 histogram 13c 2c 8 1 (3, 3) t gpu_thread
  histogram 8c 8c 2c 2 (3, 3) t gpu_serial
   histogram 1c 1c 1c 1vc (3, 3) *
histogram 1c 1c 2 21 1 (4, 3) t gpu_block
 histogram 1c 1c 13c 2c 1 (4, 3) t gpu_thread
  histogram 8c 8c 8c 8c 2 (4, 3) t gpu_serial
   histogram 1c 1c 1c 1c 1vc (4, 3) *
blurz 13 6 2 1 (1, 1) t gpu_block
 blurz 16c 28c 2c 1 (1, 1) t gpu_thread
  blurz 1c 2c 4c 2 (1, 1) t gpu_serial
   blurz 1c 1vc 1c 1c (1, 1) *
blurx 7 6 2 1 (1, 1) t gpu_block
 blurx 4c 14c 3c 1 (1, 1) t gpu_thread
  blurx 8c 4c 2c 2 (1, 1) t gpu_serial
   blurx 1c 1vc 1c 1c (1, 1) *
interpolated 6 80 1 (2, 2) t gpu_block
 interpolated 32c 32c 1 (2, 2) t gpu_thread
  interpolated 8c 1c 2 (2, 2) t gpu_serial
   interpolated 1c 1c 1vc (2, 2) *
    inlined: blury 8
bilateral_grid 48 80 (0, 0) t gpu_block
 bilateral_grid 16c 32c (0, 0) t gpu_thread
  bilateral_grid 2c 1c (0, 0) t gpu_serial
   bilateral_grid 1vc 1c (0, 0) *
Best cost: 100000000000000007629769841091887003294964970946560.000000
AutoSchedule.cpp:4446 ... AutoSchedule.cpp:4525 : 242984.011559 ms
Cost evaluated this many times: 308725
** Optimal schedule:
Schedule features for bilateral_grid
    num_realizations:                      1.000000
    num_productions:                       1.000000
    points_computed_per_realization:       3932160.000000
    points_computed_per_production:        3932160.000000
    points_computed_total:                 3932160.000000
    points_computed_minimum:               3932160.000000
    innermost_loop_extent:                 1.000000
    innermost_pure_loop_extent:            1.000000
    unrolled_loop_extent:                  1.000000
    inner_parallelism:                     3840.000000
    outer_parallelism:                     1.000000
    bytes_at_realization:                  15728640.000000
    bytes_at_production:                   15728640.000000
    bytes_at_root:                         15728640.000000
    innermost_bytes_at_realization:        6144.000000
    innermost_bytes_at_production:         6144.000000
    innermost_bytes_at_root:               6144.000000
    inlined_calls:                         0.000000
    unique_bytes_read_per_realization:     31457280.000000
    unique_lines_read_per_realization:     3932160.000000
    allocation_bytes_read_per_realization: 31457280.000000
    working_set:                           0.000000
    vector_size:                           1.000000
    native_vector_size:                    1.000000
    num_vectors:                           0.000000
    num_scalars:                           3932160.000000
    scalar_loads_per_vector:               2.000000
    vector_loads_per_vector:               0.000000
    scalar_loads_per_scalar:               2.000000
    bytes_at_task:                         4096.000000
    innermost_bytes_at_task:               64.000000
    unique_bytes_read_per_vector:          8.000000
    unique_lines_read_per_vector:          1.000000
    unique_bytes_read_per_task:            8192.000000
    unique_lines_read_per_task:            1024.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             67549120.000000
    working_set_at_realization:            67549120.000000
    working_set_at_root:                   67549120.000000
    num_warps:                             122880.000000
    block_occupancy:                       1.000000
    warp_lane_utilization:                 1.000000
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  1966080.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 983040.000000
Schedule features for interpolated
    num_realizations:                      1.000000
    num_productions:                       1.000000
    points_computed_per_realization:       7864320.000000
    points_computed_per_production:        7864320.000000
    points_computed_total:                 7864320.000000
    points_computed_minimum:               7864320.000000
    innermost_loop_extent:                 32.000000
    innermost_pure_loop_extent:            32.000000
    unrolled_loop_extent:                  1.000000
    inner_parallelism:                     480.000000
    outer_parallelism:                     1.000000
    bytes_at_realization:                  31457280.000000
    bytes_at_production:                   31457280.000000
    bytes_at_root:                         31457280.000000
    innermost_bytes_at_realization:        8.000000
    innermost_bytes_at_production:         8.000000
    innermost_bytes_at_root:               8.000000
    inlined_calls:                         0.000000
    unique_bytes_read_per_realization:     21750240.000000
    unique_lines_read_per_realization:     755260.000000
    allocation_bytes_read_per_realization: 21750240.000000
    working_set:                           0.000000
    vector_size:                           1.000000
    native_vector_size:                    1.000000
    num_vectors:                           0.000000
    num_scalars:                           7864320.000000
    scalar_loads_per_vector:               1.000000
    vector_loads_per_vector:               40.000000
    scalar_loads_per_scalar:               41.000000
    bytes_at_task:                         65536.000000
    innermost_bytes_at_task:               8.000000
    unique_bytes_read_per_vector:          9792.000000
    unique_lines_read_per_vector:          192.000000
    unique_bytes_read_per_task:            167328.000000
    unique_lines_read_per_task:            5516.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             67549120.000000
    working_set_at_realization:            67549120.000000
    working_set_at_root:                   67549120.000000
    num_warps:                             7680.000000
    block_occupancy:                       0.500000
    warp_lane_utilization:                 1.000000
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  7680.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 245760.000000
Schedule features for blury
    num_realizations:                      0.000000
    num_productions:                       0.000000
    points_computed_per_realization:       0.000000
    points_computed_per_production:        0.000000
    points_computed_total:                 0.000000
    points_computed_minimum:               1486872.000000
    innermost_loop_extent:                 0.000000
    innermost_pure_loop_extent:            32.000000
    unrolled_loop_extent:                  0.000000
    inner_parallelism:                     1.000000
    outer_parallelism:                     480.000000
    bytes_at_realization:                  0.000000
    bytes_at_production:                   0.000000
    bytes_at_root:                         5947488.000000
    innermost_bytes_at_realization:        0.000000
    innermost_bytes_at_production:         0.000000
    innermost_bytes_at_root:               48.000000
    inlined_calls:                         62914560.000000
    unique_bytes_read_per_realization:     0.000000
    unique_lines_read_per_realization:     0.000000
    allocation_bytes_read_per_realization: 0.000000
    working_set:                           0.000000
    vector_size:                           1.000000
    native_vector_size:                    1.000000
    num_vectors:                           0.000000
    num_scalars:                           62914560.000000
    scalar_loads_per_vector:               0.000000
    vector_loads_per_vector:               0.000000
    scalar_loads_per_scalar:               0.000000
    bytes_at_task:                         0.000000
    innermost_bytes_at_task:               0.000000
    unique_bytes_read_per_vector:          0.000000
    unique_lines_read_per_vector:          0.000000
    unique_bytes_read_per_task:            0.000000
    unique_lines_read_per_task:            0.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             0.000000
    working_set_at_realization:            0.000000
    working_set_at_root:                   67549120.000000
    num_warps:                             0.000000
    block_occupancy:                       0.000000
    warp_lane_utilization:                 0.000000
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  0.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 0.000000
Schedule features for blurx
    num_realizations:                      1.000000
    num_productions:                       1.000000
    points_computed_per_realization:       1505400.000000
    points_computed_per_production:        1564416.000000
    points_computed_total:                 1505400.000000
    points_computed_minimum:               1505400.000000
    innermost_loop_extent:                 32.000000
    innermost_pure_loop_extent:            32.000000
    unrolled_loop_extent:                  1.000000
    inner_parallelism:                     24444.000000
    outer_parallelism:                     1.000000
    bytes_at_realization:                  6021600.000000
    bytes_at_production:                   6021600.000000
    bytes_at_root:                         6021600.000000
    innermost_bytes_at_realization:        8.000000
    innermost_bytes_at_production:         8.000000
    innermost_bytes_at_root:               8.000000
    inlined_calls:                         0.000000
    unique_bytes_read_per_realization:     6146400.000000
    unique_lines_read_per_realization:     768300.000000
    allocation_bytes_read_per_realization: 6146400.000000
    working_set:                           0.000000
    vector_size:                           1.000000
    native_vector_size:                    1.000000
    num_vectors:                           0.000000
    num_scalars:                           1505400.000000
    scalar_loads_per_vector:               0.000000
    vector_loads_per_vector:               5.000000
    scalar_loads_per_scalar:               5.000000
    bytes_at_task:                         120.000000
    innermost_bytes_at_task:               8.000000
    unique_bytes_read_per_vector:          20.000000
    unique_lines_read_per_vector:          5.000000
    unique_bytes_read_per_task:            768.000000
    unique_lines_read_per_task:            96.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             67549120.000000
    working_set_at_realization:            67549120.000000
    working_set_at_root:                   67549120.000000
    num_warps:                             24444.000000
    block_occupancy:                       0.001953
    warp_lane_utilization:                 0.062500
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  244440.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 48888.000000
Schedule features for blurz
    num_realizations:                      1.000000
    num_productions:                       1.000000
    points_computed_per_realization:       1536600.000000
    points_computed_per_production:        1689600.000000
    points_computed_total:                 1536600.000000
    points_computed_minimum:               1536600.000000
    innermost_loop_extent:                 96.000000
    innermost_pure_loop_extent:            96.000000
    unrolled_loop_extent:                  1.000000
    inner_parallelism:                     22.000000
    outer_parallelism:                     1.000000
    bytes_at_realization:                  6146400.000000
    bytes_at_production:                   6146400.000000
    bytes_at_root:                         6146400.000000
    innermost_bytes_at_realization:        8.000000
    innermost_bytes_at_production:         8.000000
    innermost_bytes_at_root:               8.000000
    inlined_calls:                         0.000000
    unique_bytes_read_per_realization:     8195200.000000
    unique_lines_read_per_realization:     1024400.000000
    allocation_bytes_read_per_realization: 8195200.000000
    working_set:                           0.000000
    vector_size:                           1.000000
    native_vector_size:                    1.000000
    num_vectors:                           0.000000
    num_scalars:                           1536600.000000
    scalar_loads_per_vector:               0.000000
    vector_loads_per_vector:               5.000000
    scalar_loads_per_scalar:               5.000000
    bytes_at_task:                         272832.000000
    innermost_bytes_at_task:               8.000000
    unique_bytes_read_per_vector:          20.000000
    unique_lines_read_per_vector:          5.000000
    unique_bytes_read_per_task:            380160.000000
    unique_lines_read_per_task:            47520.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             67549120.000000
    working_set_at_realization:            67549120.000000
    working_set_at_root:                   67549120.000000
    num_warps:                             286.000000
    block_occupancy:                       0.390625
    warp_lane_utilization:                 0.961538
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  44000.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 352.000000
Schedule features for histogram
    num_realizations:                      1.000000
    num_productions:                       1.000000
    points_computed_per_realization:       2048800.000000
    points_computed_per_production:        2236416.000000
    points_computed_total:                 2048800.000000
    points_computed_minimum:               2048800.000000
    innermost_loop_extent:                 1024.000000
    innermost_pure_loop_extent:            1024.000000
    unrolled_loop_extent:                  1.000000
    inner_parallelism:                     8.000000
    outer_parallelism:                     1.000000
    bytes_at_realization:                  8195200.000000
    bytes_at_production:                   8195200.000000
    bytes_at_root:                         8195200.000000
    innermost_bytes_at_realization:        8.000000
    innermost_bytes_at_production:         8.000000
    innermost_bytes_at_root:               8.000000
    inlined_calls:                         0.000000
    unique_bytes_read_per_realization:     0.000000
    unique_lines_read_per_realization:     0.000000
    allocation_bytes_read_per_realization: 0.000000
    working_set:                           0.000000
    vector_size:                           1.000000
    native_vector_size:                    1.000000
    num_vectors:                           0.000000
    num_scalars:                           2048800.000000
    scalar_loads_per_vector:               0.000000
    vector_loads_per_vector:               0.000000
    scalar_loads_per_scalar:               0.000000
    bytes_at_task:                         1016064.000000
    innermost_bytes_at_task:               8.000000
    unique_bytes_read_per_vector:          0.000000
    unique_lines_read_per_vector:          0.000000
    unique_bytes_read_per_task:            0.000000
    unique_lines_read_per_task:            0.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             67549120.000000
    working_set_at_realization:            67549120.000000
    working_set_at_root:                   67549120.000000
    num_warps:                             72.000000
    block_occupancy:                       0.266602
    warp_lane_utilization:                 0.947917
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  0.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 136.000000
Schedule features for histogram.update(0)
    num_realizations:                      1.000000
    num_productions:                       1.000000
    points_computed_per_realization:       8195200.000000
    points_computed_per_production:        8945664.000000
    points_computed_total:                 8195200.000000
    points_computed_minimum:               8195200.000000
    innermost_loop_extent:                 8192.000000
    innermost_pure_loop_extent:            128.000000
    unrolled_loop_extent:                  1.000000
    inner_parallelism:                     4.000000
    outer_parallelism:                     1.000000
    bytes_at_realization:                  8195200.000000
    bytes_at_production:                   8195200.000000
    bytes_at_root:                         8195200.000000
    innermost_bytes_at_realization:        8.000000
    innermost_bytes_at_production:         8.000000
    innermost_bytes_at_root:               8.000000
    inlined_calls:                         0.000000
    unique_bytes_read_per_realization:     23923840.000000
    unique_lines_read_per_realization:     1026960.000000
    allocation_bytes_read_per_realization: 23923840.000000
    working_set:                           0.000000
    vector_size:                           1.000000
    native_vector_size:                    1.000000
    num_vectors:                           0.000000
    num_scalars:                           8195200.000000
    scalar_loads_per_vector:               2.000000
    vector_loads_per_vector:               1.000000
    scalar_loads_per_scalar:               3.000000
    bytes_at_task:                         2032128.000000
    innermost_bytes_at_task:               8.000000
    unique_bytes_read_per_vector:          4.000000
    unique_lines_read_per_vector:          1.000000
    unique_bytes_read_per_task:            3899456.000000
    unique_lines_read_per_task:            1276.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             67549120.000000
    working_set_at_realization:            67549120.000000
    working_set_at_root:                   67549120.000000
    num_warps:                             36.000000
    block_occupancy:                       0.266602
    warp_lane_utilization:                 0.947917
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  0.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 68.000000
Schedule features for repeat_edge
    num_realizations:                      0.000000
    num_productions:                       0.000000
    points_computed_per_realization:       0.000000
    points_computed_per_production:        0.000000
    points_computed_total:                 0.000000
    points_computed_minimum:               4097600.000000
    innermost_loop_extent:                 0.000000
    innermost_pure_loop_extent:            128.000000
    unrolled_loop_extent:                  0.000000
    inner_parallelism:                     1.000000
    outer_parallelism:                     4.000000
    bytes_at_realization:                  0.000000
    bytes_at_production:                   0.000000
    bytes_at_root:                         16390400.000000
    innermost_bytes_at_realization:        0.000000
    innermost_bytes_at_production:         0.000000
    innermost_bytes_at_root:               10400.000000
    inlined_calls:                         17891328.000000
    unique_bytes_read_per_realization:     0.000000
    unique_lines_read_per_realization:     0.000000
    allocation_bytes_read_per_realization: 0.000000
    working_set:                           0.000000
    vector_size:                           1.000000
    native_vector_size:                    1.000000
    num_vectors:                           0.000000
    num_scalars:                           16390400.000000
    scalar_loads_per_vector:               0.000000
    vector_loads_per_vector:               0.000000
    scalar_loads_per_scalar:               0.000000
    bytes_at_task:                         0.000000
    innermost_bytes_at_task:               0.000000
    unique_bytes_read_per_vector:          0.000000
    unique_lines_read_per_vector:          0.000000
    unique_bytes_read_per_task:            0.000000
    unique_lines_read_per_task:            0.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             0.000000
    working_set_at_realization:            0.000000
    working_set_at_root:                   67549120.000000
    num_warps:                             0.000000
    block_occupancy:                       0.000000
    warp_lane_utilization:                 0.000000
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  0.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 0.000000
Schedule features for lambda_0
    num_realizations:                      0.000000
    num_productions:                       0.000000
    points_computed_per_realization:       0.000000
    points_computed_per_production:        0.000000
    points_computed_total:                 0.000000
    points_computed_minimum:               3932160.000000
    innermost_loop_extent:                 0.000000
    innermost_pure_loop_extent:            128.000000
    unrolled_loop_extent:                  0.000000
    inner_parallelism:                     1.000000
    outer_parallelism:                     4.000000
    bytes_at_realization:                  0.000000
    bytes_at_production:                   0.000000
    bytes_at_root:                         15728640.000000
    innermost_bytes_at_realization:        0.000000
    innermost_bytes_at_production:         0.000000
    innermost_bytes_at_root:               10240.000000
    inlined_calls:                         17891328.000000
    unique_bytes_read_per_realization:     0.000000
    unique_lines_read_per_realization:     0.000000
    allocation_bytes_read_per_realization: 0.000000
    working_set:                           0.000000
    vector_size:                           1.000000
    native_vector_size:                    1.000000
    num_vectors:                           0.000000
    num_scalars:                           16390400.000000
    scalar_loads_per_vector:               0.000000
    vector_loads_per_vector:               0.000000
    scalar_loads_per_scalar:               0.000000
    bytes_at_task:                         0.000000
    innermost_bytes_at_task:               0.000000
    unique_bytes_read_per_vector:          0.000000
    unique_lines_read_per_vector:          0.000000
    unique_bytes_read_per_task:            0.000000
    unique_lines_read_per_task:            0.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             0.000000
    working_set_at_realization:            0.000000
    working_set_at_root:                   67549120.000000
    num_warps:                             0.000000
    block_occupancy:                       0.000000
    warp_lane_utilization:                 0.000000
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  0.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 0.000000
State with cost 100000000000000007629769841091887003294964970946560.000000:
 gpu_none
realize: bilateral_grid [1536, 2560] with 1 stages
realize: interpolated [1536, 2560, 2] with 1 stages
realize: blurx [193, 325, 12, 2] with 1 stages
realize: blurz [197, 325, 12, 2] with 1 stages
realize: histogram [197, 325, 16, 2] with 2 stages
histogram 2 2 2 1 (3, 3) t gpu_block
 histogram 13c 21c 1c 1 (3, 3) t gpu_thread
  histogram 8c 8c 8c 2 (3, 3) t gpu_serial
   histogram 1c 1c 1c 1vc (3, 3) *
histogram 1c 1c 2 2 1 (4, 3) t gpu_block
 histogram 1c 1c 13c 21c 1 (4, 3) t gpu_thread
  histogram 8c 8c 8c 8c 2 (4, 3) t gpu_serial
   histogram 1c 1c 1c 1c 1vc (4, 3) *
    inlined: repeat_edge 2
    inlined: lambda_0 2
blurz 2 11 1 1 (3, 3) t gpu_block
 blurz 50c 8c 2 1 (3, 3) t gpu_thread
  blurz 2c 4c 6c 2 (3, 3) t gpu_serial
   blurz 1c 1c 1c 1vc (3, 3) *
blurx 97 21 12 1 (3, 3) t gpu_block
 blurx 1c 2c 1c 1 (3, 3) t gpu_thread
  blurx 2c 8c 1c 2 (3, 3) t gpu_serial
   blurx 1c 1c 1c 1vc (3, 3) *
interpolated 3 160 1 (2, 2) t gpu_block
 interpolated 64c 8c 1 (2, 2) t gpu_thread
  interpolated 8c 2c 2 (2, 2) t gpu_serial
   interpolated 1c 1c 1vc (2, 2) *
    inlined: blury 8
bilateral_grid 96 40 (0, 0) t gpu_block
 bilateral_grid 16c 64c (0, 0) t gpu_thread
  bilateral_grid 1c 1c (0, 0) t gpu_serial
   bilateral_grid 1vc 1c (0, 0) *
Func bilateral_grid = get_pipeline().get_func(8);
Func interpolated = get_pipeline().get_func(7);
Func blury = get_pipeline().get_func(6);
Func blurx = get_pipeline().get_func(5);
Func blurz = get_pipeline().get_func(4);
Func histogram = get_pipeline().get_func(3);
Func repeat_edge = get_pipeline().get_func(2);
Func lambda_0 = get_pipeline().get_func(1);
Var c(interpolated.get_schedule().dims()[2].var), x(bilateral_grid.get_schedule().dims()[0].var), xi("xi"), xii("xii"), y(bilateral_grid.get_schedule().dims()[1].var), yi("yi"), yii("yii"), z(blurx.get_schedule().dims()[2].var), zi("zi");
RVar r4_x(histogram.update(0).get_schedule().dims()[0].var), r4_y(histogram.update(0).get_schedule().dims()[1].var);
bilateral_grid
    .split(x, x, xi, 16, TailStrategy::ShiftInwards)
    .split(y, y, yi, 64, TailStrategy::ShiftInwards)
    .compute_root()
    .reorder(xi, yi, x, y)
    .gpu_blocks(y)
    .gpu_blocks(x)
    .split(xi, xi_serial_outer, xi, 16)
    .gpu_threads(xi)
    .split(yi, yi_serial_outer, yi, 64)
    .gpu_threads(yi);
interpolated
    .split(x, x, xi, 512, TailStrategy::ShiftInwards)
    .split(y, y, yi, 16, TailStrategy::ShiftInwards)
    .split(xi, xi, xii, 8, TailStrategy::ShiftInwards)
    .split(yi, yi, yii, 2, TailStrategy::ShiftInwards)
    .compute_root()
    .reorder(c, xii, yii, xi, yi, x, y)
    .gpu_blocks(y)
    .gpu_blocks(x)
    .reorder_storage(c, x, y)
    .split(xi, xi_serial_outer, xi, 64)
    .gpu_threads(xi)
    .split(yi, yi_serial_outer, yi, 8)
    .gpu_threads(yi);
blurx
    .split(x, x, xi, 2, TailStrategy::ShiftInwards)
    .split(y, y, yi, 16, TailStrategy::ShiftInwards)
    .split(yi, yi, yii, 8, TailStrategy::ShiftInwards)
    .compute_root()
    .reorder(c, xi, yii, yi, x, y, z)
    .gpu_blocks(z)
    .gpu_blocks(y)
    .gpu_blocks(x)
    .reorder_storage(c, x, y, z)
    .split(yi, yi_serial_outer, yi, 2)
    .gpu_threads(yi);
blurz
    .split(x, x, xi, 99, TailStrategy::ShiftInwards)
    .split(y, y, yi, 30, TailStrategy::ShiftInwards)
    .split(xi, xi, xii, 2, TailStrategy::ShiftInwards)
    .split(yi, yi, yii, 4, TailStrategy::ShiftInwards)
    .split(z, z, zi, 6, TailStrategy::ShiftInwards)
    .compute_root()
    .reorder(c, xii, yii, zi, xi, yi, z, x, y)
    .gpu_blocks(y)
    .gpu_blocks(x)
    .reorder_storage(c, x, y, z)
    .split(xi, xi_serial_outer, xi, 50)
    .gpu_threads(xi)
    .split(yi, yi_serial_outer, yi, 8)
    .gpu_threads(yi)
    .split(z, z_serial_outer, z, 2)
    .gpu_threads(z);
histogram
    .split(x, x, xi, 99, TailStrategy::ShiftInwards)
    .split(y, y, yi, 163, TailStrategy::ShiftInwards)
    .split(z, z, zi, 8, TailStrategy::ShiftInwards)
    .split(xi, xi, xii, 8, TailStrategy::ShiftInwards)
    .split(yi, yi, yii, 8, TailStrategy::ShiftInwards)
    .compute_root()
    .reorder(c, xii, yii, zi, xi, yi, x, y, z)
    .gpu_blocks(z)
    .gpu_blocks(y)
    .gpu_blocks(x)
    .reorder_storage(c, x, y, z)
    .split(xi, xi_serial_outer, xi, 13)
    .gpu_threads(xi)
    .split(yi, yi_serial_outer, yi, 21)
    .gpu_threads(yi);
histogram.update(0)
    .split(x, x, xi, 99, TailStrategy::GuardWithIf)
    .split(y, y, yi, 163, TailStrategy::GuardWithIf)
    .split(xi, xi, xii, 8, TailStrategy::GuardWithIf)
    .split(yi, yi, yii, 8, TailStrategy::GuardWithIf)
    .reorder(r4_x, r4_y, c, xii, yii, xi, yi, x, y)
    .gpu_blocks(y)
    .gpu_blocks(x)
    .split(xi, xi_serial_outer, xi, 13)
    .gpu_threads(xi)
    .split(yi, yi_serial_outer, yi, 21)
    .gpu_threads(yi);
Creating initial loop nests...
Injecting realization of { bilateral_grid }
Injecting realization of { interpolated }
Inlining blury
Injecting realization of { blurx }
Injecting realization of { blurz }
Injecting realization of { histogram }
Inlining repeat_edge
Inlining lambda_0
Inlining input_im
Skipping injecting memoization...
Injecting tracing...
Adding checks for parameters
Computing bounds of each function's value
Adding checks for images
Failed to prove, but could not find a counter-example:
 (v0 != 0.000000f)
Original expression:
(r_sigma != 0.000000f)
Failed to prove, but could not find a counter-example:
 (v0 != 0.000000f)
Original expression:
(r_sigma != 0.000000f)
Failed to prove, but could not find a counter-example:
 (v0 != 0.000000f)
Original expression:
(r_sigma != 0.000000f)
Failed to prove, but could not find a counter-example:
 (v0 != 0.000000f)
Original expression:
(r_sigma != 0.000000f)
Failed to prove, but could not find a counter-example:
 (v0 != 0.000000f)
Original expression:
(r_sigma != 0.000000f)
Performing computation bounds inference...
Removing extern loops...
Performing sliding window optimization...
Simplifying correlated differences...
Performing allocation bounds inference...
Failed to prove, but could not find a counter-example:
 (v0 != 0.000000f)
Original expression:
(r_sigma != 0.000000f)
Failed to prove, but could not find a counter-example:
 (v0 != 0.000000f)
Original expression:
(r_sigma != 0.000000f)
Failed to prove, but could not find a counter-example:
 (v0 != 0.000000f)
Original expression:
(r_sigma != 0.000000f)
Failed to prove, but could not find a counter-example:
 (v0 != 0.000000f)
Original expression:
(r_sigma != 0.000000f)
Failed to prove, but could not find a counter-example:
 (v0 != 0.000000f)
Original expression:
(r_sigma != 0.000000f)
Removing code that depends on undef values...
Uniquifying variable names...
Simplifying...
Performing storage folding optimization...
Injecting debug_to_file calls...
Injecting prefetches...
Dynamically skipping stages...
Forking asynchronous producers...
Destructuring tuple-valued realizations...
Canonicalizing GPU var names...
Performing storage flattening...
Unpacking buffer arguments...
Skipping rewriting memoized allocations...
Selecting a GPU API for GPU loops...
Injecting host <-> dev buffer copies...
Selecting a GPU API for extern stages...
Simplifying...
Reduce prefetch dimension...
Lowering after reduce prefetch dimension:
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
assert((reinterpret(uint64, bilateral_grid.buffer) != (uint64)0), halide_error_buffer_argument_is_null("bilateral_grid"))
let bilateral_grid = _halide_buffer_get_host(bilateral_grid.buffer)
let bilateral_grid.type = _halide_buffer_get_type(bilateral_grid.buffer)
let bilateral_grid.dimensions = _halide_buffer_get_dimensions(bilateral_grid.buffer)
let bilateral_grid.min.0 = _halide_buffer_get_min(bilateral_grid.buffer, 0)
let bilateral_grid.extent.0 = _halide_buffer_get_extent(bilateral_grid.buffer, 0)
let bilateral_grid.stride.0 = _halide_buffer_get_stride(bilateral_grid.buffer, 0)
let bilateral_grid.min.1 = _halide_buffer_get_min(bilateral_grid.buffer, 1)
let bilateral_grid.extent.1 = _halide_buffer_get_extent(bilateral_grid.buffer, 1)
let bilateral_grid.stride.1 = _halide_buffer_get_stride(bilateral_grid.buffer, 1)
let input = _halide_buffer_get_host(input.buffer)
let input.type = _halide_buffer_get_type(input.buffer)
let input.dimensions = _halide_buffer_get_dimensions(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.extent.0 = _halide_buffer_get_extent(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.extent.1 = _halide_buffer_get_extent(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let blurx.s0.z.max.s = int32(max((1.000000f/r_sigma), 0.000000f))
let blurx.s0.z.min = int32(min((1.000000f/r_sigma), 0.000000f))
let histogram.s0.z.max = max((blurx.s0.z.max.s + 3), int32((max((1.000000f/r_sigma), 0.000000f) + 0.500000f)))
let histogram.s0.z.min = min((blurx.s0.z.min + -2), int32((min((1.000000f/r_sigma), 0.000000f) + 0.500000f)))
let bilateral_grid.extent.0.required.s = (min((((bilateral_grid.extent.0 + -1)/16)*16), (bilateral_grid.extent.0 + -16)) - min(bilateral_grid.extent.0, 16))
let bilateral_grid.extent.1.required.s = (min((((bilateral_grid.extent.1 + -1)/64)*64), (bilateral_grid.extent.1 + -64)) - min(bilateral_grid.extent.1, 64))
let input.extent.0.required = (max(max(min((((((bilateral_grid.extent.0 + bilateral_grid.min.0) + 23)/8)*8) + 4), (input.extent.0 + input.min.0)), (bilateral_grid.extent.0 + bilateral_grid.min.0)), (input.min.0 + 1)) - min(max((min(((bilateral_grid.min.0/8)*8), ((input.extent.0 + input.min.0) + 19)) + -20), input.min.0), ((min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0) + -512)))
let input.min.0.required = min(max((min(((bilateral_grid.min.0/8)*8), ((input.extent.0 + input.min.0) + 19)) + -20), input.min.0), ((min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0) + -512))
let input.extent.1.required = (max(max(min((((((bilateral_grid.extent.1 + bilateral_grid.min.1) + 23)/8)*8) + 4), (input.extent.1 + input.min.1)), (bilateral_grid.extent.1 + bilateral_grid.min.1)), (input.min.1 + 1)) - min(max((min(((bilateral_grid.min.1/8)*8), ((input.extent.1 + input.min.1) + 19)) + -20), input.min.1), ((min(bilateral_grid.extent.1, 16) + bilateral_grid.min.1) + -16)))
let input.min.1.required = min(max((min(((bilateral_grid.min.1/8)*8), ((input.extent.1 + input.min.1) + 19)) + -20), input.min.1), ((min(bilateral_grid.extent.1, 16) + bilateral_grid.min.1) + -16))
if (_halide_buffer_is_bounds_query(bilateral_grid.buffer)) {
  _halide_buffer_init(bilateral_grid.buffer, _halide_buffer_get_shape(bilateral_grid.buffer), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 2, 32, 2, make_struct((halide_dimension_t *), ((min(bilateral_grid.extent.0, 16) + bilateral_grid.min.0) + -16), (bilateral_grid.extent.0.required.s + 32), 1, 0, ((min(bilateral_grid.extent.1, 64) + bilateral_grid.min.1) + -64), (bilateral_grid.extent.1.required.s + 128), (bilateral_grid.extent.0.required.s + 32), 0), (uint64)0)
}
if (_halide_buffer_is_bounds_query(input.buffer)) {
  _halide_buffer_init(input.buffer, _halide_buffer_get_shape(input.buffer), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 2, 32, 2, make_struct((halide_dimension_t *), input.min.0.required, input.extent.0.required, 1, 0, input.min.1.required, input.extent.1.required, input.extent.0.required, 0), (uint64)0)
}
if (!(_halide_buffer_is_bounds_query(bilateral_grid.buffer) || _halide_buffer_is_bounds_query(input.buffer))) {
  assert((bilateral_grid.type == (uint32)73730), halide_error_bad_type("Output buffer bilateral_grid", bilateral_grid.type, (uint32)73730))
  assert((bilateral_grid.dimensions == 2), halide_error_bad_dimensions("Output buffer bilateral_grid", bilateral_grid.dimensions, 2))
  assert((input.type == (uint32)73730), halide_error_bad_type("Input buffer input", input.type, (uint32)73730))
  assert((input.dimensions == 2), halide_error_bad_dimensions("Input buffer input", input.dimensions, 2))
  assert(((16 <= bilateral_grid.extent.0) && ((((min(bilateral_grid.extent.0, 16) + bilateral_grid.min.0) + bilateral_grid.extent.0.required.s) + 16) <= (bilateral_grid.extent.0 + bilateral_grid.min.0))), halide_error_access_out_of_bounds("Output buffer bilateral_grid", 0, ((min(bilateral_grid.extent.0, 16) + bilateral_grid.min.0) + -16), (((min(bilateral_grid.extent.0, 16) + bilateral_grid.min.0) + bilateral_grid.extent.0.required.s) + 15), bilateral_grid.min.0, ((bilateral_grid.extent.0 + bilateral_grid.min.0) + -1)))
  assert(((64 <= bilateral_grid.extent.1) && ((((min(bilateral_grid.extent.1, 64) + bilateral_grid.min.1) + bilateral_grid.extent.1.required.s) + 64) <= (bilateral_grid.extent.1 + bilateral_grid.min.1))), halide_error_access_out_of_bounds("Output buffer bilateral_grid", 1, ((min(bilateral_grid.extent.1, 64) + bilateral_grid.min.1) + -64), (((min(bilateral_grid.extent.1, 64) + bilateral_grid.min.1) + bilateral_grid.extent.1.required.s) + 63), bilateral_grid.min.1, ((bilateral_grid.extent.1 + bilateral_grid.min.1) + -1)))
  assert(((input.min.0 <= input.min.0.required) && ((input.extent.0.required + input.min.0.required) <= (input.extent.0 + input.min.0))), halide_error_access_out_of_bounds("Input buffer input", 0, input.min.0.required, ((input.extent.0.required + input.min.0.required) + -1), input.min.0, ((input.extent.0 + input.min.0) + -1)))
  assert((0 <= input.extent.0), halide_error_buffer_extents_negative("Input buffer input", 0, input.extent.0))
  assert(((input.min.1 <= input.min.1.required) && ((input.extent.1.required + input.min.1.required) <= (input.extent.1 + input.min.1))), halide_error_access_out_of_bounds("Input buffer input", 1, input.min.1.required, ((input.extent.1.required + input.min.1.required) + -1), input.min.1, ((input.extent.1 + input.min.1) + -1)))
  assert((0 <= input.extent.1), halide_error_buffer_extents_negative("Input buffer input", 1, input.extent.1))
  assert((bilateral_grid.stride.0 == 1), halide_error_constraint_violated("bilateral_grid.stride.0", bilateral_grid.stride.0, "1", 1))
  assert((input.stride.0 == 1), halide_error_constraint_violated("input.stride.0", input.stride.0, "1", 1))
  let bilateral_grid.total_extent.1 = (int64(bilateral_grid.extent.1)*int64(bilateral_grid.extent.0))
  let input.total_extent.1 = (int64(input.extent.1)*int64(input.extent.0))
  assert((abs(int64(bilateral_grid.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("bilateral_grid", abs(int64(bilateral_grid.extent.0)), (uint64)2147483647))
  assert((abs((int64(bilateral_grid.extent.1)*int64(bilateral_grid.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("bilateral_grid", abs((int64(bilateral_grid.extent.1)*int64(bilateral_grid.stride.1))), (uint64)2147483647))
  assert((bilateral_grid.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("bilateral_grid", bilateral_grid.total_extent.1, (int64)2147483647))
  assert((abs(int64(input.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("input", abs(int64(input.extent.0)), (uint64)2147483647))
  assert((abs((int64(input.extent.1)*int64(input.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("input", abs((int64(input.extent.1)*int64(input.stride.1))), (uint64)2147483647))
  assert((input.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("input", input.total_extent.1, (int64)2147483647))
  let histogram.z.min_realized = min(min(min(min(min(min(min((min((blurx.s0.z.max.s + -4), blurx.s0.z.min) + -2), int32((min(quiet_div(1.000000f, r_sigma), 0.000000f) + 0.500000f))), (blurx.s0.z.max.s + -4)), blurx.s0.z.min), (min((blurx.s0.z.max.s + -4), blurx.s0.z.min) + 1)), (histogram.s0.z.max + -7)), histogram.s0.z.min), int32((min(quiet_div(1.000000f, r_sigma), 0.000000f) + 0.500000f)))
  let histogram.z.extent_realized.s = (max(max(max(min((((min((((blurx.s0.z.max.s - blurx.s0.z.min) + 1)/6), (((((blurx.s0.z.max.s - blurx.s0.z.min) + 1)/12)*2) + 1))*6) + blurx.s0.z.min) + 4), blurx.s0.z.max.s), int32((max(quiet_div(1.000000f, r_sigma), 0.000000f) + 0.500000f))), (min((((min((((blurx.s0.z.max.s - blurx.s0.z.min) + 1)/6), (((((blurx.s0.z.max.s - blurx.s0.z.min) + 1)/12)*2) + 1))*6) + blurx.s0.z.min) + 4), blurx.s0.z.max.s) + 3)), min((((((histogram.s0.z.max - histogram.s0.z.min)/8)*8) + histogram.s0.z.min) + 7), histogram.s0.z.max)) - histogram.z.min_realized)
  let histogram.y.min_realized.s = min((min(bilateral_grid.extent.1, 193) + 1064), bilateral_grid.extent.1)
  let histogram.y.extent_realized.s = ((((bilateral_grid.extent.1 + bilateral_grid.min.1) + 23)/8) - (((histogram.y.min_realized.s + bilateral_grid.min.1) + -1273)/8))
  let histogram.x.extent_realized.s = ((((bilateral_grid.extent.0 + bilateral_grid.min.0) + 23)/8) - (((min(bilateral_grid.extent.0, 745) + bilateral_grid.min.0) + -761)/8))
  let histogram.stride.2 = (((histogram.x.extent_realized.s*2) + 2)*(histogram.y.extent_realized.s + 1))
  allocate histogram[float32 * (histogram.x.extent_realized.s + 1) * (histogram.y.extent_realized.s + 1) * (histogram.z.extent_realized.s + 1) * 2] if (uint1)0
  let histogram.buffer = (let t87 = make_struct((halide_dimension_t *), (((min(bilateral_grid.extent.0, 745) + bilateral_grid.min.0) + -761)/8), (histogram.x.extent_realized.s + 1), 2, 0, (((bilateral_grid.min.1 + histogram.y.min_realized.s) + -1273)/8), (histogram.y.extent_realized.s + 1), ((histogram.x.extent_realized.s*2) + 2), 0, histogram.z.min_realized, (histogram.z.extent_realized.s + 1), histogram.stride.2, 0, 0, 2, 1, 0) in _halide_buffer_init(alloca(size_of_halide_buffer_t()), t87, reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 2, 32, 4, t87, (uint64)0))
  register_destructor("halide_device_free_as_destructor", histogram.buffer)
  produce histogram {
    if (likely((uint1)1)) {
      let histogram.s0.x.x.loop_extent.s = ((((bilateral_grid.extent.0 + bilateral_grid.min.0) + 23)/8) - (bilateral_grid.min.0/8))
      let histogram.s0.y.y.loop_extent.s = ((((bilateral_grid.extent.1 + bilateral_grid.min.1) + 23)/8) - (bilateral_grid.min.1/8))
      let histogram.s1.y.loop_extent.s = ((((bilateral_grid.extent.1 + bilateral_grid.min.1) + 31)/8) - (bilateral_grid.min.1/8))
      let histogram.s1.x.loop_extent.s = ((((bilateral_grid.extent.0 + bilateral_grid.min.0) + 31)/8) - (bilateral_grid.min.0/8))
      let histogram.s1.x.x.loop_extent.s = histogram.s0.x.x.loop_extent.s
      let histogram.s1.y.y.loop_extent.s = histogram.s0.y.y.loop_extent.s
      let halide_device_malloc_result$3 = halide_device_malloc(histogram.buffer, halide_cuda_device_interface())
      assert((halide_device_malloc_result$3 == 0), halide_device_malloc_result$3)
      gpu_block<CUDA> (histogram.s0.z.z.__block_id_z, 0, (((histogram.s0.z.max - histogram.s0.z.min)/8) + 1)) {
        let histogram.s0.z.zi.base = min(likely_if_innermost(((histogram.s0.z.z.__block_id_z*8) + histogram.s0.z.min)), (histogram.s0.z.max + -7))
        gpu_block<CUDA> (histogram.s0.y.y.__block_id_y, 0, ((histogram.s1.y.y.loop_extent.s + 165)/163)) {
          let histogram.s0.y.yi.base = min(likely_if_innermost((((bilateral_grid.min.1/8) + (histogram.s0.y.y.__block_id_y*163)) + -2)), (((bilateral_grid.extent.1 + bilateral_grid.min.1) + -1273)/8))
          gpu_block<CUDA> (histogram.s0.x.x.__block_id_x, 0, ((histogram.s1.x.x.loop_extent.s + 101)/99)) {
            let histogram.s0.x.xi.base = min(likely_if_innermost((((bilateral_grid.min.0/8) + (histogram.s0.x.x.__block_id_x*99)) + -2)), (((bilateral_grid.extent.0 + bilateral_grid.min.0) + -761)/8))
            gpu_thread<CUDA> (histogram.s0.y.yi.yi.yi.__thread_id_y, 0, 21) {
              gpu_thread<CUDA> (histogram.s0.x.xi.xi.xi.__thread_id_x, 0, 13) {
                for (histogram.s0.z.zi, 0, 8) {
                  for (histogram.s0.y.yi.yii, 0, 8) {
                    for (histogram.s0.x.xi.xii, 0, 8) {
                      for (histogram.s0.c, 0, 2) {
                        histogram[(((((histogram.s0.z.zi + histogram.s0.z.zi.base) - histogram.z.min_realized)*histogram.stride.2) + (((((min(likely_if_innermost((histogram.s0.x.xi.xi.xi.__thread_id_x*8)), 91) + histogram.s0.x.xi.xii) + histogram.s0.x.xi.base) - (((min(bilateral_grid.extent.0, 745) + bilateral_grid.min.0) + -761)/8))*2) + ((((min(likely_if_innermost((histogram.s0.y.yi.yi.yi.__thread_id_y*8)), 155) + histogram.s0.y.yi.yii) + histogram.s0.y.yi.base) - (((bilateral_grid.min.1 + histogram.y.min_realized.s) + -1273)/8))*((histogram.x.extent_realized.s*2) + 2)))) + histogram.s0.c)] = 0.000000f
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      _halide_buffer_set_device_dirty(histogram.buffer, (uint1)1)
      let halide_copy_to_device_result$1 = halide_copy_to_device(input.buffer, halide_cuda_device_interface())
      assert((halide_copy_to_device_result$1 == 0), halide_copy_to_device_result$1)
      gpu_block<CUDA> (histogram.s1.y.y.__block_id_y, 0, ((histogram.s1.y.y.loop_extent.s + 165)/163)) {
        gpu_block<CUDA> (histogram.s1.x.x.__block_id_x, 0, ((histogram.s1.x.x.loop_extent.s + 101)/99)) {
          gpu_thread<CUDA> (histogram.s1.y.yi.yi.yi.__thread_id_y, 0, 21) {
            gpu_thread<CUDA> (histogram.s1.x.xi.xi.xi.__thread_id_x, 0, 13) {
              for (histogram.s1.y.yi.yii, 0, 8) {
                if (likely((((histogram.s1.y.yi.yi.yi.__thread_id_y*8) + histogram.s1.y.yi.yii) < 163))) {
                  let histogram.s1.y.rebased = ((histogram.s1.y.y.__block_id_y*163) + ((histogram.s1.y.yi.yi.yi.__thread_id_y*8) + histogram.s1.y.yi.yii))
                  if (likely((histogram.s1.y.rebased < (histogram.s1.y.loop_extent.s + 2)))) {
                    for (histogram.s1.x.xi.xii, 0, 8) {
                      if (likely((((histogram.s1.x.xi.xi.xi.__thread_id_x*8) + histogram.s1.x.xi.xii) < 99))) {
                        let histogram.s1.x.rebased = ((histogram.s1.x.x.__block_id_x*99) + ((histogram.s1.x.xi.xi.xi.__thread_id_x*8) + histogram.s1.x.xi.xii))
                        if (likely((histogram.s1.x.rebased < (histogram.s1.x.loop_extent.s + 2)))) {
                          for (histogram.s1.c, 0, 2) {
                            for (histogram.s1.r4$y, 0, 8) {
                              for (histogram.s1.r4$x, 0, 8) {
                                histogram[((((((int32(((max(min(input[((max(min(likely((((((bilateral_grid.min.0/8) + histogram.s1.x.rebased)*8) + histogram.s1.r4$x) + -20)), ((input.extent.0 + input.min.0) + -1)), input.min.0) + (max(min(likely((((((bilateral_grid.min.1/8) + histogram.s1.y.rebased)*8) + histogram.s1.r4$y) + -20)), ((input.extent.1 + input.min.1) + -1)), input.min.1)*input.stride.1)) - ((input.min.1*input.stride.1) + input.min.0))], 1.000000f), 0.000000f)*(1.000000f/r_sigma)) + 0.500000f)) - histogram.z.min_realized)*histogram.stride.2) + (((((bilateral_grid.min.0/8) + histogram.s1.x.rebased) - (((min(bilateral_grid.extent.0, 745) + bilateral_grid.min.0) + -761)/8))*2) + ((((bilateral_grid.min.1/8) + histogram.s1.y.rebased) - (((bilateral_grid.min.1 + histogram.y.min_realized.s) + -1273)/8))*((histogram.x.extent_realized.s*2) + 2)))) + histogram.s1.c) - (histogram.x.extent_realized.s*4)) + -8)] = (let t32.s = input[((max(min(likely((((((bilateral_grid.min.0/8) + histogram.s1.x.rebased)*8) + histogram.s1.r4$x) + -20)), ((input.extent.0 + input.min.0) + -1)), input.min.0) + (max(min(likely((((((bilateral_grid.min.1/8) + histogram.s1.y.rebased)*8) + histogram.s1.r4$y) + -20)), ((input.extent.1 + input.min.1) + -1)), input.min.1)*input.stride.1)) - ((input.min.1*input.stride.1) + input.min.0))] in (histogram[((((((int32(((max(min(t32.s, 1.000000f), 0.000000f)*(1.000000f/r_sigma)) + 0.500000f)) - histogram.z.min_realized)*histogram.stride.2) + (((((bilateral_grid.min.0/8) + histogram.s1.x.rebased) - (((min(bilateral_grid.extent.0, 745) + bilateral_grid.min.0) + -761)/8))*2) + ((((bilateral_grid.min.1/8) + histogram.s1.y.rebased) - (((bilateral_grid.min.1 + histogram.y.min_realized.s) + -1273)/8))*((histogram.x.extent_realized.s*2) + 2)))) + histogram.s1.c) - (histogram.x.extent_realized.s*4)) + -8)] + select((histogram.s1.c == 0), max(min(t32.s, 1.000000f), 0.000000f), 1.000000f)))
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  let blurz.z.min_realized = min((blurx.s0.z.max.s + -4), blurx.s0.z.min)
  let blurz.y.min_realized.s = min((min(bilateral_grid.extent.1, 81) + 112), bilateral_grid.extent.1)
  let blurz.y.extent_realized.s = (min((((bilateral_grid.extent.1 + bilateral_grid.min.1) + 23)/8), ((max((((((((bilateral_grid.extent.1 + bilateral_grid.min.1) + 23)/8) - (bilateral_grid.min.1/8)) + 2)/16)*16), ((((((((bilateral_grid.extent.1 + bilateral_grid.min.1) + 23)/8) - (bilateral_grid.min.1/8)) + 2)/30)*30) + 14)) + (bilateral_grid.min.1/8)) + 13)) - (((blurz.y.min_realized.s + bilateral_grid.min.1) + -209)/8))
  let blurz.x.extent_realized.s = (max(max(max(max(min((((bilateral_grid.extent.0 + bilateral_grid.min.0) + -1)/8), ((bilateral_grid.min.0/8) + ((((((bilateral_grid.extent.0 + bilateral_grid.min.0) + 7)/8) - (bilateral_grid.min.0/8))/2)*2))), (min((((bilateral_grid.extent.0 + bilateral_grid.min.0) + 7)/8), (((bilateral_grid.min.0/8) + ((((((bilateral_grid.extent.0 + bilateral_grid.min.0) + 7)/8) - (bilateral_grid.min.0/8))/2)*2)) + 1)) + -2)), min((((bilateral_grid.extent.0 + bilateral_grid.min.0) + 7)/8), (((bilateral_grid.min.0/8) + ((((((bilateral_grid.extent.0 + bilateral_grid.min.0) + 7)/8) - (bilateral_grid.min.0/8))/2)*2)) + 1))), (min((((bilateral_grid.extent.0 + bilateral_grid.min.0) + 7)/8), (((bilateral_grid.min.0/8) + ((((((bilateral_grid.extent.0 + bilateral_grid.min.0) + 7)/8) - (bilateral_grid.min.0/8))/2)*2)) + 1)) + 2)), min((((bilateral_grid.extent.0 + bilateral_grid.min.0) + 23)/8), (((bilateral_grid.min.0/8) + (((((((bilateral_grid.extent.0 + bilateral_grid.min.0) + 23)/8) - (bilateral_grid.min.0/8)) + 2)/99)*99)) + 96))) - (((min(bilateral_grid.extent.0, 745) + bilateral_grid.min.0) + -761)/8))
  let blurz.stride.2 = (((blurz.x.extent_realized.s*2) + 2)*(blurz.y.extent_realized.s + 1))
  allocate blurz[float32 * (blurz.x.extent_realized.s + 1) * (blurz.y.extent_realized.s + 1) * (max((blurx.s0.z.max.s - blurx.s0.z.min), 4) + 2) * 2] if (uint1)0
  let blurz.buffer = (let t86 = make_struct((halide_dimension_t *), (((min(bilateral_grid.extent.0, 745) + bilateral_grid.min.0) + -761)/8), (blurz.x.extent_realized.s + 1), 2, 0, (((bilateral_grid.min.1 + blurz.y.min_realized.s) + -209)/8), (blurz.y.extent_realized.s + 1), ((blurz.x.extent_realized.s*2) + 2), 0, blurz.z.min_realized, (max((blurx.s0.z.max.s - blurx.s0.z.min), 4) + 2), blurz.stride.2, 0, 0, 2, 1, 0) in _halide_buffer_init(alloca(size_of_halide_buffer_t()), t86, reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 2, 32, 4, t86, (uint64)0))
  register_destructor("halide_device_free_as_destructor", blurz.buffer)
  let blurz.s0.x.x.loop_extent.s = ((((bilateral_grid.extent.0 + bilateral_grid.min.0) + 23)/8) - (bilateral_grid.min.0/8))
  let blurz.s0.y.y.loop_extent.s = ((((bilateral_grid.extent.1 + bilateral_grid.min.1) + 23)/8) - (bilateral_grid.min.1/8))
  produce blurz {
    consume histogram {
      let halide_device_malloc_result$2 = halide_device_malloc(blurz.buffer, halide_cuda_device_interface())
      assert((halide_device_malloc_result$2 == 0), halide_device_malloc_result$2)
      let halide_device_malloc_result$4 = halide_device_malloc(histogram.buffer, halide_cuda_device_interface())
      assert((halide_device_malloc_result$4 == 0), halide_device_malloc_result$4)
      gpu_block<CUDA> (blurz.s0.y.y.__block_id_y, 0, ((blurz.s0.y.y.loop_extent.s + 32)/30)) {
        let blurz.s0.y.yi.base = min(likely_if_innermost((((bilateral_grid.min.1/8) + (blurz.s0.y.y.__block_id_y*30)) + -2)), (((bilateral_grid.extent.1 + bilateral_grid.min.1) + -209)/8))
        gpu_block<CUDA> (blurz.s0.x.x.__block_id_x, 0, ((blurz.s0.x.x.loop_extent.s + 101)/99)) {
          let blurz.s0.x.xi.base = min(likely_if_innermost((((bilateral_grid.min.0/8) + (blurz.s0.x.x.__block_id_x*99)) + -2)), (((bilateral_grid.extent.0 + bilateral_grid.min.0) + -761)/8))
          for (blurz.s0.z.z.z_serial_outer, 0, (((blurx.s0.z.max.s - blurx.s0.z.min) + 13)/12)) {
            gpu_thread<CUDA> (blurz.s0.z.z.z.__thread_id_z, 0, 2) {
              if (likely((((blurz.s0.z.z.z_serial_outer*2) + blurz.s0.z.z.z.__thread_id_z) < (((blurx.s0.z.max.s - blurx.s0.z.min) + 7)/6)))) {
                let blurz.s0.z.zi.base = min(likely_if_innermost(((((blurz.s0.z.z.z_serial_outer*2) + blurz.s0.z.z.z.__thread_id_z)*6) + blurx.s0.z.min)), (blurx.s0.z.max.s + -4))
                gpu_thread<CUDA> (blurz.s0.y.yi.yi.yi.__thread_id_y, 0, 8) {
                  if (likely((uint1)1)) {
                    gpu_thread<CUDA> (blurz.s0.x.xi.xi.xi.__thread_id_x, 0, 50) {
                      for (blurz.s0.z.zi, 0, 6) {
                        for (blurz.s0.y.yi.yii, 0, 4) {
                          for (blurz.s0.x.xi.xii, 0, 2) {
                            for (blurz.s0.c, 0, 2) {
                              blurz[(((((blurz.s0.z.zi + blurz.s0.z.zi.base) - blurz.z.min_realized)*blurz.stride.2) + (((((min(likely_if_innermost((blurz.s0.x.xi.xi.xi.__thread_id_x*2)), 97) + blurz.s0.x.xi.xii) + blurz.s0.x.xi.base) - (((min(bilateral_grid.extent.0, 745) + bilateral_grid.min.0) + -761)/8))*2) + ((((min(likely_if_innermost((blurz.s0.y.yi.yi.yi.__thread_id_y*4)), 26) + blurz.s0.y.yi.yii) + blurz.s0.y.yi.base) - (((bilateral_grid.min.1 + blurz.y.min_realized.s) + -209)/8))*((blurz.x.extent_realized.s*2) + 2)))) + blurz.s0.c)] = (histogram[((histogram.stride.2*2) + (((((blurz.s0.z.zi + blurz.s0.z.zi.base) - histogram.z.min_realized)*histogram.stride.2) + (((((min(likely_if_innermost((blurz.s0.x.xi.xi.xi.__thread_id_x*2)), 97) + blurz.s0.x.xi.xii) + blurz.s0.x.xi.base) - (((min(bilateral_grid.extent.0, 745) + bilateral_grid.min.0) + -761)/8))*2) + ((((min(likely_if_innermost((blurz.s0.y.yi.yi.yi.__thread_id_y*4)), 26) + blurz.s0.y.yi.yii) + blurz.s0.y.yi.base) - (((bilateral_grid.min.1 + histogram.y.min_realized.s) + -1273)/8))*((histogram.x.extent_realized.s*2) + 2)))) + blurz.s0.c))] + ((histogram[((((((blurz.s0.z.zi + blurz.s0.z.zi.base) - histogram.z.min_realized)*histogram.stride.2) + (((((min(likely_if_innermost((blurz.s0.x.xi.xi.xi.__thread_id_x*2)), 97) + blurz.s0.x.xi.xii) + blurz.s0.x.xi.base) - (((min(bilateral_grid.extent.0, 745) + bilateral_grid.min.0) + -761)/8))*2) + ((((min(likely_if_innermost((blurz.s0.y.yi.yi.yi.__thread_id_y*4)), 26) + blurz.s0.y.yi.yii) + blurz.s0.y.yi.base) - (((bilateral_grid.min.1 + histogram.y.min_realized.s) + -1273)/8))*((histogram.x.extent_realized.s*2) + 2)))) + blurz.s0.c) + histogram.stride.2)]*4.000000f) + ((histogram[(((((blurz.s0.z.zi + blurz.s0.z.zi.base) - histogram.z.min_realized)*histogram.stride.2) + (((((min(likely_if_innermost((blurz.s0.x.xi.xi.xi.__thread_id_x*2)), 97) + blurz.s0.x.xi.xii) + blurz.s0.x.xi.base) - (((min(bilateral_grid.extent.0, 745) + bilateral_grid.min.0) + -761)/8))*2) + ((((min(likely_if_innermost((blurz.s0.y.yi.yi.yi.__thread_id_y*4)), 26) + blurz.s0.y.yi.yii) + blurz.s0.y.yi.base) - (((bilateral_grid.min.1 + histogram.y.min_realized.s) + -1273)/8))*((histogram.x.extent_realized.s*2) + 2)))) + blurz.s0.c)]*6.000000f) + (histogram[((((((blurz.s0.z.zi + blurz.s0.z.zi.base) - histogram.z.min_realized)*histogram.stride.2) + (((((min(likely_if_innermost((blurz.s0.x.xi.xi.xi.__thread_id_x*2)), 97) + blurz.s0.x.xi.xii) + blurz.s0.x.xi.base) - (((min(bilateral_grid.extent.0, 745) + bilateral_grid.min.0) + -761)/8))*2) + ((((min(likely_if_innermost((blurz.s0.y.yi.yi.yi.__thread_id_y*4)), 26) + blurz.s0.y.yi.yii) + blurz.s0.y.yi.base) - (((bilateral_grid.min.1 + histogram.y.min_realized.s) + -1273)/8))*((histogram.x.extent_realized.s*2) + 2)))) + blurz.s0.c) - (histogram.stride.2*2))] + (histogram[((((((blurz.s0.z.zi + blurz.s0.z.zi.base) - histogram.z.min_realized)*histogram.stride.2) + (((((min(likely_if_innermost((blurz.s0.x.xi.xi.xi.__thread_id_x*2)), 97) + blurz.s0.x.xi.xii) + blurz.s0.x.xi.base) - (((min(bilateral_grid.extent.0, 745) + bilateral_grid.min.0) + -761)/8))*2) + ((((min(likely_if_innermost((blurz.s0.y.yi.yi.yi.__thread_id_y*4)), 26) + blurz.s0.y.yi.yii) + blurz.s0.y.yi.base) - (((bilateral_grid.min.1 + histogram.y.min_realized.s) + -1273)/8))*((histogram.x.extent_realized.s*2) + 2)))) + blurz.s0.c) - histogram.stride.2)]*4.000000f)))))
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      let halide_device_free_result$3 = halide_device_free(histogram.buffer)
      assert((halide_device_free_result$3 == 0), halide_device_free_result$3)
      _halide_buffer_set_device_dirty(blurz.buffer, (uint1)1)
    }
  }
  let blurx.z.min_realized = min(blurx.s0.z.min, int32(min(quiet_div(1.000000f, r_sigma), 0.000000f)))
  let blurx.z.extent_realized.s = (max(blurx.s0.z.max.s, int32(max(quiet_div(1.000000f, r_sigma), 0.000000f))) - blurx.z.min_realized)
  let blurx.y.extent_realized.s = ((((bilateral_grid.extent.1 + bilateral_grid.min.1) + 23)/8) - (((min(bilateral_grid.extent.1, 81) + bilateral_grid.min.1) + -97)/8))
  let blurx.x.extent_realized.s = ((((bilateral_grid.extent.0 + bilateral_grid.min.0) + 7)/8) - ((min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0)/8))
  let blurx.stride.2 = (((blurx.x.extent_realized.s*2) + 130)*(blurx.y.extent_realized.s + 1))
  allocate blurx[float32 * (blurx.x.extent_realized.s + 65) * (blurx.y.extent_realized.s + 1) * (blurx.z.extent_realized.s + 2) * 2] if (uint1)0
  let blurx.buffer = (let t85 = make_struct((halide_dimension_t *), (((min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0)/8) + -64), (blurx.x.extent_realized.s + 65), 2, 0, (((min(bilateral_grid.extent.1, 81) + bilateral_grid.min.1) + -97)/8), (blurx.y.extent_realized.s + 1), ((blurx.x.extent_realized.s*2) + 130), 0, blurx.z.min_realized, (blurx.z.extent_realized.s + 2), blurx.stride.2, 0, 0, 2, 1, 0) in _halide_buffer_init(alloca(size_of_halide_buffer_t()), t85, reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 2, 32, 4, t85, (uint64)0))
  register_destructor("halide_device_free_as_destructor", blurx.buffer)
  let blurx.s0.x.x.loop_extent.s = ((((bilateral_grid.extent.0 + bilateral_grid.min.0) + 7)/8) - (bilateral_grid.min.0/8))
  let blurx.s0.y.y.loop_extent.s = ((((bilateral_grid.extent.1 + bilateral_grid.min.1) + 23)/8) - (bilateral_grid.min.1/8))
  produce blurx {
    consume blurz {
      let halide_device_malloc_result$1 = halide_device_malloc(blurx.buffer, halide_cuda_device_interface())
      assert((halide_device_malloc_result$1 == 0), halide_device_malloc_result$1)
      gpu_block<CUDA> (blurx.s0.z.__block_id_z, 0, ((blurx.s0.z.max.s - blurx.s0.z.min) + 2)) {
        gpu_block<CUDA> (blurx.s0.y.y.__block_id_y, 0, ((blurx.s0.y.y.loop_extent.s + 18)/16)) {
          let blurx.s0.y.yi.base = min(likely_if_innermost((((bilateral_grid.min.1/8) + (blurx.s0.y.y.__block_id_y*16)) + -2)), (((bilateral_grid.extent.1 + bilateral_grid.min.1) + -97)/8))
          gpu_block<CUDA> (blurx.s0.x.x.__block_id_x, 0, ((blurx.s0.x.x.loop_extent.s/2) + 1)) {
            let blurx.s0.x.xi.base = min(likely_if_innermost(((bilateral_grid.min.0/8) + (blurx.s0.x.x.__block_id_x*2))), (((bilateral_grid.extent.0 + bilateral_grid.min.0) + -1)/8))
            gpu_thread<CUDA> (blurx.s0.y.yi.yi.yi.__thread_id_x, 0, 2) {
              for (blurx.s0.y.yi.yii, 0, 8) {
                for (blurx.s0.x.xi, 0, 2) {
                  for (blurx.s0.c, 0, 2) {
                    blurx[((((((blurx.s0.z.__block_id_z + blurx.s0.z.min) - blurx.z.min_realized)*blurx.stride.2) + ((((((blurx.s0.y.yi.yi.yi.__thread_id_x*8) + blurx.s0.y.yi.yii) + blurx.s0.y.yi.base) - (((min(bilateral_grid.extent.1, 81) + bilateral_grid.min.1) + -97)/8))*((blurx.x.extent_realized.s*2) + 130)) + (((blurx.s0.x.xi + blurx.s0.x.xi.base) - ((min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0)/8))*2))) + blurx.s0.c) + 128)] = (blurz[((((((blurx.s0.z.__block_id_z + blurx.s0.z.min) - blurz.z.min_realized)*blurz.stride.2) + ((((blurx.s0.x.xi + blurx.s0.x.xi.base) - (((min(bilateral_grid.extent.0, 745) + bilateral_grid.min.0) + -761)/8))*2) + (((((blurx.s0.y.yi.yi.yi.__thread_id_x*8) + blurx.s0.y.yi.yii) + blurx.s0.y.yi.base) - (((bilateral_grid.min.1 + blurz.y.min_realized.s) + -209)/8))*((blurz.x.extent_realized.s*2) + 2)))) + blurx.s0.c) + 4)] + ((blurz[((((((blurx.s0.z.__block_id_z + blurx.s0.z.min) - blurz.z.min_realized)*blurz.stride.2) + ((((blurx.s0.x.xi + blurx.s0.x.xi.base) - (((min(bilateral_grid.extent.0, 745) + bilateral_grid.min.0) + -761)/8))*2) + (((((blurx.s0.y.yi.yi.yi.__thread_id_x*8) + blurx.s0.y.yi.yii) + blurx.s0.y.yi.base) - (((bilateral_grid.min.1 + blurz.y.min_realized.s) + -209)/8))*((blurz.x.extent_realized.s*2) + 2)))) + blurx.s0.c) + 2)]*4.000000f) + ((blurz[(((((blurx.s0.z.__block_id_z + blurx.s0.z.min) - blurz.z.min_realized)*blurz.stride.2) + ((((blurx.s0.x.xi + blurx.s0.x.xi.base) - (((min(bilateral_grid.extent.0, 745) + bilateral_grid.min.0) + -761)/8))*2) + (((((blurx.s0.y.yi.yi.yi.__thread_id_x*8) + blurx.s0.y.yi.yii) + blurx.s0.y.yi.base) - (((bilateral_grid.min.1 + blurz.y.min_realized.s) + -209)/8))*((blurz.x.extent_realized.s*2) + 2)))) + blurx.s0.c)]*6.000000f) + (blurz[((((((blurx.s0.z.__block_id_z + blurx.s0.z.min) - blurz.z.min_realized)*blurz.stride.2) + ((((blurx.s0.x.xi + blurx.s0.x.xi.base) - (((min(bilateral_grid.extent.0, 745) + bilateral_grid.min.0) + -761)/8))*2) + (((((blurx.s0.y.yi.yi.yi.__thread_id_x*8) + blurx.s0.y.yi.yii) + blurx.s0.y.yi.base) - (((bilateral_grid.min.1 + blurz.y.min_realized.s) + -209)/8))*((blurz.x.extent_realized.s*2) + 2)))) + blurx.s0.c) + -4)] + (blurz[((((((blurx.s0.z.__block_id_z + blurx.s0.z.min) - blurz.z.min_realized)*blurz.stride.2) + ((((blurx.s0.x.xi + blurx.s0.x.xi.base) - (((min(bilateral_grid.extent.0, 745) + bilateral_grid.min.0) + -761)/8))*2) + (((((blurx.s0.y.yi.yi.yi.__thread_id_x*8) + blurx.s0.y.yi.yii) + blurx.s0.y.yi.base) - (((bilateral_grid.min.1 + blurz.y.min_realized.s) + -209)/8))*((blurz.x.extent_realized.s*2) + 2)))) + blurx.s0.c) + -2)]*4.000000f)))))
                  }
                }
              }
            }
          }
        }
      }
      let halide_device_free_result$2 = halide_device_free(blurz.buffer)
      assert((halide_device_free_result$2 == 0), halide_device_free_result$2)
      _halide_buffer_set_device_dirty(blurx.buffer, (uint1)1)
    }
  }
  allocate interpolated[float32 * max(bilateral_grid.extent.0, 512) * bilateral_grid.extent.1 * 2] if (uint1)0
  let interpolated.buffer = (let t84 = make_struct((halide_dimension_t *), ((min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0) + -512), max(bilateral_grid.extent.0, 512), 2, 0, bilateral_grid.min.1, bilateral_grid.extent.1, (max(bilateral_grid.extent.0, 512)*2), 0, 0, 2, 1, 0) in _halide_buffer_init(alloca(size_of_halide_buffer_t()), t84, reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 2, 32, 3, t84, (uint64)0))
  register_destructor("halide_device_free_as_destructor", interpolated.buffer)
  produce interpolated {
    consume blurx {
      let halide_device_malloc_result = halide_device_malloc(interpolated.buffer, halide_cuda_device_interface())
      assert((halide_device_malloc_result == 0), halide_device_malloc_result)
      let halide_copy_to_device_result$2 = halide_copy_to_device(input.buffer, halide_cuda_device_interface())
      assert((halide_copy_to_device_result$2 == 0), halide_copy_to_device_result$2)
      gpu_block<CUDA> (interpolated.s0.y.y.__block_id_y, 0, ((bilateral_grid.extent.1 + 15)/16)) {
        let interpolated.s0.y.yi.base = min(likely_if_innermost(((interpolated.s0.y.y.__block_id_y*16) + bilateral_grid.min.1)), ((bilateral_grid.extent.1 + bilateral_grid.min.1) + -16))
        gpu_block<CUDA> (interpolated.s0.x.x.__block_id_x, 0, ((bilateral_grid.extent.0 + 511)/512)) {
          let interpolated.s0.x.xi.base = min(likely_if_innermost(((interpolated.s0.x.x.__block_id_x*512) + bilateral_grid.min.0)), ((bilateral_grid.extent.0 + bilateral_grid.min.0) + -512))
          gpu_thread<CUDA> (interpolated.s0.y.yi.yi.yi.__thread_id_y, 0, 8) {
            gpu_thread<CUDA> (interpolated.s0.x.xi.xi.xi.__thread_id_x, 0, 64) {
              for (interpolated.s0.y.yi.yii, 0, 2) {
                for (interpolated.s0.x.xi.xii, 0, 8) {
                  for (interpolated.s0.c, 0, 2) {
                    interpolated[(((((max(bilateral_grid.extent.0, 512)*((((interpolated.s0.y.yi.yi.yi.__thread_id_y*2) + interpolated.s0.y.yi.yii) + interpolated.s0.y.yi.base) - bilateral_grid.min.1)) + ((((interpolated.s0.x.xi.xi.xi.__thread_id_x*8) + interpolated.s0.x.xi.xii) + interpolated.s0.x.xi.base) - (min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0)))*2) + interpolated.s0.c) + 1024)] = (let t35 = (max(min(input[((((((interpolated.s0.y.yi.yi.yi.__thread_id_y*2) + interpolated.s0.y.yi.yii) + interpolated.s0.y.yi.base)*input.stride.1) + (((interpolated.s0.x.xi.xi.xi.__thread_id_x*8) + interpolated.s0.x.xi.xii) + interpolated.s0.x.xi.base)) - ((input.min.1*input.stride.1) + input.min.0))], 1.000000f), 0.000000f)*(1.000000f/r_sigma)) in (let t36 = int32(t35) in (let t37 = float32(((((interpolated.s0.x.xi.xi.xi.__thread_id_x*8) + interpolated.s0.x.xi.xii) + interpolated.s0.x.xi.base) % 8)) in (let t38 = float32(((((interpolated.s0.y.yi.yi.yi.__thread_id_y*2) + interpolated.s0.y.yi.yii) + interpolated.s0.y.yi.base) % 8)) in (let t39 = blurx[(((blurx.x.extent_realized.s*2) + ((((t36 - blurx.z.min_realized)*blurx.stride.2) + (((((((interpolated.s0.y.yi.yi.yi.__thread_id_y*2) + interpolated.s0.y.yi.yii) + interpolated.s0.y.yi.base)/8) - (((min(bilateral_grid.extent.1, 81) + bilateral_grid.min.1) + -97)/8))*((blurx.x.extent_realized.s*2) + 130)) + (((((interpolated.s0.x.xi.base + interpolated.s0.x.xi.xii)/8) + interpolated.s0.x.xi.xi.xi.__thread_id_x) - ((min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0)/8))*2))) + interpolated.s0.c)) + 258)] in (let t40 = blurx[(((blurx.x.extent_realized.s*2) + ((((t36 - blurx.z.min_realized)*blurx.stride.2) + (((((((interpolated.s0.y.yi.yi.yi.__thread_id_y*2) + interpolated.s0.y.yi.yii) + interpolated.s0.y.yi.base)/8) - (((min(bilateral_grid.extent.1, 81) + bilateral_grid.min.1) + -97)/8))*((blurx.x.extent_realized.s*2) + 130)) + (((((interpolated.s0.x.xi.base + interpolated.s0.x.xi.xii)/8) + interpolated.s0.x.xi.xi.xi.__thread_id_x) - ((min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0)/8))*2))) + interpolated.s0.c)) + 260)] in (let t41 = blurx[((((((t36 - blurx.z.min_realized)*blurx.stride.2) + (((((((interpolated.s0.y.yi.yi.yi.__thread_id_y*2) + interpolated.s0.y.yi.yii) + interpolated.s0.y.yi.base)/8) - (((min(bilateral_grid.extent.1, 81) + bilateral_grid.min.1) + -97)/8))*((blurx.x.extent_realized.s*2) + 130)) + (((((interpolated.s0.x.xi.base + interpolated.s0.x.xi.xii)/8) + interpolated.s0.x.xi.xi.xi.__thread_id_x) - ((min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0)/8))*2))) + interpolated.s0.c) + ((blurx.x.extent_realized.s*2) + blurx.stride.2)) + 258)] in (let t42 = blurx[((((((t36 - blurx.z.min_realized)*blurx.stride.2) + (((((((interpolated.s0.y.yi.yi.yi.__thread_id_y*2) + interpolated.s0.y.yi.yii) + interpolated.s0.y.yi.base)/8) - (((min(bilateral_grid.extent.1, 81) + bilateral_grid.min.1) + -97)/8))*((blurx.x.extent_realized.s*2) + 130)) + (((((interpolated.s0.x.xi.base + interpolated.s0.x.xi.xii)/8) + interpolated.s0.x.xi.xi.xi.__thread_id_x) - ((min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0)/8))*2))) + interpolated.s0.c) + ((blurx.x.extent_realized.s*2) + blurx.stride.2)) + 260)] in lerp(lerp(lerp((blurx[(((blurx.x.extent_realized.s*4) + ((((t36 - blurx.z.min_realized)*blurx.stride.2) + (((((((interpolated.s0.y.yi.yi.yi.__thread_id_y*2) + interpolated.s0.y.yi.yii) + interpolated.s0.y.yi.base)/8) - (((min(bilateral_grid.extent.1, 81) + bilateral_grid.min.1) + -97)/8))*((blurx.x.extent_realized.s*2) + 130)) + (((((interpolated.s0.x.xi.base + interpolated.s0.x.xi.xii)/8) + interpolated.s0.x.xi.xi.xi.__thread_id_x) - ((min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0)/8))*2))) + interpolated.s0.c)) + 388)] + ((t39*4.000000f) + ((blurx[(((((t36 - blurx.z.min_realized)*blurx.stride.2) + (((((((interpolated.s0.y.yi.yi.yi.__thread_id_y*2) + interpolated.s0.y.yi.yii) + interpolated.s0.y.yi.base)/8) - (((min(bilateral_grid.extent.1, 81) + bilateral_grid.min.1) + -97)/8))*((blurx.x.extent_realized.s*2) + 130)) + (((((interpolated.s0.x.xi.base + interpolated.s0.x.xi.xii)/8) + interpolated.s0.x.xi.xi.xi.__thread_id_x) - ((min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0)/8))*2))) + interpolated.s0.c) + 128)]*6.000000f) + (blurx[((((((t36 - blurx.z.min_realized)*blurx.stride.2) + (((((((interpolated.s0.y.yi.yi.yi.__thread_id_y*2) + interpolated.s0.y.yi.yii) + interpolated.s0.y.yi.base)/8) - (((min(bilateral_grid.extent.1, 81) + bilateral_grid.min.1) + -97)/8))*((blurx.x.extent_realized.s*2) + 130)) + (((((interpolated.s0.x.xi.base + interpolated.s0.x.xi.xii)/8) + interpolated.s0.x.xi.xi.xi.__thread_id_x) - ((min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0)/8))*2))) + interpolated.s0.c) - (blurx.x.extent_realized.s*4)) + -132)] + (blurx[((((((t36 - blurx.z.min_realized)*blurx.stride.2) + (((((((interpolated.s0.y.yi.yi.yi.__thread_id_y*2) + interpolated.s0.y.yi.yii) + interpolated.s0.y.yi.base)/8) - (((min(bilateral_grid.extent.1, 81) + bilateral_grid.min.1) + -97)/8))*((blurx.x.extent_realized.s*2) + 130)) + (((((interpolated.s0.x.xi.base + interpolated.s0.x.xi.xii)/8) + interpolated.s0.x.xi.xi.xi.__thread_id_x) - ((min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0)/8))*2))) + interpolated.s0.c) - (blurx.x.extent_realized.s*2)) + -2)]*4.000000f))))), (blurx[(((blurx.x.extent_realized.s*4) + ((((t36 - blurx.z.min_realized)*blurx.stride.2) + (((((((interpolated.s0.y.yi.yi.yi.__thread_id_y*2) + interpolated.s0.y.yi.yii) + interpolated.s0.y.yi.base)/8) - (((min(bilateral_grid.extent.1, 81) + bilateral_grid.min.1) + -97)/8))*((blurx.x.extent_realized.s*2) + 130)) + (((((interpolated.s0.x.xi.base + interpolated.s0.x.xi.xii)/8) + interpolated.s0.x.xi.xi.xi.__thread_id_x) - ((min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0)/8))*2))) + interpolated.s0.c)) + 390)] + ((t40*4.000000f) + ((blurx[(((((t36 - blurx.z.min_realized)*blurx.stride.2) + (((((((interpolated.s0.y.yi.yi.yi.__thread_id_y*2) + interpolated.s0.y.yi.yii) + interpolated.s0.y.yi.base)/8) - (((min(bilateral_grid.extent.1, 81) + bilateral_grid.min.1) + -97)/8))*((blurx.x.extent_realized.s*2) + 130)) + (((((interpolated.s0.x.xi.base + interpolated.s0.x.xi.xii)/8) + interpolated.s0.x.xi.xi.xi.__thread_id_x) - ((min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0)/8))*2))) + interpolated.s0.c) + 130)]*6.000000f) + (blurx[((((((t36 - blurx.z.min_realized)*blurx.stride.2) + (((((((interpolated.s0.y.yi.yi.yi.__thread_id_y*2) + interpolated.s0.y.yi.yii) + interpolated.s0.y.yi.base)/8) - (((min(bilateral_grid.extent.1, 81) + bilateral_grid.min.1) + -97)/8))*((blurx.x.extent_realized.s*2) + 130)) + (((((interpolated.s0.x.xi.base + interpolated.s0.x.xi.xii)/8) + interpolated.s0.x.xi.xi.xi.__thread_id_x) - ((min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0)/8))*2))) + interpolated.s0.c) - (blurx.x.extent_realized.s*4)) + -130)] + (blurx[(((((t36 - blurx.z.min_realized)*blurx.stride.2) + (((((((interpolated.s0.y.yi.yi.yi.__thread_id_y*2) + interpolated.s0.y.yi.yii) + interpolated.s0.y.yi.base)/8) - (((min(bilateral_grid.extent.1, 81) + bilateral_grid.min.1) + -97)/8))*((blurx.x.extent_realized.s*2) + 130)) + (((((interpolated.s0.x.xi.base + interpolated.s0.x.xi.xii)/8) + interpolated.s0.x.xi.xi.xi.__thread_id_x) - ((min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0)/8))*2))) + interpolated.s0.c) - (blurx.x.extent_realized.s*2))]*4.000000f))))), (t37*0.125000f)), lerp((blurx[(((blurx.x.extent_realized.s*6) + ((((t36 - blurx.z.min_realized)*blurx.stride.2) + (((((((interpolated.s0.y.yi.yi.yi.__thread_id_y*2) + interpolated.s0.y.yi.yii) + interpolated.s0.y.yi.base)/8) - (((min(bilateral_grid.extent.1, 81) + bilateral_grid.min.1) + -97)/8))*((blurx.x.extent_realized.s*2) + 130)) + (((((interpolated.s0.x.xi.base + interpolated.s0.x.xi.xii)/8) + interpolated.s0.x.xi.xi.xi.__thread_id_x) - ((min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0)/8))*2))) + interpolated.s0.c)) + 518)] + ((blurx[(((blurx.x.extent_realized.s*4) + ((((t36 - blurx.z.min_realized)*blurx.stride.2) + (((((((interpolated.s0.y.yi.yi.yi.__thread_id_y*2) + interpolated.s0.y.yi.yii) + interpolated.s0.y.yi.base)/8) - (((min(bilateral_grid.extent.1, 81) + bilateral_grid.min.1) + -97)/8))*((blurx.x.extent_realized.s*2) + 130)) + (((((interpolated.s0.x.xi.base + interpolated.s0.x.xi.xii)/8) + interpolated.s0.x.xi.xi.xi.__thread_id_x) - ((min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0)/8))*2))) + interpolated.s0.c)) + 388)]*4.000000f) + ((t39*6.000000f) + (blurx[((((((t36 - blurx.z.min_realized)*blurx.stride.2) + (((((((interpolated.s0.y.yi.yi.yi.__thread_id_y*2) + interpolated.s0.y.yi.yii) + interpolated.s0.y.yi.base)/8) - (((min(bilateral_grid.extent.1, 81) + bilateral_grid.min.1) + -97)/8))*((blurx.x.extent_realized.s*2) + 130)) + (((((interpolated.s0.x.xi.base + interpolated.s0.x.xi.xii)/8) + interpolated.s0.x.xi.xi.xi.__thread_id_x) - ((min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0)/8))*2))) + interpolated.s0.c) - (blurx.x.extent_realized.s*2)) + -2)] + (blurx[(((((t36 - blurx.z.min_realized)*blurx.stride.2) + (((((((interpolated.s0.y.yi.yi.yi.__thread_id_y*2) + interpolated.s0.y.yi.yii) + interpolated.s0.y.yi.base)/8) - (((min(bilateral_grid.extent.1, 81) + bilateral_grid.min.1) + -97)/8))*((blurx.x.extent_realized.s*2) + 130)) + (((((interpolated.s0.x.xi.base + interpolated.s0.x.xi.xii)/8) + interpolated.s0.x.xi.xi.xi.__thread_id_x) - ((min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0)/8))*2))) + interpolated.s0.c) + 128)]*4.000000f))))), (blurx[(((blurx.x.extent_realized.s*6) + ((((t36 - blurx.z.min_realized)*blurx.stride.2) + (((((((interpolated.s0.y.yi.yi.yi.__thread_id_y*2) + interpolated.s0.y.yi.yii) + interpolated.s0.y.yi.base)/8) - (((min(bilateral_grid.extent.1, 81) + bilateral_grid.min.1) + -97)/8))*((blurx.x.extent_realized.s*2) + 130)) + (((((interpolated.s0.x.xi.base + interpolated.s0.x.xi.xii)/8) + interpolated.s0.x.xi.xi.xi.__thread_id_x) - ((min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0)/8))*2))) + interpolated.s0.c)) + 520)] + ((blurx[(((blurx.x.extent_realized.s*4) + ((((t36 - blurx.z.min_realized)*blurx.stride.2) + (((((((interpolated.s0.y.yi.yi.yi.__thread_id_y*2) + interpolated.s0.y.yi.yii) + interpolated.s0.y.yi.base)/8) - (((min(bilateral_grid.extent.1, 81) + bilateral_grid.min.1) + -97)/8))*((blurx.x.extent_realized.s*2) + 130)) + (((((interpolated.s0.x.xi.base + interpolated.s0.x.xi.xii)/8) + interpolated.s0.x.xi.xi.xi.__thread_id_x) - ((min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0)/8))*2))) + interpolated.s0.c)) + 390)]*4.000000f) + ((t40*6.000000f) + (blurx[(((((t36 - blurx.z.min_realized)*blurx.stride.2) + (((((((interpolated.s0.y.yi.yi.yi.__thread_id_y*2) + interpolated.s0.y.yi.yii) + interpolated.s0.y.yi.base)/8) - (((min(bilateral_grid.extent.1, 81) + bilateral_grid.min.1) + -97)/8))*((blurx.x.extent_realized.s*2) + 130)) + (((((interpolated.s0.x.xi.base + interpolated.s0.x.xi.xii)/8) + interpolated.s0.x.xi.xi.xi.__thread_id_x) - ((min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0)/8))*2))) + interpolated.s0.c) - (blurx.x.extent_realized.s*2))] + (blurx[(((((t36 - blurx.z.min_realized)*blurx.stride.2) + (((((((interpolated.s0.y.yi.yi.yi.__thread_id_y*2) + interpolated.s0.y.yi.yii) + interpolated.s0.y.yi.base)/8) - (((min(bilateral_grid.extent.1, 81) + bilateral_grid.min.1) + -97)/8))*((blurx.x.extent_realized.s*2) + 130)) + (((((interpolated.s0.x.xi.base + interpolated.s0.x.xi.xii)/8) + interpolated.s0.x.xi.xi.xi.__thread_id_x) - ((min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0)/8))*2))) + interpolated.s0.c) + 130)]*4.000000f))))), (t37*0.125000f)), (t38*0.125000f)), lerp(lerp((blurx[((((((t36 - blurx.z.min_realized)*blurx.stride.2) + (((((((interpolated.s0.y.yi.yi.yi.__thread_id_y*2) + interpolated.s0.y.yi.yii) + interpolated.s0.y.yi.base)/8) - (((min(bilateral_grid.extent.1, 81) + bilateral_grid.min.1) + -97)/8))*((blurx.x.extent_realized.s*2) + 130)) + (((((interpolated.s0.x.xi.base + interpolated.s0.x.xi.xii)/8) + interpolated.s0.x.xi.xi.xi.__thread_id_x) - ((min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0)/8))*2))) + interpolated.s0.c) + ((blurx.x.extent_realized.s*4) + blurx.stride.2)) + 388)] + ((t41*4.000000f) + ((blurx[((((((t36 - blurx.z.min_realized)*blurx.stride.2) + (((((((interpolated.s0.y.yi.yi.yi.__thread_id_y*2) + interpolated.s0.y.yi.yii) + interpolated.s0.y.yi.base)/8) - (((min(bilateral_grid.extent.1, 81) + bilateral_grid.min.1) + -97)/8))*((blurx.x.extent_realized.s*2) + 130)) + (((((interpolated.s0.x.xi.base + interpolated.s0.x.xi.xii)/8) + interpolated.s0.x.xi.xi.xi.__thread_id_x) - ((min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0)/8))*2))) + interpolated.s0.c) + blurx.stride.2) + 128)]*6.000000f) + (blurx[(((blurx.stride.2 - (blurx.x.extent_realized.s*4)) + ((((t36 - blurx.z.min_realized)*blurx.stride.2) + (((((((interpolated.s0.y.yi.yi.yi.__thread_id_y*2) + interpolated.s0.y.yi.yii) + interpolated.s0.y.yi.base)/8) - (((min(bilateral_grid.extent.1, 81) + bilateral_grid.min.1) + -97)/8))*((blurx.x.extent_realized.s*2) + 130)) + (((((interpolated.s0.x.xi.base + interpolated.s0.x.xi.xii)/8) + interpolated.s0.x.xi.xi.xi.__thread_id_x) - ((min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0)/8))*2))) + interpolated.s0.c)) + -132)] + (blurx[(((blurx.stride.2 - (blurx.x.extent_realized.s*2)) + ((((t36 - blurx.z.min_realized)*blurx.stride.2) + (((((((interpolated.s0.y.yi.yi.yi.__thread_id_y*2) + interpolated.s0.y.yi.yii) + interpolated.s0.y.yi.base)/8) - (((min(bilateral_grid.extent.1, 81) + bilateral_grid.min.1) + -97)/8))*((blurx.x.extent_realized.s*2) + 130)) + (((((interpolated.s0.x.xi.base + interpolated.s0.x.xi.xii)/8) + interpolated.s0.x.xi.xi.xi.__thread_id_x) - ((min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0)/8))*2))) + interpolated.s0.c)) + -2)]*4.000000f))))), (blurx[((((((t36 - blurx.z.min_realized)*blurx.stride.2) + (((((((interpolated.s0.y.yi.yi.yi.__thread_id_y*2) + interpolated.s0.y.yi.yii) + interpolated.s0.y.yi.base)/8) - (((min(bilateral_grid.extent.1, 81) + bilateral_grid.min.1) + -97)/8))*((blurx.x.extent_realized.s*2) + 130)) + (((((interpolated.s0.x.xi.base + interpolated.s0.x.xi.xii)/8) + interpolated.s0.x.xi.xi.xi.__thread_id_x) - ((min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0)/8))*2))) + interpolated.s0.c) + ((blurx.x.extent_realized.s*4) + blurx.stride.2)) + 390)] + ((t42*4.000000f) + ((blurx[((((((t36 - blurx.z.min_realized)*blurx.stride.2) + (((((((interpolated.s0.y.yi.yi.yi.__thread_id_y*2) + interpolated.s0.y.yi.yii) + interpolated.s0.y.yi.base)/8) - (((min(bilateral_grid.extent.1, 81) + bilateral_grid.min.1) + -97)/8))*((blurx.x.extent_realized.s*2) + 130)) + (((((interpolated.s0.x.xi.base + interpolated.s0.x.xi.xii)/8) + interpolated.s0.x.xi.xi.xi.__thread_id_x) - ((min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0)/8))*2))) + interpolated.s0.c) + blurx.stride.2) + 130)]*6.000000f) + (blurx[(((blurx.stride.2 - (blurx.x.extent_realized.s*4)) + ((((t36 - blurx.z.min_realized)*blurx.stride.2) + (((((((interpolated.s0.y.yi.yi.yi.__thread_id_y*2) + interpolated.s0.y.yi.yii) + interpolated.s0.y.yi.base)/8) - (((min(bilateral_grid.extent.1, 81) + bilateral_grid.min.1) + -97)/8))*((blurx.x.extent_realized.s*2) + 130)) + (((((interpolated.s0.x.xi.base + interpolated.s0.x.xi.xii)/8) + interpolated.s0.x.xi.xi.xi.__thread_id_x) - ((min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0)/8))*2))) + interpolated.s0.c)) + -130)] + (blurx[((blurx.stride.2 - (blurx.x.extent_realized.s*2)) + ((((t36 - blurx.z.min_realized)*blurx.stride.2) + (((((((interpolated.s0.y.yi.yi.yi.__thread_id_y*2) + interpolated.s0.y.yi.yii) + interpolated.s0.y.yi.base)/8) - (((min(bilateral_grid.extent.1, 81) + bilateral_grid.min.1) + -97)/8))*((blurx.x.extent_realized.s*2) + 130)) + (((((interpolated.s0.x.xi.base + interpolated.s0.x.xi.xii)/8) + interpolated.s0.x.xi.xi.xi.__thread_id_x) - ((min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0)/8))*2))) + interpolated.s0.c))]*4.000000f))))), (t37*0.125000f)), lerp((blurx[((((((t36 - blurx.z.min_realized)*blurx.stride.2) + (((((((interpolated.s0.y.yi.yi.yi.__thread_id_y*2) + interpolated.s0.y.yi.yii) + interpolated.s0.y.yi.base)/8) - (((min(bilateral_grid.extent.1, 81) + bilateral_grid.min.1) + -97)/8))*((blurx.x.extent_realized.s*2) + 130)) + (((((interpolated.s0.x.xi.base + interpolated.s0.x.xi.xii)/8) + interpolated.s0.x.xi.xi.xi.__thread_id_x) - ((min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0)/8))*2))) + interpolated.s0.c) + ((blurx.x.extent_realized.s*6) + blurx.stride.2)) + 518)] + ((blurx[((((((t36 - blurx.z.min_realized)*blurx.stride.2) + (((((((interpolated.s0.y.yi.yi.yi.__thread_id_y*2) + interpolated.s0.y.yi.yii) + interpolated.s0.y.yi.base)/8) - (((min(bilateral_grid.extent.1, 81) + bilateral_grid.min.1) + -97)/8))*((blurx.x.extent_realized.s*2) + 130)) + (((((interpolated.s0.x.xi.base + interpolated.s0.x.xi.xii)/8) + interpolated.s0.x.xi.xi.xi.__thread_id_x) - ((min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0)/8))*2))) + interpolated.s0.c) + ((blurx.x.extent_realized.s*4) + blurx.stride.2)) + 388)]*4.000000f) + ((t41*6.000000f) + (blurx[(((blurx.stride.2 - (blurx.x.extent_realized.s*2)) + ((((t36 - blurx.z.min_realized)*blurx.stride.2) + (((((((interpolated.s0.y.yi.yi.yi.__thread_id_y*2) + interpolated.s0.y.yi.yii) + interpolated.s0.y.yi.base)/8) - (((min(bilateral_grid.extent.1, 81) + bilateral_grid.min.1) + -97)/8))*((blurx.x.extent_realized.s*2) + 130)) + (((((interpolated.s0.x.xi.base + interpolated.s0.x.xi.xii)/8) + interpolated.s0.x.xi.xi.xi.__thread_id_x) - ((min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0)/8))*2))) + interpolated.s0.c)) + -2)] + (blurx[((((((t36 - blurx.z.min_realized)*blurx.stride.2) + (((((((interpolated.s0.y.yi.yi.yi.__thread_id_y*2) + interpolated.s0.y.yi.yii) + interpolated.s0.y.yi.base)/8) - (((min(bilateral_grid.extent.1, 81) + bilateral_grid.min.1) + -97)/8))*((blurx.x.extent_realized.s*2) + 130)) + (((((interpolated.s0.x.xi.base + interpolated.s0.x.xi.xii)/8) + interpolated.s0.x.xi.xi.xi.__thread_id_x) - ((min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0)/8))*2))) + interpolated.s0.c) + blurx.stride.2) + 128)]*4.000000f))))), (blurx[((((((t36 - blurx.z.min_realized)*blurx.stride.2) + (((((((interpolated.s0.y.yi.yi.yi.__thread_id_y*2) + interpolated.s0.y.yi.yii) + interpolated.s0.y.yi.base)/8) - (((min(bilateral_grid.extent.1, 81) + bilateral_grid.min.1) + -97)/8))*((blurx.x.extent_realized.s*2) + 130)) + (((((interpolated.s0.x.xi.base + interpolated.s0.x.xi.xii)/8) + interpolated.s0.x.xi.xi.xi.__thread_id_x) - ((min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0)/8))*2))) + interpolated.s0.c) + ((blurx.x.extent_realized.s*6) + blurx.stride.2)) + 520)] + ((blurx[((((((t36 - blurx.z.min_realized)*blurx.stride.2) + (((((((interpolated.s0.y.yi.yi.yi.__thread_id_y*2) + interpolated.s0.y.yi.yii) + interpolated.s0.y.yi.base)/8) - (((min(bilateral_grid.extent.1, 81) + bilateral_grid.min.1) + -97)/8))*((blurx.x.extent_realized.s*2) + 130)) + (((((interpolated.s0.x.xi.base + interpolated.s0.x.xi.xii)/8) + interpolated.s0.x.xi.xi.xi.__thread_id_x) - ((min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0)/8))*2))) + interpolated.s0.c) + ((blurx.x.extent_realized.s*4) + blurx.stride.2)) + 390)]*4.000000f) + ((t42*6.000000f) + (blurx[((blurx.stride.2 - (blurx.x.extent_realized.s*2)) + ((((t36 - blurx.z.min_realized)*blurx.stride.2) + (((((((interpolated.s0.y.yi.yi.yi.__thread_id_y*2) + interpolated.s0.y.yi.yii) + interpolated.s0.y.yi.base)/8) - (((min(bilateral_grid.extent.1, 81) + bilateral_grid.min.1) + -97)/8))*((blurx.x.extent_realized.s*2) + 130)) + (((((interpolated.s0.x.xi.base + interpolated.s0.x.xi.xii)/8) + interpolated.s0.x.xi.xi.xi.__thread_id_x) - ((min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0)/8))*2))) + interpolated.s0.c))] + (blurx[((((((t36 - blurx.z.min_realized)*blurx.stride.2) + (((((((interpolated.s0.y.yi.yi.yi.__thread_id_y*2) + interpolated.s0.y.yi.yii) + interpolated.s0.y.yi.base)/8) - (((min(bilateral_grid.extent.1, 81) + bilateral_grid.min.1) + -97)/8))*((blurx.x.extent_realized.s*2) + 130)) + (((((interpolated.s0.x.xi.base + interpolated.s0.x.xi.xii)/8) + interpolated.s0.x.xi.xi.xi.__thread_id_x) - ((min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0)/8))*2))) + interpolated.s0.c) + blurx.stride.2) + 130)]*4.000000f))))), (t37*0.125000f)), (t38*0.125000f)), (t35 - float32(t36)))))))))))
                  }
                }
              }
            }
          }
        }
      }
      let halide_device_free_result$1 = halide_device_free(blurx.buffer)
      assert((halide_device_free_result$1 == 0), halide_device_free_result$1)
      _halide_buffer_set_device_dirty(interpolated.buffer, (uint1)1)
    }
  }
  produce bilateral_grid {
    consume interpolated {
      let halide_copy_to_device_result = halide_copy_to_device(bilateral_grid.buffer, halide_cuda_device_interface())
      assert((halide_copy_to_device_result == 0), halide_copy_to_device_result)
      gpu_block<CUDA> (bilateral_grid.s0.y.y.__block_id_y, 0, ((bilateral_grid.extent.1 + 63)/64)) {
        let bilateral_grid.s0.y.yi.base = min(likely_if_innermost(((bilateral_grid.s0.y.y.__block_id_y*64) + bilateral_grid.min.1)), ((bilateral_grid.extent.1 + bilateral_grid.min.1) + -64))
        gpu_block<CUDA> (bilateral_grid.s0.x.x.__block_id_x, 0, ((bilateral_grid.extent.0 + 15)/16)) {
          let bilateral_grid.s0.x.xi.base = min(likely_if_innermost(((bilateral_grid.s0.x.x.__block_id_x*16) + bilateral_grid.min.0)), ((bilateral_grid.extent.0 + bilateral_grid.min.0) + -16))
          gpu_thread<CUDA> (bilateral_grid.s0.y.yi.yi.__thread_id_y, 0, 64) {
            gpu_thread<CUDA> (bilateral_grid.s0.x.xi.xi.__thread_id_x, 0, 16) {
              bilateral_grid[((((bilateral_grid.s0.y.yi.base + bilateral_grid.s0.y.yi.yi.__thread_id_y)*bilateral_grid.stride.1) + (bilateral_grid.s0.x.xi.base + bilateral_grid.s0.x.xi.xi.__thread_id_x)) - ((bilateral_grid.min.1*bilateral_grid.stride.1) + bilateral_grid.min.0))] = (interpolated[((((max(bilateral_grid.extent.0, 512)*((bilateral_grid.s0.y.yi.base + bilateral_grid.s0.y.yi.yi.__thread_id_y) - bilateral_grid.min.1)) + ((bilateral_grid.s0.x.xi.base + bilateral_grid.s0.x.xi.xi.__thread_id_x) - (min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0)))*2) + 1024)]/interpolated[((((max(bilateral_grid.extent.0, 512)*((bilateral_grid.s0.y.yi.base + bilateral_grid.s0.y.yi.yi.__thread_id_y) - bilateral_grid.min.1)) + ((bilateral_grid.s0.x.xi.base + bilateral_grid.s0.x.xi.xi.__thread_id_x) - (min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0)))*2) + 1025)])
            }
          }
        }
      }
      _halide_buffer_set_device_dirty(bilateral_grid.buffer, (uint1)1)
      let halide_device_free_result = halide_device_free(interpolated.buffer)
      assert((halide_device_free_result == 0), halide_device_free_result)
    }
  }
}

Simplifying correlated differences...
Unrolling...
Vectorizing...
Injecting per-block gpu synchronization...
Detecting vector interleavings...
Partitioning loops to simplify boundary conditions...
Trimming loops to the region over which they do something...
Failed to prove, but could not find a counter-example:
 (let v0 = (v3 == 0) in (!v0 || (max(min(v1, 1.000000f), 0.000000f) == max(min(v2, 1.000000f), 0.000000f))))
Original expression:
(let t104 = (histogram.s1.c == 0) in (select(t104, max(min(t102.s.min, 1.000000f), 0.000000f), 1.000000f) == select(t104, max(min(t102.s.max, 1.000000f), 0.000000f), 1.000000f)))
Failed to prove, but could not find a counter-example:
 (let v0 = (v3 == 0) in (!v0 || (max(min(v1, 1.000000f), 0.000000f) == max(min(v2, 1.000000f), 0.000000f))))
Original expression:
(let t110 = (histogram.s1.c == 0) in (select(t110, max(min(t108.s.min, 1.000000f), 0.000000f), 1.000000f) == select(t110, max(min(t108.s.max, 1.000000f), 0.000000f), 1.000000f)))
Failed to prove, but could not find a counter-example:
 (let v0 = (v3 == 0) in (!v0 || (max(min(v1, 1.000000f), 0.000000f) == max(min(v2, 1.000000f), 0.000000f))))
Original expression:
(let t116 = (histogram.s1.c == 0) in (select(t116, max(min(t114.s.min, 1.000000f), 0.000000f), 1.000000f) == select(t116, max(min(t114.s.max, 1.000000f), 0.000000f), 1.000000f)))
Failed to prove, but could not find a counter-example:
 (let v0 = (v3 == 0) in (!v0 || (max(min(v1, 1.000000f), 0.000000f) == max(min(v2, 1.000000f), 0.000000f))))
Original expression:
(let t122 = (histogram.s1.c == 0) in (select(t122, max(min(t120.s.min, 1.000000f), 0.000000f), 1.000000f) == select(t122, max(min(t120.s.max, 1.000000f), 0.000000f), 1.000000f)))
Failed to prove, but could not find a counter-example:
 (let v0 = (v3 == 0) in (!v0 || (max(min(v1, 1.000000f), 0.000000f) == max(min(v2, 1.000000f), 0.000000f))))
Original expression:
(let t128 = (histogram.s1.c == 0) in (select(t128, max(min(t126.s.min, 1.000000f), 0.000000f), 1.000000f) == select(t128, max(min(t126.s.max, 1.000000f), 0.000000f), 1.000000f)))
Failed to prove, but could not find a counter-example:
 (let v0 = (v3 == 0) in (!v0 || (max(min(v1, 1.000000f), 0.000000f) == max(min(v2, 1.000000f), 0.000000f))))
Original expression:
(let t134 = (histogram.s1.c == 0) in (select(t134, max(min(t132.s.min, 1.000000f), 0.000000f), 1.000000f) == select(t134, max(min(t132.s.max, 1.000000f), 0.000000f), 1.000000f)))
Failed to prove, but could not find a counter-example:
 (let v0 = (v3 == 0) in (!v0 || (max(min(v1, 1.000000f), 0.000000f) == max(min(v2, 1.000000f), 0.000000f))))
Original expression:
(let t140 = (histogram.s1.c == 0) in (select(t140, max(min(t138.s.min, 1.000000f), 0.000000f), 1.000000f) == select(t140, max(min(t138.s.max, 1.000000f), 0.000000f), 1.000000f)))
Failed to prove, but could not find a counter-example:
 (let v0 = (v3 == 0) in (!v0 || (max(min(v1, 1.000000f), 0.000000f) == max(min(v2, 1.000000f), 0.000000f))))
Original expression:
(let t146 = (histogram.s1.c == 0) in (select(t146, max(min(t144.s.min, 1.000000f), 0.000000f), 1.000000f) == select(t146, max(min(t144.s.max, 1.000000f), 0.000000f), 1.000000f)))
Failed to prove, but could not find a counter-example:
 (let v0 = (v3 == 0) in (!v0 || (max(min(v1, 1.000000f), 0.000000f) == max(min(v2, 1.000000f), 0.000000f))))
Original expression:
(let t152 = (histogram.s1.c == 0) in (select(t152, max(min(t150.s.min, 1.000000f), 0.000000f), 1.000000f) == select(t152, max(min(t150.s.max, 1.000000f), 0.000000f), 1.000000f)))
Failed to prove, but could not find a counter-example:
 (let v0 = (v3 == 0) in (!v0 || (max(min(v1, 1.000000f), 0.000000f) == max(min(v2, 1.000000f), 0.000000f))))
Original expression:
(let t158 = (histogram.s1.c == 0) in (select(t158, max(min(t156.s.min, 1.000000f), 0.000000f), 1.000000f) == select(t158, max(min(t156.s.max, 1.000000f), 0.000000f), 1.000000f)))
Failed to prove, but could not find a counter-example:
 (let v0 = (v3 == 0) in (!v0 || (max(min(v1, 1.000000f), 0.000000f) == max(min(v2, 1.000000f), 0.000000f))))
Original expression:
(let t164 = (histogram.s1.c == 0) in (select(t164, max(min(t162.s.min, 1.000000f), 0.000000f), 1.000000f) == select(t164, max(min(t162.s.max, 1.000000f), 0.000000f), 1.000000f)))
Failed to prove, but could not find a counter-example:
 (let v0 = (v3 == 0) in (!v0 || (max(min(v1, 1.000000f), 0.000000f) == max(min(v2, 1.000000f), 0.000000f))))
Original expression:
(let t170 = (histogram.s1.c == 0) in (select(t170, max(min(t168.s.min, 1.000000f), 0.000000f), 1.000000f) == select(t170, max(min(t168.s.max, 1.000000f), 0.000000f), 1.000000f)))
Failed to prove, but could not find a counter-example:
 (let v0 = (v3 == 0) in (!v0 || (max(min(v1, 1.000000f), 0.000000f) == max(min(v2, 1.000000f), 0.000000f))))
Original expression:
(let t176 = (histogram.s1.c == 0) in (select(t176, max(min(t174.s.min, 1.000000f), 0.000000f), 1.000000f) == select(t176, max(min(t174.s.max, 1.000000f), 0.000000f), 1.000000f)))
Failed to prove, but could not find a counter-example:
 (let v0 = (v3 == 0) in (!v0 || (max(min(v1, 1.000000f), 0.000000f) == max(min(v2, 1.000000f), 0.000000f))))
Original expression:
(let t182 = (histogram.s1.c == 0) in (select(t182, max(min(t180.s.min, 1.000000f), 0.000000f), 1.000000f) == select(t182, max(min(t180.s.max, 1.000000f), 0.000000f), 1.000000f)))
Failed to prove, but could not find a counter-example:
 (let v0 = (v3 == 0) in (!v0 || (max(min(v1, 1.000000f), 0.000000f) == max(min(v2, 1.000000f), 0.000000f))))
Original expression:
(let t188 = (histogram.s1.c == 0) in (select(t188, max(min(t186.s.min, 1.000000f), 0.000000f), 1.000000f) == select(t188, max(min(t186.s.max, 1.000000f), 0.000000f), 1.000000f)))
Failed to prove, but could not find a counter-example:
 (let v0 = (v3 == 0) in (!v0 || (max(min(v1, 1.000000f), 0.000000f) == max(min(v2, 1.000000f), 0.000000f))))
Original expression:
(let t194 = (histogram.s1.c == 0) in (select(t194, max(min(t192.s.min, 1.000000f), 0.000000f), 1.000000f) == select(t194, max(min(t192.s.max, 1.000000f), 0.000000f), 1.000000f)))
Failed to prove, but could not find a counter-example:
 (let v0 = (v3 == 0) in (!v0 || (max(min(v1, 1.000000f), 0.000000f) == max(min(v2, 1.000000f), 0.000000f))))
Original expression:
(let t200 = (histogram.s1.c == 0) in (select(t200, max(min(t198.s.min, 1.000000f), 0.000000f), 1.000000f) == select(t200, max(min(t198.s.max, 1.000000f), 0.000000f), 1.000000f)))
Failed to prove, but could not find a counter-example:
 (let v0 = (v3 == 0) in (!v0 || (max(min(v1, 1.000000f), 0.000000f) == max(min(v2, 1.000000f), 0.000000f))))
Original expression:
(let t206 = (histogram.s1.c == 0) in (select(t206, max(min(t204.s.min, 1.000000f), 0.000000f), 1.000000f) == select(t206, max(min(t204.s.max, 1.000000f), 0.000000f), 1.000000f)))
Failed to prove, but could not find a counter-example:
 (let v0 = (v3 == 0) in (!v0 || (max(min(v1, 1.000000f), 0.000000f) == max(min(v2, 1.000000f), 0.000000f))))
Original expression:
(let t212 = (histogram.s1.c == 0) in (select(t212, max(min(t210.s.min, 1.000000f), 0.000000f), 1.000000f) == select(t212, max(min(t210.s.max, 1.000000f), 0.000000f), 1.000000f)))
Failed to prove, but could not find a counter-example:
 (let v0 = (v3 == 0) in (!v0 || (max(min(v1, 1.000000f), 0.000000f) == max(min(v2, 1.000000f), 0.000000f))))
Original expression:
(let t229 = (histogram.s1.c == 0) in (select(t229, max(min(t227.s.min, 1.000000f), 0.000000f), 1.000000f) == select(t229, max(min(t227.s.max, 1.000000f), 0.000000f), 1.000000f)))
Failed to prove, but could not find a counter-example:
 (let v0 = (v3 == 0) in (!v0 || (max(min(v1, 1.000000f), 0.000000f) == max(min(v2, 1.000000f), 0.000000f))))
Original expression:
(let t259 = (histogram.s1.c == 0) in (select(t259, max(min(t257.s.min, 1.000000f), 0.000000f), 1.000000f) == select(t259, max(min(t257.s.max, 1.000000f), 0.000000f), 1.000000f)))
Failed to prove, but could not find a counter-example:
 (let v0 = (v3 == 0) in (!v0 || (max(min(v1, 1.000000f), 0.000000f) == max(min(v2, 1.000000f), 0.000000f))))
Original expression:
(let t265 = (histogram.s1.c == 0) in (select(t265, max(min(t263.s.min, 1.000000f), 0.000000f), 1.000000f) == select(t265, max(min(t263.s.max, 1.000000f), 0.000000f), 1.000000f)))
Failed to prove, but could not find a counter-example:
 (let v0 = (v3 == 0) in (!v0 || (max(min(v1, 1.000000f), 0.000000f) == max(min(v2, 1.000000f), 0.000000f))))
Original expression:
(let t271 = (histogram.s1.c == 0) in (select(t271, max(min(t269.s.min, 1.000000f), 0.000000f), 1.000000f) == select(t271, max(min(t269.s.max, 1.000000f), 0.000000f), 1.000000f)))
Failed to prove, but could not find a counter-example:
 (let v0 = (v3 == 0) in (!v0 || (max(min(v1, 1.000000f), 0.000000f) == max(min(v2, 1.000000f), 0.000000f))))
Original expression:
(let t277 = (histogram.s1.c == 0) in (select(t277, max(min(t275.s.min, 1.000000f), 0.000000f), 1.000000f) == select(t277, max(min(t275.s.max, 1.000000f), 0.000000f), 1.000000f)))
Failed to prove, but could not find a counter-example:
 (let v0 = (v3 == 0) in (!v0 || (max(min(v1, 1.000000f), 0.000000f) == max(min(v2, 1.000000f), 0.000000f))))
Original expression:
(let t294 = (histogram.s1.c == 0) in (select(t294, max(min(t292.s.min, 1.000000f), 0.000000f), 1.000000f) == select(t294, max(min(t292.s.max, 1.000000f), 0.000000f), 1.000000f)))
Injecting early frees...
Simplifying correlated differences...
Bounding small allocations...
Injecting warp shuffles...
Simplifying...
Lowering unsafe promises...
Lowering after final simplification:
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
assert((reinterpret(uint64, bilateral_grid.buffer) != (uint64)0), halide_error_buffer_argument_is_null("bilateral_grid"))
let bilateral_grid = _halide_buffer_get_host(bilateral_grid.buffer)
let bilateral_grid.type = _halide_buffer_get_type(bilateral_grid.buffer)
let bilateral_grid.dimensions = _halide_buffer_get_dimensions(bilateral_grid.buffer)
let bilateral_grid.min.0 = _halide_buffer_get_min(bilateral_grid.buffer, 0)
let bilateral_grid.extent.0 = _halide_buffer_get_extent(bilateral_grid.buffer, 0)
let bilateral_grid.stride.0 = _halide_buffer_get_stride(bilateral_grid.buffer, 0)
let bilateral_grid.min.1 = _halide_buffer_get_min(bilateral_grid.buffer, 1)
let bilateral_grid.extent.1 = _halide_buffer_get_extent(bilateral_grid.buffer, 1)
let bilateral_grid.stride.1 = _halide_buffer_get_stride(bilateral_grid.buffer, 1)
let input = _halide_buffer_get_host(input.buffer)
let input.type = _halide_buffer_get_type(input.buffer)
let input.dimensions = _halide_buffer_get_dimensions(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.extent.0 = _halide_buffer_get_extent(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.extent.1 = _halide_buffer_get_extent(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let blurx.s0.z.max.s = int32(max((1.000000f/r_sigma), 0.000000f))
let blurx.s0.z.min = int32(min((1.000000f/r_sigma), 0.000000f))
let histogram.s0.z.max = max((blurx.s0.z.max.s + 3), int32((max((1.000000f/r_sigma), 0.000000f) + 0.500000f)))
let histogram.s0.z.min = min((blurx.s0.z.min + -2), int32((min((1.000000f/r_sigma), 0.000000f) + 0.500000f)))
let bilateral_grid.extent.0.required.s = (min((((bilateral_grid.extent.0 + -1)/16)*16), (bilateral_grid.extent.0 + -16)) - min(bilateral_grid.extent.0, 16))
let bilateral_grid.extent.1.required.s = (min((((bilateral_grid.extent.1 + -1)/64)*64), (bilateral_grid.extent.1 + -64)) - min(bilateral_grid.extent.1, 64))
let input.extent.0.required = (max(max(min((((((bilateral_grid.extent.0 + bilateral_grid.min.0) + 23)/8)*8) + 4), (input.extent.0 + input.min.0)), (bilateral_grid.extent.0 + bilateral_grid.min.0)), (input.min.0 + 1)) - min(max((min(((bilateral_grid.min.0/8)*8), ((input.extent.0 + input.min.0) + 19)) + -20), input.min.0), ((min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0) + -512)))
let input.min.0.required = min(max((min(((bilateral_grid.min.0/8)*8), ((input.extent.0 + input.min.0) + 19)) + -20), input.min.0), ((min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0) + -512))
let input.extent.1.required = (max(max(min((((((bilateral_grid.extent.1 + bilateral_grid.min.1) + 23)/8)*8) + 4), (input.extent.1 + input.min.1)), (bilateral_grid.extent.1 + bilateral_grid.min.1)), (input.min.1 + 1)) - min(max((min(((bilateral_grid.min.1/8)*8), ((input.extent.1 + input.min.1) + 19)) + -20), input.min.1), ((min(bilateral_grid.extent.1, 16) + bilateral_grid.min.1) + -16)))
let input.min.1.required = min(max((min(((bilateral_grid.min.1/8)*8), ((input.extent.1 + input.min.1) + 19)) + -20), input.min.1), ((min(bilateral_grid.extent.1, 16) + bilateral_grid.min.1) + -16))
if (_halide_buffer_is_bounds_query(bilateral_grid.buffer)) {
  _halide_buffer_init(bilateral_grid.buffer, _halide_buffer_get_shape(bilateral_grid.buffer), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 2, 32, 2, make_struct((halide_dimension_t *), ((min(bilateral_grid.extent.0, 16) + bilateral_grid.min.0) + -16), (bilateral_grid.extent.0.required.s + 32), 1, 0, ((min(bilateral_grid.extent.1, 64) + bilateral_grid.min.1) + -64), (bilateral_grid.extent.1.required.s + 128), (bilateral_grid.extent.0.required.s + 32), 0), (uint64)0)
}
if (_halide_buffer_is_bounds_query(input.buffer)) {
  _halide_buffer_init(input.buffer, _halide_buffer_get_shape(input.buffer), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 2, 32, 2, make_struct((halide_dimension_t *), input.min.0.required, input.extent.0.required, 1, 0, input.min.1.required, input.extent.1.required, input.extent.0.required, 0), (uint64)0)
}
if (!(_halide_buffer_is_bounds_query(bilateral_grid.buffer) || _halide_buffer_is_bounds_query(input.buffer))) {
  assert((bilateral_grid.type == (uint32)73730), halide_error_bad_type("Output buffer bilateral_grid", bilateral_grid.type, (uint32)73730))
  assert((bilateral_grid.dimensions == 2), halide_error_bad_dimensions("Output buffer bilateral_grid", bilateral_grid.dimensions, 2))
  assert((input.type == (uint32)73730), halide_error_bad_type("Input buffer input", input.type, (uint32)73730))
  assert((input.dimensions == 2), halide_error_bad_dimensions("Input buffer input", input.dimensions, 2))
  assert(((16 <= bilateral_grid.extent.0) && ((((min(bilateral_grid.extent.0, 16) + bilateral_grid.min.0) + bilateral_grid.extent.0.required.s) + 16) <= (bilateral_grid.extent.0 + bilateral_grid.min.0))), halide_error_access_out_of_bounds("Output buffer bilateral_grid", 0, ((min(bilateral_grid.extent.0, 16) + bilateral_grid.min.0) + -16), (((min(bilateral_grid.extent.0, 16) + bilateral_grid.min.0) + bilateral_grid.extent.0.required.s) + 15), bilateral_grid.min.0, ((bilateral_grid.extent.0 + bilateral_grid.min.0) + -1)))
  assert(((64 <= bilateral_grid.extent.1) && ((((min(bilateral_grid.extent.1, 64) + bilateral_grid.min.1) + bilateral_grid.extent.1.required.s) + 64) <= (bilateral_grid.extent.1 + bilateral_grid.min.1))), halide_error_access_out_of_bounds("Output buffer bilateral_grid", 1, ((min(bilateral_grid.extent.1, 64) + bilateral_grid.min.1) + -64), (((min(bilateral_grid.extent.1, 64) + bilateral_grid.min.1) + bilateral_grid.extent.1.required.s) + 63), bilateral_grid.min.1, ((bilateral_grid.extent.1 + bilateral_grid.min.1) + -1)))
  assert(((input.min.0 <= input.min.0.required) && ((input.extent.0.required + input.min.0.required) <= (input.extent.0 + input.min.0))), halide_error_access_out_of_bounds("Input buffer input", 0, input.min.0.required, ((input.extent.0.required + input.min.0.required) + -1), input.min.0, ((input.extent.0 + input.min.0) + -1)))
  assert((0 <= input.extent.0), halide_error_buffer_extents_negative("Input buffer input", 0, input.extent.0))
  assert(((input.min.1 <= input.min.1.required) && ((input.extent.1.required + input.min.1.required) <= (input.extent.1 + input.min.1))), halide_error_access_out_of_bounds("Input buffer input", 1, input.min.1.required, ((input.extent.1.required + input.min.1.required) + -1), input.min.1, ((input.extent.1 + input.min.1) + -1)))
  assert((0 <= input.extent.1), halide_error_buffer_extents_negative("Input buffer input", 1, input.extent.1))
  assert((bilateral_grid.stride.0 == 1), halide_error_constraint_violated("bilateral_grid.stride.0", bilateral_grid.stride.0, "1", 1))
  assert((input.stride.0 == 1), halide_error_constraint_violated("input.stride.0", input.stride.0, "1", 1))
  let bilateral_grid.total_extent.1 = (int64(bilateral_grid.extent.1)*int64(bilateral_grid.extent.0))
  let input.total_extent.1 = (int64(input.extent.1)*int64(input.extent.0))
  assert((abs(int64(bilateral_grid.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("bilateral_grid", abs(int64(bilateral_grid.extent.0)), (uint64)2147483647))
  assert((abs((int64(bilateral_grid.extent.1)*int64(bilateral_grid.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("bilateral_grid", abs((int64(bilateral_grid.extent.1)*int64(bilateral_grid.stride.1))), (uint64)2147483647))
  assert((bilateral_grid.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("bilateral_grid", bilateral_grid.total_extent.1, (int64)2147483647))
  assert((abs(int64(input.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("input", abs(int64(input.extent.0)), (uint64)2147483647))
  assert((abs((int64(input.extent.1)*int64(input.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("input", abs((int64(input.extent.1)*int64(input.stride.1))), (uint64)2147483647))
  assert((input.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("input", input.total_extent.1, (int64)2147483647))
  let histogram.z.min_realized = (let t767 = min((blurx.s0.z.max.s + -4), blurx.s0.z.min) in (let t768.s = quiet_div(1.000000f, r_sigma) in min(min(min(min(min(min(min((t767 + -2), int32((min(t768.s, 0.000000f) + 0.500000f))), (blurx.s0.z.max.s + -4)), blurx.s0.z.min), (t767 + 1)), (histogram.s0.z.max + -7)), histogram.s0.z.min), int32((min(t768.s, 0.000000f) + 0.500000f)))))
  let histogram.z.extent_realized.s.s = (let t770 = min((((min((((blurx.s0.z.max.s - blurx.s0.z.min) + 1)/6), (((((blurx.s0.z.max.s - blurx.s0.z.min) + 1)/12)*2) + 1))*6) + blurx.s0.z.min) + 4), blurx.s0.z.max.s) in max(max(max(t770, int32((max(quiet_div(1.000000f, r_sigma), 0.000000f) + 0.500000f))), (t770 + 3)), min((((((histogram.s0.z.max - histogram.s0.z.min)/8)*8) + histogram.s0.z.min) + 7), histogram.s0.z.max)))
  let histogram.y.min_realized.s = min((min(bilateral_grid.extent.1, 193) + 1064), bilateral_grid.extent.1)
  let histogram.y.extent_realized.s = ((((bilateral_grid.extent.1 + bilateral_grid.min.1) + 23)/8) - (((bilateral_grid.min.1 + histogram.y.min_realized.s) + -1273)/8))
  let histogram.x.extent_realized.s = ((((bilateral_grid.extent.0 + bilateral_grid.min.0) + 23)/8) - (((min(bilateral_grid.extent.0, 745) + bilateral_grid.min.0) + -761)/8))
  let histogram.stride.2 = (((histogram.x.extent_realized.s*2) + 2)*(histogram.y.extent_realized.s + 1))
  allocate histogram[float32 * (histogram.x.extent_realized.s + 1) * (histogram.y.extent_realized.s + 1) * ((histogram.z.extent_realized.s.s - histogram.z.min_realized) + 1) * 2] if (uint1)0
  let histogram.buffer = _halide_buffer_init(alloca(size_of_halide_buffer_t()), make_struct((halide_dimension_t *), (((min(bilateral_grid.extent.0, 745) + bilateral_grid.min.0) + -761)/8), (histogram.x.extent_realized.s + 1), 2, 0, (((bilateral_grid.min.1 + histogram.y.min_realized.s) + -1273)/8), (histogram.y.extent_realized.s + 1), ((histogram.x.extent_realized.s*2) + 2), 0, histogram.z.min_realized, ((histogram.z.extent_realized.s.s - histogram.z.min_realized) + 1), histogram.stride.2, 0, 0, 2, 1, 0), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 2, 32, 4, make_struct((halide_dimension_t *), (((min(bilateral_grid.extent.0, 745) + bilateral_grid.min.0) + -761)/8), (histogram.x.extent_realized.s + 1), 2, 0, (((bilateral_grid.min.1 + histogram.y.min_realized.s) + -1273)/8), (histogram.y.extent_realized.s + 1), ((histogram.x.extent_realized.s*2) + 2), 0, histogram.z.min_realized, ((histogram.z.extent_realized.s.s - histogram.z.min_realized) + 1), histogram.stride.2, 0, 0, 2, 1, 0), (uint64)0)
  register_destructor("halide_device_free_as_destructor", histogram.buffer)
  produce histogram {
    let histogram.s0.x.x.loop_extent.s = ((((bilateral_grid.extent.0 + bilateral_grid.min.0) + 23)/8) - (bilateral_grid.min.0/8))
    let histogram.s0.y.y.loop_extent.s = ((((bilateral_grid.extent.1 + bilateral_grid.min.1) + 23)/8) - (bilateral_grid.min.1/8))
    let histogram.s1.y.loop_extent.s = ((((bilateral_grid.extent.1 + bilateral_grid.min.1) + 31)/8) - (bilateral_grid.min.1/8))
    let histogram.s1.x.loop_extent.s = ((((bilateral_grid.extent.0 + bilateral_grid.min.0) + 31)/8) - (bilateral_grid.min.0/8))
    let halide_device_malloc_result$3 = halide_device_malloc(histogram.buffer, halide_cuda_device_interface())
    assert((halide_device_malloc_result$3 == 0), halide_device_malloc_result$3)
    let t413.s = ((2520 - bilateral_grid.min.1) - histogram.y.min_realized.s)
    let t838 = (((min(bilateral_grid.extent.0, 745) + bilateral_grid.min.0) + -761)/8)
    let t837 = (((bilateral_grid.min.1 + histogram.y.min_realized.s) + -1273)/8)
    let t833 = (((bilateral_grid.extent.1 + bilateral_grid.min.1) + -1273)/8)
    let t835 = (((bilateral_grid.extent.0 + bilateral_grid.min.0) + -761)/8)
    let t830 = ((histogram.s0.y.y.loop_extent.s + 165)/163)
    let t831 = ((histogram.s0.x.x.loop_extent.s + 101)/99)
    let t840 = (t413.s/8)
    let t829 = (((histogram.s0.z.max - histogram.s0.z.min)/8) + 1)
    let t834 = ((bilateral_grid.min.1/8) + -2)
    let t836 = ((bilateral_grid.min.0/8) + -2)
    let t839 = ((histogram.x.extent_realized.s*2) + 2)
    let t832 = (histogram.s0.z.max + -7)
    gpu_block<CUDA> (histogram.s0.z.z.__block_id_z, 0, t829) {
      gpu_block<CUDA> (histogram.s0.y.y.__block_id_y, 0, t830) {
        gpu_block<CUDA> (histogram.s0.x.x.__block_id_x, 0, t831) {
          gpu_thread<CUDA> (.__thread_id_y, 0, 21) {
            gpu_thread<CUDA> (.__thread_id_x, 0, 13) {
              let histogram.s0.z.zi.base = min(((histogram.s0.z.z.__block_id_z*8) + histogram.s0.z.min), t832)
              let histogram.s0.y.yi.base = min(((histogram.s0.y.y.__block_id_y*163) + t834), t833)
              if ((.__thread_id_y < 20)) {
                if ((.__thread_id_x < 12)) {
                  let histogram.s0.x.xi.base = min(((histogram.s0.x.x.__block_id_x*99) + t836), t835)
                  let t416 = ((.__thread_id_y*8) + (histogram.s0.y.yi.base - t837))
                  let t417 = ((.__thread_id_x*8) + (histogram.s0.x.xi.base - t838))
                  let t841 = (histogram.s0.z.zi.base - histogram.z.min_realized)
                  for (histogram.s0.z.zi, 0, 8) {
                    let t842 = ((histogram.s0.z.zi + t841)*histogram.stride.2)
                    for (histogram.s0.y.yi.yii, 0, 8) {
                      let t419 = (((histogram.s0.y.yi.yii + t416)*t839) + t842)
                      for (histogram.s0.x.xi.xii, 0, 8) {
                        let t843 = (((histogram.s0.x.xi.xii + t417)*2) + t419)
                        for (histogram.s0.c, 0, 2) {
                          histogram[(histogram.s0.c + t843)] = 0.000000f
                        }
                      }
                    }
                  }
                } else {
                  let histogram.s0.x.xi.base = min(((histogram.s0.x.x.__block_id_x*99) + t836), t835)
                  let t423 = (histogram.s0.x.xi.base - t838)
                  let t422 = ((.__thread_id_y*8) + (histogram.s0.y.yi.base - t837))
                  let t844 = (histogram.s0.z.zi.base - histogram.z.min_realized)
                  for (histogram.s0.z.zi, 0, 8) {
                    let t845 = ((histogram.s0.z.zi + t844)*histogram.stride.2)
                    for (histogram.s0.y.yi.yii, 0, 8) {
                      let t425.s = (((histogram.s0.y.yi.yii + t422)*t839) + t845)
                      let t846 = (t425.s + 182)
                      for (histogram.s0.x.xi.xii, 0, 8) {
                        let t847 = (((histogram.s0.x.xi.xii + t423)*2) + t846)
                        for (histogram.s0.c, 0, 2) {
                          histogram[(histogram.s0.c + t847)] = 0.000000f
                        }
                      }
                    }
                  }
                }
              } else {
                let histogram.s0.x.xi.base = min(((histogram.s0.x.x.__block_id_x*99) + t836), t835)
                let t429 = (min((.__thread_id_x*8), 91) + (histogram.s0.x.xi.base - t838))
                let t848 = (histogram.s0.z.zi.base - histogram.z.min_realized)
                let t849 = (histogram.s0.y.yi.base + t840)
                for (histogram.s0.z.zi, 0, 8) {
                  let t850 = ((histogram.s0.z.zi + t848)*histogram.stride.2)
                  for (histogram.s0.y.yi.yii, 0, 8) {
                    let t431 = (((histogram.s0.y.yi.yii + t849)*t839) + t850)
                    for (histogram.s0.x.xi.xii, 0, 8) {
                      let t851 = (((histogram.s0.x.xi.xii + t429)*2) + t431)
                      for (histogram.s0.c, 0, 2) {
                        histogram[(histogram.s0.c + t851)] = 0.000000f
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    _halide_buffer_set_device_dirty(histogram.buffer, (uint1)1)
    let halide_copy_to_device_result$1 = halide_copy_to_device(input.buffer, halide_cuda_device_interface())
    assert((halide_copy_to_device_result$1 == 0), halide_copy_to_device_result$1)
    let histogram.s1.y.y.__block_id_y.prologue = min(max((((input.min.1 - ((bilateral_grid.min.1/8)*8)) + 1323)/1304), 0), ((histogram.s0.y.y.loop_extent.s + 165)/163))
    let histogram.s1.y.y.__block_id_y.epilogue = (let t774 = ((input.extent.1 + input.min.1) - ((bilateral_grid.min.1/8)*8)) in max(min(max((((input.min.1 - ((bilateral_grid.min.1/8)*8)) + 1323)/1304), 0), ((histogram.s0.y.y.loop_extent.s + 165)/163)), (min(min(min(((histogram.s1.y.loop_extent.s + -166)/163), ((t774 + -1324)/1304)), ((t774 + 19)/1304)), ((histogram.s0.y.y.loop_extent.s + 2)/163)) + 1)))
    let t94 = min(max((((input.min.0 - ((bilateral_grid.min.0/8)*8)) + 811)/792), 0), ((histogram.s0.x.x.loop_extent.s + 101)/99))
    let t95 = (let t775 = ((input.extent.0 + input.min.0) - ((bilateral_grid.min.0/8)*8)) in max(min(max((((input.min.0 - ((bilateral_grid.min.0/8)*8)) + 811)/792), 0), ((histogram.s0.x.x.loop_extent.s + 101)/99)), (min(min(min(((histogram.s1.x.loop_extent.s + -102)/99), ((t775 + -812)/792)), ((t775 + 19)/792)), ((histogram.s0.x.x.loop_extent.s + 2)/99)) + 1)))
    let t454 = ((bilateral_grid.min.1/8) - (((bilateral_grid.min.1 + histogram.y.min_realized.s) + -1273)/8))
    let t442 = (1.000000f/r_sigma)
    let t441 = ((bilateral_grid.min.0/8) - (((min(bilateral_grid.extent.0, 745) + bilateral_grid.min.0) + -761)/8))
    let t444 = (184 - (histogram.x.extent_realized.s*4))
    let t438 = (-8 - (histogram.x.extent_realized.s*4))
    let t865 = (input.min.1*input.stride.1)
    let t852 = ((histogram.s0.y.y.loop_extent.s + 165)/163)
    let t853 = ((histogram.s0.x.x.loop_extent.s + 101)/99)
    let t856 = (bilateral_grid.min.1/8)
    let t857 = (bilateral_grid.min.0/8)
    let t858 = ((748 - t865) - input.min.0)
    let t854 = ((-20 - t865) - input.min.0)
    let t861 = (input.min.0 + t865)
    let t855 = ((histogram.x.extent_realized.s*2) + 2)
    let t864 = ((input.extent.1 + input.min.1) + 19)
    let t862 = ((input.extent.0 + input.min.0) + 19)
    gpu_block<CUDA> (histogram.s1.y.y.__block_id_y, 0, t852) {
      gpu_block<CUDA> (histogram.s1.x.x.__block_id_x, 0, t853) {
        gpu_thread<CUDA> (.__thread_id_y, 0, 21) {
          gpu_thread<CUDA> (.__thread_id_x, 0, 13) {
            if (((histogram.s1.y.y.__block_id_y.prologue <= histogram.s1.y.y.__block_id_y) && (histogram.s1.y.y.__block_id_y < histogram.s1.y.y.__block_id_y.epilogue))) {
              if (((t94 <= histogram.s1.x.x.__block_id_x) && (histogram.s1.x.x.__block_id_x < t95))) {
                if ((.__thread_id_y < 20)) {
                  if ((.__thread_id_x < 12)) {
                    let t458 = ((histogram.s1.y.y.__block_id_y*163) + (.__thread_id_y*8))
                    let t459 = ((histogram.s1.x.x.__block_id_x*99) + (.__thread_id_x*8))
                    let t868 = (t459 + t857)
                    let t867 = (t458 + t856)
                    let t866 = (t454 + t458)
                    let t869 = (t441 + t459)
                    for (histogram.s1.y.yi.yii, 0, 8) {
                      let t462.s = ((histogram.s1.y.yi.yii + t866)*t855)
                      let t461.s = (histogram.s1.y.yi.yii + t867)
                      let t871 = ((t461.s*8) + -20)
                      let t870 = (t438 + t462.s)
                      for (histogram.s1.x.xi.xii, 0, 8) {
                        let t463.s = (histogram.s1.x.xi.xii + t868)
                        let t464 = (((histogram.s1.x.xi.xii + t869)*2) + t870)
                        let t872 = ((t463.s*8) + t854)
                        for (histogram.s1.c, 0, 2) {
                          let t466 = (histogram.s1.c == 0)
                          let t873 = (histogram.s1.c + t464)
                          for (histogram.s1.r4$y, 0, 8) {
                            let t467 = (((histogram.s1.r4$y + t871)*input.stride.1) + t872)
                            for (histogram.s1.r4$x, 0, 8) {
                              histogram[(((int32(((max(min(input[(histogram.s1.r4$x + t467)], 1.000000f), 0.000000f)*t442) + 0.500000f)) - histogram.z.min_realized)*histogram.stride.2) + t873)] = (let t776.s = input[(histogram.s1.r4$x + t467)] in (histogram[(((int32(((max(min(t776.s, 1.000000f), 0.000000f)*t442) + 0.500000f)) - histogram.z.min_realized)*histogram.stride.2) + t873)] + select(t466, max(min(t776.s, 1.000000f), 0.000000f), 1.000000f)))
                            }
                          }
                        }
                      }
                    }
                  } else {
                    let t468 = ((histogram.s1.y.y.__block_id_y*163) + (.__thread_id_y*8))
                    let t470 = ((histogram.s1.x.x.__block_id_x*99) + t857)
                    let t876 = ((histogram.s1.x.x.__block_id_x*99) + t441)
                    let t875 = (t468 + t856)
                    let t874 = (t454 + t468)
                    for (histogram.s1.y.yi.yii, 0, 8) {
                      let t474.s = ((histogram.s1.y.yi.yii + t874)*t855)
                      let t473.s = (histogram.s1.y.yi.yii + t875)
                      let t878 = ((t473.s*8) + -20)
                      let t877 = (t444 + t474.s)
                      for (histogram.s1.x.xi.xii, 0, 3) {
                        let t476 = (((histogram.s1.x.xi.xii + t876)*2) + t877)
                        let t879 = (((histogram.s1.x.xi.xii + t470)*8) + t858)
                        for (histogram.s1.c, 0, 2) {
                          let t478 = (histogram.s1.c == 0)
                          let t880 = (histogram.s1.c + t476)
                          for (histogram.s1.r4$y, 0, 8) {
                            let t479 = (((histogram.s1.r4$y + t878)*input.stride.1) + t879)
                            for (histogram.s1.r4$x, 0, 8) {
                              histogram[(((int32(((max(min(input[(histogram.s1.r4$x + t479)], 1.000000f), 0.000000f)*t442) + 0.500000f)) - histogram.z.min_realized)*histogram.stride.2) + t880)] = (let t777.s = input[(histogram.s1.r4$x + t479)] in (histogram[(((int32(((max(min(t777.s, 1.000000f), 0.000000f)*t442) + 0.500000f)) - histogram.z.min_realized)*histogram.stride.2) + t880)] + select(t478, max(min(t777.s, 1.000000f), 0.000000f), 1.000000f)))
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  let t480 = (99 - max((.__thread_id_x*8), 91))
                  let t483 = ((histogram.s1.y.y.__block_id_y*163) + t856)
                  let t481 = ((histogram.s1.x.x.__block_id_x*99) + (.__thread_id_x*8))
                  let t881 = (((histogram.s1.y.y.__block_id_y*163) + t454) + 160)
                  let t882 = (t481 + t857)
                  let t883 = (t441 + t481)
                  for (histogram.s1.y.yi.yii, 0, 3) {
                    let t488.s = ((histogram.s1.y.yi.yii + t881)*t855)
                    let t885 = (((histogram.s1.y.yi.yii + t483)*8) + 1260)
                    let t884 = (t438 + t488.s)
                    for (histogram.s1.x.xi.xii, 0, t480) {
                      let t489.s = (histogram.s1.x.xi.xii + t882)
                      let t490 = (((histogram.s1.x.xi.xii + t883)*2) + t884)
                      let t886 = ((t489.s*8) + t854)
                      for (histogram.s1.c, 0, 2) {
                        let t492 = (histogram.s1.c == 0)
                        let t887 = (histogram.s1.c + t490)
                        for (histogram.s1.r4$y, 0, 8) {
                          let t493 = (((histogram.s1.r4$y + t885)*input.stride.1) + t886)
                          for (histogram.s1.r4$x, 0, 8) {
                            histogram[(((int32(((max(min(input[(histogram.s1.r4$x + t493)], 1.000000f), 0.000000f)*t442) + 0.500000f)) - histogram.z.min_realized)*histogram.stride.2) + t887)] = (let t778.s = input[(histogram.s1.r4$x + t493)] in (histogram[(((int32(((max(min(t778.s, 1.000000f), 0.000000f)*t442) + 0.500000f)) - histogram.z.min_realized)*histogram.stride.2) + t887)] + select(t492, max(min(t778.s, 1.000000f), 0.000000f), 1.000000f)))
                          }
                        }
                      }
                    }
                  }
                }
              } else {
                let histogram.s1.y.yi.yii.new_max$1 = (163 - max((.__thread_id_y*8), 155))
                let t495.s = (min((histogram.s1.x.loop_extent.s - (histogram.s1.x.x.__block_id_x*99)), 97) - (.__thread_id_x*8))
                let t494 = ((histogram.s1.y.y.__block_id_y*163) + (.__thread_id_y*8))
                let t496 = ((histogram.s1.x.x.__block_id_x*99) + (.__thread_id_x*8))
                let t890 = (max(min(t495.s, 6), -2) + 2)
                let t892 = (t496 + t857)
                let t889 = (t494 + t856)
                let t888 = (t454 + t494)
                let t893 = (t441 + t496)
                let t891 = (histogram.s1.x.loop_extent.s + 2)
                for (histogram.s1.y.yi.yii, 0, histogram.s1.y.yi.yii.new_max$1) {
                  let t501.s = ((histogram.s1.y.yi.yii + t888)*t855)
                  let t500.s = (histogram.s1.y.yi.yii + t889)
                  let t895 = ((t500.s*8) + -20)
                  let t894 = (t438 + t501.s)
                  for (histogram.s1.x.xi.xii, 0, t890) {
                    if (((histogram.s1.x.xi.xii + t496) < t891)) {
                      let t502.s = (histogram.s1.x.xi.xii + t892)
                      let t503 = (((histogram.s1.x.xi.xii + t893)*2) + t894)
                      let t896 = (t502.s*8)
                      for (histogram.s1.c, 0, 2) {
                        let t505 = (histogram.s1.c == 0)
                        let t897 = (histogram.s1.c + t503)
                        for (histogram.s1.r4$y, 0, 8) {
                          let t506 = (((histogram.s1.r4$y + t895)*input.stride.1) - t861)
                          for (histogram.s1.r4$x, 0, 8) {
                            histogram[(((int32(((max(min(input[(max((min((histogram.s1.r4$x + t896), t862) + -20), input.min.0) + t506)], 1.000000f), 0.000000f)*t442) + 0.500000f)) - histogram.z.min_realized)*histogram.stride.2) + t897)] = (let t779.s = input[(max((min((histogram.s1.r4$x + t896), t862) + -20), input.min.0) + t506)] in (histogram[(((int32(((max(min(t779.s, 1.000000f), 0.000000f)*t442) + 0.500000f)) - histogram.z.min_realized)*histogram.stride.2) + t897)] + select(t505, max(min(t779.s, 1.000000f), 0.000000f), 1.000000f)))
                          }
                        }
                      }
                    }
                  }
                }
              }
            } else {
              let histogram.s1.y.yi.yii.new_max$2.s.s = (min((histogram.s1.y.loop_extent.s - (histogram.s1.y.y.__block_id_y*163)), 161) - (.__thread_id_y*8))
              let t509.s = (min((histogram.s1.x.loop_extent.s - (histogram.s1.x.x.__block_id_x*99)), 97) - (.__thread_id_x*8))
              let t508 = ((histogram.s1.y.y.__block_id_y*163) + (.__thread_id_y*8))
              let t510 = ((histogram.s1.x.x.__block_id_x*99) + (.__thread_id_x*8))
              let t902 = (max(min(t509.s, 6), -2) + 2)
              let t898 = (max(min(histogram.s1.y.yi.yii.new_max$2.s.s, 6), -2) + 2)
              let t904 = (t510 + t857)
              let t900 = (t508 + t856)
              let t901 = (t454 + t508)
              let t905 = (t441 + t510)
              let t899 = (histogram.s1.y.loop_extent.s + 2)
              let t903 = (histogram.s1.x.loop_extent.s + 2)
              for (histogram.s1.y.yi.yii, 0, t898) {
                if (((histogram.s1.y.yi.yii + t508) < t899)) {
                  let t514.s = (histogram.s1.y.yi.yii + t900)
                  let t515.s = ((histogram.s1.y.yi.yii + t901)*t855)
                  let t907 = (t514.s*8)
                  let t906 = (t438 + t515.s)
                  for (histogram.s1.x.xi.xii, 0, t902) {
                    if (((histogram.s1.x.xi.xii + t510) < t903)) {
                      let t516.s = (histogram.s1.x.xi.xii + t904)
                      let t517 = (((histogram.s1.x.xi.xii + t905)*2) + t906)
                      let t908 = (t516.s*8)
                      for (histogram.s1.c, 0, 2) {
                        let t519 = (histogram.s1.c == 0)
                        let t909 = (histogram.s1.c + t517)
                        for (histogram.s1.r4$y, 0, 8) {
                          let t520 = ((max((min((histogram.s1.r4$y + t907), t864) + -20), input.min.1)*input.stride.1) - t861)
                          for (histogram.s1.r4$x, 0, 8) {
                            histogram[(((int32(((max(min(input[(max((min((histogram.s1.r4$x + t908), t862) + -20), input.min.0) + t520)], 1.000000f), 0.000000f)*t442) + 0.500000f)) - histogram.z.min_realized)*histogram.stride.2) + t909)] = (let t780.s = input[(max((min((histogram.s1.r4$x + t908), t862) + -20), input.min.0) + t520)] in (histogram[(((int32(((max(min(t780.s, 1.000000f), 0.000000f)*t442) + 0.500000f)) - histogram.z.min_realized)*histogram.stride.2) + t909)] + select(t519, max(min(t780.s, 1.000000f), 0.000000f), 1.000000f)))
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  let blurz.z.min_realized = min((blurx.s0.z.max.s + -4), blurx.s0.z.min)
  let blurz.y.min_realized.s = min((min(bilateral_grid.extent.1, 81) + 112), bilateral_grid.extent.1)
  let blurz.y.extent_realized.s = (let t782 = ((((bilateral_grid.extent.1 + bilateral_grid.min.1) + 23)/8) - (bilateral_grid.min.1/8)) in (min((((bilateral_grid.extent.1 + bilateral_grid.min.1) + 23)/8), ((max((((t782 + 2)/16)*16), ((((t782 + 2)/30)*30) + 14)) + (bilateral_grid.min.1/8)) + 13)) - (((bilateral_grid.min.1 + blurz.y.min_realized.s) + -209)/8)))
  let blurz.x.extent_realized.s = (let t784 = ((bilateral_grid.min.0/8) + ((((((bilateral_grid.extent.0 + bilateral_grid.min.0) + 7)/8) - (bilateral_grid.min.0/8))/2)*2)) in (let t785 = min((((bilateral_grid.extent.0 + bilateral_grid.min.0) + 7)/8), (t784 + 1)) in (max(max(max(max(min((((bilateral_grid.extent.0 + bilateral_grid.min.0) + -1)/8), t784), (t785 + -2)), t785), (t785 + 2)), min((((bilateral_grid.extent.0 + bilateral_grid.min.0) + 23)/8), (((bilateral_grid.min.0/8) + (((((((bilateral_grid.extent.0 + bilateral_grid.min.0) + 23)/8) - (bilateral_grid.min.0/8)) + 2)/99)*99)) + 96))) - (((min(bilateral_grid.extent.0, 745) + bilateral_grid.min.0) + -761)/8))))
  let blurz.stride.2 = (((blurz.x.extent_realized.s*2) + 2)*(blurz.y.extent_realized.s + 1))
  allocate blurz[float32 * (blurz.x.extent_realized.s + 1) * (blurz.y.extent_realized.s + 1) * (max((blurx.s0.z.max.s - blurx.s0.z.min), 4) + 2) * 2] if (uint1)0
  let blurz.buffer = _halide_buffer_init(alloca(size_of_halide_buffer_t()), make_struct((halide_dimension_t *), (((min(bilateral_grid.extent.0, 745) + bilateral_grid.min.0) + -761)/8), (blurz.x.extent_realized.s + 1), 2, 0, (((bilateral_grid.min.1 + blurz.y.min_realized.s) + -209)/8), (blurz.y.extent_realized.s + 1), ((blurz.x.extent_realized.s*2) + 2), 0, blurz.z.min_realized, (max((blurx.s0.z.max.s - blurx.s0.z.min), 4) + 2), blurz.stride.2, 0, 0, 2, 1, 0), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 2, 32, 4, make_struct((halide_dimension_t *), (((min(bilateral_grid.extent.0, 745) + bilateral_grid.min.0) + -761)/8), (blurz.x.extent_realized.s + 1), 2, 0, (((bilateral_grid.min.1 + blurz.y.min_realized.s) + -209)/8), (blurz.y.extent_realized.s + 1), ((blurz.x.extent_realized.s*2) + 2), 0, blurz.z.min_realized, (max((blurx.s0.z.max.s - blurx.s0.z.min), 4) + 2), blurz.stride.2, 0, 0, 2, 1, 0), (uint64)0)
  register_destructor("halide_device_free_as_destructor", blurz.buffer)
  let blurz.s0.x.x.loop_extent.s = ((((bilateral_grid.extent.0 + bilateral_grid.min.0) + 23)/8) - (bilateral_grid.min.0/8))
  let blurz.s0.y.y.loop_extent.s = ((((bilateral_grid.extent.1 + bilateral_grid.min.1) + 23)/8) - (bilateral_grid.min.1/8))
  produce blurz {
    consume histogram {
      let halide_device_malloc_result$2 = halide_device_malloc(blurz.buffer, halide_cuda_device_interface())
      assert((halide_device_malloc_result$2 == 0), halide_device_malloc_result$2)
      let halide_device_malloc_result$4 = halide_device_malloc(histogram.buffer, halide_cuda_device_interface())
      assert((halide_device_malloc_result$4 == 0), halide_device_malloc_result$4)
      let t928 = (blurx.s0.z.max.s - blurx.s0.z.min)
      let t919 = ((t928 + 13)/12)
      let t920 = ((t928 + 7)/6)
      let t918 = (((min(bilateral_grid.extent.0, 745) + bilateral_grid.min.0) + -761)/8)
      let t917 = (((bilateral_grid.min.1 + histogram.y.min_realized.s) + -1273)/8)
      let t916 = (((bilateral_grid.min.1 + blurz.y.min_realized.s) + -209)/8)
      let t912 = (((bilateral_grid.extent.1 + bilateral_grid.min.1) + -209)/8)
      let t914 = (((bilateral_grid.extent.0 + bilateral_grid.min.0) + -761)/8)
      let t910 = ((blurz.s0.y.y.loop_extent.s + 32)/30)
      let t911 = ((blurz.s0.x.x.loop_extent.s + 101)/99)
      let t913 = ((bilateral_grid.min.1/8) + -2)
      let t915 = ((bilateral_grid.min.0/8) + -2)
      let t922 = ((histogram.x.extent_realized.s*2) + 2)
      let t923 = ((blurz.x.extent_realized.s*2) + 2)
      let t921 = (blurx.s0.z.max.s + -4)
      gpu_block<CUDA> (blurz.s0.y.y.__block_id_y, 0, t910) {
        gpu_block<CUDA> (blurz.s0.x.x.__block_id_x, 0, t911) {
          gpu_thread<CUDA> (.__thread_id_z, 0, 2) {
            gpu_thread<CUDA> (.__thread_id_y, 0, 8) {
              gpu_thread<CUDA> (.__thread_id_x, 0, 50) {
                let blurz.s0.y.yi.base = min(((blurz.s0.y.y.__block_id_y*30) + t913), t912)
                let blurz.s0.x.xi.base = min(((blurz.s0.x.x.__block_id_x*99) + t915), t914)
                let t540 = (min((.__thread_id_y*4), 26) + (blurz.s0.y.yi.base - t916))
                let t537 = (min((.__thread_id_y*4), 26) + (blurz.s0.y.yi.base - t917))
                let t538 = (min((.__thread_id_x*2), 97) + (blurz.s0.x.xi.base - t918))
                for (blurz.s0.z.z.z_serial_outer, 0, t919) {
                  if ((((blurz.s0.z.z.z_serial_outer*2) + .__thread_id_z) < t920)) {
                    let blurz.s0.z.zi.base = min(((((blurz.s0.z.z.z_serial_outer*2) + .__thread_id_z)*6) + blurx.s0.z.min), t921)
                    let t939 = (blurz.s0.z.zi.base - histogram.z.min_realized)
                    let t933 = (blurz.s0.z.zi.base - blurz.z.min_realized)
                    for (blurz.s0.z.zi, 0, 6) {
                      let t946 = (blurz.s0.z.zi + t939)
                      let t941 = ((t946 + 2)*histogram.stride.2)
                      let t942 = ((t946 + 1)*histogram.stride.2)
                      let t945 = ((t946 + -1)*histogram.stride.2)
                      let t944 = ((t946 + -2)*histogram.stride.2)
                      let t943 = (histogram.stride.2*t946)
                      let t940 = ((blurz.s0.z.zi + t933)*blurz.stride.2)
                      for (blurz.s0.y.yi.yii, 0, 4) {
                        let t548 = ((blurz.s0.y.yi.yii + t537)*t922)
                        let t553 = (((blurz.s0.y.yi.yii + t540)*t923) + t940)
                        let t951 = (t548 + t945)
                        let t950 = (t548 + t944)
                        let t949 = (t548 + t943)
                        let t948 = (t548 + t942)
                        let t947 = (t548 + t941)
                        for (blurz.s0.x.xi.xii, 0, 2) {
                          let t954 = (blurz.s0.x.xi.xii + t538)
                          let t953 = ((t954*2) + t553)
                          for (blurz.s0.c, 0, 2) {
                            blurz[(blurz.s0.c + t953)] = (histogram[(((t954*2) + t947) + blurz.s0.c)] + ((histogram[(((t954*2) + t948) + blurz.s0.c)]*4.000000f) + ((histogram[(((t954*2) + t949) + blurz.s0.c)]*6.000000f) + (histogram[(((t954*2) + t950) + blurz.s0.c)] + (histogram[(((t954*2) + t951) + blurz.s0.c)]*4.000000f)))))
                          }
                        }
                      }
                    }
                  }
                  gpu_thread_barrier()
                }
              }
            }
          }
        }
      }
      let halide_device_free_result$3 = halide_device_free(histogram.buffer)
      assert((halide_device_free_result$3 == 0), halide_device_free_result$3)
      free histogram
      _halide_buffer_set_device_dirty(blurz.buffer, (uint1)1)
    }
  }
  let blurx.z.min_realized = min(blurx.s0.z.min, int32(min(quiet_div(1.000000f, r_sigma), 0.000000f)))
  let blurx.z.extent_realized.s.s = max(blurx.s0.z.max.s, int32(max(quiet_div(1.000000f, r_sigma), 0.000000f)))
  let blurx.y.extent_realized.s = ((((bilateral_grid.extent.1 + bilateral_grid.min.1) + 23)/8) - (((min(bilateral_grid.extent.1, 81) + bilateral_grid.min.1) + -97)/8))
  let blurx.x.extent_realized.s = ((((bilateral_grid.extent.0 + bilateral_grid.min.0) + 7)/8) - ((min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0)/8))
  let blurx.stride.2 = (((blurx.x.extent_realized.s*2) + 130)*(blurx.y.extent_realized.s + 1))
  allocate blurx[float32 * (blurx.x.extent_realized.s + 65) * (blurx.y.extent_realized.s + 1) * ((blurx.z.extent_realized.s.s - blurx.z.min_realized) + 2) * 2] if (uint1)0
  let blurx.buffer = _halide_buffer_init(alloca(size_of_halide_buffer_t()), make_struct((halide_dimension_t *), (((min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0)/8) + -64), (blurx.x.extent_realized.s + 65), 2, 0, (((min(bilateral_grid.extent.1, 81) + bilateral_grid.min.1) + -97)/8), (blurx.y.extent_realized.s + 1), ((blurx.x.extent_realized.s*2) + 130), 0, blurx.z.min_realized, ((blurx.z.extent_realized.s.s - blurx.z.min_realized) + 2), blurx.stride.2, 0, 0, 2, 1, 0), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 2, 32, 4, make_struct((halide_dimension_t *), (((min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0)/8) + -64), (blurx.x.extent_realized.s + 65), 2, 0, (((min(bilateral_grid.extent.1, 81) + bilateral_grid.min.1) + -97)/8), (blurx.y.extent_realized.s + 1), ((blurx.x.extent_realized.s*2) + 130), 0, blurx.z.min_realized, ((blurx.z.extent_realized.s.s - blurx.z.min_realized) + 2), blurx.stride.2, 0, 0, 2, 1, 0), (uint64)0)
  register_destructor("halide_device_free_as_destructor", blurx.buffer)
  let blurx.s0.x.x.loop_extent.s = ((((bilateral_grid.extent.0 + bilateral_grid.min.0) + 7)/8) - (bilateral_grid.min.0/8))
  let blurx.s0.y.y.loop_extent.s = ((((bilateral_grid.extent.1 + bilateral_grid.min.1) + 23)/8) - (bilateral_grid.min.1/8))
  produce blurx {
    consume blurz {
      let halide_device_malloc_result$1 = halide_device_malloc(blurx.buffer, halide_cuda_device_interface())
      assert((halide_device_malloc_result$1 == 0), halide_device_malloc_result$1)
      let t962 = ((min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0)/8)
      let t964 = (((min(bilateral_grid.extent.1, 81) + bilateral_grid.min.1) + -97)/8)
      let t963 = (((min(bilateral_grid.extent.0, 745) + bilateral_grid.min.0) + -761)/8)
      let t965 = (((bilateral_grid.min.1 + blurz.y.min_realized.s) + -209)/8)
      let t958 = (((bilateral_grid.extent.1 + bilateral_grid.min.1) + -97)/8)
      let t960 = (((bilateral_grid.extent.0 + bilateral_grid.min.0) + -1)/8)
      let t956 = ((blurx.s0.y.y.loop_extent.s + 18)/16)
      let t961 = (bilateral_grid.min.0/8)
      let t969 = (blurx.s0.z.min - blurz.z.min_realized)
      let t967 = (blurx.s0.z.min - blurx.z.min_realized)
      let t957 = ((blurx.s0.x.x.loop_extent.s/2) + 1)
      let t959 = ((bilateral_grid.min.1/8) + -2)
      let t966 = ((blurz.x.extent_realized.s*2) + 2)
      let t968 = ((blurx.x.extent_realized.s*2) + 130)
      let t955 = ((blurx.s0.z.max.s - blurx.s0.z.min) + 2)
      gpu_block<CUDA> (blurx.s0.z.__block_id_z, 0, t955) {
        gpu_block<CUDA> (blurx.s0.y.y.__block_id_y, 0, t956) {
          gpu_block<CUDA> (blurx.s0.x.x.__block_id_x, 0, t957) {
            gpu_thread<CUDA> (.__thread_id_x, 0, 2) {
              let blurx.s0.y.yi.base = min(((blurx.s0.y.y.__block_id_y*16) + t959), t958)
              let blurx.s0.x.xi.base = min(((blurx.s0.x.x.__block_id_x*2) + t961), t960)
              let t583 = (blurx.s0.x.xi.base - t962)
              let t580 = (blurx.s0.x.xi.base - t963)
              let t582 = ((.__thread_id_x*8) + (blurx.s0.y.yi.base - t964))
              let t579 = ((.__thread_id_x*8) + (blurx.s0.y.yi.base - t965))
              let t971 = ((blurx.s0.z.__block_id_z + t969)*blurz.stride.2)
              let t970 = ((blurx.s0.z.__block_id_z + t967)*blurx.stride.2)
              for (blurx.s0.y.yi.yii, 0, 8) {
                let t585 = ((blurx.s0.y.yi.yii + t579)*t966)
                let t590.s = (((blurx.s0.y.yi.yii + t582)*t968) + t970)
                let t973 = (t590.s + 128)
                let t972 = (t585 + t971)
                for (blurx.s0.x.xi, 0, 2) {
                  let t975 = (((blurx.s0.x.xi + t583)*2) + t973)
                  let t974 = (((blurx.s0.x.xi + t580)*2) + t972)
                  for (blurx.s0.c, 0, 2) {
                    blurx[(blurx.s0.c + t975)] = (blurz[((blurx.s0.c + t974) + 4)] + ((blurz[((blurx.s0.c + t974) + 2)]*4.000000f) + ((blurz[(blurx.s0.c + t974)]*6.000000f) + (blurz[((blurx.s0.c + t974) + -4)] + (blurz[((blurx.s0.c + t974) + -2)]*4.000000f)))))
                  }
                }
              }
            }
          }
        }
      }
      let halide_device_free_result$2 = halide_device_free(blurz.buffer)
      assert((halide_device_free_result$2 == 0), halide_device_free_result$2)
      free blurz
      _halide_buffer_set_device_dirty(blurx.buffer, (uint1)1)
    }
  }
  allocate interpolated[float32 * max(bilateral_grid.extent.0, 512) * bilateral_grid.extent.1 * 2] if (uint1)0
  let interpolated.buffer = _halide_buffer_init(alloca(size_of_halide_buffer_t()), make_struct((halide_dimension_t *), ((min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0) + -512), max(bilateral_grid.extent.0, 512), 2, 0, bilateral_grid.min.1, bilateral_grid.extent.1, (max(bilateral_grid.extent.0, 512)*2), 0, 0, 2, 1, 0), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 2, 32, 3, make_struct((halide_dimension_t *), ((min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0) + -512), max(bilateral_grid.extent.0, 512), 2, 0, bilateral_grid.min.1, bilateral_grid.extent.1, (max(bilateral_grid.extent.0, 512)*2), 0, 0, 2, 1, 0), (uint64)0)
  register_destructor("halide_device_free_as_destructor", interpolated.buffer)
  produce interpolated {
    consume blurx {
      let halide_device_malloc_result = halide_device_malloc(interpolated.buffer, halide_cuda_device_interface())
      assert((halide_device_malloc_result == 0), halide_device_malloc_result)
      let halide_copy_to_device_result$2 = halide_copy_to_device(input.buffer, halide_cuda_device_interface())
      assert((halide_copy_to_device_result$2 == 0), halide_copy_to_device_result$2)
      let t604 = (1.000000f/r_sigma)
      let t603.s = (bilateral_grid.min.0 - (input.min.1*input.stride.1))
      let t617 = (blurx.stride.2 - (blurx.x.extent_realized.s*4))
      let t625 = (0 - min(bilateral_grid.extent.0, 512))
      let t622 = (-130 - (blurx.x.extent_realized.s*4))
      let t621 = (-132 - (blurx.x.extent_realized.s*4))
      let t992 = (blurx.x.extent_realized.s*2)
      let t993 = (blurx.x.extent_realized.s*4)
      let t994 = (blurx.x.extent_realized.s*6)
      let t983 = max(bilateral_grid.extent.0, 512)
      let t981 = ((min(bilateral_grid.extent.0, 512) + bilateral_grid.min.0)/8)
      let t984 = (((min(bilateral_grid.extent.1, 81) + bilateral_grid.min.1) + -97)/8)
      let t976 = ((bilateral_grid.extent.1 + 15)/16)
      let t977 = ((bilateral_grid.extent.0 + 511)/512)
      let t982 = (t603.s - input.min.0)
      let t978 = (bilateral_grid.extent.1 + -16)
      let t979 = (bilateral_grid.extent.0 + -512)
      gpu_block<CUDA> (interpolated.s0.y.y.__block_id_y, 0, t976) {
        gpu_block<CUDA> (interpolated.s0.x.x.__block_id_x, 0, t977) {
          gpu_thread<CUDA> (.__thread_id_y, 0, 8) {
            gpu_thread<CUDA> (.__thread_id_x, 0, 64) {
              let interpolated.s0.y.yi.base.s = min((interpolated.s0.y.y.__block_id_y*16), t978)
              let interpolated.s0.x.xi.base.s = min((interpolated.s0.x.x.__block_id_x*512), t979)
              let t636 = (.__thread_id_x - t981)
              let t631 = ((.__thread_id_y*2) + (bilateral_grid.min.1 + interpolated.s0.y.yi.base.s))
              let t652 = ((.__thread_id_x*8) + (interpolated.s0.x.xi.base.s + t625))
              let t632 = ((.__thread_id_x*8) + (interpolated.s0.x.xi.base.s + t982))
              let t1003 = (bilateral_grid.min.0 + interpolated.s0.x.xi.base.s)
              let t995 = ((.__thread_id_y*2) + interpolated.s0.y.yi.base.s)
              let t996 = ((.__thread_id_x*8) + t1003)
              for (interpolated.s0.y.yi.yii, 0, 2) {
                let t667.s = ((interpolated.s0.y.yi.yii + t995)*t983)
                let t1012 = (interpolated.s0.y.yi.yii + t631)
                let t1004 = (((t1012/8) - t984)*(t992 + 130))
                let t1006 = ((input.stride.1*t1012) + t632)
                let t1011 = (t652 + t667.s)
                let t1005 = float32((t1012 % 8))
                for (interpolated.s0.x.xi.xii, 0, 8) {
                  let t669 = float32(((interpolated.s0.x.xi.xii + t996) % 8))
                  let t1027 = (t669*0.125000f)
                  let t1028 = (t1005*0.125000f)
                  let t1018 = (t1004 - t992)
                  let t1014 = (((interpolated.s0.x.xi.xii + t1003)/8) + t636)
                  let t1029 = (((interpolated.s0.x.xi.xii + t1011)*2) + 1024)
                  let t1021 = ((blurx.stride.2 - t992) + t1004)
                  let t1024 = ((blurx.stride.2 + t994) + t1004)
                  let t1019 = ((blurx.stride.2 + t993) + t1004)
                  let t1016 = ((blurx.stride.2 + t992) + t1004)
                  let t1022 = (t1004 + t994)
                  let t1017 = (t1004 + t993)
                  let t1015 = (t1004 + t992)
                  let t1026 = (t1004 + t622)
                  let t1025 = (t1004 + t621)
                  let t1023 = (t1004 + t617)
                  let t1013 = (interpolated.s0.x.xi.xii + t1006)
                  for (interpolated.s0.c, 0, 2) {
                    interpolated[(interpolated.s0.c + t1029)] = (let t796.s = input[t1013] in (let t797 = int32((max(min(t796.s, 1.000000f), 0.000000f)*t604)) in (let t800 = (((t797 - blurx.z.min_realized)*blurx.stride.2) + ((t1014*2) + t1015)) in (let t801 = blurx[((interpolated.s0.c + t800) + 258)] in (let t802 = blurx[((interpolated.s0.c + t800) + 260)] in (let t803 = (((t797 - blurx.z.min_realized)*blurx.stride.2) + ((t1014*2) + t1016)) in (let t804 = blurx[((interpolated.s0.c + t803) + 258)] in (let t805 = blurx[((interpolated.s0.c + t803) + 260)] in (let t806 = (((t797 - blurx.z.min_realized)*blurx.stride.2) + ((t1014*2) + t1017)) in (let t807 = blurx[((interpolated.s0.c + t806) + 388)] in (let t808 = (((t797 - blurx.z.min_realized)*blurx.stride.2) + ((t1014*2) + t1004)) in (let t809 = blurx[((interpolated.s0.c + t808) + 128)] in (let t810 = (((t797 - blurx.z.min_realized)*blurx.stride.2) + ((t1014*2) + t1018)) in (let t811 = blurx[((interpolated.s0.c + t810) + -2)] in (let t812 = blurx[((interpolated.s0.c + t806) + 390)] in (let t813 = blurx[((interpolated.s0.c + t808) + 130)] in (let t814 = blurx[(interpolated.s0.c + t810)] in (let t815 = (((t797 - blurx.z.min_realized)*blurx.stride.2) + ((t1014*2) + t1019)) in (let t816 = blurx[((interpolated.s0.c + t815) + 388)] in (let t817 = (((t797 - blurx.z.min_realized)*blurx.stride.2) + ((t1014*2) + (blurx.stride.2 + t1004))) in (let t818 = blurx[((interpolated.s0.c + t817) + 128)] in (let t819 = (((t797 - blurx.z.min_realized)*blurx.stride.2) + ((t1014*2) + t1021)) in (let t820 = blurx[((interpolated.s0.c + t819) + -2)] in (let t821 = blurx[((interpolated.s0.c + t815) + 390)] in (let t822 = blurx[((interpolated.s0.c + t817) + 130)] in (let t823 = blurx[(interpolated.s0.c + t819)] in (let t824 = (((t797 - blurx.z.min_realized)*blurx.stride.2) + ((t1014*2) + t1022)) in (let t825 = (((t797 - blurx.z.min_realized)*blurx.stride.2) + ((t1014*2) + t1023)) in (let t826 = (((t797 - blurx.z.min_realized)*blurx.stride.2) + ((t1014*2) + t1024)) in lerp(lerp(lerp((((t801*4.000000f) + ((t809*6.000000f) + (blurx[((((t797 - blurx.z.min_realized)*blurx.stride.2) + ((t1014*2) + t1025)) + interpolated.s0.c)] + (t811*4.000000f)))) + t807), (((t802*4.000000f) + ((t813*6.000000f) + (blurx[((((t797 - blurx.z.min_realized)*blurx.stride.2) + ((t1014*2) + t1026)) + interpolated.s0.c)] + (t814*4.000000f)))) + t812), t1027), lerp((blurx[((interpolated.s0.c + t824) + 518)] + ((t807*4.000000f) + ((t801*6.000000f) + ((t809*4.000000f) + t811)))), (blurx[((interpolated.s0.c + t824) + 520)] + ((t812*4.000000f) + ((t802*6.000000f) + ((t813*4.000000f) + t814)))), t1027), t1028), lerp(lerp((((t804*4.000000f) + ((t818*6.000000f) + (blurx[((interpolated.s0.c + t825) + -132)] + (t820*4.000000f)))) + t816), (((t805*4.000000f) + ((t822*6.000000f) + (blurx[((interpolated.s0.c + t825) + -130)] + (t823*4.000000f)))) + t821), t1027), lerp((blurx[((interpolated.s0.c + t826) + 518)] + ((t816*4.000000f) + ((t804*6.000000f) + ((t818*4.000000f) + t820)))), (blurx[((interpolated.s0.c + t826) + 520)] + ((t821*4.000000f) + ((t805*6.000000f) + ((t822*4.000000f) + t823)))), t1027), t1028), ((max(min(t796.s, 1.000000f), 0.000000f)*t604) - float32(t797))))))))))))))))))))))))))))))))
                  }
                }
              }
            }
          }
        }
      }
      let halide_device_free_result$1 = halide_device_free(blurx.buffer)
      assert((halide_device_free_result$1 == 0), halide_device_free_result$1)
      free blurx
      _halide_buffer_set_device_dirty(interpolated.buffer, (uint1)1)
    }
  }
  produce bilateral_grid {
    consume interpolated {
      let halide_copy_to_device_result = halide_copy_to_device(bilateral_grid.buffer, halide_cuda_device_interface())
      assert((halide_copy_to_device_result == 0), halide_copy_to_device_result)
      let t687.s = ((bilateral_grid.extent.0 + bilateral_grid.min.0) - min(bilateral_grid.extent.0, 512))
      let t684 = (0 - min(bilateral_grid.extent.0, 512))
      let t686 = (0 - (bilateral_grid.min.1*bilateral_grid.stride.1))
      let t688.s = ((bilateral_grid.extent.0 + bilateral_grid.min.0) - (bilateral_grid.min.1*bilateral_grid.stride.1))
      let t1034 = max(bilateral_grid.extent.0, 512)
      let t1030 = ((bilateral_grid.extent.1 + 63)/64)
      let t1031 = ((bilateral_grid.extent.0 + 15)/16)
      let t1033 = (bilateral_grid.extent.0/16)
      let t1035 = (t687.s - bilateral_grid.min.0)
      let t1036 = ((t688.s - bilateral_grid.min.0) + -16)
      let t1032 = (bilateral_grid.extent.1 + -64)
      gpu_block<CUDA> (bilateral_grid.s0.y.y.__block_id_y, 0, t1030) {
        gpu_block<CUDA> (bilateral_grid.s0.x.x.__block_id_x, 0, t1031) {
          gpu_thread<CUDA> (.__thread_id_y, 0, 64) {
            gpu_thread<CUDA> (.__thread_id_x, 0, 16) {
              let bilateral_grid.s0.y.yi.base.s = min((bilateral_grid.s0.y.y.__block_id_y*64), t1032)
              if ((bilateral_grid.s0.x.x.__block_id_x < t1033)) {
                bilateral_grid[(((((bilateral_grid.min.1 + bilateral_grid.s0.y.yi.base.s) + .__thread_id_y)*bilateral_grid.stride.1) + ((bilateral_grid.s0.x.x.__block_id_x*16) + t686)) + .__thread_id_x)] = (let t827.s = (((.__thread_id_y + bilateral_grid.s0.y.yi.base.s)*t1034) + ((bilateral_grid.s0.x.x.__block_id_x*16) + t684)) in (interpolated[(((.__thread_id_x + t827.s)*2) + 1024)]/interpolated[(((.__thread_id_x + t827.s)*2) + 1025)]))
              } else {
                bilateral_grid[(((((bilateral_grid.min.1 + bilateral_grid.s0.y.yi.base.s) + .__thread_id_y)*bilateral_grid.stride.1) + t1036) + .__thread_id_x)] = (interpolated[((((((.__thread_id_y + bilateral_grid.s0.y.yi.base.s)*t1034) + t1035) + .__thread_id_x)*2) + 992)]/interpolated[((((((.__thread_id_y + bilateral_grid.s0.y.yi.base.s)*t1034) + t1035) + .__thread_id_x)*2) + 993)])
              }
            }
          }
        }
      }
      _halide_buffer_set_device_dirty(bilateral_grid.buffer, (uint1)1)
      let halide_device_free_result = halide_device_free(interpolated.buffer)
      assert((halide_device_free_result == 0), halide_device_free_result)
      free interpolated
    }
  }
}


Skipping Hexagon offload...
Constructing CUDA device codegen
Target triple of initial module: x86_64--linux-gnu
Generating llvm bitcode...
Generating llvm bitcode prolog for function bilateral_grid_classic_auto_schedule...
Generating llvm bitcode for function bilateral_grid_classic_auto_schedule...
Generating llvm bitcode for kernel...
Generating llvm bitcode for kernel...
Generating llvm bitcode for kernel...
Generating llvm bitcode for kernel...
Generating llvm bitcode for kernel...
Generating llvm bitcode for kernel...
PTX kernel:
//
// Generated by LLVM NVPTX Back-End
//

.version 3.2
.target sm_35
.address_size 64

	// .globl	kernel_histogram_s0_z_z___block_id_z // -- Begin function kernel_histogram_s0_z_z___block_id_z
                                        // @kernel_histogram_s0_z_z___block_id_z
.visible .entry kernel_histogram_s0_z_z___block_id_z(
	.param .u32 kernel_histogram_s0_z_z___block_id_z_param_0,
	.param .u32 kernel_histogram_s0_z_z___block_id_z_param_1,
	.param .u32 kernel_histogram_s0_z_z___block_id_z_param_2,
	.param .u32 kernel_histogram_s0_z_z___block_id_z_param_3,
	.param .u32 kernel_histogram_s0_z_z___block_id_z_param_4,
	.param .u32 kernel_histogram_s0_z_z___block_id_z_param_5,
	.param .u32 kernel_histogram_s0_z_z___block_id_z_param_6,
	.param .u32 kernel_histogram_s0_z_z___block_id_z_param_7,
	.param .u32 kernel_histogram_s0_z_z___block_id_z_param_8,
	.param .u32 kernel_histogram_s0_z_z___block_id_z_param_9,
	.param .u32 kernel_histogram_s0_z_z___block_id_z_param_10,
	.param .u32 kernel_histogram_s0_z_z___block_id_z_param_11,
	.param .u64 kernel_histogram_s0_z_z___block_id_z_param_12
)
{
	.reg .pred 	%p<9>;
	.reg .b32 	%r<145>;
	.reg .b64 	%rd<53>;

// %bb.0:                               // %entry
	ld.param.u32 	%r43, [kernel_histogram_s0_z_z___block_id_z_param_10];
	ld.param.u32 	%r42, [kernel_histogram_s0_z_z___block_id_z_param_9];
	ld.param.u32 	%r40, [kernel_histogram_s0_z_z___block_id_z_param_7];
	ld.param.u32 	%r39, [kernel_histogram_s0_z_z___block_id_z_param_6];
	ld.param.u32 	%r38, [kernel_histogram_s0_z_z___block_id_z_param_5];
	ld.param.u32 	%r37, [kernel_histogram_s0_z_z___block_id_z_param_4];
	ld.param.u32 	%r36, [kernel_histogram_s0_z_z___block_id_z_param_2];
	ld.param.u32 	%r35, [kernel_histogram_s0_z_z___block_id_z_param_1];
	ld.param.u32 	%r45, [kernel_histogram_s0_z_z___block_id_z_param_0];
	ld.param.u64 	%rd2, [kernel_histogram_s0_z_z___block_id_z_param_12];
	cvta.to.global.u64 	%rd1, %rd2;
	mov.u32 	%r46, %ctaid.z;
	mov.u32 	%r47, %ctaid.y;
	ld.param.u32 	%r48, [kernel_histogram_s0_z_z___block_id_z_param_3];
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %tid.y;
	mov.u32 	%r3, %tid.x;
	shl.b32 	%r49, %r46, 3;
	add.s32 	%r50, %r49, %r45;
	min.s32 	%r4, %r50, %r48;
	mul.lo.s32 	%r5, %r47, 163;
	setp.gt.u32 	%p1, %r2, 19;
	@%p1 bra 	LBB0_10;
// %bb.1:                               // %true_bb
	ld.param.u32 	%r41, [kernel_histogram_s0_z_z___block_id_z_param_8];
	setp.lt.u32 	%p4, %r3, 12;
	mul.lo.s32 	%r7, %r1, 99;
	@%p4 bra 	LBB0_2;
	bra.uni 	LBB0_6;
LBB0_2:                                 // %true_bb1
	shl.b32 	%r105, %r2, 3;
	sub.s32 	%r106, %r4, %r36;
	not.b32 	%r107, %r41;
	add.s32 	%r108, %r105, %r107;
	not.b32 	%r109, %r38;
	sub.s32 	%r110, %r109, %r5;
	not.b32 	%r111, %r37;
	max.s32 	%r112, %r110, %r111;
	sub.s32 	%r113, %r108, %r112;
	mul.lo.s32 	%r114, %r106, %r35;
	shl.b32 	%r115, %r3, 4;
	not.b32 	%r116, %r40;
	sub.s32 	%r117, %r116, %r7;
	not.b32 	%r118, %r39;
	max.s32 	%r119, %r117, %r118;
	add.s32 	%r120, %r119, %r42;
	shl.b32 	%r121, %r120, 1;
	mad.lo.s32 	%r122, %r113, %r43, %r114;
	add.s32 	%r123, %r122, %r115;
	add.s32 	%r124, %r123, -2;
	sub.s32 	%r133, %r124, %r121;
	mov.u32 	%r134, 0;
	mov.u64 	%rd38, 0;
LBB0_3:                                 // %"for histogram.s0.z.zi"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_4 Depth 2
	mov.u32 	%r135, 8;
	mov.u32 	%r136, %r133;
LBB0_4:                                 // %"for histogram.s0.y.yi.yii"
                                        //   Parent Loop BB0_3 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mul.wide.s32 	%rd36, %r136, 4;
	add.s64 	%rd37, %rd1, %rd36;
	st.global.u32 	[%rd37+4], %rd38;
	st.global.u32 	[%rd37], %rd38;
	add.s32 	%r126, %r136, 2;
	mul.wide.s32 	%rd39, %r126, 4;
	add.s64 	%rd40, %rd1, %rd39;
	st.global.u32 	[%rd40+4], %rd38;
	st.global.u32 	[%rd40], %rd38;
	add.s32 	%r127, %r136, 4;
	mul.wide.s32 	%rd41, %r127, 4;
	add.s64 	%rd42, %rd1, %rd41;
	st.global.u32 	[%rd42+4], %rd38;
	st.global.u32 	[%rd42], %rd38;
	add.s32 	%r128, %r136, 6;
	mul.wide.s32 	%rd43, %r128, 4;
	add.s64 	%rd44, %rd1, %rd43;
	st.global.u32 	[%rd44+4], %rd38;
	st.global.u32 	[%rd44], %rd38;
	add.s32 	%r129, %r136, 8;
	mul.wide.s32 	%rd45, %r129, 4;
	add.s64 	%rd46, %rd1, %rd45;
	st.global.u32 	[%rd46+4], %rd38;
	st.global.u32 	[%rd46], %rd38;
	add.s32 	%r130, %r136, 10;
	mul.wide.s32 	%rd47, %r130, 4;
	add.s64 	%rd48, %rd1, %rd47;
	st.global.u32 	[%rd48+4], %rd38;
	st.global.u32 	[%rd48], %rd38;
	add.s32 	%r131, %r136, 12;
	mul.wide.s32 	%rd49, %r131, 4;
	add.s64 	%rd50, %rd1, %rd49;
	st.global.u32 	[%rd50+4], %rd38;
	st.global.u32 	[%rd50], %rd38;
	add.s32 	%r132, %r136, 14;
	mul.wide.s32 	%rd51, %r132, 4;
	add.s64 	%rd52, %rd1, %rd51;
	st.global.u32 	[%rd52+4], %rd38;
	st.global.u32 	[%rd52], %rd38;
	add.s32 	%r136, %r136, %r43;
	add.s32 	%r135, %r135, -1;
	setp.ne.s32 	%p7, %r135, 0;
	@%p7 bra 	LBB0_4;
// %bb.5:                               // %"end for histogram.s0.y.yi.yii"
                                        //   in Loop: Header=BB0_3 Depth=1
	add.s32 	%r134, %r134, 1;
	add.s32 	%r133, %r133, %r35;
	setp.eq.s32 	%p8, %r134, 8;
	@%p8 bra 	LBB0_14;
	bra.uni 	LBB0_3;
LBB0_10:                                // %false_bb
	ld.param.u32 	%r44, [kernel_histogram_s0_z_z___block_id_z_param_11];
	add.s32 	%r51, %r5, %r38;
	min.s32 	%r6, %r51, %r37;
	shl.b32 	%r53, %r3, 3;
	sub.s32 	%r54, %r4, %r36;
	add.s32 	%r55, %r6, %r44;
	mul.lo.s32 	%r56, %r55, %r43;
	not.b32 	%r57, %r40;
	mad.lo.s32 	%r58, %r1, -99, %r57;
	not.b32 	%r59, %r39;
	max.s32 	%r60, %r58, %r59;
	add.s32 	%r61, %r60, %r42;
	min.u32 	%r62, %r53, 91;
	not.b32 	%r63, %r62;
	add.s32 	%r64, %r61, %r63;
	shl.b32 	%r65, %r64, 1;
	mad.lo.s32 	%r66, %r54, %r35, %r56;
	add.s32 	%r67, %r66, -4;
	sub.s32 	%r141, %r67, %r65;
	mov.u32 	%r142, 0;
	mov.u64 	%rd5, 0;
LBB0_11:                                // %"for histogram.s0.z.zi18"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_12 Depth 2
	mov.u32 	%r143, 8;
	mov.u32 	%r144, %r141;
LBB0_12:                                // %"for histogram.s0.y.yi.yii21"
                                        //   Parent Loop BB0_11 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mul.wide.s32 	%rd3, %r144, 4;
	add.s64 	%rd4, %rd1, %rd3;
	st.global.u32 	[%rd4+4], %rd5;
	st.global.u32 	[%rd4], %rd5;
	add.s32 	%r69, %r144, 2;
	mul.wide.s32 	%rd6, %r69, 4;
	add.s64 	%rd7, %rd1, %rd6;
	st.global.u32 	[%rd7+4], %rd5;
	st.global.u32 	[%rd7], %rd5;
	add.s32 	%r70, %r144, 4;
	mul.wide.s32 	%rd8, %r70, 4;
	add.s64 	%rd9, %rd1, %rd8;
	st.global.u32 	[%rd9+4], %rd5;
	st.global.u32 	[%rd9], %rd5;
	add.s32 	%r71, %r144, 6;
	mul.wide.s32 	%rd10, %r71, 4;
	add.s64 	%rd11, %rd1, %rd10;
	st.global.u32 	[%rd11+4], %rd5;
	st.global.u32 	[%rd11], %rd5;
	add.s32 	%r72, %r144, 8;
	mul.wide.s32 	%rd12, %r72, 4;
	add.s64 	%rd13, %rd1, %rd12;
	st.global.u32 	[%rd13+4], %rd5;
	st.global.u32 	[%rd13], %rd5;
	add.s32 	%r73, %r144, 10;
	mul.wide.s32 	%rd14, %r73, 4;
	add.s64 	%rd15, %rd1, %rd14;
	st.global.u32 	[%rd15+4], %rd5;
	st.global.u32 	[%rd15], %rd5;
	add.s32 	%r74, %r144, 12;
	mul.wide.s32 	%rd16, %r74, 4;
	add.s64 	%rd17, %rd1, %rd16;
	st.global.u32 	[%rd17+4], %rd5;
	st.global.u32 	[%rd17], %rd5;
	add.s32 	%r75, %r144, 14;
	mul.wide.s32 	%rd18, %r75, 4;
	add.s64 	%rd19, %rd1, %rd18;
	st.global.u32 	[%rd19+4], %rd5;
	st.global.u32 	[%rd19], %rd5;
	add.s32 	%r144, %r144, %r43;
	add.s32 	%r143, %r143, -1;
	setp.ne.s32 	%p2, %r143, 0;
	@%p2 bra 	LBB0_12;
// %bb.13:                              // %"end for histogram.s0.y.yi.yii22"
                                        //   in Loop: Header=BB0_11 Depth=1
	add.s32 	%r142, %r142, 1;
	add.s32 	%r141, %r141, %r35;
	setp.eq.s32 	%p3, %r142, 8;
	@%p3 bra 	LBB0_14;
	bra.uni 	LBB0_11;
LBB0_6:                                 // %false_bb2
	shl.b32 	%r77, %r2, 3;
	sub.s32 	%r78, %r4, %r36;
	add.s32 	%r79, %r77, -1;
	sub.s32 	%r80, %r79, %r41;
	not.b32 	%r81, %r38;
	sub.s32 	%r82, %r81, %r5;
	not.b32 	%r83, %r37;
	max.s32 	%r84, %r82, %r83;
	sub.s32 	%r85, %r80, %r84;
	mul.lo.s32 	%r86, %r35, %r78;
	mad.lo.s32 	%r87, %r43, %r85, %r86;
	add.s32 	%r88, %r87, 194;
	not.b32 	%r89, %r40;
	sub.s32 	%r90, %r89, %r7;
	not.b32 	%r91, %r39;
	max.s32 	%r92, %r90, %r91;
	add.s32 	%r93, %r42, %r92;
	shl.b32 	%r94, %r93, 1;
	sub.s32 	%r137, %r88, %r94;
	mov.u32 	%r138, 0;
LBB0_7:                                 // %"for histogram.s0.z.zi5"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_8 Depth 2
	mov.u32 	%r139, 8;
	mov.u32 	%r140, %r137;
LBB0_8:                                 // %"for histogram.s0.y.yi.yii8"
                                        //   Parent Loop BB0_7 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add.s32 	%r96, %r140, -14;
	mul.wide.s32 	%rd20, %r96, 4;
	add.s64 	%rd21, %rd1, %rd20;
	mov.u32 	%r97, 0;
	st.global.u32 	[%rd21], %r97;
	st.global.u32 	[%rd21+4], %r97;
	add.s32 	%r98, %r140, -12;
	mul.wide.s32 	%rd22, %r98, 4;
	add.s64 	%rd23, %rd1, %rd22;
	st.global.u32 	[%rd23], %r97;
	st.global.u32 	[%rd23+4], %r97;
	add.s32 	%r99, %r140, -10;
	mul.wide.s32 	%rd24, %r99, 4;
	add.s64 	%rd25, %rd1, %rd24;
	st.global.u32 	[%rd25], %r97;
	st.global.u32 	[%rd25+4], %r97;
	add.s32 	%r100, %r140, -8;
	mul.wide.s32 	%rd26, %r100, 4;
	add.s64 	%rd27, %rd1, %rd26;
	st.global.u32 	[%rd27], %r97;
	st.global.u32 	[%rd27+4], %r97;
	add.s32 	%r101, %r140, -6;
	mul.wide.s32 	%rd28, %r101, 4;
	add.s64 	%rd29, %rd1, %rd28;
	st.global.u32 	[%rd29], %r97;
	st.global.u32 	[%rd29+4], %r97;
	add.s32 	%r102, %r140, -4;
	mul.wide.s32 	%rd30, %r102, 4;
	add.s64 	%rd31, %rd1, %rd30;
	st.global.u32 	[%rd31], %r97;
	st.global.u32 	[%rd31+4], %r97;
	add.s32 	%r103, %r140, -2;
	mul.wide.s32 	%rd32, %r103, 4;
	add.s64 	%rd33, %rd1, %rd32;
	st.global.u32 	[%rd33], %r97;
	st.global.u32 	[%rd33+4], %r97;
	mul.wide.s32 	%rd34, %r140, 4;
	add.s64 	%rd35, %rd1, %rd34;
	st.global.u32 	[%rd35], %r97;
	st.global.u32 	[%rd35+4], %r97;
	add.s32 	%r140, %r140, %r43;
	add.s32 	%r139, %r139, -1;
	setp.ne.s32 	%p5, %r139, 0;
	@%p5 bra 	LBB0_8;
// %bb.9:                               // %"end for histogram.s0.y.yi.yii9"
                                        //   in Loop: Header=BB0_7 Depth=1
	add.s32 	%r138, %r138, 1;
	add.s32 	%r137, %r137, %r35;
	setp.eq.s32 	%p6, %r138, 8;
	@%p6 bra 	LBB0_14;
	bra.uni 	LBB0_7;
LBB0_14:                                // %after_bb
	ret;
                                        // -- End function
}
	// .globl	kernel_histogram_s1_y_y___block_id_y // -- Begin function kernel_histogram_s1_y_y___block_id_y
.visible .entry kernel_histogram_s1_y_y___block_id_y(
	.param .u32 kernel_histogram_s1_y_y___block_id_y_param_0,
	.param .u32 kernel_histogram_s1_y_y___block_id_y_param_1,
	.param .u32 kernel_histogram_s1_y_y___block_id_y_param_2,
	.param .u32 kernel_histogram_s1_y_y___block_id_y_param_3,
	.param .u32 kernel_histogram_s1_y_y___block_id_y_param_4,
	.param .u32 kernel_histogram_s1_y_y___block_id_y_param_5,
	.param .u32 kernel_histogram_s1_y_y___block_id_y_param_6,
	.param .u32 kernel_histogram_s1_y_y___block_id_y_param_7,
	.param .u32 kernel_histogram_s1_y_y___block_id_y_param_8,
	.param .u32 kernel_histogram_s1_y_y___block_id_y_param_9,
	.param .u32 kernel_histogram_s1_y_y___block_id_y_param_10,
	.param .u32 kernel_histogram_s1_y_y___block_id_y_param_11,
	.param .u32 kernel_histogram_s1_y_y___block_id_y_param_12,
	.param .f32 kernel_histogram_s1_y_y___block_id_y_param_13,
	.param .u32 kernel_histogram_s1_y_y___block_id_y_param_14,
	.param .u32 kernel_histogram_s1_y_y___block_id_y_param_15,
	.param .u32 kernel_histogram_s1_y_y___block_id_y_param_16,
	.param .u32 kernel_histogram_s1_y_y___block_id_y_param_17,
	.param .u32 kernel_histogram_s1_y_y___block_id_y_param_18,
	.param .u32 kernel_histogram_s1_y_y___block_id_y_param_19,
	.param .u32 kernel_histogram_s1_y_y___block_id_y_param_20,
	.param .u32 kernel_histogram_s1_y_y___block_id_y_param_21,
	.param .u32 kernel_histogram_s1_y_y___block_id_y_param_22,
	.param .u32 kernel_histogram_s1_y_y___block_id_y_param_23,
	.param .u64 kernel_histogram_s1_y_y___block_id_y_param_24,
	.param .u64 kernel_histogram_s1_y_y___block_id_y_param_25
)                                       // @kernel_histogram_s1_y_y___block_id_y
{
	.reg .pred 	%p<47>;
	.reg .f32 	%f<482>;
	.reg .b32 	%r<724>;
	.reg .b64 	%rd<259>;

// %bb.0:                               // %entry
	ld.param.u32 	%r216, [kernel_histogram_s1_y_y___block_id_y_param_23];
	ld.param.u32 	%r215, [kernel_histogram_s1_y_y___block_id_y_param_20];
	ld.param.u32 	%r214, [kernel_histogram_s1_y_y___block_id_y_param_19];
	ld.param.u32 	%r213, [kernel_histogram_s1_y_y___block_id_y_param_18];
	ld.param.u32 	%r211, [kernel_histogram_s1_y_y___block_id_y_param_16];
	ld.param.u32 	%r210, [kernel_histogram_s1_y_y___block_id_y_param_15];
	ld.param.u32 	%r209, [kernel_histogram_s1_y_y___block_id_y_param_14];
	ld.param.f32 	%f1, [kernel_histogram_s1_y_y___block_id_y_param_13];
	ld.param.u32 	%r207, [kernel_histogram_s1_y_y___block_id_y_param_11];
	ld.param.u32 	%r205, [kernel_histogram_s1_y_y___block_id_y_param_9];
	ld.param.u32 	%r204, [kernel_histogram_s1_y_y___block_id_y_param_8];
	ld.param.u32 	%r203, [kernel_histogram_s1_y_y___block_id_y_param_7];
	ld.param.u32 	%r201, [kernel_histogram_s1_y_y___block_id_y_param_5];
	ld.param.u32 	%r200, [kernel_histogram_s1_y_y___block_id_y_param_4];
	ld.param.u64 	%rd24, [kernel_histogram_s1_y_y___block_id_y_param_25];
	cvta.to.global.u64 	%rd1, %rd24;
	ld.param.u64 	%rd25, [kernel_histogram_s1_y_y___block_id_y_param_24];
	cvta.to.global.u64 	%rd2, %rd25;
	mov.u32 	%r1, %ctaid.y;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %tid.y;
	mov.u32 	%r4, %tid.x;
	ld.param.u32 	%r217, [kernel_histogram_s1_y_y___block_id_y_param_21];
	setp.lt.s32 	%p1, %r1, %r217;
	ld.param.u32 	%r218, [kernel_histogram_s1_y_y___block_id_y_param_22];
	setp.ge.s32 	%p2, %r1, %r218;
	or.pred  	%p3, %p1, %p2;
	@%p3 bra 	LBB1_11;
// %bb.1:                               // %true_bb
	ld.param.u32 	%r198, [kernel_histogram_s1_y_y___block_id_y_param_2];
	ld.param.u32 	%r197, [kernel_histogram_s1_y_y___block_id_y_param_1];
	setp.ge.s32 	%p14, %r2, %r198;
	setp.lt.s32 	%p15, %r2, %r197;
	and.pred  	%p16, %p14, %p15;
	@%p16 bra 	LBB1_2;
	bra.uni 	LBB1_21;
LBB1_2:                                 // %true_bb1
	ld.param.u32 	%r206, [kernel_histogram_s1_y_y___block_id_y_param_10];
	setp.lt.u32 	%p26, %r3, 20;
	@%p26 bra 	LBB1_3;
	bra.uni 	LBB1_40;
LBB1_3:                                 // %true_bb4
	setp.lt.u32 	%p34, %r4, 12;
	mul.lo.s32 	%r32, %r1, 163;
	shl.b32 	%r33, %r3, 3;
	add.s32 	%r34, %r33, %r32;
	mul.lo.s32 	%r35, %r2, 99;
	@%p34 bra 	LBB1_4;
	bra.uni 	LBB1_29;
LBB1_4:                                 // %true_bb7
	shl.b32 	%r601, %r4, 3;
	add.s32 	%r41, %r601, %r35;
	add.s32 	%r42, %r34, %r207;
	add.s64 	%rd5, %rd1, 16;
	add.s32 	%r602, %r204, %r32;
	add.s32 	%r603, %r602, %r33;
	shl.b32 	%r604, %r603, 3;
	add.s32 	%r605, %r604, -20;
	mad.lo.s32 	%r606, %r211, %r605, %r206;
	add.s32 	%r607, %r203, %r35;
	add.s32 	%r608, %r607, %r601;
	shl.b32 	%r609, %r608, 3;
	add.s32 	%r667, %r606, %r609;
	shl.b32 	%r44, %r211, 3;
	mul.wide.s32 	%rd6, %r211, 4;
	mov.u32 	%r600, 0;
	mov.u32 	%r668, %r600;
LBB1_5:                                 // %"for histogram.s1.y.yi.yii"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB1_6 Depth 2
                                        //       Child Loop BB1_7 Depth 3
                                        //         Child Loop BB1_9 Depth 4
                                        //         Child Loop BB1_26 Depth 4
	add.s32 	%r611, %r42, %r668;
	mul.lo.s32 	%r50, %r611, %r205;
	mov.u32 	%r51, %r667;
	mov.u32 	%r52, %r600;
LBB1_6:                                 // %"for histogram.s1.x.xi.xii"
                                        //   Parent Loop BB1_5 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB1_7 Depth 3
                                        //         Child Loop BB1_9 Depth 4
                                        //         Child Loop BB1_26 Depth 4
	mul.wide.s32 	%rd220, %r51, 4;
	add.s64 	%rd9, %rd5, %rd220;
	add.s32 	%r613, %r52, %r41;
	add.s32 	%r614, %r613, %r209;
	shl.b32 	%r615, %r614, 1;
	add.s32 	%r616, %r615, %r210;
	add.s32 	%r53, %r616, %r50;
	mov.u32 	%r671, %r600;
LBB1_7:                                 // %"for histogram.s1.c"
                                        //   Parent Loop BB1_5 Depth=1
                                        //     Parent Loop BB1_6 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB1_9 Depth 4
                                        //         Child Loop BB1_26 Depth 4
	setp.eq.s32 	%p41, %r671, 0;
	add.s32 	%r57, %r53, %r671;
	@%p41 bra 	LBB1_25;
// %bb.8:                               // %"for histogram.s1.r4$y.preheader"
                                        //   in Loop: Header=BB1_7 Depth=3
	mov.u32 	%r673, 8;
	mov.u64 	%rd254, %rd9;
LBB1_9:                                 // %"for histogram.s1.r4$y"
                                        //   Parent Loop BB1_5 Depth=1
                                        //     Parent Loop BB1_6 Depth=2
                                        //       Parent Loop BB1_7 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ld.global.nc.f32 	%f386, [%rd254+-16];
	min.ftz.f32 	%f387, %f386, 0f3F800000;
	max.ftz.f32 	%f388, %f387, 0f00000000;
	fma.rn.ftz.f32 	%f389, %f388, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r618, %f389;
	sub.s32 	%r619, %r618, %r214;
	mad.lo.s32 	%r620, %r619, %r215, %r57;
	mul.wide.s32 	%rd221, %r620, 4;
	add.s64 	%rd222, %rd2, %rd221;
	ld.global.f32 	%f390, [%rd222];
	add.ftz.f32 	%f391, %f390, 0f3F800000;
	st.global.f32 	[%rd222], %f391;
	ld.global.nc.f32 	%f392, [%rd254+-12];
	min.ftz.f32 	%f393, %f392, 0f3F800000;
	max.ftz.f32 	%f394, %f393, 0f00000000;
	fma.rn.ftz.f32 	%f395, %f394, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r621, %f395;
	sub.s32 	%r622, %r621, %r214;
	mad.lo.s32 	%r623, %r622, %r215, %r57;
	mul.wide.s32 	%rd223, %r623, 4;
	add.s64 	%rd224, %rd2, %rd223;
	ld.global.f32 	%f396, [%rd224];
	add.ftz.f32 	%f397, %f396, 0f3F800000;
	st.global.f32 	[%rd224], %f397;
	ld.global.nc.f32 	%f398, [%rd254+-8];
	min.ftz.f32 	%f399, %f398, 0f3F800000;
	max.ftz.f32 	%f400, %f399, 0f00000000;
	fma.rn.ftz.f32 	%f401, %f400, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r624, %f401;
	sub.s32 	%r625, %r624, %r214;
	mad.lo.s32 	%r626, %r625, %r215, %r57;
	mul.wide.s32 	%rd225, %r626, 4;
	add.s64 	%rd226, %rd2, %rd225;
	ld.global.f32 	%f402, [%rd226];
	add.ftz.f32 	%f403, %f402, 0f3F800000;
	st.global.f32 	[%rd226], %f403;
	ld.global.nc.f32 	%f404, [%rd254+-4];
	min.ftz.f32 	%f405, %f404, 0f3F800000;
	max.ftz.f32 	%f406, %f405, 0f00000000;
	fma.rn.ftz.f32 	%f407, %f406, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r627, %f407;
	sub.s32 	%r628, %r627, %r214;
	mad.lo.s32 	%r629, %r628, %r215, %r57;
	mul.wide.s32 	%rd227, %r629, 4;
	add.s64 	%rd228, %rd2, %rd227;
	ld.global.f32 	%f408, [%rd228];
	add.ftz.f32 	%f409, %f408, 0f3F800000;
	st.global.f32 	[%rd228], %f409;
	ld.global.nc.f32 	%f410, [%rd254];
	min.ftz.f32 	%f411, %f410, 0f3F800000;
	max.ftz.f32 	%f412, %f411, 0f00000000;
	fma.rn.ftz.f32 	%f413, %f412, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r630, %f413;
	sub.s32 	%r631, %r630, %r214;
	mad.lo.s32 	%r632, %r631, %r215, %r57;
	mul.wide.s32 	%rd229, %r632, 4;
	add.s64 	%rd230, %rd2, %rd229;
	ld.global.f32 	%f414, [%rd230];
	add.ftz.f32 	%f415, %f414, 0f3F800000;
	st.global.f32 	[%rd230], %f415;
	ld.global.nc.f32 	%f416, [%rd254+4];
	min.ftz.f32 	%f417, %f416, 0f3F800000;
	max.ftz.f32 	%f418, %f417, 0f00000000;
	fma.rn.ftz.f32 	%f419, %f418, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r633, %f419;
	sub.s32 	%r634, %r633, %r214;
	mad.lo.s32 	%r635, %r634, %r215, %r57;
	mul.wide.s32 	%rd231, %r635, 4;
	add.s64 	%rd232, %rd2, %rd231;
	ld.global.f32 	%f420, [%rd232];
	add.ftz.f32 	%f421, %f420, 0f3F800000;
	st.global.f32 	[%rd232], %f421;
	ld.global.nc.f32 	%f422, [%rd254+8];
	min.ftz.f32 	%f423, %f422, 0f3F800000;
	max.ftz.f32 	%f424, %f423, 0f00000000;
	fma.rn.ftz.f32 	%f425, %f424, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r636, %f425;
	sub.s32 	%r637, %r636, %r214;
	mad.lo.s32 	%r638, %r637, %r215, %r57;
	mul.wide.s32 	%rd233, %r638, 4;
	add.s64 	%rd234, %rd2, %rd233;
	ld.global.f32 	%f426, [%rd234];
	add.ftz.f32 	%f427, %f426, 0f3F800000;
	st.global.f32 	[%rd234], %f427;
	ld.global.nc.f32 	%f428, [%rd254+12];
	min.ftz.f32 	%f429, %f428, 0f3F800000;
	max.ftz.f32 	%f430, %f429, 0f00000000;
	fma.rn.ftz.f32 	%f431, %f430, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r639, %f431;
	sub.s32 	%r640, %r639, %r214;
	mad.lo.s32 	%r641, %r640, %r215, %r57;
	mul.wide.s32 	%rd235, %r641, 4;
	add.s64 	%rd236, %rd2, %rd235;
	ld.global.f32 	%f432, [%rd236];
	add.ftz.f32 	%f433, %f432, 0f3F800000;
	st.global.f32 	[%rd236], %f433;
	add.s32 	%r673, %r673, -1;
	add.s64 	%rd254, %rd254, %rd6;
	setp.ne.s32 	%p42, %r673, 0;
	@%p42 bra 	LBB1_9;
	bra.uni 	LBB1_10;
LBB1_25:                                // %"for histogram.s1.r4$y.us.preheader"
                                        //   in Loop: Header=BB1_7 Depth=3
	mov.u32 	%r672, 8;
	mov.u64 	%rd253, %rd9;
LBB1_26:                                // %"for histogram.s1.r4$y.us"
                                        //   Parent Loop BB1_5 Depth=1
                                        //     Parent Loop BB1_6 Depth=2
                                        //       Parent Loop BB1_7 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ld.global.nc.f32 	%f434, [%rd253+-16];
	min.ftz.f32 	%f435, %f434, 0f3F800000;
	max.ftz.f32 	%f436, %f435, 0f00000000;
	fma.rn.ftz.f32 	%f437, %f436, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r643, %f437;
	sub.s32 	%r644, %r643, %r214;
	mad.lo.s32 	%r645, %r644, %r215, %r57;
	mul.wide.s32 	%rd237, %r645, 4;
	add.s64 	%rd238, %rd2, %rd237;
	ld.global.f32 	%f438, [%rd238];
	add.ftz.f32 	%f439, %f438, %f436;
	st.global.f32 	[%rd238], %f439;
	ld.global.nc.f32 	%f440, [%rd253+-12];
	min.ftz.f32 	%f441, %f440, 0f3F800000;
	max.ftz.f32 	%f442, %f441, 0f00000000;
	fma.rn.ftz.f32 	%f443, %f442, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r646, %f443;
	sub.s32 	%r647, %r646, %r214;
	mad.lo.s32 	%r648, %r647, %r215, %r57;
	mul.wide.s32 	%rd239, %r648, 4;
	add.s64 	%rd240, %rd2, %rd239;
	ld.global.f32 	%f444, [%rd240];
	add.ftz.f32 	%f445, %f444, %f442;
	st.global.f32 	[%rd240], %f445;
	ld.global.nc.f32 	%f446, [%rd253+-8];
	min.ftz.f32 	%f447, %f446, 0f3F800000;
	max.ftz.f32 	%f448, %f447, 0f00000000;
	fma.rn.ftz.f32 	%f449, %f448, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r649, %f449;
	sub.s32 	%r650, %r649, %r214;
	mad.lo.s32 	%r651, %r650, %r215, %r57;
	mul.wide.s32 	%rd241, %r651, 4;
	add.s64 	%rd242, %rd2, %rd241;
	ld.global.f32 	%f450, [%rd242];
	add.ftz.f32 	%f451, %f450, %f448;
	st.global.f32 	[%rd242], %f451;
	ld.global.nc.f32 	%f452, [%rd253+-4];
	min.ftz.f32 	%f453, %f452, 0f3F800000;
	max.ftz.f32 	%f454, %f453, 0f00000000;
	fma.rn.ftz.f32 	%f455, %f454, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r652, %f455;
	sub.s32 	%r653, %r652, %r214;
	mad.lo.s32 	%r654, %r653, %r215, %r57;
	mul.wide.s32 	%rd243, %r654, 4;
	add.s64 	%rd244, %rd2, %rd243;
	ld.global.f32 	%f456, [%rd244];
	add.ftz.f32 	%f457, %f456, %f454;
	st.global.f32 	[%rd244], %f457;
	ld.global.nc.f32 	%f458, [%rd253];
	min.ftz.f32 	%f459, %f458, 0f3F800000;
	max.ftz.f32 	%f460, %f459, 0f00000000;
	fma.rn.ftz.f32 	%f461, %f460, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r655, %f461;
	sub.s32 	%r656, %r655, %r214;
	mad.lo.s32 	%r657, %r656, %r215, %r57;
	mul.wide.s32 	%rd245, %r657, 4;
	add.s64 	%rd246, %rd2, %rd245;
	ld.global.f32 	%f462, [%rd246];
	add.ftz.f32 	%f463, %f462, %f460;
	st.global.f32 	[%rd246], %f463;
	ld.global.nc.f32 	%f464, [%rd253+4];
	min.ftz.f32 	%f465, %f464, 0f3F800000;
	max.ftz.f32 	%f466, %f465, 0f00000000;
	fma.rn.ftz.f32 	%f467, %f466, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r658, %f467;
	sub.s32 	%r659, %r658, %r214;
	mad.lo.s32 	%r660, %r659, %r215, %r57;
	mul.wide.s32 	%rd247, %r660, 4;
	add.s64 	%rd248, %rd2, %rd247;
	ld.global.f32 	%f468, [%rd248];
	add.ftz.f32 	%f469, %f468, %f466;
	st.global.f32 	[%rd248], %f469;
	ld.global.nc.f32 	%f470, [%rd253+8];
	min.ftz.f32 	%f471, %f470, 0f3F800000;
	max.ftz.f32 	%f472, %f471, 0f00000000;
	fma.rn.ftz.f32 	%f473, %f472, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r661, %f473;
	sub.s32 	%r662, %r661, %r214;
	mad.lo.s32 	%r663, %r662, %r215, %r57;
	mul.wide.s32 	%rd249, %r663, 4;
	add.s64 	%rd250, %rd2, %rd249;
	ld.global.f32 	%f474, [%rd250];
	add.ftz.f32 	%f475, %f474, %f472;
	st.global.f32 	[%rd250], %f475;
	ld.global.nc.f32 	%f476, [%rd253+12];
	min.ftz.f32 	%f477, %f476, 0f3F800000;
	max.ftz.f32 	%f478, %f477, 0f00000000;
	fma.rn.ftz.f32 	%f479, %f478, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r664, %f479;
	sub.s32 	%r665, %r664, %r214;
	mad.lo.s32 	%r666, %r665, %r215, %r57;
	mul.wide.s32 	%rd251, %r666, 4;
	add.s64 	%rd252, %rd2, %rd251;
	ld.global.f32 	%f480, [%rd252];
	add.ftz.f32 	%f481, %f480, %f478;
	st.global.f32 	[%rd252], %f481;
	add.s32 	%r672, %r672, -1;
	add.s64 	%rd253, %rd253, %rd6;
	setp.eq.s32 	%p43, %r672, 0;
	@%p43 bra 	LBB1_10;
	bra.uni 	LBB1_26;
LBB1_10:                                // %"end for histogram.s1.r4$y"
                                        //   in Loop: Header=BB1_7 Depth=3
	add.s32 	%r671, %r671, 1;
	setp.eq.s32 	%p44, %r671, 2;
	@%p44 bra 	LBB1_27;
	bra.uni 	LBB1_7;
LBB1_27:                                // %"end for histogram.s1.c"
                                        //   in Loop: Header=BB1_6 Depth=2
	add.s32 	%r52, %r52, 1;
	add.s32 	%r51, %r51, 8;
	setp.eq.s32 	%p45, %r52, 8;
	@%p45 bra 	LBB1_28;
	bra.uni 	LBB1_6;
LBB1_28:                                // %"end for histogram.s1.x.xi.xii"
                                        //   in Loop: Header=BB1_5 Depth=1
	add.s32 	%r668, %r668, 1;
	add.s32 	%r667, %r667, %r44;
	setp.eq.s32 	%p46, %r668, 8;
	@%p46 bra 	LBB1_63;
	bra.uni 	LBB1_5;
LBB1_11:                                // %false_bb
	ld.param.u32 	%r196, [kernel_histogram_s1_y_y___block_id_y_param_0];
	mul.lo.s32 	%r219, %r1, 163;
	sub.s32 	%r220, %r196, %r219;
	min.s32 	%r221, %r220, 161;
	shl.b32 	%r222, %r3, 3;
	sub.s32 	%r223, %r221, %r222;
	min.s32 	%r231, %r223, 6;
	max.s32 	%r232, %r231, -2;
	add.s32 	%r8, %r232, 2;
	setp.lt.s32 	%p4, %r8, 1;
	@%p4 bra 	LBB1_63;
// %bb.12:                              // %"for histogram.s1.y.yi.yii58.preheader"
	ld.param.u32 	%r212, [kernel_histogram_s1_y_y___block_id_y_param_17];
	ld.param.u32 	%r199, [kernel_histogram_s1_y_y___block_id_y_param_3];
	mul.lo.s32 	%r224, %r2, 99;
	sub.s32 	%r225, %r216, %r224;
	min.s32 	%r226, %r225, 97;
	shl.b32 	%r227, %r4, 3;
	sub.s32 	%r228, %r226, %r227;
	add.s32 	%r5, %r222, %r219;
	add.s32 	%r6, %r227, %r224;
	min.s32 	%r229, %r228, 6;
	max.s32 	%r230, %r229, -2;
	add.s32 	%r7, %r230, 2;
	add.s32 	%r9, %r196, 2;
	add.s32 	%r10, %r216, 2;
	shl.b32 	%r234, %r3, 6;
	mad.lo.s32 	%r235, %r1, 1304, %r234;
	shl.b32 	%r236, %r204, 3;
	add.s32 	%r718, %r235, %r236;
	mov.u32 	%r719, 0;
	setp.lt.s32 	%p6, %r7, 1;
LBB1_13:                                // %"for histogram.s1.y.yi.yii58"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB1_16 Depth 2
                                        //       Child Loop BB1_18 Depth 3
                                        //         Child Loop BB1_20 Depth 4
                                        //         Child Loop BB1_65 Depth 4
	add.s32 	%r173, %r719, %r5;
	setp.ge.s32 	%p5, %r173, %r9;
	@%p5 bra 	LBB1_62;
// %bb.14:                              // %true_bb61
                                        //   in Loop: Header=BB1_13 Depth=1
	@%p6 bra 	LBB1_62;
// %bb.15:                              // %"for histogram.s1.x.xi.xii64.preheader"
                                        //   in Loop: Header=BB1_13 Depth=1
	add.s32 	%r237, %r173, %r207;
	mad.lo.s32 	%r174, %r237, %r205, %r210;
	mov.u32 	%r720, 0;
LBB1_16:                                // %"for histogram.s1.x.xi.xii64"
                                        //   Parent Loop BB1_13 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB1_18 Depth 3
                                        //         Child Loop BB1_20 Depth 4
                                        //         Child Loop BB1_65 Depth 4
	add.s32 	%r178, %r720, %r6;
	setp.ge.s32 	%p7, %r178, %r10;
	@%p7 bra 	LBB1_67;
// %bb.17:                              // %true_bb67
                                        //   in Loop: Header=BB1_16 Depth=2
	add.s32 	%r240, %r178, %r203;
	add.s32 	%r241, %r178, %r209;
	shl.b32 	%r242, %r241, 1;
	add.s32 	%r179, %r174, %r242;
	shl.b32 	%r243, %r240, 3;
	min.s32 	%r244, %r243, %r200;
	add.s32 	%r245, %r244, -20;
	max.s32 	%r180, %r245, %r213;
	or.b32  	%r246, %r243, 1;
	min.s32 	%r247, %r246, %r200;
	add.s32 	%r248, %r247, -20;
	max.s32 	%r181, %r248, %r213;
	or.b32  	%r249, %r243, 2;
	min.s32 	%r250, %r249, %r200;
	add.s32 	%r251, %r250, -20;
	max.s32 	%r182, %r251, %r213;
	or.b32  	%r252, %r243, 3;
	min.s32 	%r253, %r252, %r200;
	add.s32 	%r254, %r253, -20;
	max.s32 	%r183, %r254, %r213;
	or.b32  	%r255, %r243, 4;
	min.s32 	%r256, %r255, %r200;
	add.s32 	%r257, %r256, -20;
	max.s32 	%r184, %r257, %r213;
	or.b32  	%r258, %r243, 5;
	min.s32 	%r259, %r258, %r200;
	add.s32 	%r260, %r259, -20;
	max.s32 	%r185, %r260, %r213;
	or.b32  	%r261, %r243, 6;
	min.s32 	%r262, %r261, %r200;
	add.s32 	%r263, %r262, -20;
	max.s32 	%r186, %r263, %r213;
	or.b32  	%r264, %r243, 7;
	min.s32 	%r265, %r264, %r200;
	add.s32 	%r266, %r265, -20;
	max.s32 	%r187, %r266, %r213;
	mov.u32 	%r721, 0;
LBB1_18:                                // %"for histogram.s1.c70"
                                        //   Parent Loop BB1_13 Depth=1
                                        //     Parent Loop BB1_16 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB1_20 Depth 4
                                        //         Child Loop BB1_65 Depth 4
	setp.eq.s32 	%p8, %r721, 0;
	add.s32 	%r190, %r179, %r721;
	@%p8 bra 	LBB1_64;
// %bb.19:                              // %"for histogram.s1.r4$y73.preheader"
                                        //   in Loop: Header=BB1_18 Depth=3
	mov.u32 	%r723, 0;
LBB1_20:                                // %"for histogram.s1.r4$y73"
                                        //   Parent Loop BB1_13 Depth=1
                                        //     Parent Loop BB1_16 Depth=2
                                        //       Parent Loop BB1_18 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	add.s32 	%r268, %r718, %r723;
	min.s32 	%r269, %r268, %r199;
	add.s32 	%r270, %r269, -20;
	max.s32 	%r271, %r270, %r212;
	mul.lo.s32 	%r272, %r271, %r211;
	sub.s32 	%r273, %r272, %r201;
	add.s32 	%r274, %r273, %r180;
	mul.wide.s32 	%rd26, %r274, 4;
	add.s64 	%rd27, %rd1, %rd26;
	ld.global.nc.f32 	%f2, [%rd27];
	min.ftz.f32 	%f3, %f2, 0f3F800000;
	max.ftz.f32 	%f4, %f3, 0f00000000;
	fma.rn.ftz.f32 	%f5, %f4, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r275, %f5;
	sub.s32 	%r276, %r275, %r214;
	mad.lo.s32 	%r277, %r276, %r215, %r190;
	mul.wide.s32 	%rd28, %r277, 4;
	add.s64 	%rd29, %rd2, %rd28;
	ld.global.f32 	%f6, [%rd29];
	add.ftz.f32 	%f7, %f6, 0f3F800000;
	st.global.f32 	[%rd29], %f7;
	add.s32 	%r278, %r273, %r181;
	mul.wide.s32 	%rd30, %r278, 4;
	add.s64 	%rd31, %rd1, %rd30;
	ld.global.nc.f32 	%f8, [%rd31];
	min.ftz.f32 	%f9, %f8, 0f3F800000;
	max.ftz.f32 	%f10, %f9, 0f00000000;
	fma.rn.ftz.f32 	%f11, %f10, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r279, %f11;
	sub.s32 	%r280, %r279, %r214;
	mad.lo.s32 	%r281, %r280, %r215, %r190;
	mul.wide.s32 	%rd32, %r281, 4;
	add.s64 	%rd33, %rd2, %rd32;
	ld.global.f32 	%f12, [%rd33];
	add.ftz.f32 	%f13, %f12, 0f3F800000;
	st.global.f32 	[%rd33], %f13;
	add.s32 	%r282, %r273, %r182;
	mul.wide.s32 	%rd34, %r282, 4;
	add.s64 	%rd35, %rd1, %rd34;
	ld.global.nc.f32 	%f14, [%rd35];
	min.ftz.f32 	%f15, %f14, 0f3F800000;
	max.ftz.f32 	%f16, %f15, 0f00000000;
	fma.rn.ftz.f32 	%f17, %f16, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r283, %f17;
	sub.s32 	%r284, %r283, %r214;
	mad.lo.s32 	%r285, %r284, %r215, %r190;
	mul.wide.s32 	%rd36, %r285, 4;
	add.s64 	%rd37, %rd2, %rd36;
	ld.global.f32 	%f18, [%rd37];
	add.ftz.f32 	%f19, %f18, 0f3F800000;
	st.global.f32 	[%rd37], %f19;
	add.s32 	%r286, %r273, %r183;
	mul.wide.s32 	%rd38, %r286, 4;
	add.s64 	%rd39, %rd1, %rd38;
	ld.global.nc.f32 	%f20, [%rd39];
	min.ftz.f32 	%f21, %f20, 0f3F800000;
	max.ftz.f32 	%f22, %f21, 0f00000000;
	fma.rn.ftz.f32 	%f23, %f22, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r287, %f23;
	sub.s32 	%r288, %r287, %r214;
	mad.lo.s32 	%r289, %r288, %r215, %r190;
	mul.wide.s32 	%rd40, %r289, 4;
	add.s64 	%rd41, %rd2, %rd40;
	ld.global.f32 	%f24, [%rd41];
	add.ftz.f32 	%f25, %f24, 0f3F800000;
	st.global.f32 	[%rd41], %f25;
	add.s32 	%r290, %r273, %r184;
	mul.wide.s32 	%rd42, %r290, 4;
	add.s64 	%rd43, %rd1, %rd42;
	ld.global.nc.f32 	%f26, [%rd43];
	min.ftz.f32 	%f27, %f26, 0f3F800000;
	max.ftz.f32 	%f28, %f27, 0f00000000;
	fma.rn.ftz.f32 	%f29, %f28, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r291, %f29;
	sub.s32 	%r292, %r291, %r214;
	mad.lo.s32 	%r293, %r292, %r215, %r190;
	mul.wide.s32 	%rd44, %r293, 4;
	add.s64 	%rd45, %rd2, %rd44;
	ld.global.f32 	%f30, [%rd45];
	add.ftz.f32 	%f31, %f30, 0f3F800000;
	st.global.f32 	[%rd45], %f31;
	add.s32 	%r294, %r273, %r185;
	mul.wide.s32 	%rd46, %r294, 4;
	add.s64 	%rd47, %rd1, %rd46;
	ld.global.nc.f32 	%f32, [%rd47];
	min.ftz.f32 	%f33, %f32, 0f3F800000;
	max.ftz.f32 	%f34, %f33, 0f00000000;
	fma.rn.ftz.f32 	%f35, %f34, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r295, %f35;
	sub.s32 	%r296, %r295, %r214;
	mad.lo.s32 	%r297, %r296, %r215, %r190;
	mul.wide.s32 	%rd48, %r297, 4;
	add.s64 	%rd49, %rd2, %rd48;
	ld.global.f32 	%f36, [%rd49];
	add.ftz.f32 	%f37, %f36, 0f3F800000;
	st.global.f32 	[%rd49], %f37;
	add.s32 	%r298, %r273, %r186;
	mul.wide.s32 	%rd50, %r298, 4;
	add.s64 	%rd51, %rd1, %rd50;
	ld.global.nc.f32 	%f38, [%rd51];
	min.ftz.f32 	%f39, %f38, 0f3F800000;
	max.ftz.f32 	%f40, %f39, 0f00000000;
	fma.rn.ftz.f32 	%f41, %f40, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r299, %f41;
	sub.s32 	%r300, %r299, %r214;
	mad.lo.s32 	%r301, %r300, %r215, %r190;
	mul.wide.s32 	%rd52, %r301, 4;
	add.s64 	%rd53, %rd2, %rd52;
	ld.global.f32 	%f42, [%rd53];
	add.ftz.f32 	%f43, %f42, 0f3F800000;
	st.global.f32 	[%rd53], %f43;
	add.s32 	%r302, %r273, %r187;
	mul.wide.s32 	%rd54, %r302, 4;
	add.s64 	%rd55, %rd1, %rd54;
	ld.global.nc.f32 	%f44, [%rd55];
	min.ftz.f32 	%f45, %f44, 0f3F800000;
	max.ftz.f32 	%f46, %f45, 0f00000000;
	fma.rn.ftz.f32 	%f47, %f46, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r303, %f47;
	sub.s32 	%r304, %r303, %r214;
	mad.lo.s32 	%r305, %r304, %r215, %r190;
	mul.wide.s32 	%rd56, %r305, 4;
	add.s64 	%rd57, %rd2, %rd56;
	ld.global.f32 	%f48, [%rd57];
	add.ftz.f32 	%f49, %f48, 0f3F800000;
	st.global.f32 	[%rd57], %f49;
	add.s32 	%r723, %r723, 1;
	setp.ne.s32 	%p9, %r723, 8;
	@%p9 bra 	LBB1_20;
	bra.uni 	LBB1_66;
LBB1_64:                                // %"for histogram.s1.r4$y73.us.preheader"
                                        //   in Loop: Header=BB1_18 Depth=3
	mov.u32 	%r722, 0;
LBB1_65:                                // %"for histogram.s1.r4$y73.us"
                                        //   Parent Loop BB1_13 Depth=1
                                        //     Parent Loop BB1_16 Depth=2
                                        //       Parent Loop BB1_18 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	add.s32 	%r307, %r718, %r722;
	min.s32 	%r308, %r307, %r199;
	add.s32 	%r309, %r308, -20;
	max.s32 	%r310, %r309, %r212;
	mul.lo.s32 	%r311, %r310, %r211;
	sub.s32 	%r312, %r311, %r201;
	add.s32 	%r313, %r312, %r180;
	mul.wide.s32 	%rd58, %r313, 4;
	add.s64 	%rd59, %rd1, %rd58;
	ld.global.nc.f32 	%f50, [%rd59];
	min.ftz.f32 	%f51, %f50, 0f3F800000;
	max.ftz.f32 	%f52, %f51, 0f00000000;
	fma.rn.ftz.f32 	%f53, %f52, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r314, %f53;
	sub.s32 	%r315, %r314, %r214;
	mad.lo.s32 	%r316, %r315, %r215, %r190;
	mul.wide.s32 	%rd60, %r316, 4;
	add.s64 	%rd61, %rd2, %rd60;
	ld.global.f32 	%f54, [%rd61];
	add.ftz.f32 	%f55, %f54, %f52;
	st.global.f32 	[%rd61], %f55;
	add.s32 	%r317, %r312, %r181;
	mul.wide.s32 	%rd62, %r317, 4;
	add.s64 	%rd63, %rd1, %rd62;
	ld.global.nc.f32 	%f56, [%rd63];
	min.ftz.f32 	%f57, %f56, 0f3F800000;
	max.ftz.f32 	%f58, %f57, 0f00000000;
	fma.rn.ftz.f32 	%f59, %f58, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r318, %f59;
	sub.s32 	%r319, %r318, %r214;
	mad.lo.s32 	%r320, %r319, %r215, %r190;
	mul.wide.s32 	%rd64, %r320, 4;
	add.s64 	%rd65, %rd2, %rd64;
	ld.global.f32 	%f60, [%rd65];
	add.ftz.f32 	%f61, %f60, %f58;
	st.global.f32 	[%rd65], %f61;
	add.s32 	%r321, %r312, %r182;
	mul.wide.s32 	%rd66, %r321, 4;
	add.s64 	%rd67, %rd1, %rd66;
	ld.global.nc.f32 	%f62, [%rd67];
	min.ftz.f32 	%f63, %f62, 0f3F800000;
	max.ftz.f32 	%f64, %f63, 0f00000000;
	fma.rn.ftz.f32 	%f65, %f64, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r322, %f65;
	sub.s32 	%r323, %r322, %r214;
	mad.lo.s32 	%r324, %r323, %r215, %r190;
	mul.wide.s32 	%rd68, %r324, 4;
	add.s64 	%rd69, %rd2, %rd68;
	ld.global.f32 	%f66, [%rd69];
	add.ftz.f32 	%f67, %f66, %f64;
	st.global.f32 	[%rd69], %f67;
	add.s32 	%r325, %r312, %r183;
	mul.wide.s32 	%rd70, %r325, 4;
	add.s64 	%rd71, %rd1, %rd70;
	ld.global.nc.f32 	%f68, [%rd71];
	min.ftz.f32 	%f69, %f68, 0f3F800000;
	max.ftz.f32 	%f70, %f69, 0f00000000;
	fma.rn.ftz.f32 	%f71, %f70, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r326, %f71;
	sub.s32 	%r327, %r326, %r214;
	mad.lo.s32 	%r328, %r327, %r215, %r190;
	mul.wide.s32 	%rd72, %r328, 4;
	add.s64 	%rd73, %rd2, %rd72;
	ld.global.f32 	%f72, [%rd73];
	add.ftz.f32 	%f73, %f72, %f70;
	st.global.f32 	[%rd73], %f73;
	add.s32 	%r329, %r312, %r184;
	mul.wide.s32 	%rd74, %r329, 4;
	add.s64 	%rd75, %rd1, %rd74;
	ld.global.nc.f32 	%f74, [%rd75];
	min.ftz.f32 	%f75, %f74, 0f3F800000;
	max.ftz.f32 	%f76, %f75, 0f00000000;
	fma.rn.ftz.f32 	%f77, %f76, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r330, %f77;
	sub.s32 	%r331, %r330, %r214;
	mad.lo.s32 	%r332, %r331, %r215, %r190;
	mul.wide.s32 	%rd76, %r332, 4;
	add.s64 	%rd77, %rd2, %rd76;
	ld.global.f32 	%f78, [%rd77];
	add.ftz.f32 	%f79, %f78, %f76;
	st.global.f32 	[%rd77], %f79;
	add.s32 	%r333, %r312, %r185;
	mul.wide.s32 	%rd78, %r333, 4;
	add.s64 	%rd79, %rd1, %rd78;
	ld.global.nc.f32 	%f80, [%rd79];
	min.ftz.f32 	%f81, %f80, 0f3F800000;
	max.ftz.f32 	%f82, %f81, 0f00000000;
	fma.rn.ftz.f32 	%f83, %f82, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r334, %f83;
	sub.s32 	%r335, %r334, %r214;
	mad.lo.s32 	%r336, %r335, %r215, %r190;
	mul.wide.s32 	%rd80, %r336, 4;
	add.s64 	%rd81, %rd2, %rd80;
	ld.global.f32 	%f84, [%rd81];
	add.ftz.f32 	%f85, %f84, %f82;
	st.global.f32 	[%rd81], %f85;
	add.s32 	%r337, %r312, %r186;
	mul.wide.s32 	%rd82, %r337, 4;
	add.s64 	%rd83, %rd1, %rd82;
	ld.global.nc.f32 	%f86, [%rd83];
	min.ftz.f32 	%f87, %f86, 0f3F800000;
	max.ftz.f32 	%f88, %f87, 0f00000000;
	fma.rn.ftz.f32 	%f89, %f88, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r338, %f89;
	sub.s32 	%r339, %r338, %r214;
	mad.lo.s32 	%r340, %r339, %r215, %r190;
	mul.wide.s32 	%rd84, %r340, 4;
	add.s64 	%rd85, %rd2, %rd84;
	ld.global.f32 	%f90, [%rd85];
	add.ftz.f32 	%f91, %f90, %f88;
	st.global.f32 	[%rd85], %f91;
	add.s32 	%r341, %r312, %r187;
	mul.wide.s32 	%rd86, %r341, 4;
	add.s64 	%rd87, %rd1, %rd86;
	ld.global.nc.f32 	%f92, [%rd87];
	min.ftz.f32 	%f93, %f92, 0f3F800000;
	max.ftz.f32 	%f94, %f93, 0f00000000;
	fma.rn.ftz.f32 	%f95, %f94, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r342, %f95;
	sub.s32 	%r343, %r342, %r214;
	mad.lo.s32 	%r344, %r343, %r215, %r190;
	mul.wide.s32 	%rd88, %r344, 4;
	add.s64 	%rd89, %rd2, %rd88;
	ld.global.f32 	%f96, [%rd89];
	add.ftz.f32 	%f97, %f96, %f94;
	st.global.f32 	[%rd89], %f97;
	add.s32 	%r722, %r722, 1;
	setp.eq.s32 	%p10, %r722, 8;
	@%p10 bra 	LBB1_66;
	bra.uni 	LBB1_65;
LBB1_66:                                // %"end for histogram.s1.r4$y74"
                                        //   in Loop: Header=BB1_18 Depth=3
	add.s32 	%r721, %r721, 1;
	setp.eq.s32 	%p11, %r721, 2;
	@%p11 bra 	LBB1_67;
	bra.uni 	LBB1_18;
LBB1_67:                                // %after_bb69
                                        //   in Loop: Header=BB1_16 Depth=2
	add.s32 	%r720, %r720, 1;
	setp.eq.s32 	%p12, %r720, %r7;
	@%p12 bra 	LBB1_62;
	bra.uni 	LBB1_16;
LBB1_62:                                // %after_bb63
                                        //   in Loop: Header=BB1_13 Depth=1
	add.s32 	%r719, %r719, 1;
	add.s32 	%r718, %r718, 8;
	setp.eq.s32 	%p13, %r719, %r8;
	@%p13 bra 	LBB1_63;
	bra.uni 	LBB1_13;
LBB1_21:                                // %false_bb2
	shl.b32 	%r12, %r3, 3;
	max.u32 	%r345, %r12, 155;
	mov.u32 	%r346, 163;
	sub.s32 	%r13, %r346, %r345;
	setp.lt.s32 	%p17, %r13, 1;
	@%p17 bra 	LBB1_63;
// %bb.22:                              // %"for histogram.s1.y.yi.yii40.preheader"
	mul.lo.s32 	%r14, %r2, 99;
	sub.s32 	%r347, %r216, %r14;
	min.s32 	%r348, %r347, 97;
	shl.b32 	%r15, %r4, 3;
	sub.s32 	%r349, %r348, %r15;
	mul.lo.s32 	%r16, %r1, 163;
	add.s32 	%r17, %r12, %r16;
	add.s32 	%r18, %r15, %r14;
	min.s32 	%r350, %r349, 6;
	max.s32 	%r351, %r350, -2;
	add.s32 	%r19, %r351, 2;
	add.s32 	%r20, %r216, 2;
	add.s32 	%r353, %r204, %r16;
	add.s32 	%r354, %r353, %r12;
	shl.b32 	%r355, %r354, 3;
	add.s32 	%r356, %r355, -20;
	mul.lo.s32 	%r357, %r211, %r356;
	sub.s32 	%r21, %r357, %r201;
	shl.b32 	%r22, %r211, 3;
	add.s32 	%r358, %r203, %r14;
	add.s32 	%r359, %r358, %r15;
	shl.b32 	%r360, %r359, 3;
	mov.u32 	%r361, -8;
	sub.s32 	%r23, %r361, %r360;
	not.b32 	%r24, %r200;
	mov.u32 	%r362, -7;
	sub.s32 	%r25, %r362, %r360;
	mov.u32 	%r363, -6;
	sub.s32 	%r26, %r363, %r360;
	mov.u32 	%r364, -5;
	sub.s32 	%r27, %r364, %r360;
	mov.u32 	%r365, -4;
	sub.s32 	%r28, %r365, %r360;
	mov.u32 	%r366, -3;
	sub.s32 	%r29, %r366, %r360;
	mov.u32 	%r367, -2;
	sub.s32 	%r30, %r367, %r360;
	not.b32 	%r31, %r360;
	mov.u32 	%r688, 0;
	setp.lt.s32 	%p18, %r19, 1;
	mov.u32 	%r689, %r688;
LBB1_23:                                // %"for histogram.s1.y.yi.yii40"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB1_52 Depth 2
                                        //       Child Loop BB1_54 Depth 3
                                        //         Child Loop BB1_56 Depth 4
                                        //         Child Loop BB1_60 Depth 4
	@%p18 bra 	LBB1_58;
// %bb.24:                              // %"for histogram.s1.x.xi.xii43.preheader"
                                        //   in Loop: Header=BB1_23 Depth=1
	add.s32 	%r368, %r689, %r17;
	add.s32 	%r369, %r368, %r207;
	mad.lo.s32 	%r101, %r369, %r205, %r210;
	mov.u32 	%r110, 0;
	mov.u32 	%r102, %r31;
	mov.u32 	%r103, %r30;
	mov.u32 	%r104, %r29;
	mov.u32 	%r105, %r28;
	mov.u32 	%r106, %r27;
	mov.u32 	%r107, %r26;
	mov.u32 	%r108, %r25;
	mov.u32 	%r109, %r23;
LBB1_52:                                // %"for histogram.s1.x.xi.xii43"
                                        //   Parent Loop BB1_23 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB1_54 Depth 3
                                        //         Child Loop BB1_56 Depth 4
                                        //         Child Loop BB1_60 Depth 4
	add.s32 	%r119, %r110, %r18;
	setp.lt.s32 	%p19, %r119, %r20;
	@%p19 bra 	LBB1_53;
	bra.uni 	LBB1_57;
LBB1_53:                                // %true_bb46
                                        //   in Loop: Header=BB1_52 Depth=2
	max.s32 	%r371, %r109, %r24;
	mov.u32 	%r372, -21;
	sub.s32 	%r373, %r372, %r371;
	max.s32 	%r374, %r213, %r373;
	add.s32 	%r111, %r688, %r374;
	max.s32 	%r375, %r108, %r24;
	sub.s32 	%r376, %r372, %r375;
	max.s32 	%r377, %r213, %r376;
	add.s32 	%r112, %r688, %r377;
	max.s32 	%r378, %r107, %r24;
	sub.s32 	%r379, %r372, %r378;
	max.s32 	%r380, %r213, %r379;
	add.s32 	%r113, %r688, %r380;
	max.s32 	%r381, %r106, %r24;
	sub.s32 	%r382, %r372, %r381;
	max.s32 	%r383, %r213, %r382;
	add.s32 	%r114, %r688, %r383;
	max.s32 	%r384, %r105, %r24;
	sub.s32 	%r385, %r372, %r384;
	max.s32 	%r386, %r213, %r385;
	add.s32 	%r115, %r688, %r386;
	max.s32 	%r387, %r104, %r24;
	sub.s32 	%r388, %r372, %r387;
	max.s32 	%r389, %r213, %r388;
	add.s32 	%r116, %r688, %r389;
	max.s32 	%r390, %r103, %r24;
	sub.s32 	%r391, %r372, %r390;
	max.s32 	%r392, %r213, %r391;
	add.s32 	%r117, %r688, %r392;
	max.s32 	%r393, %r102, %r24;
	sub.s32 	%r394, %r372, %r393;
	max.s32 	%r395, %r213, %r394;
	add.s32 	%r118, %r688, %r395;
	add.s32 	%r397, %r119, %r209;
	shl.b32 	%r398, %r397, 1;
	add.s32 	%r122, %r101, %r398;
	mov.u32 	%r699, 0;
LBB1_54:                                // %"for histogram.s1.c49"
                                        //   Parent Loop BB1_23 Depth=1
                                        //     Parent Loop BB1_52 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB1_56 Depth 4
                                        //         Child Loop BB1_60 Depth 4
	setp.eq.s32 	%p20, %r699, 0;
	add.s32 	%r133, %r122, %r699;
	@%p20 bra 	LBB1_59;
// %bb.55:                              // %"for histogram.s1.r4$y52.preheader"
                                        //   in Loop: Header=BB1_54 Depth=3
	mov.u32 	%r709, 8;
	mov.u32 	%r710, %r118;
	mov.u32 	%r711, %r117;
	mov.u32 	%r712, %r116;
	mov.u32 	%r713, %r115;
	mov.u32 	%r714, %r114;
	mov.u32 	%r715, %r113;
	mov.u32 	%r716, %r112;
	mov.u32 	%r717, %r111;
LBB1_56:                                // %"for histogram.s1.r4$y52"
                                        //   Parent Loop BB1_23 Depth=1
                                        //     Parent Loop BB1_52 Depth=2
                                        //       Parent Loop BB1_54 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	add.s32 	%r400, %r21, %r710;
	mul.wide.s32 	%rd90, %r400, 4;
	add.s64 	%rd91, %rd1, %rd90;
	ld.global.nc.f32 	%f98, [%rd91];
	min.ftz.f32 	%f99, %f98, 0f3F800000;
	max.ftz.f32 	%f100, %f99, 0f00000000;
	fma.rn.ftz.f32 	%f101, %f100, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r401, %f101;
	sub.s32 	%r402, %r401, %r214;
	mad.lo.s32 	%r403, %r402, %r215, %r133;
	mul.wide.s32 	%rd92, %r403, 4;
	add.s64 	%rd93, %rd2, %rd92;
	ld.global.f32 	%f102, [%rd93];
	add.ftz.f32 	%f103, %f102, 0f3F800000;
	st.global.f32 	[%rd93], %f103;
	add.s32 	%r404, %r21, %r711;
	mul.wide.s32 	%rd94, %r404, 4;
	add.s64 	%rd95, %rd1, %rd94;
	ld.global.nc.f32 	%f104, [%rd95];
	min.ftz.f32 	%f105, %f104, 0f3F800000;
	max.ftz.f32 	%f106, %f105, 0f00000000;
	fma.rn.ftz.f32 	%f107, %f106, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r405, %f107;
	sub.s32 	%r406, %r405, %r214;
	mad.lo.s32 	%r407, %r406, %r215, %r133;
	mul.wide.s32 	%rd96, %r407, 4;
	add.s64 	%rd97, %rd2, %rd96;
	ld.global.f32 	%f108, [%rd97];
	add.ftz.f32 	%f109, %f108, 0f3F800000;
	st.global.f32 	[%rd97], %f109;
	add.s32 	%r408, %r21, %r712;
	mul.wide.s32 	%rd98, %r408, 4;
	add.s64 	%rd99, %rd1, %rd98;
	ld.global.nc.f32 	%f110, [%rd99];
	min.ftz.f32 	%f111, %f110, 0f3F800000;
	max.ftz.f32 	%f112, %f111, 0f00000000;
	fma.rn.ftz.f32 	%f113, %f112, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r409, %f113;
	sub.s32 	%r410, %r409, %r214;
	mad.lo.s32 	%r411, %r410, %r215, %r133;
	mul.wide.s32 	%rd100, %r411, 4;
	add.s64 	%rd101, %rd2, %rd100;
	ld.global.f32 	%f114, [%rd101];
	add.ftz.f32 	%f115, %f114, 0f3F800000;
	st.global.f32 	[%rd101], %f115;
	add.s32 	%r412, %r21, %r713;
	mul.wide.s32 	%rd102, %r412, 4;
	add.s64 	%rd103, %rd1, %rd102;
	ld.global.nc.f32 	%f116, [%rd103];
	min.ftz.f32 	%f117, %f116, 0f3F800000;
	max.ftz.f32 	%f118, %f117, 0f00000000;
	fma.rn.ftz.f32 	%f119, %f118, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r413, %f119;
	sub.s32 	%r414, %r413, %r214;
	mad.lo.s32 	%r415, %r414, %r215, %r133;
	mul.wide.s32 	%rd104, %r415, 4;
	add.s64 	%rd105, %rd2, %rd104;
	ld.global.f32 	%f120, [%rd105];
	add.ftz.f32 	%f121, %f120, 0f3F800000;
	st.global.f32 	[%rd105], %f121;
	add.s32 	%r416, %r21, %r714;
	mul.wide.s32 	%rd106, %r416, 4;
	add.s64 	%rd107, %rd1, %rd106;
	ld.global.nc.f32 	%f122, [%rd107];
	min.ftz.f32 	%f123, %f122, 0f3F800000;
	max.ftz.f32 	%f124, %f123, 0f00000000;
	fma.rn.ftz.f32 	%f125, %f124, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r417, %f125;
	sub.s32 	%r418, %r417, %r214;
	mad.lo.s32 	%r419, %r418, %r215, %r133;
	mul.wide.s32 	%rd108, %r419, 4;
	add.s64 	%rd109, %rd2, %rd108;
	ld.global.f32 	%f126, [%rd109];
	add.ftz.f32 	%f127, %f126, 0f3F800000;
	st.global.f32 	[%rd109], %f127;
	add.s32 	%r420, %r21, %r715;
	mul.wide.s32 	%rd110, %r420, 4;
	add.s64 	%rd111, %rd1, %rd110;
	ld.global.nc.f32 	%f128, [%rd111];
	min.ftz.f32 	%f129, %f128, 0f3F800000;
	max.ftz.f32 	%f130, %f129, 0f00000000;
	fma.rn.ftz.f32 	%f131, %f130, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r421, %f131;
	sub.s32 	%r422, %r421, %r214;
	mad.lo.s32 	%r423, %r422, %r215, %r133;
	mul.wide.s32 	%rd112, %r423, 4;
	add.s64 	%rd113, %rd2, %rd112;
	ld.global.f32 	%f132, [%rd113];
	add.ftz.f32 	%f133, %f132, 0f3F800000;
	st.global.f32 	[%rd113], %f133;
	add.s32 	%r424, %r21, %r716;
	mul.wide.s32 	%rd114, %r424, 4;
	add.s64 	%rd115, %rd1, %rd114;
	ld.global.nc.f32 	%f134, [%rd115];
	min.ftz.f32 	%f135, %f134, 0f3F800000;
	max.ftz.f32 	%f136, %f135, 0f00000000;
	fma.rn.ftz.f32 	%f137, %f136, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r425, %f137;
	sub.s32 	%r426, %r425, %r214;
	mad.lo.s32 	%r427, %r426, %r215, %r133;
	mul.wide.s32 	%rd116, %r427, 4;
	add.s64 	%rd117, %rd2, %rd116;
	ld.global.f32 	%f138, [%rd117];
	add.ftz.f32 	%f139, %f138, 0f3F800000;
	st.global.f32 	[%rd117], %f139;
	add.s32 	%r428, %r21, %r717;
	mul.wide.s32 	%rd118, %r428, 4;
	add.s64 	%rd119, %rd1, %rd118;
	ld.global.nc.f32 	%f140, [%rd119];
	min.ftz.f32 	%f141, %f140, 0f3F800000;
	max.ftz.f32 	%f142, %f141, 0f00000000;
	fma.rn.ftz.f32 	%f143, %f142, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r429, %f143;
	sub.s32 	%r430, %r429, %r214;
	mad.lo.s32 	%r431, %r430, %r215, %r133;
	mul.wide.s32 	%rd120, %r431, 4;
	add.s64 	%rd121, %rd2, %rd120;
	ld.global.f32 	%f144, [%rd121];
	add.ftz.f32 	%f145, %f144, 0f3F800000;
	st.global.f32 	[%rd121], %f145;
	add.s32 	%r717, %r717, %r211;
	add.s32 	%r716, %r716, %r211;
	add.s32 	%r715, %r715, %r211;
	add.s32 	%r714, %r714, %r211;
	add.s32 	%r713, %r713, %r211;
	add.s32 	%r712, %r712, %r211;
	add.s32 	%r711, %r711, %r211;
	add.s32 	%r710, %r710, %r211;
	add.s32 	%r709, %r709, -1;
	setp.ne.s32 	%p21, %r709, 0;
	@%p21 bra 	LBB1_56;
	bra.uni 	LBB1_61;
LBB1_59:                                // %"for histogram.s1.r4$y52.us.preheader"
                                        //   in Loop: Header=BB1_54 Depth=3
	mov.u32 	%r708, 8;
	mov.u32 	%r700, %r118;
	mov.u32 	%r701, %r117;
	mov.u32 	%r702, %r116;
	mov.u32 	%r703, %r115;
	mov.u32 	%r704, %r114;
	mov.u32 	%r705, %r113;
	mov.u32 	%r706, %r112;
	mov.u32 	%r707, %r111;
LBB1_60:                                // %"for histogram.s1.r4$y52.us"
                                        //   Parent Loop BB1_23 Depth=1
                                        //     Parent Loop BB1_52 Depth=2
                                        //       Parent Loop BB1_54 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	add.s32 	%r433, %r21, %r700;
	mul.wide.s32 	%rd122, %r433, 4;
	add.s64 	%rd123, %rd1, %rd122;
	ld.global.nc.f32 	%f146, [%rd123];
	min.ftz.f32 	%f147, %f146, 0f3F800000;
	max.ftz.f32 	%f148, %f147, 0f00000000;
	fma.rn.ftz.f32 	%f149, %f148, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r434, %f149;
	sub.s32 	%r435, %r434, %r214;
	mad.lo.s32 	%r436, %r435, %r215, %r133;
	mul.wide.s32 	%rd124, %r436, 4;
	add.s64 	%rd125, %rd2, %rd124;
	ld.global.f32 	%f150, [%rd125];
	add.ftz.f32 	%f151, %f150, %f148;
	st.global.f32 	[%rd125], %f151;
	add.s32 	%r437, %r21, %r701;
	mul.wide.s32 	%rd126, %r437, 4;
	add.s64 	%rd127, %rd1, %rd126;
	ld.global.nc.f32 	%f152, [%rd127];
	min.ftz.f32 	%f153, %f152, 0f3F800000;
	max.ftz.f32 	%f154, %f153, 0f00000000;
	fma.rn.ftz.f32 	%f155, %f154, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r438, %f155;
	sub.s32 	%r439, %r438, %r214;
	mad.lo.s32 	%r440, %r439, %r215, %r133;
	mul.wide.s32 	%rd128, %r440, 4;
	add.s64 	%rd129, %rd2, %rd128;
	ld.global.f32 	%f156, [%rd129];
	add.ftz.f32 	%f157, %f156, %f154;
	st.global.f32 	[%rd129], %f157;
	add.s32 	%r441, %r21, %r702;
	mul.wide.s32 	%rd130, %r441, 4;
	add.s64 	%rd131, %rd1, %rd130;
	ld.global.nc.f32 	%f158, [%rd131];
	min.ftz.f32 	%f159, %f158, 0f3F800000;
	max.ftz.f32 	%f160, %f159, 0f00000000;
	fma.rn.ftz.f32 	%f161, %f160, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r442, %f161;
	sub.s32 	%r443, %r442, %r214;
	mad.lo.s32 	%r444, %r443, %r215, %r133;
	mul.wide.s32 	%rd132, %r444, 4;
	add.s64 	%rd133, %rd2, %rd132;
	ld.global.f32 	%f162, [%rd133];
	add.ftz.f32 	%f163, %f162, %f160;
	st.global.f32 	[%rd133], %f163;
	add.s32 	%r445, %r21, %r703;
	mul.wide.s32 	%rd134, %r445, 4;
	add.s64 	%rd135, %rd1, %rd134;
	ld.global.nc.f32 	%f164, [%rd135];
	min.ftz.f32 	%f165, %f164, 0f3F800000;
	max.ftz.f32 	%f166, %f165, 0f00000000;
	fma.rn.ftz.f32 	%f167, %f166, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r446, %f167;
	sub.s32 	%r447, %r446, %r214;
	mad.lo.s32 	%r448, %r447, %r215, %r133;
	mul.wide.s32 	%rd136, %r448, 4;
	add.s64 	%rd137, %rd2, %rd136;
	ld.global.f32 	%f168, [%rd137];
	add.ftz.f32 	%f169, %f168, %f166;
	st.global.f32 	[%rd137], %f169;
	add.s32 	%r449, %r21, %r704;
	mul.wide.s32 	%rd138, %r449, 4;
	add.s64 	%rd139, %rd1, %rd138;
	ld.global.nc.f32 	%f170, [%rd139];
	min.ftz.f32 	%f171, %f170, 0f3F800000;
	max.ftz.f32 	%f172, %f171, 0f00000000;
	fma.rn.ftz.f32 	%f173, %f172, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r450, %f173;
	sub.s32 	%r451, %r450, %r214;
	mad.lo.s32 	%r452, %r451, %r215, %r133;
	mul.wide.s32 	%rd140, %r452, 4;
	add.s64 	%rd141, %rd2, %rd140;
	ld.global.f32 	%f174, [%rd141];
	add.ftz.f32 	%f175, %f174, %f172;
	st.global.f32 	[%rd141], %f175;
	add.s32 	%r453, %r21, %r705;
	mul.wide.s32 	%rd142, %r453, 4;
	add.s64 	%rd143, %rd1, %rd142;
	ld.global.nc.f32 	%f176, [%rd143];
	min.ftz.f32 	%f177, %f176, 0f3F800000;
	max.ftz.f32 	%f178, %f177, 0f00000000;
	fma.rn.ftz.f32 	%f179, %f178, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r454, %f179;
	sub.s32 	%r455, %r454, %r214;
	mad.lo.s32 	%r456, %r455, %r215, %r133;
	mul.wide.s32 	%rd144, %r456, 4;
	add.s64 	%rd145, %rd2, %rd144;
	ld.global.f32 	%f180, [%rd145];
	add.ftz.f32 	%f181, %f180, %f178;
	st.global.f32 	[%rd145], %f181;
	add.s32 	%r457, %r21, %r706;
	mul.wide.s32 	%rd146, %r457, 4;
	add.s64 	%rd147, %rd1, %rd146;
	ld.global.nc.f32 	%f182, [%rd147];
	min.ftz.f32 	%f183, %f182, 0f3F800000;
	max.ftz.f32 	%f184, %f183, 0f00000000;
	fma.rn.ftz.f32 	%f185, %f184, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r458, %f185;
	sub.s32 	%r459, %r458, %r214;
	mad.lo.s32 	%r460, %r459, %r215, %r133;
	mul.wide.s32 	%rd148, %r460, 4;
	add.s64 	%rd149, %rd2, %rd148;
	ld.global.f32 	%f186, [%rd149];
	add.ftz.f32 	%f187, %f186, %f184;
	st.global.f32 	[%rd149], %f187;
	add.s32 	%r461, %r21, %r707;
	mul.wide.s32 	%rd150, %r461, 4;
	add.s64 	%rd151, %rd1, %rd150;
	ld.global.nc.f32 	%f188, [%rd151];
	min.ftz.f32 	%f189, %f188, 0f3F800000;
	max.ftz.f32 	%f190, %f189, 0f00000000;
	fma.rn.ftz.f32 	%f191, %f190, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r462, %f191;
	sub.s32 	%r463, %r462, %r214;
	mad.lo.s32 	%r464, %r463, %r215, %r133;
	mul.wide.s32 	%rd152, %r464, 4;
	add.s64 	%rd153, %rd2, %rd152;
	ld.global.f32 	%f192, [%rd153];
	add.ftz.f32 	%f193, %f192, %f190;
	st.global.f32 	[%rd153], %f193;
	add.s32 	%r708, %r708, -1;
	add.s32 	%r707, %r707, %r211;
	add.s32 	%r706, %r706, %r211;
	add.s32 	%r705, %r705, %r211;
	add.s32 	%r704, %r704, %r211;
	add.s32 	%r703, %r703, %r211;
	add.s32 	%r702, %r702, %r211;
	add.s32 	%r701, %r701, %r211;
	add.s32 	%r700, %r700, %r211;
	setp.eq.s32 	%p22, %r708, 0;
	@%p22 bra 	LBB1_61;
	bra.uni 	LBB1_60;
LBB1_61:                                // %"end for histogram.s1.r4$y53"
                                        //   in Loop: Header=BB1_54 Depth=3
	add.s32 	%r699, %r699, 1;
	setp.eq.s32 	%p23, %r699, 2;
	@%p23 bra 	LBB1_57;
	bra.uni 	LBB1_54;
LBB1_57:                                // %after_bb48
                                        //   in Loop: Header=BB1_52 Depth=2
	add.s32 	%r110, %r110, 1;
	add.s32 	%r109, %r109, -8;
	add.s32 	%r108, %r108, -8;
	add.s32 	%r107, %r107, -8;
	add.s32 	%r106, %r106, -8;
	add.s32 	%r105, %r105, -8;
	add.s32 	%r104, %r104, -8;
	add.s32 	%r103, %r103, -8;
	add.s32 	%r102, %r102, -8;
	setp.eq.s32 	%p24, %r110, %r19;
	@%p24 bra 	LBB1_58;
	bra.uni 	LBB1_52;
LBB1_58:                                // %"end for histogram.s1.x.xi.xii44"
                                        //   in Loop: Header=BB1_23 Depth=1
	add.s32 	%r689, %r689, 1;
	add.s32 	%r688, %r688, %r22;
	setp.eq.s32 	%p25, %r689, %r13;
	@%p25 bra 	LBB1_63;
	bra.uni 	LBB1_23;
LBB1_40:                                // %false_bb5
	shl.b32 	%r466, %r4, 3;
	max.u32 	%r467, %r466, 91;
	mov.u32 	%r468, 99;
	sub.s32 	%r36, %r468, %r467;
	mul.lo.s32 	%r37, %r1, 163;
	mul.lo.s32 	%r469, %r2, 99;
	add.s32 	%r38, %r466, %r469;
	add.s64 	%rd3, %rd1, 16;
	shl.b32 	%r470, %r204, 3;
	mad.lo.s32 	%r471, %r1, 1304, %r470;
	add.s32 	%r472, %r471, 1260;
	mad.lo.s32 	%r473, %r211, %r472, %r206;
	add.s32 	%r474, %r203, %r469;
	add.s32 	%r475, %r474, %r466;
	shl.b32 	%r476, %r475, 3;
	add.s32 	%r681, %r473, %r476;
	shl.b32 	%r40, %r211, 3;
	mul.wide.s32 	%rd4, %r211, 4;
	mov.u32 	%r682, 0;
	setp.lt.s32 	%p27, %r36, 1;
LBB1_41:                                // %"for histogram.s1.y.yi.yii25"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB1_43 Depth 2
                                        //       Child Loop BB1_44 Depth 3
                                        //         Child Loop BB1_46 Depth 4
                                        //         Child Loop BB1_49 Depth 4
	@%p27 bra 	LBB1_51;
// %bb.42:                              // %"for histogram.s1.x.xi.xii28.preheader"
                                        //   in Loop: Header=BB1_41 Depth=1
	add.s32 	%r477, %r682, %r37;
	add.s32 	%r478, %r477, %r207;
	add.s32 	%r479, %r478, 160;
	mad.lo.s32 	%r84, %r479, %r205, %r210;
	mov.u32 	%r480, 0;
	mov.u32 	%r85, %r681;
	mov.u32 	%r86, %r480;
LBB1_43:                                // %"for histogram.s1.x.xi.xii28"
                                        //   Parent Loop BB1_41 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB1_44 Depth 3
                                        //         Child Loop BB1_46 Depth 4
                                        //         Child Loop BB1_49 Depth 4
	mul.wide.s32 	%rd154, %r85, 4;
	add.s64 	%rd19, %rd3, %rd154;
	add.s32 	%r482, %r86, %r38;
	add.s32 	%r483, %r482, %r209;
	shl.b32 	%r484, %r483, 1;
	add.s32 	%r87, %r84, %r484;
	mov.u32 	%r685, %r480;
LBB1_44:                                // %"for histogram.s1.c31"
                                        //   Parent Loop BB1_41 Depth=1
                                        //     Parent Loop BB1_43 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB1_46 Depth 4
                                        //         Child Loop BB1_49 Depth 4
	setp.eq.s32 	%p28, %r685, 0;
	add.s32 	%r91, %r87, %r685;
	@%p28 bra 	LBB1_48;
// %bb.45:                              // %"for histogram.s1.r4$y34.preheader"
                                        //   in Loop: Header=BB1_44 Depth=3
	mov.u32 	%r687, 8;
	mov.u64 	%rd258, %rd19;
LBB1_46:                                // %"for histogram.s1.r4$y34"
                                        //   Parent Loop BB1_41 Depth=1
                                        //     Parent Loop BB1_43 Depth=2
                                        //       Parent Loop BB1_44 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ld.global.nc.f32 	%f194, [%rd258+-16];
	min.ftz.f32 	%f195, %f194, 0f3F800000;
	max.ftz.f32 	%f196, %f195, 0f00000000;
	fma.rn.ftz.f32 	%f197, %f196, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r486, %f197;
	sub.s32 	%r487, %r486, %r214;
	mad.lo.s32 	%r488, %r487, %r215, %r91;
	mul.wide.s32 	%rd155, %r488, 4;
	add.s64 	%rd156, %rd2, %rd155;
	ld.global.f32 	%f198, [%rd156];
	add.ftz.f32 	%f199, %f198, 0f3F800000;
	st.global.f32 	[%rd156], %f199;
	ld.global.nc.f32 	%f200, [%rd258+-12];
	min.ftz.f32 	%f201, %f200, 0f3F800000;
	max.ftz.f32 	%f202, %f201, 0f00000000;
	fma.rn.ftz.f32 	%f203, %f202, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r489, %f203;
	sub.s32 	%r490, %r489, %r214;
	mad.lo.s32 	%r491, %r490, %r215, %r91;
	mul.wide.s32 	%rd157, %r491, 4;
	add.s64 	%rd158, %rd2, %rd157;
	ld.global.f32 	%f204, [%rd158];
	add.ftz.f32 	%f205, %f204, 0f3F800000;
	st.global.f32 	[%rd158], %f205;
	ld.global.nc.f32 	%f206, [%rd258+-8];
	min.ftz.f32 	%f207, %f206, 0f3F800000;
	max.ftz.f32 	%f208, %f207, 0f00000000;
	fma.rn.ftz.f32 	%f209, %f208, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r492, %f209;
	sub.s32 	%r493, %r492, %r214;
	mad.lo.s32 	%r494, %r493, %r215, %r91;
	mul.wide.s32 	%rd159, %r494, 4;
	add.s64 	%rd160, %rd2, %rd159;
	ld.global.f32 	%f210, [%rd160];
	add.ftz.f32 	%f211, %f210, 0f3F800000;
	st.global.f32 	[%rd160], %f211;
	ld.global.nc.f32 	%f212, [%rd258+-4];
	min.ftz.f32 	%f213, %f212, 0f3F800000;
	max.ftz.f32 	%f214, %f213, 0f00000000;
	fma.rn.ftz.f32 	%f215, %f214, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r495, %f215;
	sub.s32 	%r496, %r495, %r214;
	mad.lo.s32 	%r497, %r496, %r215, %r91;
	mul.wide.s32 	%rd161, %r497, 4;
	add.s64 	%rd162, %rd2, %rd161;
	ld.global.f32 	%f216, [%rd162];
	add.ftz.f32 	%f217, %f216, 0f3F800000;
	st.global.f32 	[%rd162], %f217;
	ld.global.nc.f32 	%f218, [%rd258];
	min.ftz.f32 	%f219, %f218, 0f3F800000;
	max.ftz.f32 	%f220, %f219, 0f00000000;
	fma.rn.ftz.f32 	%f221, %f220, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r498, %f221;
	sub.s32 	%r499, %r498, %r214;
	mad.lo.s32 	%r500, %r499, %r215, %r91;
	mul.wide.s32 	%rd163, %r500, 4;
	add.s64 	%rd164, %rd2, %rd163;
	ld.global.f32 	%f222, [%rd164];
	add.ftz.f32 	%f223, %f222, 0f3F800000;
	st.global.f32 	[%rd164], %f223;
	ld.global.nc.f32 	%f224, [%rd258+4];
	min.ftz.f32 	%f225, %f224, 0f3F800000;
	max.ftz.f32 	%f226, %f225, 0f00000000;
	fma.rn.ftz.f32 	%f227, %f226, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r501, %f227;
	sub.s32 	%r502, %r501, %r214;
	mad.lo.s32 	%r503, %r502, %r215, %r91;
	mul.wide.s32 	%rd165, %r503, 4;
	add.s64 	%rd166, %rd2, %rd165;
	ld.global.f32 	%f228, [%rd166];
	add.ftz.f32 	%f229, %f228, 0f3F800000;
	st.global.f32 	[%rd166], %f229;
	ld.global.nc.f32 	%f230, [%rd258+8];
	min.ftz.f32 	%f231, %f230, 0f3F800000;
	max.ftz.f32 	%f232, %f231, 0f00000000;
	fma.rn.ftz.f32 	%f233, %f232, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r504, %f233;
	sub.s32 	%r505, %r504, %r214;
	mad.lo.s32 	%r506, %r505, %r215, %r91;
	mul.wide.s32 	%rd167, %r506, 4;
	add.s64 	%rd168, %rd2, %rd167;
	ld.global.f32 	%f234, [%rd168];
	add.ftz.f32 	%f235, %f234, 0f3F800000;
	st.global.f32 	[%rd168], %f235;
	ld.global.nc.f32 	%f236, [%rd258+12];
	min.ftz.f32 	%f237, %f236, 0f3F800000;
	max.ftz.f32 	%f238, %f237, 0f00000000;
	fma.rn.ftz.f32 	%f239, %f238, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r507, %f239;
	sub.s32 	%r508, %r507, %r214;
	mad.lo.s32 	%r509, %r508, %r215, %r91;
	mul.wide.s32 	%rd169, %r509, 4;
	add.s64 	%rd170, %rd2, %rd169;
	ld.global.f32 	%f240, [%rd170];
	add.ftz.f32 	%f241, %f240, 0f3F800000;
	st.global.f32 	[%rd170], %f241;
	add.s32 	%r687, %r687, -1;
	add.s64 	%rd258, %rd258, %rd4;
	setp.ne.s32 	%p29, %r687, 0;
	@%p29 bra 	LBB1_46;
	bra.uni 	LBB1_47;
LBB1_48:                                // %"for histogram.s1.r4$y34.us.preheader"
                                        //   in Loop: Header=BB1_44 Depth=3
	mov.u32 	%r686, 8;
	mov.u64 	%rd257, %rd19;
LBB1_49:                                // %"for histogram.s1.r4$y34.us"
                                        //   Parent Loop BB1_41 Depth=1
                                        //     Parent Loop BB1_43 Depth=2
                                        //       Parent Loop BB1_44 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ld.global.nc.f32 	%f242, [%rd257+-16];
	min.ftz.f32 	%f243, %f242, 0f3F800000;
	max.ftz.f32 	%f244, %f243, 0f00000000;
	fma.rn.ftz.f32 	%f245, %f244, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r511, %f245;
	sub.s32 	%r512, %r511, %r214;
	mad.lo.s32 	%r513, %r512, %r215, %r91;
	mul.wide.s32 	%rd171, %r513, 4;
	add.s64 	%rd172, %rd2, %rd171;
	ld.global.f32 	%f246, [%rd172];
	add.ftz.f32 	%f247, %f246, %f244;
	st.global.f32 	[%rd172], %f247;
	ld.global.nc.f32 	%f248, [%rd257+-12];
	min.ftz.f32 	%f249, %f248, 0f3F800000;
	max.ftz.f32 	%f250, %f249, 0f00000000;
	fma.rn.ftz.f32 	%f251, %f250, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r514, %f251;
	sub.s32 	%r515, %r514, %r214;
	mad.lo.s32 	%r516, %r515, %r215, %r91;
	mul.wide.s32 	%rd173, %r516, 4;
	add.s64 	%rd174, %rd2, %rd173;
	ld.global.f32 	%f252, [%rd174];
	add.ftz.f32 	%f253, %f252, %f250;
	st.global.f32 	[%rd174], %f253;
	ld.global.nc.f32 	%f254, [%rd257+-8];
	min.ftz.f32 	%f255, %f254, 0f3F800000;
	max.ftz.f32 	%f256, %f255, 0f00000000;
	fma.rn.ftz.f32 	%f257, %f256, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r517, %f257;
	sub.s32 	%r518, %r517, %r214;
	mad.lo.s32 	%r519, %r518, %r215, %r91;
	mul.wide.s32 	%rd175, %r519, 4;
	add.s64 	%rd176, %rd2, %rd175;
	ld.global.f32 	%f258, [%rd176];
	add.ftz.f32 	%f259, %f258, %f256;
	st.global.f32 	[%rd176], %f259;
	ld.global.nc.f32 	%f260, [%rd257+-4];
	min.ftz.f32 	%f261, %f260, 0f3F800000;
	max.ftz.f32 	%f262, %f261, 0f00000000;
	fma.rn.ftz.f32 	%f263, %f262, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r520, %f263;
	sub.s32 	%r521, %r520, %r214;
	mad.lo.s32 	%r522, %r521, %r215, %r91;
	mul.wide.s32 	%rd177, %r522, 4;
	add.s64 	%rd178, %rd2, %rd177;
	ld.global.f32 	%f264, [%rd178];
	add.ftz.f32 	%f265, %f264, %f262;
	st.global.f32 	[%rd178], %f265;
	ld.global.nc.f32 	%f266, [%rd257];
	min.ftz.f32 	%f267, %f266, 0f3F800000;
	max.ftz.f32 	%f268, %f267, 0f00000000;
	fma.rn.ftz.f32 	%f269, %f268, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r523, %f269;
	sub.s32 	%r524, %r523, %r214;
	mad.lo.s32 	%r525, %r524, %r215, %r91;
	mul.wide.s32 	%rd179, %r525, 4;
	add.s64 	%rd180, %rd2, %rd179;
	ld.global.f32 	%f270, [%rd180];
	add.ftz.f32 	%f271, %f270, %f268;
	st.global.f32 	[%rd180], %f271;
	ld.global.nc.f32 	%f272, [%rd257+4];
	min.ftz.f32 	%f273, %f272, 0f3F800000;
	max.ftz.f32 	%f274, %f273, 0f00000000;
	fma.rn.ftz.f32 	%f275, %f274, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r526, %f275;
	sub.s32 	%r527, %r526, %r214;
	mad.lo.s32 	%r528, %r527, %r215, %r91;
	mul.wide.s32 	%rd181, %r528, 4;
	add.s64 	%rd182, %rd2, %rd181;
	ld.global.f32 	%f276, [%rd182];
	add.ftz.f32 	%f277, %f276, %f274;
	st.global.f32 	[%rd182], %f277;
	ld.global.nc.f32 	%f278, [%rd257+8];
	min.ftz.f32 	%f279, %f278, 0f3F800000;
	max.ftz.f32 	%f280, %f279, 0f00000000;
	fma.rn.ftz.f32 	%f281, %f280, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r529, %f281;
	sub.s32 	%r530, %r529, %r214;
	mad.lo.s32 	%r531, %r530, %r215, %r91;
	mul.wide.s32 	%rd183, %r531, 4;
	add.s64 	%rd184, %rd2, %rd183;
	ld.global.f32 	%f282, [%rd184];
	add.ftz.f32 	%f283, %f282, %f280;
	st.global.f32 	[%rd184], %f283;
	ld.global.nc.f32 	%f284, [%rd257+12];
	min.ftz.f32 	%f285, %f284, 0f3F800000;
	max.ftz.f32 	%f286, %f285, 0f00000000;
	fma.rn.ftz.f32 	%f287, %f286, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r532, %f287;
	sub.s32 	%r533, %r532, %r214;
	mad.lo.s32 	%r534, %r533, %r215, %r91;
	mul.wide.s32 	%rd185, %r534, 4;
	add.s64 	%rd186, %rd2, %rd185;
	ld.global.f32 	%f288, [%rd186];
	add.ftz.f32 	%f289, %f288, %f286;
	st.global.f32 	[%rd186], %f289;
	add.s32 	%r686, %r686, -1;
	add.s64 	%rd257, %rd257, %rd4;
	setp.eq.s32 	%p30, %r686, 0;
	@%p30 bra 	LBB1_47;
	bra.uni 	LBB1_49;
LBB1_47:                                // %"end for histogram.s1.r4$y35"
                                        //   in Loop: Header=BB1_44 Depth=3
	add.s32 	%r685, %r685, 1;
	setp.eq.s32 	%p31, %r685, 2;
	@%p31 bra 	LBB1_50;
	bra.uni 	LBB1_44;
LBB1_50:                                // %"end for histogram.s1.c32"
                                        //   in Loop: Header=BB1_43 Depth=2
	add.s32 	%r86, %r86, 1;
	add.s32 	%r85, %r85, 8;
	setp.eq.s32 	%p32, %r86, %r36;
	@%p32 bra 	LBB1_51;
	bra.uni 	LBB1_43;
LBB1_51:                                // %"end for histogram.s1.x.xi.xii29"
                                        //   in Loop: Header=BB1_41 Depth=1
	add.s32 	%r682, %r682, 1;
	add.s32 	%r681, %r681, %r40;
	setp.eq.s32 	%p33, %r682, 3;
	@%p33 bra 	LBB1_63;
	bra.uni 	LBB1_41;
LBB1_29:                                // %false_bb8
	ld.param.u32 	%r208, [kernel_histogram_s1_y_y___block_id_y_param_12];
	ld.param.u32 	%r202, [kernel_histogram_s1_y_y___block_id_y_param_6];
	add.s32 	%r45, %r34, %r207;
	add.s64 	%rd7, %rd1, 16;
	add.s32 	%r536, %r204, %r32;
	add.s32 	%r537, %r536, %r33;
	shl.b32 	%r538, %r537, 3;
	add.s32 	%r539, %r538, -20;
	mad.lo.s32 	%r540, %r211, %r539, %r202;
	mad.lo.s32 	%r541, %r2, 792, %r540;
	shl.b32 	%r542, %r203, 3;
	add.s32 	%r674, %r541, %r542;
	shl.b32 	%r47, %r211, 3;
	mul.wide.s32 	%rd8, %r211, 4;
	mov.u32 	%r535, 0;
	mov.u32 	%r675, %r535;
LBB1_30:                                // %"for histogram.s1.y.yi.yii10"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB1_31 Depth 2
                                        //       Child Loop BB1_32 Depth 3
                                        //         Child Loop BB1_34 Depth 4
                                        //         Child Loop BB1_37 Depth 4
	add.s32 	%r544, %r45, %r675;
	mul.lo.s32 	%r67, %r544, %r205;
	mov.u32 	%r68, %r674;
	mov.u32 	%r69, %r535;
LBB1_31:                                // %"for histogram.s1.x.xi.xii13"
                                        //   Parent Loop BB1_30 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB1_32 Depth 3
                                        //         Child Loop BB1_34 Depth 4
                                        //         Child Loop BB1_37 Depth 4
	mul.wide.s32 	%rd187, %r68, 4;
	add.s64 	%rd14, %rd7, %rd187;
	add.s32 	%r546, %r69, %r35;
	add.s32 	%r547, %r546, %r209;
	shl.b32 	%r548, %r547, 1;
	add.s32 	%r549, %r548, %r208;
	add.s32 	%r70, %r549, %r67;
	mov.u32 	%r678, %r535;
LBB1_32:                                // %"for histogram.s1.c16"
                                        //   Parent Loop BB1_30 Depth=1
                                        //     Parent Loop BB1_31 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB1_34 Depth 4
                                        //         Child Loop BB1_37 Depth 4
	setp.eq.s32 	%p35, %r678, 0;
	add.s32 	%r74, %r70, %r678;
	@%p35 bra 	LBB1_36;
// %bb.33:                              // %"for histogram.s1.r4$y19.preheader"
                                        //   in Loop: Header=BB1_32 Depth=3
	mov.u32 	%r680, 8;
	mov.u64 	%rd256, %rd14;
LBB1_34:                                // %"for histogram.s1.r4$y19"
                                        //   Parent Loop BB1_30 Depth=1
                                        //     Parent Loop BB1_31 Depth=2
                                        //       Parent Loop BB1_32 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ld.global.nc.f32 	%f290, [%rd256+-16];
	min.ftz.f32 	%f291, %f290, 0f3F800000;
	max.ftz.f32 	%f292, %f291, 0f00000000;
	fma.rn.ftz.f32 	%f293, %f292, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r551, %f293;
	sub.s32 	%r552, %r551, %r214;
	mad.lo.s32 	%r553, %r552, %r215, %r74;
	mul.wide.s32 	%rd188, %r553, 4;
	add.s64 	%rd189, %rd2, %rd188;
	ld.global.f32 	%f294, [%rd189];
	add.ftz.f32 	%f295, %f294, 0f3F800000;
	st.global.f32 	[%rd189], %f295;
	ld.global.nc.f32 	%f296, [%rd256+-12];
	min.ftz.f32 	%f297, %f296, 0f3F800000;
	max.ftz.f32 	%f298, %f297, 0f00000000;
	fma.rn.ftz.f32 	%f299, %f298, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r554, %f299;
	sub.s32 	%r555, %r554, %r214;
	mad.lo.s32 	%r556, %r555, %r215, %r74;
	mul.wide.s32 	%rd190, %r556, 4;
	add.s64 	%rd191, %rd2, %rd190;
	ld.global.f32 	%f300, [%rd191];
	add.ftz.f32 	%f301, %f300, 0f3F800000;
	st.global.f32 	[%rd191], %f301;
	ld.global.nc.f32 	%f302, [%rd256+-8];
	min.ftz.f32 	%f303, %f302, 0f3F800000;
	max.ftz.f32 	%f304, %f303, 0f00000000;
	fma.rn.ftz.f32 	%f305, %f304, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r557, %f305;
	sub.s32 	%r558, %r557, %r214;
	mad.lo.s32 	%r559, %r558, %r215, %r74;
	mul.wide.s32 	%rd192, %r559, 4;
	add.s64 	%rd193, %rd2, %rd192;
	ld.global.f32 	%f306, [%rd193];
	add.ftz.f32 	%f307, %f306, 0f3F800000;
	st.global.f32 	[%rd193], %f307;
	ld.global.nc.f32 	%f308, [%rd256+-4];
	min.ftz.f32 	%f309, %f308, 0f3F800000;
	max.ftz.f32 	%f310, %f309, 0f00000000;
	fma.rn.ftz.f32 	%f311, %f310, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r560, %f311;
	sub.s32 	%r561, %r560, %r214;
	mad.lo.s32 	%r562, %r561, %r215, %r74;
	mul.wide.s32 	%rd194, %r562, 4;
	add.s64 	%rd195, %rd2, %rd194;
	ld.global.f32 	%f312, [%rd195];
	add.ftz.f32 	%f313, %f312, 0f3F800000;
	st.global.f32 	[%rd195], %f313;
	ld.global.nc.f32 	%f314, [%rd256];
	min.ftz.f32 	%f315, %f314, 0f3F800000;
	max.ftz.f32 	%f316, %f315, 0f00000000;
	fma.rn.ftz.f32 	%f317, %f316, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r563, %f317;
	sub.s32 	%r564, %r563, %r214;
	mad.lo.s32 	%r565, %r564, %r215, %r74;
	mul.wide.s32 	%rd196, %r565, 4;
	add.s64 	%rd197, %rd2, %rd196;
	ld.global.f32 	%f318, [%rd197];
	add.ftz.f32 	%f319, %f318, 0f3F800000;
	st.global.f32 	[%rd197], %f319;
	ld.global.nc.f32 	%f320, [%rd256+4];
	min.ftz.f32 	%f321, %f320, 0f3F800000;
	max.ftz.f32 	%f322, %f321, 0f00000000;
	fma.rn.ftz.f32 	%f323, %f322, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r566, %f323;
	sub.s32 	%r567, %r566, %r214;
	mad.lo.s32 	%r568, %r567, %r215, %r74;
	mul.wide.s32 	%rd198, %r568, 4;
	add.s64 	%rd199, %rd2, %rd198;
	ld.global.f32 	%f324, [%rd199];
	add.ftz.f32 	%f325, %f324, 0f3F800000;
	st.global.f32 	[%rd199], %f325;
	ld.global.nc.f32 	%f326, [%rd256+8];
	min.ftz.f32 	%f327, %f326, 0f3F800000;
	max.ftz.f32 	%f328, %f327, 0f00000000;
	fma.rn.ftz.f32 	%f329, %f328, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r569, %f329;
	sub.s32 	%r570, %r569, %r214;
	mad.lo.s32 	%r571, %r570, %r215, %r74;
	mul.wide.s32 	%rd200, %r571, 4;
	add.s64 	%rd201, %rd2, %rd200;
	ld.global.f32 	%f330, [%rd201];
	add.ftz.f32 	%f331, %f330, 0f3F800000;
	st.global.f32 	[%rd201], %f331;
	ld.global.nc.f32 	%f332, [%rd256+12];
	min.ftz.f32 	%f333, %f332, 0f3F800000;
	max.ftz.f32 	%f334, %f333, 0f00000000;
	fma.rn.ftz.f32 	%f335, %f334, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r572, %f335;
	sub.s32 	%r573, %r572, %r214;
	mad.lo.s32 	%r574, %r573, %r215, %r74;
	mul.wide.s32 	%rd202, %r574, 4;
	add.s64 	%rd203, %rd2, %rd202;
	ld.global.f32 	%f336, [%rd203];
	add.ftz.f32 	%f337, %f336, 0f3F800000;
	st.global.f32 	[%rd203], %f337;
	add.s32 	%r680, %r680, -1;
	add.s64 	%rd256, %rd256, %rd8;
	setp.ne.s32 	%p36, %r680, 0;
	@%p36 bra 	LBB1_34;
	bra.uni 	LBB1_35;
LBB1_36:                                // %"for histogram.s1.r4$y19.us.preheader"
                                        //   in Loop: Header=BB1_32 Depth=3
	mov.u32 	%r679, 8;
	mov.u64 	%rd255, %rd14;
LBB1_37:                                // %"for histogram.s1.r4$y19.us"
                                        //   Parent Loop BB1_30 Depth=1
                                        //     Parent Loop BB1_31 Depth=2
                                        //       Parent Loop BB1_32 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ld.global.nc.f32 	%f338, [%rd255+-16];
	min.ftz.f32 	%f339, %f338, 0f3F800000;
	max.ftz.f32 	%f340, %f339, 0f00000000;
	fma.rn.ftz.f32 	%f341, %f340, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r576, %f341;
	sub.s32 	%r577, %r576, %r214;
	mad.lo.s32 	%r578, %r577, %r215, %r74;
	mul.wide.s32 	%rd204, %r578, 4;
	add.s64 	%rd205, %rd2, %rd204;
	ld.global.f32 	%f342, [%rd205];
	add.ftz.f32 	%f343, %f342, %f340;
	st.global.f32 	[%rd205], %f343;
	ld.global.nc.f32 	%f344, [%rd255+-12];
	min.ftz.f32 	%f345, %f344, 0f3F800000;
	max.ftz.f32 	%f346, %f345, 0f00000000;
	fma.rn.ftz.f32 	%f347, %f346, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r579, %f347;
	sub.s32 	%r580, %r579, %r214;
	mad.lo.s32 	%r581, %r580, %r215, %r74;
	mul.wide.s32 	%rd206, %r581, 4;
	add.s64 	%rd207, %rd2, %rd206;
	ld.global.f32 	%f348, [%rd207];
	add.ftz.f32 	%f349, %f348, %f346;
	st.global.f32 	[%rd207], %f349;
	ld.global.nc.f32 	%f350, [%rd255+-8];
	min.ftz.f32 	%f351, %f350, 0f3F800000;
	max.ftz.f32 	%f352, %f351, 0f00000000;
	fma.rn.ftz.f32 	%f353, %f352, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r582, %f353;
	sub.s32 	%r583, %r582, %r214;
	mad.lo.s32 	%r584, %r583, %r215, %r74;
	mul.wide.s32 	%rd208, %r584, 4;
	add.s64 	%rd209, %rd2, %rd208;
	ld.global.f32 	%f354, [%rd209];
	add.ftz.f32 	%f355, %f354, %f352;
	st.global.f32 	[%rd209], %f355;
	ld.global.nc.f32 	%f356, [%rd255+-4];
	min.ftz.f32 	%f357, %f356, 0f3F800000;
	max.ftz.f32 	%f358, %f357, 0f00000000;
	fma.rn.ftz.f32 	%f359, %f358, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r585, %f359;
	sub.s32 	%r586, %r585, %r214;
	mad.lo.s32 	%r587, %r586, %r215, %r74;
	mul.wide.s32 	%rd210, %r587, 4;
	add.s64 	%rd211, %rd2, %rd210;
	ld.global.f32 	%f360, [%rd211];
	add.ftz.f32 	%f361, %f360, %f358;
	st.global.f32 	[%rd211], %f361;
	ld.global.nc.f32 	%f362, [%rd255];
	min.ftz.f32 	%f363, %f362, 0f3F800000;
	max.ftz.f32 	%f364, %f363, 0f00000000;
	fma.rn.ftz.f32 	%f365, %f364, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r588, %f365;
	sub.s32 	%r589, %r588, %r214;
	mad.lo.s32 	%r590, %r589, %r215, %r74;
	mul.wide.s32 	%rd212, %r590, 4;
	add.s64 	%rd213, %rd2, %rd212;
	ld.global.f32 	%f366, [%rd213];
	add.ftz.f32 	%f367, %f366, %f364;
	st.global.f32 	[%rd213], %f367;
	ld.global.nc.f32 	%f368, [%rd255+4];
	min.ftz.f32 	%f369, %f368, 0f3F800000;
	max.ftz.f32 	%f370, %f369, 0f00000000;
	fma.rn.ftz.f32 	%f371, %f370, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r591, %f371;
	sub.s32 	%r592, %r591, %r214;
	mad.lo.s32 	%r593, %r592, %r215, %r74;
	mul.wide.s32 	%rd214, %r593, 4;
	add.s64 	%rd215, %rd2, %rd214;
	ld.global.f32 	%f372, [%rd215];
	add.ftz.f32 	%f373, %f372, %f370;
	st.global.f32 	[%rd215], %f373;
	ld.global.nc.f32 	%f374, [%rd255+8];
	min.ftz.f32 	%f375, %f374, 0f3F800000;
	max.ftz.f32 	%f376, %f375, 0f00000000;
	fma.rn.ftz.f32 	%f377, %f376, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r594, %f377;
	sub.s32 	%r595, %r594, %r214;
	mad.lo.s32 	%r596, %r595, %r215, %r74;
	mul.wide.s32 	%rd216, %r596, 4;
	add.s64 	%rd217, %rd2, %rd216;
	ld.global.f32 	%f378, [%rd217];
	add.ftz.f32 	%f379, %f378, %f376;
	st.global.f32 	[%rd217], %f379;
	ld.global.nc.f32 	%f380, [%rd255+12];
	min.ftz.f32 	%f381, %f380, 0f3F800000;
	max.ftz.f32 	%f382, %f381, 0f00000000;
	fma.rn.ftz.f32 	%f383, %f382, %f1, 0f3F000000;
	cvt.rzi.ftz.s32.f32 	%r597, %f383;
	sub.s32 	%r598, %r597, %r214;
	mad.lo.s32 	%r599, %r598, %r215, %r74;
	mul.wide.s32 	%rd218, %r599, 4;
	add.s64 	%rd219, %rd2, %rd218;
	ld.global.f32 	%f384, [%rd219];
	add.ftz.f32 	%f385, %f384, %f382;
	st.global.f32 	[%rd219], %f385;
	add.s32 	%r679, %r679, -1;
	add.s64 	%rd255, %rd255, %rd8;
	setp.eq.s32 	%p37, %r679, 0;
	@%p37 bra 	LBB1_35;
	bra.uni 	LBB1_37;
LBB1_35:                                // %"end for histogram.s1.r4$y20"
                                        //   in Loop: Header=BB1_32 Depth=3
	add.s32 	%r678, %r678, 1;
	setp.eq.s32 	%p38, %r678, 2;
	@%p38 bra 	LBB1_38;
	bra.uni 	LBB1_32;
LBB1_38:                                // %"end for histogram.s1.c17"
                                        //   in Loop: Header=BB1_31 Depth=2
	add.s32 	%r69, %r69, 1;
	add.s32 	%r68, %r68, 8;
	setp.eq.s32 	%p39, %r69, 3;
	@%p39 bra 	LBB1_39;
	bra.uni 	LBB1_31;
LBB1_39:                                // %"end for histogram.s1.x.xi.xii14"
                                        //   in Loop: Header=BB1_30 Depth=1
	add.s32 	%r675, %r675, 1;
	add.s32 	%r674, %r674, %r47;
	setp.eq.s32 	%p40, %r675, 8;
	@%p40 bra 	LBB1_63;
	bra.uni 	LBB1_30;
LBB1_63:                                // %after_bb
	ret;
                                        // -- End function
}
	// .globl	kernel_blurz_s0_y_y___block_id_y // -- Begin function kernel_blurz_s0_y_y___block_id_y
.visible .entry kernel_blurz_s0_y_y___block_id_y(
	.param .u32 kernel_blurz_s0_y_y___block_id_y_param_0,
	.param .u32 kernel_blurz_s0_y_y___block_id_y_param_1,
	.param .u32 kernel_blurz_s0_y_y___block_id_y_param_2,
	.param .u32 kernel_blurz_s0_y_y___block_id_y_param_3,
	.param .u32 kernel_blurz_s0_y_y___block_id_y_param_4,
	.param .u32 kernel_blurz_s0_y_y___block_id_y_param_5,
	.param .u32 kernel_blurz_s0_y_y___block_id_y_param_6,
	.param .u32 kernel_blurz_s0_y_y___block_id_y_param_7,
	.param .u32 kernel_blurz_s0_y_y___block_id_y_param_8,
	.param .u32 kernel_blurz_s0_y_y___block_id_y_param_9,
	.param .u32 kernel_blurz_s0_y_y___block_id_y_param_10,
	.param .u32 kernel_blurz_s0_y_y___block_id_y_param_11,
	.param .u32 kernel_blurz_s0_y_y___block_id_y_param_12,
	.param .u32 kernel_blurz_s0_y_y___block_id_y_param_13,
	.param .u32 kernel_blurz_s0_y_y___block_id_y_param_14,
	.param .u32 kernel_blurz_s0_y_y___block_id_y_param_15,
	.param .u32 kernel_blurz_s0_y_y___block_id_y_param_16,
	.param .u64 kernel_blurz_s0_y_y___block_id_y_param_17,
	.param .u64 kernel_blurz_s0_y_y___block_id_y_param_18
)                                       // @kernel_blurz_s0_y_y___block_id_y
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<37>;
	.reg .b32 	%r<157>;
	.reg .b64 	%rd<53>;

// %bb.0:                               // %entry
	ld.param.u32 	%r59, [kernel_blurz_s0_y_y___block_id_y_param_5];
	setp.lt.s32 	%p1, %r59, 1;
	@%p1 bra 	LBB2_8;
// %bb.1:                               // %"for blurz.s0.z.z.z_serial_outer.preheader"
	ld.param.u32 	%r67, [kernel_blurz_s0_y_y___block_id_y_param_16];
	ld.param.u32 	%r66, [kernel_blurz_s0_y_y___block_id_y_param_15];
	ld.param.u32 	%r65, [kernel_blurz_s0_y_y___block_id_y_param_14];
	ld.param.u32 	%r64, [kernel_blurz_s0_y_y___block_id_y_param_13];
	ld.param.u32 	%r63, [kernel_blurz_s0_y_y___block_id_y_param_12];
	ld.param.u32 	%r62, [kernel_blurz_s0_y_y___block_id_y_param_11];
	ld.param.u32 	%r61, [kernel_blurz_s0_y_y___block_id_y_param_8];
	ld.param.u32 	%r60, [kernel_blurz_s0_y_y___block_id_y_param_7];
	ld.param.u32 	%r58, [kernel_blurz_s0_y_y___block_id_y_param_4];
	ld.param.u32 	%r57, [kernel_blurz_s0_y_y___block_id_y_param_3];
	ld.param.u32 	%r56, [kernel_blurz_s0_y_y___block_id_y_param_2];
	ld.param.u32 	%r55, [kernel_blurz_s0_y_y___block_id_y_param_1];
	ld.param.u32 	%r54, [kernel_blurz_s0_y_y___block_id_y_param_0];
	ld.param.u64 	%rd3, [kernel_blurz_s0_y_y___block_id_y_param_18];
	cvta.to.global.u64 	%rd1, %rd3;
	ld.param.u64 	%rd4, [kernel_blurz_s0_y_y___block_id_y_param_17];
	cvta.to.global.u64 	%rd2, %rd4;
	mov.u32 	%r68, %ctaid.y;
	mov.u32 	%r69, %ctaid.x;
	mov.u32 	%r1, %tid.z;
	ld.param.u32 	%r70, [kernel_blurz_s0_y_y___block_id_y_param_6];
	mov.u32 	%r71, %tid.y;
	mov.u32 	%r72, %tid.x;
	mul.lo.s32 	%r2, %r68, 30;
	ld.param.u32 	%r73, [kernel_blurz_s0_y_y___block_id_y_param_9];
	mad.lo.s32 	%r74, %r69, 99, %r73;
	ld.param.u32 	%r75, [kernel_blurz_s0_y_y___block_id_y_param_10];
	min.s32 	%r76, %r74, %r75;
	shl.b32 	%r3, %r71, 2;
	shl.b32 	%r77, %r72, 1;
	min.u32 	%r78, %r77, 97;
	sub.s32 	%r79, %r76, %r70;
	add.s32 	%r4, %r79, %r78;
	shl.b32 	%r81, %r4, 1;
	or.b32  	%r82, %r81, 1;
	add.s32 	%r5, %r82, 3;
	mov.u32 	%r83, -2;
	sub.s32 	%r84, %r83, %r61;
	not.b32 	%r85, %r62;
	sub.s32 	%r86, %r85, %r2;
	not.b32 	%r87, %r63;
	max.s32 	%r88, %r86, %r87;
	sub.s32 	%r89, %r84, %r88;
	not.b32 	%r90, %r3;
	max.u32 	%r91, %r90, -27;
	sub.s32 	%r92, %r89, %r91;
	mul.lo.s32 	%r6, %r55, %r92;
	not.b32 	%r7, %r66;
	not.b32 	%r93, %r67;
	mul.lo.s32 	%r94, %r1, 6;
	sub.s32 	%r16, %r93, %r94;
	not.b32 	%r9, %r57;
	sub.s32 	%r95, %r83, %r60;
	sub.s32 	%r96, %r95, %r88;
	sub.s32 	%r97, %r96, %r91;
	mul.lo.s32 	%r10, %r56, %r97;
	sub.s32 	%r11, %r83, %r64;
	mov.u32 	%r98, -3;
	sub.s32 	%r12, %r98, %r64;
	not.b32 	%r13, %r64;
	neg.s32 	%r14, %r64;
	mov.u32 	%r99, 1;
	sub.s32 	%r15, %r99, %r64;
	mov.u32 	%r17, 0;
LBB2_2:                                 // %"for blurz.s0.z.z.z_serial_outer"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB2_4 Depth 2
                                        //       Child Loop BB2_5 Depth 3
	shl.b32 	%r107, %r17, 1;
	add.s32 	%r108, %r107, %r1;
	setp.lt.s32 	%p2, %r108, %r58;
	@%p2 bra 	LBB2_3;
	bra.uni 	LBB2_7;
LBB2_3:                                 // %true_bb
                                        //   in Loop: Header=BB2_2 Depth=1
	max.s32 	%r100, %r16, %r9;
	sub.s32 	%r101, %r7, %r100;
	mad.lo.s32 	%r148, %r54, %r101, %r6;
	sub.s32 	%r102, %r11, %r100;
	mad.lo.s32 	%r147, %r65, %r102, %r10;
	sub.s32 	%r103, %r12, %r100;
	mad.lo.s32 	%r146, %r65, %r103, %r10;
	sub.s32 	%r104, %r13, %r100;
	mad.lo.s32 	%r145, %r65, %r104, %r10;
	sub.s32 	%r105, %r14, %r100;
	mad.lo.s32 	%r144, %r65, %r105, %r10;
	sub.s32 	%r106, %r15, %r100;
	mad.lo.s32 	%r143, %r65, %r106, %r10;
	mov.u32 	%r149, 0;
LBB2_4:                                 // %"for blurz.s0.z.zi"
                                        //   Parent Loop BB2_2 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB2_5 Depth 3
	mov.u32 	%r150, 4;
	mov.u32 	%r151, %r143;
	mov.u32 	%r152, %r144;
	mov.u32 	%r153, %r145;
	mov.u32 	%r154, %r146;
	mov.u32 	%r155, %r147;
	mov.u32 	%r156, %r148;
LBB2_5:                                 // %"for blurz.s0.y.yi.yii"
                                        //   Parent Loop BB2_2 Depth=1
                                        //     Parent Loop BB2_4 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	add.s32 	%r111, %r5, %r151;
	add.s32 	%r112, %r111, -4;
	mul.wide.s32 	%rd5, %r112, 4;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	add.s32 	%r113, %r5, %r152;
	add.s32 	%r114, %r113, -4;
	mul.wide.s32 	%rd7, %r114, 4;
	add.s64 	%rd8, %rd1, %rd7;
	ld.global.nc.f32 	%f2, [%rd8];
	add.s32 	%r115, %r5, %r153;
	add.s32 	%r116, %r115, -4;
	mul.wide.s32 	%rd9, %r116, 4;
	add.s64 	%rd10, %rd1, %rd9;
	ld.global.nc.f32 	%f3, [%rd10];
	add.s32 	%r117, %r5, %r154;
	add.s32 	%r118, %r117, -4;
	mul.wide.s32 	%rd11, %r118, 4;
	add.s64 	%rd12, %rd1, %rd11;
	ld.global.nc.f32 	%f4, [%rd12];
	add.s32 	%r119, %r5, %r155;
	add.s32 	%r120, %r119, -4;
	mul.wide.s32 	%rd13, %r120, 4;
	add.s64 	%rd14, %rd1, %rd13;
	ld.global.nc.f32 	%f5, [%rd14];
	fma.rn.ftz.f32 	%f6, %f5, 0f40800000, %f4;
	fma.rn.ftz.f32 	%f7, %f3, 0f40C00000, %f6;
	fma.rn.ftz.f32 	%f8, %f2, 0f40800000, %f7;
	add.ftz.f32 	%f9, %f1, %f8;
	add.s32 	%r121, %r5, %r156;
	add.s32 	%r122, %r121, -4;
	mul.wide.s32 	%rd15, %r122, 4;
	add.s64 	%rd16, %rd2, %rd15;
	st.global.f32 	[%rd16], %f9;
	add.s32 	%r123, %r111, -3;
	mul.wide.s32 	%rd17, %r123, 4;
	add.s64 	%rd18, %rd1, %rd17;
	ld.global.nc.f32 	%f10, [%rd18];
	add.s32 	%r124, %r113, -3;
	mul.wide.s32 	%rd19, %r124, 4;
	add.s64 	%rd20, %rd1, %rd19;
	ld.global.nc.f32 	%f11, [%rd20];
	add.s32 	%r125, %r115, -3;
	mul.wide.s32 	%rd21, %r125, 4;
	add.s64 	%rd22, %rd1, %rd21;
	ld.global.nc.f32 	%f12, [%rd22];
	add.s32 	%r126, %r117, -3;
	mul.wide.s32 	%rd23, %r126, 4;
	add.s64 	%rd24, %rd1, %rd23;
	ld.global.nc.f32 	%f13, [%rd24];
	add.s32 	%r127, %r119, -3;
	mul.wide.s32 	%rd25, %r127, 4;
	add.s64 	%rd26, %rd1, %rd25;
	ld.global.nc.f32 	%f14, [%rd26];
	fma.rn.ftz.f32 	%f15, %f14, 0f40800000, %f13;
	fma.rn.ftz.f32 	%f16, %f12, 0f40C00000, %f15;
	fma.rn.ftz.f32 	%f17, %f11, 0f40800000, %f16;
	add.ftz.f32 	%f18, %f10, %f17;
	add.s32 	%r128, %r121, -3;
	mul.wide.s32 	%rd27, %r128, 4;
	add.s64 	%rd28, %rd2, %rd27;
	st.global.f32 	[%rd28], %f18;
	add.s32 	%r129, %r111, -2;
	mul.wide.s32 	%rd29, %r129, 4;
	add.s64 	%rd30, %rd1, %rd29;
	ld.global.nc.f32 	%f19, [%rd30];
	add.s32 	%r130, %r113, -2;
	mul.wide.s32 	%rd31, %r130, 4;
	add.s64 	%rd32, %rd1, %rd31;
	ld.global.nc.f32 	%f20, [%rd32];
	add.s32 	%r131, %r115, -2;
	mul.wide.s32 	%rd33, %r131, 4;
	add.s64 	%rd34, %rd1, %rd33;
	ld.global.nc.f32 	%f21, [%rd34];
	add.s32 	%r132, %r117, -2;
	mul.wide.s32 	%rd35, %r132, 4;
	add.s64 	%rd36, %rd1, %rd35;
	ld.global.nc.f32 	%f22, [%rd36];
	add.s32 	%r133, %r119, -2;
	mul.wide.s32 	%rd37, %r133, 4;
	add.s64 	%rd38, %rd1, %rd37;
	ld.global.nc.f32 	%f23, [%rd38];
	fma.rn.ftz.f32 	%f24, %f23, 0f40800000, %f22;
	fma.rn.ftz.f32 	%f25, %f21, 0f40C00000, %f24;
	fma.rn.ftz.f32 	%f26, %f20, 0f40800000, %f25;
	add.ftz.f32 	%f27, %f19, %f26;
	add.s32 	%r134, %r121, -2;
	mul.wide.s32 	%rd39, %r134, 4;
	add.s64 	%rd40, %rd2, %rd39;
	st.global.f32 	[%rd40], %f27;
	add.s32 	%r135, %r111, -1;
	mul.wide.s32 	%rd41, %r135, 4;
	add.s64 	%rd42, %rd1, %rd41;
	ld.global.nc.f32 	%f28, [%rd42];
	add.s32 	%r136, %r113, -1;
	mul.wide.s32 	%rd43, %r136, 4;
	add.s64 	%rd44, %rd1, %rd43;
	ld.global.nc.f32 	%f29, [%rd44];
	add.s32 	%r137, %r115, -1;
	mul.wide.s32 	%rd45, %r137, 4;
	add.s64 	%rd46, %rd1, %rd45;
	ld.global.nc.f32 	%f30, [%rd46];
	add.s32 	%r138, %r117, -1;
	mul.wide.s32 	%rd47, %r138, 4;
	add.s64 	%rd48, %rd1, %rd47;
	ld.global.nc.f32 	%f31, [%rd48];
	add.s32 	%r139, %r119, -1;
	mul.wide.s32 	%rd49, %r139, 4;
	add.s64 	%rd50, %rd1, %rd49;
	ld.global.nc.f32 	%f32, [%rd50];
	fma.rn.ftz.f32 	%f33, %f32, 0f40800000, %f31;
	fma.rn.ftz.f32 	%f34, %f30, 0f40C00000, %f33;
	fma.rn.ftz.f32 	%f35, %f29, 0f40800000, %f34;
	add.ftz.f32 	%f36, %f28, %f35;
	add.s32 	%r140, %r121, -1;
	mul.wide.s32 	%rd51, %r140, 4;
	add.s64 	%rd52, %rd2, %rd51;
	st.global.f32 	[%rd52], %f36;
	add.s32 	%r156, %r156, %r55;
	add.s32 	%r155, %r155, %r56;
	add.s32 	%r154, %r154, %r56;
	add.s32 	%r153, %r153, %r56;
	add.s32 	%r152, %r152, %r56;
	add.s32 	%r151, %r151, %r56;
	add.s32 	%r150, %r150, -1;
	setp.ne.s32 	%p3, %r150, 0;
	@%p3 bra 	LBB2_5;
// %bb.6:                               // %"end for blurz.s0.y.yi.yii"
                                        //   in Loop: Header=BB2_4 Depth=2
	add.s32 	%r149, %r149, 1;
	add.s32 	%r148, %r148, %r54;
	add.s32 	%r147, %r147, %r65;
	add.s32 	%r146, %r146, %r65;
	add.s32 	%r145, %r145, %r65;
	add.s32 	%r144, %r144, %r65;
	add.s32 	%r143, %r143, %r65;
	setp.eq.s32 	%p4, %r149, 6;
	@%p4 bra 	LBB2_7;
	bra.uni 	LBB2_4;
LBB2_7:                                 // %after_bb
                                        //   in Loop: Header=BB2_2 Depth=1
	bar.sync 	0;
	add.s32 	%r17, %r17, 1;
	add.s32 	%r16, %r16, -12;
	setp.eq.s32 	%p5, %r17, %r59;
	@%p5 bra 	LBB2_8;
	bra.uni 	LBB2_2;
LBB2_8:                                 // %"end for blurz.s0.z.z.z_serial_outer"
	ret;
                                        // -- End function
}
	// .globl	kernel_blurx_s0_z___block_id_z // -- Begin function kernel_blurx_s0_z___block_id_z
.visible .entry kernel_blurx_s0_z___block_id_z(
	.param .u32 kernel_blurx_s0_z___block_id_z_param_0,
	.param .u32 kernel_blurx_s0_z___block_id_z_param_1,
	.param .u32 kernel_blurx_s0_z___block_id_z_param_2,
	.param .u32 kernel_blurx_s0_z___block_id_z_param_3,
	.param .u32 kernel_blurx_s0_z___block_id_z_param_4,
	.param .u32 kernel_blurx_s0_z___block_id_z_param_5,
	.param .u32 kernel_blurx_s0_z___block_id_z_param_6,
	.param .u32 kernel_blurx_s0_z___block_id_z_param_7,
	.param .u32 kernel_blurx_s0_z___block_id_z_param_8,
	.param .u32 kernel_blurx_s0_z___block_id_z_param_9,
	.param .u32 kernel_blurx_s0_z___block_id_z_param_10,
	.param .u32 kernel_blurx_s0_z___block_id_z_param_11,
	.param .u32 kernel_blurx_s0_z___block_id_z_param_12,
	.param .u32 kernel_blurx_s0_z___block_id_z_param_13,
	.param .u64 kernel_blurx_s0_z___block_id_z_param_14,
	.param .u64 kernel_blurx_s0_z___block_id_z_param_15
)                                       // @kernel_blurx_s0_z___block_id_z
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<36>;
	.reg .b32 	%r<60>;
	.reg .b64 	%rd<13>;

// %bb.0:                               // %entry
	ld.param.u32 	%r10, [kernel_blurx_s0_z___block_id_z_param_12];
	ld.param.u32 	%r9, [kernel_blurx_s0_z___block_id_z_param_10];
	ld.param.u32 	%r12, [kernel_blurx_s0_z___block_id_z_param_0];
	ld.param.u64 	%rd3, [kernel_blurx_s0_z___block_id_z_param_15];
	cvta.to.global.u64 	%rd1, %rd3;
	ld.param.u32 	%r13, [kernel_blurx_s0_z___block_id_z_param_1];
	ld.param.u64 	%rd4, [kernel_blurx_s0_z___block_id_z_param_14];
	cvta.to.global.u64 	%rd2, %rd4;
	ld.param.u32 	%r14, [kernel_blurx_s0_z___block_id_z_param_2];
	mov.u32 	%r15, %ctaid.z;
	ld.param.u32 	%r16, [kernel_blurx_s0_z___block_id_z_param_3];
	ld.param.u32 	%r17, [kernel_blurx_s0_z___block_id_z_param_4];
	mov.u32 	%r18, %ctaid.y;
	mov.u32 	%r19, %ctaid.x;
	ld.param.u32 	%r20, [kernel_blurx_s0_z___block_id_z_param_5];
	ld.param.u32 	%r21, [kernel_blurx_s0_z___block_id_z_param_6];
	mov.u32 	%r22, %tid.x;
	shl.b32 	%r23, %r18, 4;
	ld.param.u32 	%r24, [kernel_blurx_s0_z___block_id_z_param_7];
	shl.b32 	%r25, %r22, 3;
	ld.param.u32 	%r26, [kernel_blurx_s0_z___block_id_z_param_8];
	add.s32 	%r27, %r25, -1;
	ld.param.u32 	%r28, [kernel_blurx_s0_z___block_id_z_param_9];
	sub.s32 	%r29, %r27, %r26;
	not.b32 	%r30, %r16;
	ld.param.u32 	%r31, [kernel_blurx_s0_z___block_id_z_param_11];
	sub.s32 	%r32, %r30, %r23;
	not.b32 	%r33, %r14;
	ld.param.u32 	%r34, [kernel_blurx_s0_z___block_id_z_param_13];
	max.s32 	%r35, %r32, %r33;
	sub.s32 	%r36, %r29, %r35;
	add.s32 	%r37, %r15, %r31;
	mul.lo.s32 	%r38, %r12, %r37;
	mad.lo.s32 	%r39, %r10, %r36, %r38;
	add.s32 	%r40, %r39, 128;
	not.b32 	%r41, %r20;
	shl.b32 	%r42, %r19, 1;
	sub.s32 	%r43, %r41, %r42;
	not.b32 	%r44, %r17;
	max.s32 	%r45, %r43, %r44;
	add.s32 	%r46, %r21, %r45;
	shl.b32 	%r47, %r46, 1;
	sub.s32 	%r59, %r40, %r47;
	sub.s32 	%r48, %r27, %r28;
	sub.s32 	%r49, %r48, %r35;
	add.s32 	%r50, %r15, %r34;
	mul.lo.s32 	%r51, %r13, %r50;
	mad.lo.s32 	%r52, %r9, %r49, %r51;
	add.s32 	%r53, %r24, %r45;
	shl.b32 	%r54, %r53, 1;
	sub.s32 	%r58, %r52, %r54;
	mov.u32 	%r57, 8;
LBB3_1:                                 // %"for blurx.s0.y.yi.yii"
                                        // =>This Inner Loop Header: Depth=1
	add.s32 	%r55, %r58, -2;
	add.s32 	%r56, %r59, -2;
	mul.wide.s32 	%rd5, %r55, 4;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.nc.f32 	%f1, [%rd6+16];
	ld.global.nc.f32 	%f2, [%rd6+8];
	ld.global.nc.f32 	%f3, [%rd6];
	ld.global.nc.f32 	%f4, [%rd6+-16];
	ld.global.nc.f32 	%f5, [%rd6+-8];
	fma.rn.ftz.f32 	%f6, %f5, 0f40800000, %f4;
	fma.rn.ftz.f32 	%f7, %f3, 0f40C00000, %f6;
	fma.rn.ftz.f32 	%f8, %f2, 0f40800000, %f7;
	add.ftz.f32 	%f9, %f1, %f8;
	mul.wide.s32 	%rd7, %r56, 4;
	add.s64 	%rd8, %rd2, %rd7;
	st.global.f32 	[%rd8], %f9;
	ld.global.nc.f32 	%f10, [%rd6+20];
	ld.global.nc.f32 	%f11, [%rd6+12];
	ld.global.nc.f32 	%f12, [%rd6+4];
	ld.global.nc.f32 	%f13, [%rd6+-12];
	ld.global.nc.f32 	%f14, [%rd6+-4];
	fma.rn.ftz.f32 	%f15, %f14, 0f40800000, %f13;
	fma.rn.ftz.f32 	%f16, %f12, 0f40C00000, %f15;
	fma.rn.ftz.f32 	%f17, %f11, 0f40800000, %f16;
	add.ftz.f32 	%f18, %f10, %f17;
	st.global.f32 	[%rd8+4], %f18;
	mul.wide.s32 	%rd9, %r58, 4;
	add.s64 	%rd10, %rd1, %rd9;
	ld.global.nc.f32 	%f19, [%rd10+16];
	ld.global.nc.f32 	%f20, [%rd10+8];
	ld.global.nc.f32 	%f21, [%rd10];
	ld.global.nc.f32 	%f22, [%rd10+-16];
	fma.rn.ftz.f32 	%f23, %f3, 0f40800000, %f22;
	fma.rn.ftz.f32 	%f24, %f21, 0f40C00000, %f23;
	fma.rn.ftz.f32 	%f25, %f20, 0f40800000, %f24;
	add.ftz.f32 	%f26, %f19, %f25;
	mul.wide.s32 	%rd11, %r59, 4;
	add.s64 	%rd12, %rd2, %rd11;
	st.global.f32 	[%rd12], %f26;
	ld.global.nc.f32 	%f27, [%rd10+20];
	ld.global.nc.f32 	%f28, [%rd10+12];
	ld.global.nc.f32 	%f29, [%rd10+4];
	ld.global.nc.f32 	%f30, [%rd10+-12];
	ld.global.nc.f32 	%f31, [%rd10+-4];
	fma.rn.ftz.f32 	%f32, %f31, 0f40800000, %f30;
	fma.rn.ftz.f32 	%f33, %f29, 0f40C00000, %f32;
	fma.rn.ftz.f32 	%f34, %f28, 0f40800000, %f33;
	add.ftz.f32 	%f35, %f27, %f34;
	st.global.f32 	[%rd12+4], %f35;
	add.s32 	%r59, %r59, %r10;
	add.s32 	%r58, %r58, %r9;
	add.s32 	%r57, %r57, -1;
	setp.ne.s32 	%p1, %r57, 0;
	@%p1 bra 	LBB3_1;
// %bb.2:                               // %"end for blurx.s0.y.yi.yii"
	ret;
                                        // -- End function
}
	// .globl	kernel_interpolated_s0_y_y___block_id_y // -- Begin function kernel_interpolated_s0_y_y___block_id_y
.visible .entry kernel_interpolated_s0_y_y___block_id_y(
	.param .u32 kernel_interpolated_s0_y_y___block_id_y_param_0,
	.param .u32 kernel_interpolated_s0_y_y___block_id_y_param_1,
	.param .u32 kernel_interpolated_s0_y_y___block_id_y_param_2,
	.param .u32 kernel_interpolated_s0_y_y___block_id_y_param_3,
	.param .u32 kernel_interpolated_s0_y_y___block_id_y_param_4,
	.param .u32 kernel_interpolated_s0_y_y___block_id_y_param_5,
	.param .u32 kernel_interpolated_s0_y_y___block_id_y_param_6,
	.param .u32 kernel_interpolated_s0_y_y___block_id_y_param_7,
	.param .u32 kernel_interpolated_s0_y_y___block_id_y_param_8,
	.param .u32 kernel_interpolated_s0_y_y___block_id_y_param_9,
	.param .u32 kernel_interpolated_s0_y_y___block_id_y_param_10,
	.param .u32 kernel_interpolated_s0_y_y___block_id_y_param_11,
	.param .u32 kernel_interpolated_s0_y_y___block_id_y_param_12,
	.param .u32 kernel_interpolated_s0_y_y___block_id_y_param_13,
	.param .f32 kernel_interpolated_s0_y_y___block_id_y_param_14,
	.param .u32 kernel_interpolated_s0_y_y___block_id_y_param_15,
	.param .u32 kernel_interpolated_s0_y_y___block_id_y_param_16,
	.param .u32 kernel_interpolated_s0_y_y___block_id_y_param_17,
	.param .u32 kernel_interpolated_s0_y_y___block_id_y_param_18,
	.param .u64 kernel_interpolated_s0_y_y___block_id_y_param_19,
	.param .u64 kernel_interpolated_s0_y_y___block_id_y_param_20,
	.param .u64 kernel_interpolated_s0_y_y___block_id_y_param_21
)                                       // @kernel_interpolated_s0_y_y___block_id_y
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<88>;
	.reg .b32 	%r<131>;
	.reg .b64 	%rd<41>;

// %bb.0:                               // %entry
	ld.param.u32 	%r54, [kernel_interpolated_s0_y_y___block_id_y_param_18];
	ld.param.u32 	%r53, [kernel_interpolated_s0_y_y___block_id_y_param_17];
	ld.param.u32 	%r52, [kernel_interpolated_s0_y_y___block_id_y_param_15];
	ld.param.f32 	%f7, [kernel_interpolated_s0_y_y___block_id_y_param_14];
	ld.param.u32 	%r51, [kernel_interpolated_s0_y_y___block_id_y_param_13];
	ld.param.u32 	%r50, [kernel_interpolated_s0_y_y___block_id_y_param_12];
	ld.param.u32 	%r49, [kernel_interpolated_s0_y_y___block_id_y_param_11];
	ld.param.u32 	%r48, [kernel_interpolated_s0_y_y___block_id_y_param_6];
	ld.param.u32 	%r47, [kernel_interpolated_s0_y_y___block_id_y_param_3];
	ld.param.u32 	%r46, [kernel_interpolated_s0_y_y___block_id_y_param_2];
	ld.param.u32 	%r45, [kernel_interpolated_s0_y_y___block_id_y_param_1];
	ld.param.u32 	%r44, [kernel_interpolated_s0_y_y___block_id_y_param_0];
	ld.param.u64 	%rd7, [kernel_interpolated_s0_y_y___block_id_y_param_21];
	cvta.to.global.u64 	%rd8, %rd7;
	ld.param.u64 	%rd9, [kernel_interpolated_s0_y_y___block_id_y_param_20];
	cvta.to.global.u64 	%rd1, %rd9;
	ld.param.u64 	%rd10, [kernel_interpolated_s0_y_y___block_id_y_param_19];
	cvta.to.global.u64 	%rd2, %rd10;
	ld.param.u32 	%r56, [kernel_interpolated_s0_y_y___block_id_y_param_4];
	mov.u32 	%r57, %ctaid.y;
	ld.param.u32 	%r58, [kernel_interpolated_s0_y_y___block_id_y_param_5];
	mov.u32 	%r59, %ctaid.x;
	mov.u32 	%r60, %tid.y;
	ld.param.u32 	%r61, [kernel_interpolated_s0_y_y___block_id_y_param_7];
	mov.u32 	%r62, %tid.x;
	shl.b32 	%r63, %r57, 4;
	ld.param.u32 	%r64, [kernel_interpolated_s0_y_y___block_id_y_param_8];
	ld.param.u32 	%r65, [kernel_interpolated_s0_y_y___block_id_y_param_9];
	min.s32 	%r66, %r63, %r65;
	ld.param.u32 	%r67, [kernel_interpolated_s0_y_y___block_id_y_param_10];
	shl.b32 	%r68, %r59, 9;
	min.s32 	%r1, %r68, %r64;
	shl.b32 	%r69, %r60, 1;
	shl.b32 	%r2, %r62, 3;
	add.s32 	%r3, %r69, %r66;
	ld.param.u32 	%r70, [kernel_interpolated_s0_y_y___block_id_y_param_16];
	add.s64 	%rd3, %rd8, 4096;
	mad.lo.s32 	%r71, %r58, %r3, %r67;
	add.s32 	%r72, %r71, %r2;
	add.s32 	%r73, %r72, -1;
	not.b32 	%r74, %r64;
	not.b32 	%r75, %r68;
	max.s32 	%r76, %r74, %r75;
	sub.s32 	%r77, %r73, %r76;
	shl.b32 	%r12, %r77, 1;
	shl.b32 	%r5, %r58, 1;
	neg.s32 	%r6, %r47;
	add.s32 	%r7, %r47, 130;
	neg.s32 	%r8, %r56;
	mov.u32 	%r78, 1;
	sub.s32 	%r9, %r78, %r70;
	sub.s32 	%r10, %r62, %r61;
	neg.s32 	%r11, %r70;
	mov.u32 	%r55, 0;
	mov.u32 	%r13, %r55;
LBB4_1:                                 // %"for interpolated.s0.y.yi.yii"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB4_2 Depth 2
                                        //       Child Loop BB4_3 Depth 3
	add.s32 	%r80, %r3, %r13;
	add.s32 	%r81, %r80, %r44;
	shr.s32 	%r82, %r81, 3;
	mul.lo.s32 	%r14, %r81, %r52;
	and.b32  	%r83, %r81, 7;
	cvt.rn.f32.s32 	%f8, %r83;
	mul.ftz.f32 	%f1, %f8, 0f3E000000;
	fma.rn.ftz.f32 	%f2, %f8, 0fBE000000, 0f3F800000;
	add.s32 	%r84, %r8, %r82;
	mul.lo.s32 	%r15, %r7, %r84;
	add.s32 	%r16, %r6, %r15;
	add.s32 	%r17, %r45, %r15;
	add.s32 	%r18, %r51, %r15;
	add.s32 	%r19, %r49, %r15;
	add.s32 	%r20, %r50, %r15;
	add.s32 	%r21, %r46, %r15;
	add.s32 	%r22, %r47, %r15;
	mov.u32 	%r128, %r12;
	mov.u32 	%r129, %r55;
LBB4_2:                                 // %"for interpolated.s0.x.xi.xii"
                                        //   Parent Loop BB4_1 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB4_3 Depth 3
	mul.wide.s32 	%rd11, %r128, 4;
	add.s64 	%rd40, %rd3, %rd11;
	add.s32 	%r86, %r129, %r1;
	add.s32 	%r87, %r86, %r54;
	and.b32  	%r88, %r87, 7;
	cvt.rn.f32.s32 	%f9, %r88;
	mul.ftz.f32 	%f3, %f9, 0f3E000000;
	shr.s32 	%r89, %r87, 3;
	add.s32 	%r90, %r86, %r48;
	add.s32 	%r91, %r90, %r2;
	add.s32 	%r92, %r91, %r14;
	mul.wide.s32 	%rd12, %r92, 4;
	add.s64 	%rd13, %rd1, %rd12;
	ld.global.nc.f32 	%f10, [%rd13];
	min.ftz.f32 	%f11, %f10, 0f3F800000;
	max.ftz.f32 	%f12, %f11, 0f00000000;
	mul.ftz.f32 	%f13, %f12, %f7;
	cvt.rzi.ftz.s32.f32 	%r93, %f13;
	fma.rn.ftz.f32 	%f4, %f9, 0fBE000000, 0f3F800000;
	cvt.rn.f32.s32 	%f14, %r93;
	neg.ftz.f32 	%f15, %f12;
	fma.rn.ftz.f32 	%f16, %f15, %f7, %f14;
	add.ftz.f32 	%f5, %f16, 0f3F800000;
	neg.ftz.f32 	%f17, %f14;
	fma.rn.ftz.f32 	%f6, %f12, %f7, %f17;
	add.s32 	%r94, %r9, %r93;
	mul.lo.s32 	%r95, %r53, %r94;
	add.s32 	%r96, %r16, %r95;
	add.s32 	%r97, %r10, %r89;
	shl.b32 	%r98, %r97, 1;
	add.s32 	%r25, %r96, %r98;
	add.s32 	%r99, %r11, %r93;
	mul.lo.s32 	%r100, %r53, %r99;
	add.s32 	%r101, %r16, %r100;
	add.s32 	%r26, %r101, %r98;
	add.s32 	%r102, %r17, %r100;
	add.s32 	%r27, %r102, %r98;
	add.s32 	%r103, %r17, %r95;
	add.s32 	%r28, %r103, %r98;
	add.s32 	%r104, %r18, %r100;
	add.s32 	%r29, %r104, %r98;
	add.s32 	%r105, %r19, %r100;
	add.s32 	%r30, %r105, %r98;
	add.s32 	%r106, %r20, %r100;
	add.s32 	%r31, %r106, %r98;
	add.s32 	%r107, %r15, %r95;
	add.s32 	%r32, %r107, %r98;
	add.s32 	%r108, %r15, %r100;
	add.s32 	%r33, %r108, %r98;
	add.s32 	%r109, %r21, %r95;
	add.s32 	%r34, %r109, %r98;
	add.s32 	%r110, %r21, %r100;
	add.s32 	%r35, %r110, %r98;
	add.s32 	%r111, %r22, %r95;
	add.s32 	%r36, %r111, %r98;
	add.s32 	%r112, %r22, %r100;
	add.s32 	%r37, %r112, %r98;
	mov.u32 	%r130, %r55;
LBB4_3:                                 // %"for interpolated.s0.c"
                                        //   Parent Loop BB4_1 Depth=1
                                        //     Parent Loop BB4_2 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	add.s32 	%r113, %r37, %r130;
	mul.wide.s32 	%rd14, %r113, 4;
	add.s64 	%rd15, %rd2, %rd14;
	ld.global.nc.f32 	%f18, [%rd15+1032];
	ld.global.nc.f32 	%f19, [%rd15+1040];
	add.s32 	%r114, %r36, %r130;
	mul.wide.s32 	%rd16, %r114, 4;
	add.s64 	%rd17, %rd2, %rd16;
	ld.global.nc.f32 	%f20, [%rd17+1032];
	ld.global.nc.f32 	%f21, [%rd17+1040];
	add.s32 	%r115, %r35, %r130;
	mul.wide.s32 	%rd18, %r115, 4;
	add.s64 	%rd19, %rd2, %rd18;
	ld.global.nc.f32 	%f22, [%rd19+1552];
	add.s32 	%r116, %r33, %r130;
	mul.wide.s32 	%rd20, %r116, 4;
	add.s64 	%rd21, %rd2, %rd20;
	ld.global.nc.f32 	%f23, [%rd21+512];
	add.s32 	%r117, %r26, %r130;
	mul.wide.s32 	%rd22, %r117, 4;
	add.s64 	%rd23, %rd2, %rd22;
	ld.global.nc.f32 	%f24, [%rd23+-8];
	ld.global.nc.f32 	%f25, [%rd19+1560];
	ld.global.nc.f32 	%f26, [%rd21+520];
	ld.global.nc.f32 	%f27, [%rd23];
	add.s32 	%r118, %r34, %r130;
	mul.wide.s32 	%rd24, %r118, 4;
	add.s64 	%rd25, %rd2, %rd24;
	ld.global.nc.f32 	%f28, [%rd25+1552];
	add.s32 	%r119, %r32, %r130;
	mul.wide.s32 	%rd26, %r119, 4;
	add.s64 	%rd27, %rd2, %rd26;
	ld.global.nc.f32 	%f29, [%rd27+512];
	add.s32 	%r120, %r25, %r130;
	mul.wide.s32 	%rd28, %r120, 4;
	add.s64 	%rd29, %rd2, %rd28;
	ld.global.nc.f32 	%f30, [%rd29+-8];
	ld.global.nc.f32 	%f31, [%rd25+1560];
	ld.global.nc.f32 	%f32, [%rd27+520];
	ld.global.nc.f32 	%f33, [%rd29];
	add.s32 	%r121, %r31, %r130;
	mul.wide.s32 	%rd30, %r121, 4;
	add.s64 	%rd31, %rd2, %rd30;
	ld.global.nc.f32 	%f34, [%rd31];
	fma.rn.ftz.f32 	%f35, %f24, 0f40800000, %f34;
	fma.rn.ftz.f32 	%f36, %f23, 0f40C00000, %f35;
	fma.rn.ftz.f32 	%f37, %f18, 0f40800000, %f36;
	add.ftz.f32 	%f38, %f22, %f37;
	add.s32 	%r122, %r30, %r130;
	mul.wide.s32 	%rd32, %r122, 4;
	add.s64 	%rd33, %rd2, %rd32;
	ld.global.nc.f32 	%f39, [%rd33];
	fma.rn.ftz.f32 	%f40, %f27, 0f40800000, %f39;
	fma.rn.ftz.f32 	%f41, %f26, 0f40C00000, %f40;
	fma.rn.ftz.f32 	%f42, %f19, 0f40800000, %f41;
	add.ftz.f32 	%f43, %f25, %f42;
	mul.ftz.f32 	%f44, %f3, %f43;
	fma.rn.ftz.f32 	%f45, %f4, %f38, %f44;
	mul.ftz.f32 	%f46, %f2, %f45;
	add.s32 	%r123, %r27, %r130;
	mul.wide.s32 	%rd34, %r123, 4;
	add.s64 	%rd35, %rd2, %rd34;
	ld.global.nc.f32 	%f47, [%rd35+2072];
	fma.rn.ftz.f32 	%f48, %f23, 0f40800000, %f24;
	fma.rn.ftz.f32 	%f49, %f18, 0f40C00000, %f48;
	fma.rn.ftz.f32 	%f50, %f22, 0f40800000, %f49;
	add.ftz.f32 	%f51, %f50, %f47;
	ld.global.nc.f32 	%f52, [%rd35+2080];
	fma.rn.ftz.f32 	%f53, %f26, 0f40800000, %f27;
	fma.rn.ftz.f32 	%f54, %f19, 0f40C00000, %f53;
	fma.rn.ftz.f32 	%f55, %f25, 0f40800000, %f54;
	add.ftz.f32 	%f56, %f55, %f52;
	mul.ftz.f32 	%f57, %f3, %f56;
	fma.rn.ftz.f32 	%f58, %f4, %f51, %f57;
	fma.rn.ftz.f32 	%f59, %f1, %f58, %f46;
	add.s32 	%r124, %r29, %r130;
	mul.wide.s32 	%rd36, %r124, 4;
	add.s64 	%rd37, %rd2, %rd36;
	ld.global.nc.f32 	%f60, [%rd37+-528];
	fma.rn.ftz.f32 	%f61, %f30, 0f40800000, %f60;
	fma.rn.ftz.f32 	%f62, %f29, 0f40C00000, %f61;
	fma.rn.ftz.f32 	%f63, %f20, 0f40800000, %f62;
	add.ftz.f32 	%f64, %f28, %f63;
	ld.global.nc.f32 	%f65, [%rd37+-520];
	fma.rn.ftz.f32 	%f66, %f33, 0f40800000, %f65;
	fma.rn.ftz.f32 	%f67, %f32, 0f40C00000, %f66;
	fma.rn.ftz.f32 	%f68, %f21, 0f40800000, %f67;
	add.ftz.f32 	%f69, %f31, %f68;
	mul.ftz.f32 	%f70, %f3, %f69;
	fma.rn.ftz.f32 	%f71, %f4, %f64, %f70;
	mul.ftz.f32 	%f72, %f2, %f71;
	add.s32 	%r125, %r28, %r130;
	mul.wide.s32 	%rd38, %r125, 4;
	add.s64 	%rd39, %rd2, %rd38;
	ld.global.nc.f32 	%f73, [%rd39+2072];
	fma.rn.ftz.f32 	%f74, %f29, 0f40800000, %f30;
	fma.rn.ftz.f32 	%f75, %f20, 0f40C00000, %f74;
	fma.rn.ftz.f32 	%f76, %f28, 0f40800000, %f75;
	add.ftz.f32 	%f77, %f76, %f73;
	ld.global.nc.f32 	%f78, [%rd39+2080];
	fma.rn.ftz.f32 	%f79, %f32, 0f40800000, %f33;
	fma.rn.ftz.f32 	%f80, %f21, 0f40C00000, %f79;
	fma.rn.ftz.f32 	%f81, %f31, 0f40800000, %f80;
	add.ftz.f32 	%f82, %f81, %f78;
	mul.ftz.f32 	%f83, %f3, %f82;
	fma.rn.ftz.f32 	%f84, %f4, %f77, %f83;
	fma.rn.ftz.f32 	%f85, %f1, %f84, %f72;
	mul.ftz.f32 	%f86, %f6, %f85;
	fma.rn.ftz.f32 	%f87, %f5, %f59, %f86;
	st.global.f32 	[%rd40], %f87;
	add.s32 	%r130, %r130, 1;
	add.s64 	%rd40, %rd40, 4;
	setp.ne.s32 	%p1, %r130, 2;
	@%p1 bra 	LBB4_3;
// %bb.4:                               // %"end for interpolated.s0.c"
                                        //   in Loop: Header=BB4_2 Depth=2
	add.s32 	%r129, %r129, 1;
	add.s32 	%r128, %r128, 2;
	setp.eq.s32 	%p2, %r129, 8;
	@%p2 bra 	LBB4_5;
	bra.uni 	LBB4_2;
LBB4_5:                                 // %"end for interpolated.s0.x.xi.xii"
                                        //   in Loop: Header=BB4_1 Depth=1
	add.s32 	%r13, %r13, 1;
	add.s32 	%r12, %r12, %r5;
	setp.eq.s32 	%p3, %r13, 2;
	@%p3 bra 	LBB4_6;
	bra.uni 	LBB4_1;
LBB4_6:                                 // %"end for interpolated.s0.y.yi.yii"
	ret;
                                        // -- End function
}
	// .globl	kernel_bilateral_grid_s0_y_y___block_id_y // -- Begin function kernel_bilateral_grid_s0_y_y___block_id_y
.visible .entry kernel_bilateral_grid_s0_y_y___block_id_y(
	.param .u32 kernel_bilateral_grid_s0_y_y___block_id_y_param_0,
	.param .u32 kernel_bilateral_grid_s0_y_y___block_id_y_param_1,
	.param .u32 kernel_bilateral_grid_s0_y_y___block_id_y_param_2,
	.param .u32 kernel_bilateral_grid_s0_y_y___block_id_y_param_3,
	.param .u32 kernel_bilateral_grid_s0_y_y___block_id_y_param_4,
	.param .u32 kernel_bilateral_grid_s0_y_y___block_id_y_param_5,
	.param .u32 kernel_bilateral_grid_s0_y_y___block_id_y_param_6,
	.param .u32 kernel_bilateral_grid_s0_y_y___block_id_y_param_7,
	.param .u32 kernel_bilateral_grid_s0_y_y___block_id_y_param_8,
	.param .u64 kernel_bilateral_grid_s0_y_y___block_id_y_param_9,
	.param .u64 kernel_bilateral_grid_s0_y_y___block_id_y_param_10
)                                       // @kernel_bilateral_grid_s0_y_y___block_id_y
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<9>;
	.reg .b32 	%r<32>;
	.reg .b64 	%rd<11>;

// %bb.0:                               // %entry
	ld.param.u32 	%r9, [kernel_bilateral_grid_s0_y_y___block_id_y_param_1];
	ld.param.u32 	%r8, [kernel_bilateral_grid_s0_y_y___block_id_y_param_0];
	ld.param.u64 	%rd3, [kernel_bilateral_grid_s0_y_y___block_id_y_param_10];
	cvta.to.global.u64 	%rd1, %rd3;
	ld.param.u64 	%rd4, [kernel_bilateral_grid_s0_y_y___block_id_y_param_9];
	cvta.to.global.u64 	%rd2, %rd4;
	ld.param.u32 	%r14, [kernel_bilateral_grid_s0_y_y___block_id_y_param_2];
	ld.param.u32 	%r15, [kernel_bilateral_grid_s0_y_y___block_id_y_param_3];
	mov.u32 	%r16, %ctaid.y;
	mov.u32 	%r1, %ctaid.x;
	ld.param.u32 	%r17, [kernel_bilateral_grid_s0_y_y___block_id_y_param_4];
	mov.u32 	%r18, %tid.y;
	mov.u32 	%r2, %tid.x;
	shl.b32 	%r19, %r16, 6;
	min.s32 	%r20, %r19, %r14;
	setp.ge.s32 	%p1, %r1, %r15;
	add.s32 	%r3, %r20, %r18;
	mul.lo.s32 	%r4, %r3, %r17;
	@%p1 bra 	LBB5_2;
// %bb.1:                               // %true_bb
	ld.param.u32 	%r13, [kernel_bilateral_grid_s0_y_y___block_id_y_param_8];
	ld.param.u32 	%r12, [kernel_bilateral_grid_s0_y_y___block_id_y_param_7];
	shl.b32 	%r24, %r1, 4;
	add.s32 	%r25, %r2, %r24;
	add.s32 	%r26, %r25, %r12;
	add.s32 	%r27, %r26, %r4;
	shl.b32 	%r28, %r27, 1;
	mul.wide.s32 	%rd7, %r28, 4;
	add.s64 	%rd8, %rd1, %rd7;
	ld.global.nc.f32 	%f6, [%rd8+4096];
	ld.global.nc.f32 	%f7, [%rd8+4100];
	div.approx.ftz.f32 	%f8, %f6, %f7;
	add.s32 	%r31, %r25, %r13;
	bra.uni 	LBB5_3;
LBB5_2:                                 // %false_bb
	ld.param.u32 	%r11, [kernel_bilateral_grid_s0_y_y___block_id_y_param_6];
	ld.param.u32 	%r10, [kernel_bilateral_grid_s0_y_y___block_id_y_param_5];
	add.s32 	%r21, %r4, %r2;
	add.s32 	%r22, %r21, %r10;
	shl.b32 	%r23, %r22, 1;
	mul.wide.s32 	%rd5, %r23, 4;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.nc.f32 	%f4, [%rd6+3968];
	ld.global.nc.f32 	%f5, [%rd6+3972];
	div.approx.ftz.f32 	%f8, %f4, %f5;
	add.s32 	%r31, %r2, %r11;
LBB5_3:                                 // %after_bb
	add.s32 	%r29, %r3, %r8;
	mad.lo.s32 	%r30, %r29, %r9, %r31;
	mul.wide.s32 	%rd9, %r30, 4;
	add.s64 	%rd10, %rd2, %rd9;
	st.global.f32 	[%rd10], %f8;
	ret;
                                        // -- End function
}


add_temp_object_file: /tmp/xCas9c/bilateral_grid_classic_auto_schedule.a.o
Module.compile(): temporary object_name /tmp/xCas9c/bilateral_grid_classic_auto_schedule.a.o
emit_file.Compiling to native code...
Module.compile(): static_library_name ./bin/bilateral_grid_classic_auto_schedule.a
file_unlink: /tmp/xCas9c/bilateral_grid_classic_auto_schedule.a.o
dir_rmdir: /tmp/xCas9c
Module.compile(): c_header_name ./bin/bilateral_grid_classic_auto_schedule.h
Module.compile(): schedule_name ./bin/bilateral_grid_classic_auto_schedule.schedule
