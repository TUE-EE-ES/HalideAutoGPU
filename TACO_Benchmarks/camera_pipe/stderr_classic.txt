Registering autoscheduler...
JIT compiling shared runtime for x86-64-linux-avx-avx2-cuda-f16c-fma-jit-no_runtime-sse41
JIT compiling cuda for x86-64-linux-avx-avx2-cuda-f16c-fma-jit-no_runtime-sse41
Generator camera_pipe has base_path ./bin/camera_pipe_classic_auto_schedule
Dropout seed = 1561459989
Node: processed
  Symbolic region required: 
    processed._::x.min, processed._::x.max
    processed._::y.min, processed._::y.max
    processed._::c.min, processed._::c.max
  Region computed: 
    processed._::x.min, processed._::x.max
    processed._::y.min, processed._::y.max
    processed._::c.min, processed._::c.max
  Stage 0:
    _::x processed._::x.min processed._::x.max
    _::y processed._::y.min processed._::y.max
    _::c processed._::c.min processed._::c.max
    Featurization for type UInt8
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   1
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      1 0 0 1
      Transpose:      1 0 0 1
      Broadcast:      1 0 0 1
      Slice:          1 0 0 1
    Featurization for type UInt32
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   6
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
  pointwise: 1 boundary condition: 0 wrapper: 1 input: 0 output: 1
Node: sharpened
  Symbolic region required: 
    sharpened._::x.min, sharpened._::x.max
    sharpened._::y.min, sharpened._::y.max
    sharpened._::c.min, sharpened._::c.max
  Region computed: 
    sharpened._::x.min, sharpened._::x.max
    sharpened._::y.min, sharpened._::y.max
    sharpened._::c.min, sharpened._::c.max
  Stage 0:
    _::x sharpened._::x.min sharpened._::x.max
    _::y sharpened._::y.min sharpened._::y.max
    _::c sharpened._::c.min sharpened._::c.max
    Featurization for type UInt8
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   2
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      1 0 0 1
      Transpose:      1 0 0 1
      Broadcast:      1 0 0 1
      Slice:          1 0 0 1
    Featurization for type UInt16
     Op histogram:
      Constant:   3
      Cast:       0
      Variable:   0
      Param:      0
      Add:        1
      Sub:        0
      Mod:        0
      Mul:        1
      Div:        1
      Min:        1
      Max:        1
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   1
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      1 0 0 0
      Transpose:      1 0 0 0
      Broadcast:      1 0 0 0
      Slice:          1 0 0 0
    Featurization for type UInt32
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   9
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
  pointwise: 0 boundary condition: 0 wrapper: 0 input: 0 output: 0
Node: sharpen_strength_x32
  Symbolic region required: 
  Region computed: 
  Stage 0:
    Featurization for type Float
     Op histogram:
      Constant:   3
      Cast:       0
      Variable:   0
      Param:      1
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        1
      Div:        0
      Min:        1
      Max:        1
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
  pointwise: 1 boundary condition: 0 wrapper: 0 input: 0 output: 0
Node: mask
  Symbolic region required: 
    mask._::x.min, mask._::x.max
    mask._::y.min, mask._::y.max
    mask._::c.min, mask._::c.max
  Region computed: 
    mask._::x.min, mask._::x.max
    mask._::y.min, mask._::y.max
    mask._::c.min, mask._::c.max
  Stage 0:
    _::x mask._::x.min mask._::x.max
    _::y mask._::y.min mask._::y.max
    _::c mask._::c.min mask._::c.max
    Featurization for type UInt8
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   2
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      2 0 0 0
      Transpose:      2 0 0 0
      Broadcast:      2 0 0 0
      Slice:          2 0 0 0
    Featurization for type UInt16
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        1
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 1
      Transpose:      0 0 0 1
      Broadcast:      0 0 0 1
      Slice:          0 0 0 1
    Featurization for type UInt32
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   9
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
  pointwise: 1 boundary condition: 0 wrapper: 0 input: 0 output: 0
Node: unsharp
  Symbolic region required: 
    unsharp._::x.min, unsharp._::x.max
    unsharp._::y.min, unsharp._::y.max
    unsharp._::c.min, unsharp._::c.max
  Region computed: 
    unsharp._::x.min, unsharp._::x.max
    unsharp._::y.min, unsharp._::y.max
    unsharp._::c.min, unsharp._::c.max
  Stage 0:
    _::x unsharp._::x.min unsharp._::x.max
    _::y unsharp._::y.min unsharp._::y.max
    _::c unsharp._::c.min unsharp._::c.max
    Featurization for type UInt8
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   3
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      3 0 0 1
      Transpose:      3 0 0 1
      Broadcast:      3 0 0 1
      Slice:          3 0 0 1
    Featurization for type UInt16
     Op histogram:
      Constant:   4
      Cast:       0
      Variable:   0
      Param:      0
      Add:        4
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        2
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
    Featurization for type UInt32
     Op histogram:
      Constant:   2
      Cast:       0
      Variable:   12
      Param:      0
      Add:        2
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
  pointwise: 0 boundary condition: 0 wrapper: 0 input: 0 output: 0
Node: unsharp_y
  Symbolic region required: 
    unsharp_y._::x.min, unsharp_y._::x.max
    unsharp_y._::y.min, unsharp_y._::y.max
    unsharp_y._::c.min, unsharp_y._::c.max
  Region computed: 
    unsharp_y._::x.min, unsharp_y._::x.max
    unsharp_y._::y.min, unsharp_y._::y.max
    unsharp_y._::c.min, unsharp_y._::c.max
  Stage 0:
    _::x unsharp_y._::x.min unsharp_y._::x.max
    _::y unsharp_y._::y.min unsharp_y._::y.max
    _::c unsharp_y._::c.min unsharp_y._::c.max
    Featurization for type UInt8
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   3
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      3 0 0 1
      Transpose:      3 0 0 1
      Broadcast:      3 0 0 1
      Slice:          3 0 0 1
    Featurization for type UInt16
     Op histogram:
      Constant:   4
      Cast:       0
      Variable:   0
      Param:      0
      Add:        4
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        2
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
    Featurization for type UInt32
     Op histogram:
      Constant:   2
      Cast:       0
      Variable:   12
      Param:      0
      Add:        2
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
  pointwise: 0 boundary condition: 0 wrapper: 0 input: 0 output: 0
Node: f28
  Symbolic region required: 
    f28._::x.min, f28._::x.max
    f28._::y.min, f28._::y.max
    f28._::c.min, f28._::c.max
  Region computed: 
    f28._::x.min, f28._::x.max
    f28._::y.min, f28._::y.max
    f28._::c.min, f28._::c.max
  Stage 0:
    _::x f28._::x.min f28._::x.max
    _::y f28._::y.min f28._::y.max
    _::c f28._::c.min f28._::c.max
    Featurization for type UInt8
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   1
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 1
      Transpose:      0 0 0 1
      Broadcast:      0 0 0 1
      Slice:          0 0 0 1
    Featurization for type UInt16
     Op histogram:
      Constant:   2
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        1
      Max:        1
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   1
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      1 0 0 0
      Transpose:      1 0 0 0
      Broadcast:      1 0 0 0
      Slice:          1 0 0 0
    Featurization for type UInt32
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   6
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
  pointwise: 0 boundary condition: 0 wrapper: 0 input: 0 output: 0
Node: f27
  Symbolic region required: 
    f27._::x.min, f27._::x.max
    f27._::y.min, f27._::y.max
    f27._::c.min, f27._::c.max
  Region computed: 
    f27._::x.min, f27._::x.max
    f27._::y.min, f27._::y.max
    f27._::c.min, f27._::c.max
  Stage 0:
    _::x f27._::x.min f27._::x.max
    _::y f27._::y.min f27._::y.max
    _::c f27._::c.min f27._::c.max
    Featurization for type Bool
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         2
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
    Featurization for type UInt16
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     2
      ImageCall:  0
      FuncCall:   15
      SelfCall:   0
      ExternCall: 0
      Let:        3
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 1
      Transpose:      0 0 0 1
      Broadcast:      0 0 0 1
      Slice:          0 0 0 1
    Featurization for type UInt32
     Op histogram:
      Constant:   32
      Cast:       0
      Variable:   20
      Param:      0
      Add:        9
      Sub:        0
      Mod:        0
      Mul:        9
      Div:        3
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
  pointwise: 0 boundary condition: 0 wrapper: 0 input: 0 output: 0
Node: output
  Symbolic region required: 
    output._::x.min, output._::x.max
    output._::y.min, output._::y.max
    output._::c.min, output._::c.max
  Region computed: 
    output._::x.min, output._::x.max
    output._::y.min, output._::y.max
    output._::c.min, output._::c.max
  Stage 0:
    _::x output._::x.min output._::x.max
    _::y output._::y.min output._::y.max
    _::c output._::c.min output._::c.max
    Featurization for type Bool
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         2
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
    Featurization for type UInt16
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     2
      ImageCall:  0
      FuncCall:   3
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 1
      Transpose:      0 0 0 1
      Broadcast:      0 0 0 1
      Slice:          0 0 0 1
    Featurization for type UInt32
     Op histogram:
      Constant:   2
      Cast:       0
      Variable:   11
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
  pointwise: 0 boundary condition: 0 wrapper: 0 input: 0 output: 0
Node: f25
  Symbolic region required: 
    f25._::x.min, f25._::x.max
    f25._::y.min, f25._::y.max
  Region computed: 
    f25._::x.min, f25._::x.max
    f25._::y.min, f25._::y.max
  Stage 0:
    _::x f25._::x.min f25._::x.max
    _::y f25._::y.min f25._::y.max
    Featurization for type Bool
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         1
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
    Featurization for type UInt16
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     1
      ImageCall:  0
      FuncCall:   2
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 1
      Transpose:      0 0 0 1
      Broadcast:      0 0 0 1
      Slice:          0 0 0 1
    Featurization for type UInt32
     Op histogram:
      Constant:   4
      Cast:       0
      Variable:   7
      Param:      0
      Add:        0
      Sub:        0
      Mod:        1
      Mul:        0
      Div:        2
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
  pointwise: 0 boundary condition: 0 wrapper: 0 input: 0 output: 0
Node: f24
  Symbolic region required: 
    f24._::x.min, f24._::x.max
    f24._::y.min, f24._::y.max
  Region computed: 
    f24._::x.min, f24._::x.max
    f24._::y.min, f24._::y.max
  Stage 0:
    _::x f24._::x.min f24._::x.max
    _::y f24._::y.min f24._::y.max
    Featurization for type Bool
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         1
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
    Featurization for type UInt16
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     1
      ImageCall:  0
      FuncCall:   2
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 1
      Transpose:      0 0 0 1
      Broadcast:      0 0 0 1
      Slice:          0 0 0 1
    Featurization for type UInt32
     Op histogram:
      Constant:   4
      Cast:       0
      Variable:   7
      Param:      0
      Add:        0
      Sub:        0
      Mod:        1
      Mul:        0
      Div:        2
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
  pointwise: 0 boundary condition: 0 wrapper: 0 input: 0 output: 0
Node: f8
  Symbolic region required: 
    f8._::x.min, f8._::x.max
    f8._::y.min, f8._::y.max
  Region computed: 
    f8._::x.min, f8._::x.max
    f8._::y.min, f8._::y.max
  Stage 0:
    _::x f8._::x.min f8._::x.max
    _::y f8._::y.min f8._::y.max
    Featurization for type UInt16
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        1
      Sub:        1
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   5
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      5 0 0 1
      Transpose:      5 0 0 1
      Broadcast:      5 0 0 1
      Slice:          5 0 0 1
    Featurization for type UInt32
     Op histogram:
      Constant:   6
      Cast:       0
      Variable:   12
      Param:      0
      Add:        6
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        2
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
  pointwise: 0 boundary condition: 0 wrapper: 0 input: 0 output: 0
Node: f6
  Symbolic region required: 
    f6._::x.min, f6._::x.max
    f6._::y.min, f6._::y.max
  Region computed: 
    f6._::x.min, f6._::x.max
    f6._::y.min, f6._::y.max
  Stage 0:
    _::x f6._::x.min f6._::x.max
    _::y f6._::y.min f6._::y.max
    Featurization for type Bool
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         1
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
    Featurization for type UInt16
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   10
      Param:      0
      Add:        2
      Sub:        2
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     1
      ImageCall:  0
      FuncCall:   9
      SelfCall:   0
      ExternCall: 2
      Let:        5
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      9 0 0 1
      Transpose:      9 0 0 1
      Broadcast:      9 0 0 1
      Slice:          9 0 0 1
    Featurization for type UInt32
     Op histogram:
      Constant:   16
      Cast:       0
      Variable:   20
      Param:      0
      Add:        16
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        4
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
  pointwise: 0 boundary condition: 0 wrapper: 0 input: 0 output: 0
Node: f23
  Symbolic region required: 
    f23._::x.min, f23._::x.max
    f23._::y.min, f23._::y.max
  Region computed: 
    f23._::x.min, f23._::x.max
    f23._::y.min, f23._::y.max
  Stage 0:
    _::x f23._::x.min f23._::x.max
    _::y f23._::y.min f23._::y.max
    Featurization for type Bool
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         1
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
    Featurization for type UInt16
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     1
      ImageCall:  0
      FuncCall:   2
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 1
      Transpose:      0 0 0 1
      Broadcast:      0 0 0 1
      Slice:          0 0 0 1
    Featurization for type UInt32
     Op histogram:
      Constant:   4
      Cast:       0
      Variable:   7
      Param:      0
      Add:        0
      Sub:        0
      Mod:        1
      Mul:        0
      Div:        2
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
  pointwise: 0 boundary condition: 0 wrapper: 0 input: 0 output: 0
Node: f10
  Symbolic region required: 
    f10._::x.min, f10._::x.max
    f10._::y.min, f10._::y.max
  Region computed: 
    f10._::x.min, f10._::x.max
    f10._::y.min, f10._::y.max
  Stage 0:
    _::x f10._::x.min f10._::x.max
    _::y f10._::y.min f10._::y.max
    Featurization for type UInt16
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        1
      Sub:        1
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   5
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      5 0 0 1
      Transpose:      5 0 0 1
      Broadcast:      5 0 0 1
      Slice:          5 0 0 1
    Featurization for type UInt32
     Op histogram:
      Constant:   6
      Cast:       0
      Variable:   12
      Param:      0
      Add:        6
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        2
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
  pointwise: 0 boundary condition: 0 wrapper: 0 input: 0 output: 0
Node: f5
  Symbolic region required: 
    f5._::x.min, f5._::x.max
    f5._::y.min, f5._::y.max
  Region computed: 
    f5._::x.min, f5._::x.max
    f5._::y.min, f5._::y.max
  Stage 0:
    _::x f5._::x.min f5._::x.max
    _::y f5._::y.min f5._::y.max
    Featurization for type UInt16
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   1
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 1
      Transpose:      0 0 0 1
      Broadcast:      0 0 0 1
      Slice:          1 0 0 1
    Featurization for type UInt32
     Op histogram:
      Constant:   1
      Cast:       0
      Variable:   4
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
  pointwise: 0 boundary condition: 0 wrapper: 0 input: 0 output: 0
Node: f22
  Symbolic region required: 
    f22._::x.min, f22._::x.max
    f22._::y.min, f22._::y.max
  Region computed: 
    f22._::x.min, f22._::x.max
    f22._::y.min, f22._::y.max
  Stage 0:
    _::x f22._::x.min f22._::x.max
    _::y f22._::y.min f22._::y.max
    Featurization for type Bool
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         1
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
    Featurization for type UInt16
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     1
      ImageCall:  0
      FuncCall:   2
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 1
      Transpose:      0 0 0 1
      Broadcast:      0 0 0 1
      Slice:          0 0 0 1
    Featurization for type UInt32
     Op histogram:
      Constant:   4
      Cast:       0
      Variable:   7
      Param:      0
      Add:        0
      Sub:        0
      Mod:        1
      Mul:        0
      Div:        2
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
  pointwise: 0 boundary condition: 0 wrapper: 0 input: 0 output: 0
Node: f21
  Symbolic region required: 
    f21._::x.min, f21._::x.max
    f21._::y.min, f21._::y.max
  Region computed: 
    f21._::x.min, f21._::x.max
    f21._::y.min, f21._::y.max
  Stage 0:
    _::x f21._::x.min f21._::x.max
    _::y f21._::y.min f21._::y.max
    Featurization for type Bool
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         1
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
    Featurization for type UInt16
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     1
      ImageCall:  0
      FuncCall:   2
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 1
      Transpose:      0 0 0 1
      Broadcast:      0 0 0 1
      Slice:          0 0 0 1
    Featurization for type UInt32
     Op histogram:
      Constant:   4
      Cast:       0
      Variable:   7
      Param:      0
      Add:        0
      Sub:        0
      Mod:        1
      Mul:        0
      Div:        2
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
  pointwise: 0 boundary condition: 0 wrapper: 0 input: 0 output: 0
Node: f20
  Symbolic region required: 
    f20._::x.min, f20._::x.max
    f20._::y.min, f20._::y.max
  Region computed: 
    f20._::x.min, f20._::x.max
    f20._::y.min, f20._::y.max
  Stage 0:
    _::x f20._::x.min f20._::x.max
    _::y f20._::y.min f20._::y.max
    Featurization for type Bool
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         1
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
    Featurization for type UInt16
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     1
      ImageCall:  0
      FuncCall:   2
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 1
      Transpose:      0 0 0 1
      Broadcast:      0 0 0 1
      Slice:          0 0 0 1
    Featurization for type UInt32
     Op histogram:
      Constant:   4
      Cast:       0
      Variable:   7
      Param:      0
      Add:        0
      Sub:        0
      Mod:        1
      Mul:        0
      Div:        2
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
  pointwise: 0 boundary condition: 0 wrapper: 0 input: 0 output: 0
Node: f19
  Symbolic region required: 
    f19._::x.min, f19._::x.max
    f19._::y.min, f19._::y.max
  Region computed: 
    f19._::x.min, f19._::x.max
    f19._::y.min, f19._::y.max
  Stage 0:
    _::x f19._::x.min f19._::x.max
    _::y f19._::y.min f19._::y.max
    Featurization for type Bool
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         1
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
    Featurization for type UInt16
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     1
      ImageCall:  0
      FuncCall:   2
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 1
      Transpose:      0 0 0 1
      Broadcast:      0 0 0 1
      Slice:          0 0 0 1
    Featurization for type UInt32
     Op histogram:
      Constant:   4
      Cast:       0
      Variable:   7
      Param:      0
      Add:        0
      Sub:        0
      Mod:        1
      Mul:        0
      Div:        2
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
  pointwise: 0 boundary condition: 0 wrapper: 0 input: 0 output: 0
Node: f18
  Symbolic region required: 
    f18._::x.min, f18._::x.max
    f18._::y.min, f18._::y.max
  Region computed: 
    f18._::x.min, f18._::x.max
    f18._::y.min, f18._::y.max
  Stage 0:
    _::x f18._::x.min f18._::x.max
    _::y f18._::y.min f18._::y.max
    Featurization for type Bool
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         1
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
    Featurization for type UInt16
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     1
      ImageCall:  0
      FuncCall:   2
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 1
      Transpose:      0 0 0 1
      Broadcast:      0 0 0 1
      Slice:          0 0 0 1
    Featurization for type UInt32
     Op histogram:
      Constant:   4
      Cast:       0
      Variable:   7
      Param:      0
      Add:        0
      Sub:        0
      Mod:        1
      Mul:        0
      Div:        2
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
  pointwise: 0 boundary condition: 0 wrapper: 0 input: 0 output: 0
Node: f9
  Symbolic region required: 
    f9._::x.min, f9._::x.max
    f9._::y.min, f9._::y.max
  Region computed: 
    f9._::x.min, f9._::x.max
    f9._::y.min, f9._::y.max
  Stage 0:
    _::x f9._::x.min f9._::x.max
    _::y f9._::y.min f9._::y.max
    Featurization for type UInt16
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        1
      Sub:        1
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   5
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      5 0 0 1
      Transpose:      5 0 0 1
      Broadcast:      5 0 0 1
      Slice:          5 0 0 1
    Featurization for type UInt32
     Op histogram:
      Constant:   6
      Cast:       0
      Variable:   12
      Param:      0
      Add:        6
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        2
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
  pointwise: 0 boundary condition: 0 wrapper: 0 input: 0 output: 0
Node: f17
  Symbolic region required: 
    f17._::x.min, f17._::x.max
    f17._::y.min, f17._::y.max
  Region computed: 
    f17._::x.min, f17._::x.max
    f17._::y.min, f17._::y.max
  Stage 0:
    _::x f17._::x.min f17._::x.max
    _::y f17._::y.min f17._::y.max
    Featurization for type Bool
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         1
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
    Featurization for type UInt16
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     1
      ImageCall:  0
      FuncCall:   2
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 1
      Transpose:      0 0 0 1
      Broadcast:      0 0 0 1
      Slice:          0 0 0 1
    Featurization for type UInt32
     Op histogram:
      Constant:   4
      Cast:       0
      Variable:   7
      Param:      0
      Add:        0
      Sub:        0
      Mod:        1
      Mul:        0
      Div:        2
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
  pointwise: 0 boundary condition: 0 wrapper: 0 input: 0 output: 0
Node: f12
  Symbolic region required: 
    f12._::x.min, f12._::x.max
    f12._::y.min, f12._::y.max
  Region computed: 
    f12._::x.min, f12._::x.max
    f12._::y.min, f12._::y.max
  Stage 0:
    _::x f12._::x.min f12._::x.max
    _::y f12._::y.min f12._::y.max
    Featurization for type Bool
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         1
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
    Featurization for type UInt16
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   10
      Param:      0
      Add:        2
      Sub:        2
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     1
      ImageCall:  0
      FuncCall:   9
      SelfCall:   0
      ExternCall: 2
      Let:        5
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      9 0 0 1
      Transpose:      9 0 0 1
      Broadcast:      9 0 0 1
      Slice:          9 0 0 1
    Featurization for type UInt32
     Op histogram:
      Constant:   16
      Cast:       0
      Variable:   20
      Param:      0
      Add:        16
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        4
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
  pointwise: 0 boundary condition: 0 wrapper: 0 input: 0 output: 0
Node: f13
  Symbolic region required: 
    f13._::x.min, f13._::x.max
    f13._::y.min, f13._::y.max
  Region computed: 
    f13._::x.min, f13._::x.max
    f13._::y.min, f13._::y.max
  Stage 0:
    _::x f13._::x.min f13._::x.max
    _::y f13._::y.min f13._::y.max
    Featurization for type Bool
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         1
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
    Featurization for type UInt16
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   8
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     1
      ImageCall:  0
      FuncCall:   4
      SelfCall:   0
      ExternCall: 2
      Let:        4
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      4 0 0 1
      Transpose:      4 0 0 1
      Broadcast:      4 0 0 1
      Slice:          4 0 0 1
    Featurization for type UInt32
     Op histogram:
      Constant:   6
      Cast:       0
      Variable:   10
      Param:      0
      Add:        6
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        2
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
  pointwise: 0 boundary condition: 0 wrapper: 0 input: 0 output: 0
Node: f11
  Symbolic region required: 
    f11._::x.min, f11._::x.max
    f11._::y.min, f11._::y.max
  Region computed: 
    f11._::x.min, f11._::x.max
    f11._::y.min, f11._::y.max
  Stage 0:
    _::x f11._::x.min f11._::x.max
    _::y f11._::y.min f11._::y.max
    Featurization for type UInt16
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        1
      Sub:        1
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   5
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      5 0 0 1
      Transpose:      5 0 0 1
      Broadcast:      5 0 0 1
      Slice:          5 0 0 1
    Featurization for type UInt32
     Op histogram:
      Constant:   6
      Cast:       0
      Variable:   12
      Param:      0
      Add:        6
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        2
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
  pointwise: 0 boundary condition: 0 wrapper: 0 input: 0 output: 0
Node: f7
  Symbolic region required: 
    f7._::x.min, f7._::x.max
    f7._::y.min, f7._::y.max
  Region computed: 
    f7._::x.min, f7._::x.max
    f7._::y.min, f7._::y.max
  Stage 0:
    _::x f7._::x.min f7._::x.max
    _::y f7._::y.min f7._::y.max
    Featurization for type Bool
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         1
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
    Featurization for type UInt16
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   8
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     1
      ImageCall:  0
      FuncCall:   4
      SelfCall:   0
      ExternCall: 2
      Let:        4
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      4 0 0 1
      Transpose:      4 0 0 1
      Broadcast:      4 0 0 1
      Slice:          4 0 0 1
    Featurization for type UInt32
     Op histogram:
      Constant:   6
      Cast:       0
      Variable:   10
      Param:      0
      Add:        6
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        2
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
  pointwise: 0 boundary condition: 0 wrapper: 0 input: 0 output: 0
Node: f3
  Symbolic region required: 
    f3._::x.min, f3._::x.max
    f3._::y.min, f3._::y.max
  Region computed: 
    f3._::x.min, f3._::x.max
    f3._::y.min, f3._::y.max
  Stage 0:
    _::x f3._::x.min f3._::x.max
    _::y f3._::y.min f3._::y.max
    Featurization for type UInt16
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   1
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 1
      Transpose:      0 0 0 1
      Broadcast:      0 0 0 1
      Slice:          1 0 0 1
    Featurization for type UInt32
     Op histogram:
      Constant:   1
      Cast:       0
      Variable:   4
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
  pointwise: 0 boundary condition: 0 wrapper: 0 input: 0 output: 0
Node: f4
  Symbolic region required: 
    f4._::x.min, f4._::x.max
    f4._::y.min, f4._::y.max
  Region computed: 
    f4._::x.min, f4._::x.max
    f4._::y.min, f4._::y.max
  Stage 0:
    _::x f4._::x.min f4._::x.max
    _::y f4._::y.min f4._::y.max
    Featurization for type UInt16
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   1
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 1
      Transpose:      0 0 0 1
      Broadcast:      0 0 0 1
      Slice:          1 0 0 1
    Featurization for type UInt32
     Op histogram:
      Constant:   1
      Cast:       0
      Variable:   4
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
  pointwise: 0 boundary condition: 0 wrapper: 0 input: 0 output: 0
Node: f2
  Symbolic region required: 
    f2._::x.min, f2._::x.max
    f2._::y.min, f2._::y.max
  Region computed: 
    f2._::x.min, f2._::x.max
    f2._::y.min, f2._::y.max
  Stage 0:
    _::x f2._::x.min f2._::x.max
    _::y f2._::y.min f2._::y.max
    Featurization for type UInt16
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   1
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 1
      Transpose:      0 0 0 1
      Broadcast:      0 0 0 1
      Slice:          1 0 0 1
    Featurization for type UInt32
     Op histogram:
      Constant:   1
      Cast:       0
      Variable:   4
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
  pointwise: 0 boundary condition: 0 wrapper: 0 input: 0 output: 0
Node: deinterleaved
  Symbolic region required: 
    deinterleaved._::x.min, deinterleaved._::x.max
    deinterleaved._::y.min, deinterleaved._::y.max
    deinterleaved._::c.min, deinterleaved._::c.max
  Region computed: 
    deinterleaved._::x.min, deinterleaved._::x.max
    deinterleaved._::y.min, deinterleaved._::y.max
    deinterleaved._::c.min, deinterleaved._::c.max
  Stage 0:
    _::x deinterleaved._::x.min deinterleaved._::x.max
    _::y deinterleaved._::y.min deinterleaved._::y.max
    _::c deinterleaved._::c.min deinterleaved._::c.max
    Featurization for type Bool
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         3
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
    Featurization for type UInt16
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     3
      ImageCall:  0
      FuncCall:   4
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 1
      Transpose:      0 0 0 1
      Broadcast:      0 0 0 1
      Slice:          0 0 0 1
    Featurization for type UInt32
     Op histogram:
      Constant:   15
      Cast:       0
      Variable:   14
      Param:      0
      Add:        4
      Sub:        0
      Mod:        0
      Mul:        8
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
  pointwise: 0 boundary condition: 0 wrapper: 0 input: 0 output: 0
Node: f1
  Symbolic region required: 
    f1._::x.min, f1._::x.max
    f1._::y.min, f1._::y.max
  Region computed: 
    f1._::x.min, f1._::x.max
    f1._::y.min, f1._::y.max
  Stage 0:
    _::x f1._::x.min f1._::x.max
    _::y f1._::y.min f1._::y.max
    Featurization for type UInt16
     Op histogram:
      Constant:   1
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        1
      Max:        4
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   5
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      5 0 0 1
      Transpose:      5 0 0 1
      Broadcast:      5 0 0 1
      Slice:          5 0 0 1
    Featurization for type UInt32
     Op histogram:
      Constant:   4
      Cast:       0
      Variable:   12
      Param:      0
      Add:        4
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
  pointwise: 0 boundary condition: 0 wrapper: 0 input: 0 output: 0
Node: f0
  Symbolic region required: 
    f0._::x.min, f0._::x.max
    f0._::y.min, f0._::y.max
  Region computed: 
    f0._::x.min, f0._::x.max
    f0._::y.min, f0._::y.max
  Stage 0:
    _::x f0._::x.min f0._::x.max
    _::y f0._::y.min f0._::y.max
    Featurization for type UInt16
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   1
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      1 0 0 1
      Transpose:      1 0 0 1
      Broadcast:      1 0 0 1
      Slice:          1 0 0 1
    Featurization for type UInt32
     Op histogram:
      Constant:   2
      Cast:       0
      Variable:   4
      Param:      0
      Add:        2
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
  pointwise: 0 boundary condition: 0 wrapper: 0 input: 0 output: 0
Node: input_im
  Symbolic region required: 
    input_im._0.min, input_im._0.max
    input_im._1.min, input_im._1.max
  Region computed: 
    input_im._0.min, input_im._0.max
    input_im._1.min, input_im._1.max
  Stage 0:
    _0 input_im._0.min input_im._0.max
    _1 input_im._1.min input_im._1.max
    Featurization for type UInt16
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  1
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 1 1
      Transpose:      0 0 1 1
      Broadcast:      0 0 1 1
      Slice:          0 0 1 1
    Featurization for type UInt32
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   4
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
  pointwise: 1 boundary condition: 0 wrapper: 1 input: 1 output: 0
Node: f26
  Symbolic region required: 
    f26._::x.min, f26._::x.max
    f26._::y.min, f26._::y.max
  Region computed: 
    f26._::x.min, f26._::x.max
    f26._::y.min, f26._::y.max
  Stage 0:
    _::x f26._::x.min f26._::x.max
    _::y f26._::y.min f26._::y.max
    Featurization for type UInt32
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   6
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
    Featurization for type Float
     Op histogram:
      Constant:   7
      Cast:       0
      Variable:   0
      Param:      2
      Add:        3
      Sub:        0
      Mod:        0
      Mul:        5
      Div:        2
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   2
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      2 0 0 0
      Transpose:      2 0 0 0
      Broadcast:      2 0 0 0
      Slice:          2 0 0 0
  pointwise: 1 boundary condition: 0 wrapper: 0 input: 0 output: 0
Node: matrix_7000_im
  Symbolic region required: 
    matrix_7000_im._0.min, matrix_7000_im._0.max
    matrix_7000_im._1.min, matrix_7000_im._1.max
  Region computed: 
    matrix_7000_im._0.min, matrix_7000_im._0.max
    matrix_7000_im._1.min, matrix_7000_im._1.max
  Stage 0:
    _0 matrix_7000_im._0.min matrix_7000_im._0.max
    _1 matrix_7000_im._1.min matrix_7000_im._1.max
    Featurization for type UInt32
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   4
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
    Featurization for type Float
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  1
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 1 1
      Transpose:      0 0 1 1
      Broadcast:      0 0 1 1
      Slice:          0 0 1 1
  pointwise: 1 boundary condition: 0 wrapper: 1 input: 1 output: 0
Node: matrix_3200_im
  Symbolic region required: 
    matrix_3200_im._0.min, matrix_3200_im._0.max
    matrix_3200_im._1.min, matrix_3200_im._1.max
  Region computed: 
    matrix_3200_im._0.min, matrix_3200_im._0.max
    matrix_3200_im._1.min, matrix_3200_im._1.max
  Stage 0:
    _0 matrix_3200_im._0.min matrix_3200_im._0.max
    _1 matrix_3200_im._1.min matrix_3200_im._1.max
    Featurization for type UInt32
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   4
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
    Featurization for type Float
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  1
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 1 1
      Transpose:      0 0 1 1
      Broadcast:      0 0 1 1
      Slice:          0 0 1 1
  pointwise: 1 boundary condition: 0 wrapper: 1 input: 1 output: 0
Node: curve
  Symbolic region required: 
    curve._::x.min, curve._::x.max
  Region computed: 
    curve._::x.min, curve._::x.max
  Stage 0:
    _::x curve._::x.min curve._::x.max
    Featurization for type Bool
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         3
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
    Featurization for type UInt8
     Op histogram:
      Constant:   2
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     2
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        2
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 1
      Transpose:      0 0 0 1
      Broadcast:      0 0 0 1
      Slice:          0 0 0 1
    Featurization for type UInt32
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   4
      Param:      5
      Add:        0
      Sub:        2
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
    Featurization for type Float
     Op histogram:
      Constant:   20
      Cast:       0
      Variable:   9
      Param:      2
      Add:        5
      Sub:        5
      Mod:        0
      Mul:        9
      Div:        2
      Min:        2
      Max:        2
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     1
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 2
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
  pointwise: 1 boundary condition: 0 wrapper: 0 input: 0 output: 0
Edge: sharpened -> processed
  Footprint: 
    Min 0: processed._::x.min
    Max 0: processed._::x.max
    Min 1: processed._::y.min
    Max 1: processed._::y.max
    Min 2: processed._::c.min
    Max 2: processed._::c.max
  Load Jacobians:
    [ 1   0   0  ]
    [ 0   1   0  ]
    [ 0   0   1  ]

Edge: f28 -> sharpened
  Footprint: 
    Min 0: sharpened._::x.min
    Max 0: sharpened._::x.max
    Min 1: sharpened._::y.min
    Max 1: sharpened._::y.max
    Min 2: sharpened._::c.min
    Max 2: sharpened._::c.max
  Load Jacobians:
    [ 1   0   0  ]
    [ 0   1   0  ]
    [ 0   0   1  ]

Edge: mask -> sharpened
  Footprint: 
    Min 0: sharpened._::x.min
    Max 0: sharpened._::x.max
    Min 1: sharpened._::y.min
    Max 1: sharpened._::y.max
    Min 2: sharpened._::c.min
    Max 2: sharpened._::c.max
  Load Jacobians:
    [ 1   0   0  ]
    [ 0   1   0  ]
    [ 0   0   1  ]

Edge: sharpen_strength_x32 -> sharpened
  Footprint: 
  Load Jacobians:

Edge: f28 -> mask
  Footprint: 
    Min 0: mask._::x.min
    Max 0: mask._::x.max
    Min 1: mask._::y.min
    Max 1: mask._::y.max
    Min 2: mask._::c.min
    Max 2: mask._::c.max
  Load Jacobians:
    [ 1   0   0  ]
    [ 0   1   0  ]
    [ 0   0   1  ]

Edge: unsharp -> mask
  Footprint: 
    Min 0: mask._::x.min
    Max 0: mask._::x.max
    Min 1: mask._::y.min
    Max 1: mask._::y.max
    Min 2: mask._::c.min
    Max 2: mask._::c.max
  Load Jacobians:
    [ 1   0   0  ]
    [ 0   1   0  ]
    [ 0   0   1  ]

Edge: unsharp_y -> unsharp
  Footprint: 
    Min 0: (unsharp._::x.min + -1)
    Max 0: (unsharp._::x.max + 1)
    Min 1: unsharp._::y.min
    Max 1: unsharp._::y.max
    Min 2: unsharp._::c.min
    Max 2: unsharp._::c.max
  Load Jacobians:
  3 x
    [ 1   0   0  ]
    [ 0   1   0  ]
    [ 0   0   1  ]

Edge: f28 -> unsharp_y
  Footprint: 
    Min 0: unsharp_y._::x.min
    Max 0: unsharp_y._::x.max
    Min 1: (unsharp_y._::y.min + -1)
    Max 1: (unsharp_y._::y.max + 1)
    Min 2: unsharp_y._::c.min
    Max 2: unsharp_y._::c.max
  Load Jacobians:
  3 x
    [ 1   0   0  ]
    [ 0   1   0  ]
    [ 0   0   1  ]

Edge: curve -> f28
  Footprint: 
    Min 0: 0
    Max 0: 1023
  Load Jacobians:
    [ _   _   _  ]

Edge: f27 -> f28
  Footprint: 
    Min 0: f28._::x.min
    Max 0: f28._::x.max
    Min 1: f28._::y.min
    Max 1: f28._::y.max
    Min 2: f28._::c.min
    Max 2: f28._::c.max
  Load Jacobians:
    [ 1   0   0  ]
    [ 0   1   0  ]
    [ 0   0   1  ]

Edge: f26 -> f27
  Footprint: 
    Min 0: 0
    Max 0: 3
    Min 1: 0
    Max 1: 2
  Load Jacobians:
  12 x
    [ 0   0   0  ]
    [ 0   0   0  ]

Edge: output -> f27
  Footprint: 
    Min 0: f27._::x.min
    Max 0: f27._::x.max
    Min 1: f27._::y.min
    Max 1: f27._::y.max
    Min 2: 0
    Max 2: 2
  Load Jacobians:
  3 x
    [ 1   0   0  ]
    [ 0   1   0  ]
    [ 0   0   0  ]

Edge: f19 -> output
  Footprint: 
    Min 0: output._::x.min
    Max 0: output._::x.max
    Min 1: output._::y.min
    Max 1: output._::y.max
  Load Jacobians:
    [ 1   0   0  ]
    [ 0   1   0  ]

Edge: f22 -> output
  Footprint: 
    Min 0: output._::x.min
    Max 0: output._::x.max
    Min 1: output._::y.min
    Max 1: output._::y.max
  Load Jacobians:
    [ 1   0   0  ]
    [ 0   1   0  ]

Edge: f25 -> output
  Footprint: 
    Min 0: output._::x.min
    Max 0: output._::x.max
    Min 1: output._::y.min
    Max 1: output._::y.max
  Load Jacobians:
    [ 1   0   0  ]
    [ 0   1   0  ]

Edge: f23 -> f25
  Footprint: 
    Min 0: f25._::x.min
    Max 0: f25._::x.max
    Min 1: (f25._::y.min/2)
    Max 1: (f25._::y.max/2)
  Load Jacobians:
    [ 1   0  ]
    [ 0  1/2 ]

Edge: f24 -> f25
  Footprint: 
    Min 0: f25._::x.min
    Max 0: f25._::x.max
    Min 1: (f25._::y.min/2)
    Max 1: (f25._::y.max/2)
  Load Jacobians:
    [ 1   0  ]
    [ 0  1/2 ]

Edge: f6 -> f24
  Footprint: 
    Min 0: (f24._::x.min/2)
    Max 0: (f24._::x.max/2)
    Min 1: f24._::y.min
    Max 1: f24._::y.max
  Load Jacobians:
    [1/2  0  ]
    [ 0   1  ]

Edge: f8 -> f24
  Footprint: 
    Min 0: (f24._::x.min/2)
    Max 0: (f24._::x.max/2)
    Min 1: f24._::y.min
    Max 1: f24._::y.max
  Load Jacobians:
    [1/2  0  ]
    [ 0   1  ]

Edge: f13 -> f8
  Footprint: 
    Min 0: f8._::x.min
    Max 0: f8._::x.max
    Min 1: (f8._::y.min + -1)
    Max 1: f8._::y.max
  Load Jacobians:
  2 x
    [ 1   0  ]
    [ 0   1  ]

Edge: f3 -> f8
  Footprint: 
    Min 0: f8._::x.min
    Max 0: f8._::x.max
    Min 1: f8._::y.min
    Max 1: f8._::y.max
  Load Jacobians:
    [ 1   0  ]
    [ 0   1  ]

Edge: f5 -> f8
  Footprint: 
    Min 0: f8._::x.min
    Max 0: f8._::x.max
    Min 1: (f8._::y.min + -1)
    Max 1: f8._::y.max
  Load Jacobians:
  2 x
    [ 1   0  ]
    [ 0   1  ]

Edge: f13 -> f6
  Footprint: 
    Min 0: f6._::x.min
    Max 0: (f6._::x.max + 1)
    Min 1: (f6._::y.min + -1)
    Max 1: f6._::y.max
  Load Jacobians:
  4 x
    [ 1   0  ]
    [ 0   1  ]

Edge: f5 -> f6
  Footprint: 
    Min 0: f6._::x.min
    Max 0: (f6._::x.max + 1)
    Min 1: (f6._::y.min + -1)
    Max 1: f6._::y.max
  Load Jacobians:
  4 x
    [ 1   0  ]
    [ 0   1  ]

Edge: f7 -> f6
  Footprint: 
    Min 0: f6._::x.min
    Max 0: f6._::x.max
    Min 1: f6._::y.min
    Max 1: f6._::y.max
  Load Jacobians:
    [ 1   0  ]
    [ 0   1  ]

Edge: f10 -> f23
  Footprint: 
    Min 0: (f23._::x.min/2)
    Max 0: (f23._::x.max/2)
    Min 1: f23._::y.min
    Max 1: f23._::y.max
  Load Jacobians:
    [1/2  0  ]
    [ 0   1  ]

Edge: f5 -> f23
  Footprint: 
    Min 0: (f23._::x.min/2)
    Max 0: (f23._::x.max/2)
    Min 1: f23._::y.min
    Max 1: f23._::y.max
  Load Jacobians:
    [1/2  0  ]
    [ 0   1  ]

Edge: f13 -> f10
  Footprint: 
    Min 0: f10._::x.min
    Max 0: (f10._::x.max + 1)
    Min 1: f10._::y.min
    Max 1: f10._::y.max
  Load Jacobians:
  2 x
    [ 1   0  ]
    [ 0   1  ]

Edge: f4 -> f10
  Footprint: 
    Min 0: f10._::x.min
    Max 0: f10._::x.max
    Min 1: f10._::y.min
    Max 1: f10._::y.max
  Load Jacobians:
    [ 1   0  ]
    [ 0   1  ]

Edge: f5 -> f10
  Footprint: 
    Min 0: f10._::x.min
    Max 0: (f10._::x.max + 1)
    Min 1: f10._::y.min
    Max 1: f10._::y.max
  Load Jacobians:
  2 x
    [ 1   0  ]
    [ 0   1  ]

Edge: deinterleaved -> f5
  Footprint: 
    Min 0: f5._::x.min
    Max 0: f5._::x.max
    Min 1: f5._::y.min
    Max 1: f5._::y.max
    Min 2: 2
    Max 2: 2
  Load Jacobians:
    [ 1   0  ]
    [ 0   1  ]
    [ 0   0  ]

Edge: f20 -> f22
  Footprint: 
    Min 0: f22._::x.min
    Max 0: f22._::x.max
    Min 1: (f22._::y.min/2)
    Max 1: (f22._::y.max/2)
  Load Jacobians:
    [ 1   0  ]
    [ 0  1/2 ]

Edge: f21 -> f22
  Footprint: 
    Min 0: f22._::x.min
    Max 0: f22._::x.max
    Min 1: (f22._::y.min/2)
    Max 1: (f22._::y.max/2)
  Load Jacobians:
    [ 1   0  ]
    [ 0  1/2 ]

Edge: f3 -> f21
  Footprint: 
    Min 0: (f21._::x.min/2)
    Max 0: (f21._::x.max/2)
    Min 1: f21._::y.min
    Max 1: f21._::y.max
  Load Jacobians:
    [1/2  0  ]
    [ 0   1  ]

Edge: f7 -> f21
  Footprint: 
    Min 0: (f21._::x.min/2)
    Max 0: (f21._::x.max/2)
    Min 1: f21._::y.min
    Max 1: f21._::y.max
  Load Jacobians:
    [1/2  0  ]
    [ 0   1  ]

Edge: f13 -> f20
  Footprint: 
    Min 0: (f20._::x.min/2)
    Max 0: (f20._::x.max/2)
    Min 1: f20._::y.min
    Max 1: f20._::y.max
  Load Jacobians:
    [1/2  0  ]
    [ 0   1  ]

Edge: f4 -> f20
  Footprint: 
    Min 0: (f20._::x.min/2)
    Max 0: (f20._::x.max/2)
    Min 1: f20._::y.min
    Max 1: f20._::y.max
  Load Jacobians:
    [1/2  0  ]
    [ 0   1  ]

Edge: f17 -> f19
  Footprint: 
    Min 0: f19._::x.min
    Max 0: f19._::x.max
    Min 1: (f19._::y.min/2)
    Max 1: (f19._::y.max/2)
  Load Jacobians:
    [ 1   0  ]
    [ 0  1/2 ]

Edge: f18 -> f19
  Footprint: 
    Min 0: f19._::x.min
    Max 0: f19._::x.max
    Min 1: (f19._::y.min/2)
    Max 1: (f19._::y.max/2)
  Load Jacobians:
    [ 1   0  ]
    [ 0  1/2 ]

Edge: f2 -> f18
  Footprint: 
    Min 0: (f18._::x.min/2)
    Max 0: (f18._::x.max/2)
    Min 1: f18._::y.min
    Max 1: f18._::y.max
  Load Jacobians:
    [1/2  0  ]
    [ 0   1  ]

Edge: f9 -> f18
  Footprint: 
    Min 0: (f18._::x.min/2)
    Max 0: (f18._::x.max/2)
    Min 1: f18._::y.min
    Max 1: f18._::y.max
  Load Jacobians:
    [1/2  0  ]
    [ 0   1  ]

Edge: f2 -> f9
  Footprint: 
    Min 0: (f9._::x.min + -1)
    Max 0: f9._::x.max
    Min 1: f9._::y.min
    Max 1: f9._::y.max
  Load Jacobians:
  2 x
    [ 1   0  ]
    [ 0   1  ]

Edge: f3 -> f9
  Footprint: 
    Min 0: f9._::x.min
    Max 0: f9._::x.max
    Min 1: f9._::y.min
    Max 1: f9._::y.max
  Load Jacobians:
    [ 1   0  ]
    [ 0   1  ]

Edge: f7 -> f9
  Footprint: 
    Min 0: (f9._::x.min + -1)
    Max 0: f9._::x.max
    Min 1: f9._::y.min
    Max 1: f9._::y.max
  Load Jacobians:
  2 x
    [ 1   0  ]
    [ 0   1  ]

Edge: f11 -> f17
  Footprint: 
    Min 0: (f17._::x.min/2)
    Max 0: (f17._::x.max/2)
    Min 1: f17._::y.min
    Max 1: f17._::y.max
  Load Jacobians:
    [1/2  0  ]
    [ 0   1  ]

Edge: f12 -> f17
  Footprint: 
    Min 0: (f17._::x.min/2)
    Max 0: (f17._::x.max/2)
    Min 1: f17._::y.min
    Max 1: f17._::y.max
  Load Jacobians:
    [1/2  0  ]
    [ 0   1  ]

Edge: f13 -> f12
  Footprint: 
    Min 0: f12._::x.min
    Max 0: f12._::x.max
    Min 1: f12._::y.min
    Max 1: f12._::y.max
  Load Jacobians:
    [ 1   0  ]
    [ 0   1  ]

Edge: f2 -> f12
  Footprint: 
    Min 0: (f12._::x.min + -1)
    Max 0: f12._::x.max
    Min 1: f12._::y.min
    Max 1: (f12._::y.max + 1)
  Load Jacobians:
  4 x
    [ 1   0  ]
    [ 0   1  ]

Edge: f7 -> f12
  Footprint: 
    Min 0: (f12._::x.min + -1)
    Max 0: f12._::x.max
    Min 1: f12._::y.min
    Max 1: (f12._::y.max + 1)
  Load Jacobians:
  4 x
    [ 1   0  ]
    [ 0   1  ]

Edge: f3 -> f13
  Footprint: 
    Min 0: f13._::x.min
    Max 0: f13._::x.max
    Min 1: f13._::y.min
    Max 1: (f13._::y.max + 1)
  Load Jacobians:
  2 x
    [ 1   0  ]
    [ 0   1  ]

Edge: f4 -> f13
  Footprint: 
    Min 0: (f13._::x.min + -1)
    Max 0: f13._::x.max
    Min 1: f13._::y.min
    Max 1: f13._::y.max
  Load Jacobians:
  2 x
    [ 1   0  ]
    [ 0   1  ]

Edge: f2 -> f11
  Footprint: 
    Min 0: f11._::x.min
    Max 0: f11._::x.max
    Min 1: f11._::y.min
    Max 1: (f11._::y.max + 1)
  Load Jacobians:
  2 x
    [ 1   0  ]
    [ 0   1  ]

Edge: f4 -> f11
  Footprint: 
    Min 0: f11._::x.min
    Max 0: f11._::x.max
    Min 1: f11._::y.min
    Max 1: f11._::y.max
  Load Jacobians:
    [ 1   0  ]
    [ 0   1  ]

Edge: f7 -> f11
  Footprint: 
    Min 0: f11._::x.min
    Max 0: f11._::x.max
    Min 1: f11._::y.min
    Max 1: (f11._::y.max + 1)
  Load Jacobians:
  2 x
    [ 1   0  ]
    [ 0   1  ]

Edge: f3 -> f7
  Footprint: 
    Min 0: f7._::x.min
    Max 0: (f7._::x.max + 1)
    Min 1: f7._::y.min
    Max 1: f7._::y.max
  Load Jacobians:
  2 x
    [ 1   0  ]
    [ 0   1  ]

Edge: f4 -> f7
  Footprint: 
    Min 0: f7._::x.min
    Max 0: f7._::x.max
    Min 1: (f7._::y.min + -1)
    Max 1: f7._::y.max
  Load Jacobians:
  2 x
    [ 1   0  ]
    [ 0   1  ]

Edge: deinterleaved -> f3
  Footprint: 
    Min 0: f3._::x.min
    Max 0: f3._::x.max
    Min 1: f3._::y.min
    Max 1: f3._::y.max
    Min 2: 0
    Max 2: 0
  Load Jacobians:
    [ 1   0  ]
    [ 0   1  ]
    [ 0   0  ]

Edge: deinterleaved -> f4
  Footprint: 
    Min 0: f4._::x.min
    Max 0: f4._::x.max
    Min 1: f4._::y.min
    Max 1: f4._::y.max
    Min 2: 3
    Max 2: 3
  Load Jacobians:
    [ 1   0  ]
    [ 0   1  ]
    [ 0   0  ]

Edge: deinterleaved -> f2
  Footprint: 
    Min 0: f2._::x.min
    Max 0: f2._::x.max
    Min 1: f2._::y.min
    Max 1: f2._::y.max
    Min 2: 1
    Max 2: 1
  Load Jacobians:
    [ 1   0  ]
    [ 0   1  ]
    [ 0   0  ]

Edge: f1 -> deinterleaved
  Footprint: 
    Min 0: (deinterleaved._::x.min*2)
    Max 0: ((deinterleaved._::x.max*2) + 1)
    Min 1: (deinterleaved._::y.min*2)
    Max 1: ((deinterleaved._::y.max*2) + 1)
  Load Jacobians:
  4 x
    [ 2   0   0  ]
    [ 0   2   0  ]

Edge: f0 -> f1
  Footprint: 
    Min 0: (f1._::x.min + -2)
    Max 0: (f1._::x.max + 2)
    Min 1: (f1._::y.min + -2)
    Max 1: (f1._::y.max + 2)
  Load Jacobians:
  5 x
    [ 1   0  ]
    [ 0   1  ]

Edge: input_im -> f0
  Footprint: 
    Min 0: (f0._::x.min + 16)
    Max 0: (f0._::x.max + 16)
    Min 1: (f0._::y.min + 12)
    Max 1: (f0._::y.max + 12)
  Load Jacobians:
    [ 1   0  ]
    [ 0   1  ]

Edge: matrix_3200_im -> f26
  Footprint: 
    Min 0: f26._::x.min
    Max 0: f26._::x.max
    Min 1: f26._::y.min
    Max 1: f26._::y.max
  Load Jacobians:
    [ 1   0  ]
    [ 0   1  ]

Edge: matrix_7000_im -> f26
  Footprint: 
    Min 0: f26._::x.min
    Max 0: f26._::x.max
    Min 1: f26._::y.min
    Max 1: f26._::y.max
  Load Jacobians:
    [ 1   0  ]
    [ 0   1  ]


Pass 0 result:
State with cost 100000000000000007629769841091887003294964970946560.000000:
 gpu_none
realize: processed [2592, 1968, 3c] with 1 stages
realize: sharpened [2592, 1968, 3c] with 1 stages
realize: mask [2592, 1968, 3c] with 1 stages
realize: unsharp_y [2594, 1968, 3c] with 1 stages
realize: f28 [2594, 1970, 3c] with 1 stages
realize: f27 [2594, 1970, 3c] with 1 stages
realize: f7 [1299, 987] with 1 stages
realize: f3 [1300, 988] with 1 stages
realize: f4 [1300, 988] with 1 stages
realize: f2 [1299, 987] with 1 stages
realize: f1 [2600, 1976] with 1 stages
realize: f0 [2604, 1980] with 1 stages
realize: f26 [4, 3] with 1 stages
realize: curve [1024] with 1 stages
curve 2 (0, 0) t gpu_block
 curve 32c (0, 0) t gpu_thread
  curve 4c (0, 0) t gpu_serial
   curve 4vc (0, 0) *
f26 1 1 (0, 0) t gpu_block
 f26 1 1 (0, 0) t gpu_thread
  f26 2 3 (0, 0) t gpu_serial
   f26 2vc 1c (0, 0) *
f0 163 16 (1, 1) t gpu_block
 f0 16c 16c (1, 1) t gpu_thread
  f0 1c 4c (1, 1) t gpu_serial
   f0 1c 2vc (1, 1) *
f1 41 4 (1, 1) t gpu_block
 f1 32c 31c (1, 1) t gpu_thread
  f1 2c 8c (1, 1) t gpu_serial
   f1 1c 2vc (1, 1) *
f2 21 16 (1, 1) t gpu_block
 f2 8c 31c (1, 1) t gpu_thread
  f2 8c 1c (1, 1) t gpu_serial
   f2 1c 2vc (1, 1) *
    inlined: deinterleaved 1
f4 6 31 (1, 1) t gpu_block
 f4 55c 16c (1, 1) t gpu_thread
  f4 4c 1c (1, 1) t gpu_serial
   f4 1c 2vc (1, 1) *
    inlined: deinterleaved 1
f3 6 2 (0, 0) t gpu_block
 f3 14c 62c (0, 0) t gpu_thread
  f3 8c 8c (0, 0) t gpu_serial
   f3 2vc 1c (0, 0) *
    inlined: deinterleaved 1
f7 3 4 (1, 1) t gpu_block
 f7 55c 16c (1, 1) t gpu_thread
  f7 8c 8c (1, 1) t gpu_serial
   f7 1c 2vc (1, 1) *
f27 6 8 1c (1, 1) t gpu_block
 f27 55c 16c 1c (1, 1) t gpu_thread
  f27 8c 8c 3c (1, 1) t gpu_serial
   f27 1c 2vc 1c (1, 1) *
    inlined: output 3
    inlined: f25 3
    inlined: f24 3
    inlined: f8 3
    inlined: f6 3
    inlined: f23 3
    inlined: f10 3
    inlined: f5 27
    inlined: f22 3
    inlined: f21 3
    inlined: f20 3
    inlined: f19 3
    inlined: f18 3
    inlined: f9 3
    inlined: f17 3
    inlined: f12 3
    inlined: f13 30
    inlined: f11 3
    inlined: deinterleaved 27
f28 11 985 3c (0, 0) t gpu_block
 f28 15c 2c 1c (0, 0) t gpu_thread
  f28 4c 1c 1c (0, 0) t gpu_serial
   f28 4vc 1c 1c (0, 0) *
unsharp_y 325 8 2c (1, 1) t gpu_block
 unsharp_y 2c 31c 2c (1, 1) t gpu_thread
  unsharp_y 4c 2c 1c (1, 1) t gpu_serial
   unsharp_y 1c 4vc 1c (1, 1) *
mask 648 8 1c (1, 1) t gpu_block
 mask 2c 31c 2c (1, 1) t gpu_thread
  mask 2c 2c 2c (1, 1) t gpu_serial
   mask 1c 4vc 1c (1, 1) *
    inlined: unsharp 1
sharpened 41 16 3c (1, 1) t gpu_block
 sharpened 64c 16c 1c (1, 1) t gpu_thread
  sharpened 1c 2c 1c (1, 1) t gpu_serial
   sharpened 1c 4vc 1c (1, 1) *
    inlined: sharpen_strength_x32 1
processed 41 31 1c (0, 0) t gpu_block
 processed 16c 64c 1c (0, 0) t gpu_thread
  processed 1c 1c 3c (0, 0) t gpu_serial
   processed 4vc 1c 1c (0, 0) *

Pass 1 result:
State with cost 100000000000000007629769841091887003294964970946560.000000:
 gpu_none
realize: processed [2592, 1968, 3c] with 1 stages
realize: sharpened [2592, 1968, 3c] with 1 stages
realize: mask [2592, 1968, 3c] with 1 stages
realize: unsharp_y [2594, 1968, 3c] with 1 stages
realize: f28 [2594, 1970, 3c] with 1 stages
realize: f27 [2594, 1970, 3c] with 1 stages
realize: f6 [1298, 986] with 1 stages
realize: f23 [2594, 986] with 1 stages
realize: f10 [1298, 986] with 1 stages
realize: f5 [1299, 987] with 1 stages
realize: f19 [2594, 1970] with 1 stages
realize: f18 [2594, 986] with 1 stages
realize: f9 [1298, 986] with 1 stages
realize: f17 [2594, 986] with 1 stages
realize: f12 [1298, 986] with 1 stages
realize: f13 [1299, 987] with 1 stages
realize: f11 [1298, 986] with 1 stages
realize: f7 [1299, 987] with 1 stages
realize: f3 [1300, 988] with 1 stages
realize: f4 [1300, 988] with 1 stages
realize: f2 [1299, 987] with 1 stages
realize: f1 [2600, 1976] with 1 stages
realize: f26 [4, 3] with 1 stages
realize: curve [1024] with 1 stages
curve 4 (0, 0) t gpu_block
 curve 64c (0, 0) t gpu_thread
  curve 1c (0, 0) t gpu_serial
   curve 4vc (0, 0) *
f26 1 1 (0, 0) t gpu_block
 f26 1 1 (0, 0) t gpu_thread
  f26 2 3 (0, 0) t gpu_serial
   f26 2vc 1c (0, 0) *
f1 11 62 (0, 0) t gpu_block
 f1 15c 4c (0, 0) t gpu_thread
  f1 8c 8c (0, 0) t gpu_serial
   f1 2vc 1c (0, 0) *
    inlined: f0 5
f2 325 16 (1, 1) t gpu_block
 f2 4c 31c (1, 1) t gpu_thread
  f2 1c 1c (1, 1) t gpu_serial
   f2 1c 2vc (1, 1) *
    inlined: deinterleaved 1
f4 6 8 (1, 1) t gpu_block
 f4 28c 16c (1, 1) t gpu_thread
  f4 8c 4c (1, 1) t gpu_serial
   f4 1c 2vc (1, 1) *
    inlined: deinterleaved 1
f3 82 2 (1, 1) t gpu_block
 f3 2c 31c (1, 1) t gpu_thread
  f3 8c 8c (1, 1) t gpu_serial
   f3 1c 2vc (1, 1) *
    inlined: deinterleaved 1
f7 82 2 (1, 1) t gpu_block
 f7 2c 31c (1, 1) t gpu_thread
  f7 8c 8c (1, 1) t gpu_serial
   f7 1c 2vc (1, 1) *
f11 82 2 (1, 1) t gpu_block
 f11 2c 31c (1, 1) t gpu_thread
  f11 8c 8c (1, 1) t gpu_serial
   f11 1c 2vc (1, 1) *
f13 82 2 (1, 1) t gpu_block
 f13 2c 31c (1, 1) t gpu_thread
  f13 8c 8c (1, 1) t gpu_serial
   f13 1c 2vc (1, 1) *
f12 82 2 (1, 1) t gpu_block
 f12 2c 31c (1, 1) t gpu_thread
  f12 8c 8c (1, 1) t gpu_serial
   f12 1c 2vc (1, 1) *
f17 163 2 (1, 1) t gpu_block
 f17 2c 31c (1, 1) t gpu_thread
  f17 8c 8c (1, 1) t gpu_serial
   f17 1c 2vc (1, 1) *
f9 82 2 (1, 1) t gpu_block
 f9 2c 31c (1, 1) t gpu_thread
  f9 8c 8c (1, 1) t gpu_serial
   f9 1c 2vc (1, 1) *
f18 163 2 (1, 1) t gpu_block
 f18 2c 31c (1, 1) t gpu_thread
  f18 8c 8c (1, 1) t gpu_serial
   f18 1c 2vc (1, 1) *
f19 6 8 (1, 1) t gpu_block
 f19 55c 16c (1, 1) t gpu_thread
  f19 8c 8c (1, 1) t gpu_serial
   f19 1c 2vc (1, 1) *
f5 6 31 (0, 0) t gpu_block
 f5 14c 4c (0, 0) t gpu_thread
  f5 8c 8c (0, 0) t gpu_serial
   f5 2vc 1c (0, 0) *
    inlined: deinterleaved 1
f10 163 31 (1, 1) t gpu_block
 f10 8c 16c (1, 1) t gpu_thread
  f10 1c 1c (1, 1) t gpu_serial
   f10 1c 2vc (1, 1) *
f23 6 62 (0, 0) t gpu_block
 f23 28c 2c (0, 0) t gpu_thread
  f23 8c 8c (0, 0) t gpu_serial
   f23 2vc 1c (0, 0) *
f6 2 62 (0, 0) t gpu_block
 f6 41c 2c (0, 0) t gpu_thread
  f6 8c 8c (0, 0) t gpu_serial
   f6 2vc 1c (0, 0) *
f27 82 62 3c (1, 1) t gpu_block
 f27 32c 16c 1c (1, 1) t gpu_thread
  f27 1c 1c 1c (1, 1) t gpu_serial
   f27 1c 2vc 1c (1, 1) *
    inlined: output 3
    inlined: f25 3
    inlined: f24 3
    inlined: f8 3
    inlined: f22 3
    inlined: f21 3
    inlined: f20 3
f28 3 124 1c (0, 0) t gpu_block
 f28 28c 2c 1c (0, 0) t gpu_thread
  f28 8c 8c 3c (0, 0) t gpu_serial
   f28 4vc 1c 1c (0, 0) *
unsharp_y 2 31 1c (0, 0) t gpu_block
 unsharp_y 41c 8c 1c (0, 0) t gpu_thread
  unsharp_y 8c 8c 3c (0, 0) t gpu_serial
   unsharp_y 4vc 1c 1c (0, 0) *
mask 2592 8 3c (1, 1) t gpu_block
 mask 1c 62c 1c (1, 1) t gpu_thread
  mask 1c 1c 1c (1, 1) t gpu_serial
   mask 1c 4vc 1c (1, 1) *
    inlined: unsharp 1
sharpened 21 31 3c (0, 0) t gpu_block
 sharpened 16c 64c 1c (0, 0) t gpu_thread
  sharpened 2c 1c 1c (0, 0) t gpu_serial
   sharpened 4vc 1c 1c (0, 0) *
    inlined: sharpen_strength_x32 1
processed 41 62 2c (0, 0) t gpu_block
 processed 16c 32c 2c (0, 0) t gpu_thread
  processed 1c 1c 1c (0, 0) t gpu_serial
   processed 4vc 1c 1c (0, 0) *

Pass 2 result:
State with cost 100000000000000007629769841091887003294964970946560.000000:
 gpu_none
realize: processed [2592, 1968, 3c] with 1 stages
realize: sharpened [2592, 1968, 3c] with 1 stages
realize: mask [2592, 1968, 3c] with 1 stages
realize: unsharp_y [2594, 1968, 3c] with 1 stages
realize: f28 [2594, 1970, 3c] with 1 stages
realize: f27 [2594, 1970, 3c] with 1 stages
realize: f6 [1298, 986] with 1 stages
realize: f23 [2594, 986] with 1 stages
realize: f10 [1298, 986] with 1 stages
realize: f5 [1299, 987] with 1 stages
realize: f19 [2594, 1970] with 1 stages
realize: f18 [2594, 986] with 1 stages
realize: f9 [1298, 986] with 1 stages
realize: f17 [2594, 986] with 1 stages
realize: f12 [1298, 986] with 1 stages
realize: f13 [1299, 987] with 1 stages
realize: f11 [1298, 986] with 1 stages
realize: f7 [1299, 987] with 1 stages
realize: f3 [1300, 988] with 1 stages
realize: f4 [1300, 988] with 1 stages
realize: f2 [1299, 987] with 1 stages
realize: f1 [2600, 1976] with 1 stages
realize: f26 [4, 3] with 1 stages
realize: curve [1024] with 1 stages
curve 4 (0, 0) t gpu_block
 curve 64c (0, 0) t gpu_thread
  curve 1c (0, 0) t gpu_serial
   curve 4vc (0, 0) *
f26 1 1 (1, 1) t gpu_block
 f26 2 2 (1, 1) t gpu_thread
  f26 2c 1c (1, 1) t gpu_serial
   f26 1c 2vc (1, 1) *
f1 82 494 (0, 0) t gpu_block
 f1 16c 2c (0, 0) t gpu_thread
  f1 1c 2c (0, 0) t gpu_serial
   f1 2vc 1c (0, 0) *
    inlined: f0 5
f2 325 16 (1, 1) t gpu_block
 f2 4c 31c (1, 1) t gpu_thread
  f2 1c 1c (1, 1) t gpu_serial
   f2 1c 2vc (1, 1) *
    inlined: deinterleaved 1
f4 6 8 (1, 1) t gpu_block
 f4 28c 16c (1, 1) t gpu_thread
  f4 8c 4c (1, 1) t gpu_serial
   f4 1c 2vc (1, 1) *
    inlined: deinterleaved 1
f3 82 2 (1, 1) t gpu_block
 f3 2c 31c (1, 1) t gpu_thread
  f3 8c 8c (1, 1) t gpu_serial
   f3 1c 2vc (1, 1) *
    inlined: deinterleaved 1
f7 82 2 (1, 1) t gpu_block
 f7 2c 31c (1, 1) t gpu_thread
  f7 8c 8c (1, 1) t gpu_serial
   f7 1c 2vc (1, 1) *
f11 82 2 (1, 1) t gpu_block
 f11 2c 31c (1, 1) t gpu_thread
  f11 8c 8c (1, 1) t gpu_serial
   f11 1c 2vc (1, 1) *
f13 82 2 (1, 1) t gpu_block
 f13 2c 31c (1, 1) t gpu_thread
  f13 8c 8c (1, 1) t gpu_serial
   f13 1c 2vc (1, 1) *
f12 82 2 (1, 1) t gpu_block
 f12 2c 31c (1, 1) t gpu_thread
  f12 8c 8c (1, 1) t gpu_serial
   f12 1c 2vc (1, 1) *
f17 163 2 (1, 1) t gpu_block
 f17 2c 31c (1, 1) t gpu_thread
  f17 8c 8c (1, 1) t gpu_serial
   f17 1c 2vc (1, 1) *
f9 82 2 (1, 1) t gpu_block
 f9 2c 31c (1, 1) t gpu_thread
  f9 8c 8c (1, 1) t gpu_serial
   f9 1c 2vc (1, 1) *
f18 163 2 (1, 1) t gpu_block
 f18 2c 31c (1, 1) t gpu_thread
  f18 8c 8c (1, 1) t gpu_serial
   f18 1c 2vc (1, 1) *
f19 6 8 (1, 1) t gpu_block
 f19 55c 16c (1, 1) t gpu_thread
  f19 8c 8c (1, 1) t gpu_serial
   f19 1c 2vc (1, 1) *
f5 6 31 (0, 0) t gpu_block
 f5 14c 4c (0, 0) t gpu_thread
  f5 8c 8c (0, 0) t gpu_serial
   f5 2vc 1c (0, 0) *
    inlined: deinterleaved 1
f10 163 31 (1, 1) t gpu_block
 f10 8c 16c (1, 1) t gpu_thread
  f10 1c 1c (1, 1) t gpu_serial
   f10 1c 2vc (1, 1) *
f23 6 62 (0, 0) t gpu_block
 f23 28c 2c (0, 0) t gpu_thread
  f23 8c 8c (0, 0) t gpu_serial
   f23 2vc 1c (0, 0) *
f6 163 31 (1, 1) t gpu_block
 f6 8c 16c (1, 1) t gpu_thread
  f6 1c 1c (1, 1) t gpu_serial
   f6 1c 2vc (1, 1) *
f27 41 985 1c (2, 2) t gpu_block
 f27 32c 2c 1c (2, 2) t gpu_thread
  f27 2c 1c 2c (2, 2) t gpu_serial
   f27 1c 1c 2vc (2, 2) *
    inlined: output 3
    inlined: f25 3
    inlined: f24 3
    inlined: f8 3
    inlined: f22 3
    inlined: f21 3
    inlined: f20 3
f28 163 8 1c (1, 1) t gpu_block
 f28 16c 62c 1c (1, 1) t gpu_thread
  f28 1c 1c 3c (1, 1) t gpu_serial
   f28 1c 4vc 1c (1, 1) *
unsharp_y 325 31 1c (1, 1) t gpu_block
 unsharp_y 8c 16c 1c (1, 1) t gpu_thread
  unsharp_y 1c 1c 3c (1, 1) t gpu_serial
   unsharp_y 1c 4vc 1c (1, 1) *
mask 21 246 2c (0, 0) t gpu_block
 mask 31c 2c 2c (0, 0) t gpu_thread
  mask 1c 4c 1c (0, 0) t gpu_serial
   mask 4vc 1c 1c (0, 0) *
    inlined: unsharp 1
sharpened 21 31 3c (0, 0) t gpu_block
 sharpened 16c 64c 1c (0, 0) t gpu_thread
  sharpened 2c 1c 1c (0, 0) t gpu_serial
   sharpened 4vc 1c 1c (0, 0) *
    inlined: sharpen_strength_x32 1
processed 41 62 2c (0, 0) t gpu_block
 processed 16c 32c 2c (0, 0) t gpu_thread
  processed 1c 1c 1c (0, 0) t gpu_serial
   processed 4vc 1c 1c (0, 0) *

Pass 3 result:
State with cost 100000000000000007629769841091887003294964970946560.000000:
 gpu_none
realize: processed [2592, 1968, 3c] with 1 stages
realize: sharpened [2592, 1968, 3c] with 1 stages
realize: mask [2592, 1968, 3c] with 1 stages
realize: unsharp_y [2594, 1968, 3c] with 1 stages
realize: f28 [2594, 1970, 3c] with 1 stages
realize: f27 [2594, 1970, 3c] with 1 stages
realize: f6 [1298, 986] with 1 stages
realize: f23 [2594, 986] with 1 stages
realize: f10 [1298, 986] with 1 stages
realize: f5 [1299, 987] with 1 stages
realize: f19 [2594, 1970] with 1 stages
realize: f18 [2594, 986] with 1 stages
realize: f9 [1298, 986] with 1 stages
realize: f17 [2594, 986] with 1 stages
realize: f12 [1298, 986] with 1 stages
realize: f13 [1299, 987] with 1 stages
realize: f11 [1298, 986] with 1 stages
realize: f7 [1299, 987] with 1 stages
realize: f3 [1300, 988] with 1 stages
realize: f4 [1300, 988] with 1 stages
realize: f2 [1299, 987] with 1 stages
realize: f1 [2600, 1976] with 1 stages
realize: f26 [4, 3] with 1 stages
realize: curve [1024] with 1 stages
curve 8 (0, 0) t gpu_block
 curve 16c (0, 0) t gpu_thread
  curve 2c (0, 0) t gpu_serial
   curve 4vc (0, 0) *
f26 1 1 (0, 0) t gpu_block
 f26 1 1 (0, 0) t gpu_thread
  f26 2 3 (0, 0) t gpu_serial
   f26 2vc 1c (0, 0) *
f1 11 62 (0, 0) t gpu_block
 f1 15c 4c (0, 0) t gpu_thread
  f1 8c 8c (0, 0) t gpu_serial
   f1 2vc 1c (0, 0) *
    inlined: f0 5
f2 325 16 (1, 1) t gpu_block
 f2 2c 31c (1, 1) t gpu_thread
  f2 2c 1c (1, 1) t gpu_serial
   f2 1c 2vc (1, 1) *
    inlined: deinterleaved 1
f4 6 8 (1, 1) t gpu_block
 f4 28c 16c (1, 1) t gpu_thread
  f4 8c 4c (1, 1) t gpu_serial
   f4 1c 2vc (1, 1) *
    inlined: deinterleaved 1
f3 82 2 (1, 1) t gpu_block
 f3 2c 62c (1, 1) t gpu_thread
  f3 8c 4c (1, 1) t gpu_serial
   f3 1c 2vc (1, 1) *
    inlined: deinterleaved 1
f7 82 2 (1, 1) t gpu_block
 f7 4c 31c (1, 1) t gpu_thread
  f7 4c 8c (1, 1) t gpu_serial
   f7 1c 2vc (1, 1) *
f11 82 2 (1, 1) t gpu_block
 f11 16c 62c (1, 1) t gpu_thread
  f11 1c 4c (1, 1) t gpu_serial
   f11 1c 2vc (1, 1) *
f13 82 2 (1, 1) t gpu_block
 f13 8c 31c (1, 1) t gpu_thread
  f13 2c 8c (1, 1) t gpu_serial
   f13 1c 2vc (1, 1) *
f12 82 2 (1, 1) t gpu_block
 f12 8c 31c (1, 1) t gpu_thread
  f12 2c 8c (1, 1) t gpu_serial
   f12 1c 2vc (1, 1) *
f17 163 2 (1, 1) t gpu_block
 f17 4c 62c (1, 1) t gpu_thread
  f17 4c 4c (1, 1) t gpu_serial
   f17 1c 2vc (1, 1) *
f9 82 2 (1, 1) t gpu_block
 f9 4c 31c (1, 1) t gpu_thread
  f9 4c 8c (1, 1) t gpu_serial
   f9 1c 2vc (1, 1) *
f18 163 2 (1, 1) t gpu_block
 f18 4c 62c (1, 1) t gpu_thread
  f18 4c 4c (1, 1) t gpu_serial
   f18 1c 2vc (1, 1) *
f19 6 8 (1, 1) t gpu_block
 f19 55c 16c (1, 1) t gpu_thread
  f19 8c 8c (1, 1) t gpu_serial
   f19 1c 2vc (1, 1) *
f5 6 31 (0, 0) t gpu_block
 f5 28c 4c (0, 0) t gpu_thread
  f5 4c 8c (0, 0) t gpu_serial
   f5 2vc 1c (0, 0) *
    inlined: deinterleaved 1
f10 163 31 (1, 1) t gpu_block
 f10 2c 16c (1, 1) t gpu_thread
  f10 4c 1c (1, 1) t gpu_serial
   f10 1c 2vc (1, 1) *
f23 6 62 (0, 0) t gpu_block
 f23 28c 16c (0, 0) t gpu_thread
  f23 8c 1c (0, 0) t gpu_serial
   f23 2vc 1c (0, 0) *
f6 163 31 (1, 1) t gpu_block
 f6 2c 16c (1, 1) t gpu_thread
  f6 4c 1c (1, 1) t gpu_serial
   f6 1c 2vc (1, 1) *
f27 41 985 1c (2, 2) t gpu_block
 f27 8c 1c 1c (2, 2) t gpu_thread
  f27 8c 2c 2c (2, 2) t gpu_serial
   f27 1c 1c 2vc (2, 2) *
    inlined: output 3
    inlined: f25 3
    inlined: f24 3
    inlined: f8 3
    inlined: f22 3
    inlined: f21 3
    inlined: f20 3
f28 163 8 1c (1, 1) t gpu_block
 f28 4c 62c 2c (1, 1) t gpu_thread
  f28 4c 1c 2c (1, 1) t gpu_serial
   f28 1c 4vc 1c (1, 1) *
unsharp_y 325 31 1c (1, 1) t gpu_block
 unsharp_y 1c 16c 1c (1, 1) t gpu_thread
  unsharp_y 8c 1c 3c (1, 1) t gpu_serial
   unsharp_y 1c 4vc 1c (1, 1) *
mask 21 246 2c (0, 0) t gpu_block
 mask 31c 2c 2c (0, 0) t gpu_thread
  mask 1c 4c 1c (0, 0) t gpu_serial
   mask 4vc 1c 1c (0, 0) *
    inlined: unsharp 1
sharpened 21 31 3c (1, 1) t gpu_block
 sharpened 62c 16c 1c (1, 1) t gpu_thread
  sharpened 2c 1c 1c (1, 1) t gpu_serial
   sharpened 1c 4vc 1c (1, 1) *
    inlined: sharpen_strength_x32 1
processed 41 62 2c (0, 0) t gpu_block
 processed 16c 32c 2c (0, 0) t gpu_thread
  processed 1c 1c 1c (0, 0) t gpu_serial
   processed 4vc 1c 1c (0, 0) *

Pass 4 result:
State with cost 100000000000000007629769841091887003294964970946560.000000:
 gpu_none
realize: processed [2592, 1968, 3c] with 1 stages
realize: sharpened [2592, 1968, 3c] with 1 stages
realize: mask [2592, 1968, 3c] with 1 stages
realize: unsharp_y [2594, 1968, 3c] with 1 stages
realize: f28 [2594, 1970, 3c] with 1 stages
realize: f27 [2594, 1970, 3c] with 1 stages
realize: f6 [1298, 986] with 1 stages
realize: f23 [2594, 986] with 1 stages
realize: f10 [1298, 986] with 1 stages
realize: f5 [1299, 987] with 1 stages
realize: f19 [2594, 1970] with 1 stages
realize: f18 [2594, 986] with 1 stages
realize: f9 [1298, 986] with 1 stages
realize: f17 [2594, 986] with 1 stages
realize: f12 [1298, 986] with 1 stages
realize: f13 [1299, 987] with 1 stages
realize: f11 [1298, 986] with 1 stages
realize: f7 [1299, 987] with 1 stages
realize: f3 [1300, 988] with 1 stages
realize: f4 [1300, 988] with 1 stages
realize: f2 [1299, 987] with 1 stages
realize: f1 [2600, 1976] with 1 stages
realize: f26 [4, 3] with 1 stages
realize: curve [1024] with 1 stages
curve 4 (0, 0) t gpu_block
 curve 64c (0, 0) t gpu_thread
  curve 1c (0, 0) t gpu_serial
   curve 4vc (0, 0) *
f26 1 1 (1, 1) t gpu_block
 f26 4 2 (1, 1) t gpu_thread
  f26 1c 1c (1, 1) t gpu_serial
   f26 1c 2vc (1, 1) *
f1 6 8 (0, 0) t gpu_block
 f1 28c 31c (0, 0) t gpu_thread
  f1 8c 8c (0, 0) t gpu_serial
   f1 2vc 1c (0, 0) *
    inlined: f0 5
f2 163 4 (1, 1) t gpu_block
 f2 8c 62c (1, 1) t gpu_thread
  f2 1c 2c (1, 1) t gpu_serial
   f2 1c 2vc (1, 1) *
    inlined: deinterleaved 1
f4 6 8 (1, 1) t gpu_block
 f4 28c 16c (1, 1) t gpu_thread
  f4 8c 4c (1, 1) t gpu_serial
   f4 1c 2vc (1, 1) *
    inlined: deinterleaved 1
f3 82 2 (1, 1) t gpu_block
 f3 2c 62c (1, 1) t gpu_thread
  f3 8c 4c (1, 1) t gpu_serial
   f3 1c 2vc (1, 1) *
    inlined: deinterleaved 1
f7 82 2 (1, 1) t gpu_block
 f7 4c 31c (1, 1) t gpu_thread
  f7 4c 8c (1, 1) t gpu_serial
   f7 1c 2vc (1, 1) *
f11 82 2 (1, 1) t gpu_block
 f11 16c 62c (1, 1) t gpu_thread
  f11 1c 4c (1, 1) t gpu_serial
   f11 1c 2vc (1, 1) *
f13 82 2 (1, 1) t gpu_block
 f13 8c 31c (1, 1) t gpu_thread
  f13 2c 8c (1, 1) t gpu_serial
   f13 1c 2vc (1, 1) *
f12 82 2 (1, 1) t gpu_block
 f12 8c 31c (1, 1) t gpu_thread
  f12 2c 8c (1, 1) t gpu_serial
   f12 1c 2vc (1, 1) *
f17 163 2 (1, 1) t gpu_block
 f17 4c 62c (1, 1) t gpu_thread
  f17 4c 4c (1, 1) t gpu_serial
   f17 1c 2vc (1, 1) *
f9 82 2 (1, 1) t gpu_block
 f9 4c 31c (1, 1) t gpu_thread
  f9 4c 8c (1, 1) t gpu_serial
   f9 1c 2vc (1, 1) *
f18 163 2 (1, 1) t gpu_block
 f18 4c 62c (1, 1) t gpu_thread
  f18 4c 4c (1, 1) t gpu_serial
   f18 1c 2vc (1, 1) *
f19 6 8 (1, 1) t gpu_block
 f19 55c 16c (1, 1) t gpu_thread
  f19 8c 8c (1, 1) t gpu_serial
   f19 1c 2vc (1, 1) *
f5 6 31 (0, 0) t gpu_block
 f5 28c 4c (0, 0) t gpu_thread
  f5 4c 8c (0, 0) t gpu_serial
   f5 2vc 1c (0, 0) *
    inlined: deinterleaved 1
f10 163 31 (1, 1) t gpu_block
 f10 8c 16c (1, 1) t gpu_thread
  f10 1c 1c (1, 1) t gpu_serial
   f10 1c 2vc (1, 1) *
f23 6 62 (0, 0) t gpu_block
 f23 28c 2c (0, 0) t gpu_thread
  f23 8c 8c (0, 0) t gpu_serial
   f23 2vc 1c (0, 0) *
f6 163 31 (1, 1) t gpu_block
 f6 4c 16c (1, 1) t gpu_thread
  f6 2c 1c (1, 1) t gpu_serial
   f6 1c 2vc (1, 1) *
f27 41 985 1c (2, 2) t gpu_block
 f27 32c 1c 1c (2, 2) t gpu_thread
  f27 2c 2c 2c (2, 2) t gpu_serial
   f27 1c 1c 2vc (2, 2) *
    inlined: output 3
    inlined: f25 3
    inlined: f24 3
    inlined: f8 3
    inlined: f22 3
    inlined: f21 3
    inlined: f20 3
f28 163 8 1c (1, 1) t gpu_block
 f28 4c 16c 2c (1, 1) t gpu_thread
  f28 4c 4c 2c (1, 1) t gpu_serial
   f28 1c 4vc 1c (1, 1) *
unsharp_y 325 31 1c (1, 1) t gpu_block
 unsharp_y 1c 16c 1c (1, 1) t gpu_thread
  unsharp_y 8c 1c 3c (1, 1) t gpu_serial
   unsharp_y 1c 4vc 1c (1, 1) *
mask 21 246 2c (0, 0) t gpu_block
 mask 16c 2c 2c (0, 0) t gpu_thread
  mask 2c 4c 1c (0, 0) t gpu_serial
   mask 4vc 1c 1c (0, 0) *
    inlined: unsharp 1
sharpened 21 31 3c (1, 1) t gpu_block
 sharpened 62c 16c 1c (1, 1) t gpu_thread
  sharpened 2c 1c 1c (1, 1) t gpu_serial
   sharpened 1c 4vc 1c (1, 1) *
    inlined: sharpen_strength_x32 1
processed 41 62 2c (0, 0) t gpu_block
 processed 16c 32c 2c (0, 0) t gpu_thread
  processed 1c 1c 1c (0, 0) t gpu_serial
   processed 4vc 1c 1c (0, 0) *
Best cost: 100000000000000007629769841091887003294964970946560.000000
AutoSchedule.cpp:4446 ... AutoSchedule.cpp:4525 : 116837.038908 ms
Cost evaluated this many times: 165845
** Optimal schedule:
Schedule features for processed
    num_realizations:                      1.000000
    num_productions:                       1.000000
    points_computed_per_realization:       15303168.000000
    points_computed_per_production:        15618048.000000
    points_computed_total:                 15303168.000000
    points_computed_minimum:               15303168.000000
    innermost_loop_extent:                 3.000000
    innermost_pure_loop_extent:            3.000000
    unrolled_loop_extent:                  3.000000
    inner_parallelism:                     1271.000000
    outer_parallelism:                     1.000000
    bytes_at_realization:                  15303168.000000
    bytes_at_production:                   15303168.000000
    bytes_at_root:                         15303168.000000
    innermost_bytes_at_realization:        2592.000000
    innermost_bytes_at_production:         2592.000000
    innermost_bytes_at_root:               2592.000000
    inlined_calls:                         0.000000
    unique_bytes_read_per_realization:     15303168.000000
    unique_lines_read_per_realization:     7776.000000
    allocation_bytes_read_per_realization: 15303168.000000
    working_set:                           0.000000
    vector_size:                           4.000000
    native_vector_size:                    4.000000
    num_vectors:                           3825792.000000
    num_scalars:                           0.000000
    scalar_loads_per_vector:               4.000000
    vector_loads_per_vector:               0.000000
    scalar_loads_per_scalar:               1.000000
    bytes_at_task:                         11907.000000
    innermost_bytes_at_task:               63.000000
    unique_bytes_read_per_vector:          4.000000
    unique_lines_read_per_vector:          4.000000
    unique_bytes_read_per_task:            12288.000000
    unique_lines_read_per_task:            192.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             153373408.000000
    working_set_at_realization:            153373408.000000
    working_set_at_root:                   153373408.000000
    num_warps:                             40672.000000
    block_occupancy:                       1.000000
    warp_lane_utilization:                 1.000000
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  0.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 0.000000
Schedule features for sharpened
    num_realizations:                      1.000000
    num_productions:                       1.000000
    points_computed_per_realization:       15303168.000000
    points_computed_per_production:        16121856.000000
    points_computed_total:                 15303168.000000
    points_computed_minimum:               15303168.000000
    innermost_loop_extent:                 2.000000
    innermost_pure_loop_extent:            2.000000
    unrolled_loop_extent:                  2.000000
    inner_parallelism:                     1968.000000
    outer_parallelism:                     1.000000
    bytes_at_realization:                  15303168.000000
    bytes_at_production:                   15303168.000000
    bytes_at_root:                         15303168.000000
    innermost_bytes_at_realization:        1968.000000
    innermost_bytes_at_production:         1968.000000
    innermost_bytes_at_root:               1968.000000
    inlined_calls:                         0.000000
    unique_bytes_read_per_realization:     45936876.000000
    unique_lines_read_per_realization:     13686.000000
    allocation_bytes_read_per_realization: 45936876.000000
    working_set:                           0.000000
    vector_size:                           4.000000
    native_vector_size:                    4.000000
    num_vectors:                           3825792.000000
    num_scalars:                           0.000000
    scalar_loads_per_vector:               4.000000
    vector_loads_per_vector:               1.000000
    scalar_loads_per_scalar:               2.000000
    bytes_at_task:                         7749.000000
    innermost_bytes_at_task:               123.000000
    unique_bytes_read_per_vector:          26.000000
    unique_lines_read_per_vector:          7.000000
    unique_bytes_read_per_task:            23994.000000
    unique_lines_read_per_task:            189.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             153373408.000000
    working_set_at_realization:            153373408.000000
    working_set_at_root:                   153373408.000000
    num_warps:                             62976.000000
    block_occupancy:                       1.000000
    warp_lane_utilization:                 1.000000
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  0.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 0.000000
Schedule features for sharpen_strength_x32
    num_realizations:                      0.000000
    num_productions:                       0.000000
    points_computed_per_realization:       0.000000
    points_computed_per_production:        0.000000
    points_computed_total:                 0.000000
    points_computed_minimum:               1.000000
    innermost_loop_extent:                 0.000000
    innermost_pure_loop_extent:            2.000000
    unrolled_loop_extent:                  0.000000
    inner_parallelism:                     1.000000
    outer_parallelism:                     1968.000000
    bytes_at_realization:                  0.000000
    bytes_at_production:                   0.000000
    bytes_at_root:                         1.000000
    innermost_bytes_at_realization:        0.000000
    innermost_bytes_at_production:         0.000000
    innermost_bytes_at_root:               1.000000
    inlined_calls:                         16121856.000000
    unique_bytes_read_per_realization:     0.000000
    unique_lines_read_per_realization:     0.000000
    allocation_bytes_read_per_realization: 0.000000
    working_set:                           0.000000
    vector_size:                           4.000000
    native_vector_size:                    4.000000
    num_vectors:                           3825792.000000
    num_scalars:                           0.000000
    scalar_loads_per_vector:               0.000000
    vector_loads_per_vector:               0.000000
    scalar_loads_per_scalar:               0.000000
    bytes_at_task:                         0.000000
    innermost_bytes_at_task:               0.000000
    unique_bytes_read_per_vector:          0.000000
    unique_lines_read_per_vector:          0.000000
    unique_bytes_read_per_task:            0.000000
    unique_lines_read_per_task:            0.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             0.000000
    working_set_at_realization:            0.000000
    working_set_at_root:                   153373408.000000
    num_warps:                             0.000000
    block_occupancy:                       0.000000
    warp_lane_utilization:                 0.000000
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  0.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 0.000000
Schedule features for mask
    num_realizations:                      1.000000
    num_productions:                       1.000000
    points_computed_per_realization:       15303168.000000
    points_computed_per_production:        20570112.000000
    points_computed_total:                 15303168.000000
    points_computed_minimum:               15303168.000000
    innermost_loop_extent:                 8.000000
    innermost_pure_loop_extent:            8.000000
    unrolled_loop_extent:                  8.000000
    inner_parallelism:                     5184.000000
    outer_parallelism:                     1.000000
    bytes_at_realization:                  30606336.000000
    bytes_at_production:                   30606336.000000
    bytes_at_root:                         30606336.000000
    innermost_bytes_at_realization:        3936.000000
    innermost_bytes_at_production:         3936.000000
    innermost_bytes_at_root:               3936.000000
    inlined_calls:                         0.000000
    unique_bytes_read_per_realization:     30645516.000000
    unique_lines_read_per_realization:     13692.000000
    allocation_bytes_read_per_realization: 30645516.000000
    working_set:                           0.000000
    vector_size:                           4.000000
    native_vector_size:                    4.000000
    num_vectors:                           3825792.000000
    num_scalars:                           0.000000
    scalar_loads_per_vector:               4.000000
    vector_loads_per_vector:               3.000000
    scalar_loads_per_scalar:               4.000000
    bytes_at_task:                         5904.000000
    innermost_bytes_at_task:               492.000000
    unique_bytes_read_per_vector:          30.000000
    unique_lines_read_per_vector:          9.000000
    unique_bytes_read_per_task:            8892.000000
    unique_lines_read_per_task:            762.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             153373408.000000
    working_set_at_realization:            153373408.000000
    working_set_at_root:                   153373408.000000
    num_warps:                             20736.000000
    block_occupancy:                       0.121094
    warp_lane_utilization:                 0.968750
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  0.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 0.000000
Schedule features for unsharp
    num_realizations:                      0.000000
    num_productions:                       0.000000
    points_computed_per_realization:       0.000000
    points_computed_per_production:        0.000000
    points_computed_total:                 0.000000
    points_computed_minimum:               15303168.000000
    innermost_loop_extent:                 0.000000
    innermost_pure_loop_extent:            8.000000
    unrolled_loop_extent:                  0.000000
    inner_parallelism:                     1.000000
    outer_parallelism:                     5184.000000
    bytes_at_realization:                  0.000000
    bytes_at_production:                   0.000000
    bytes_at_root:                         15303168.000000
    innermost_bytes_at_realization:        0.000000
    innermost_bytes_at_production:         0.000000
    innermost_bytes_at_root:               1968.000000
    inlined_calls:                         20570112.000000
    unique_bytes_read_per_realization:     0.000000
    unique_lines_read_per_realization:     0.000000
    allocation_bytes_read_per_realization: 0.000000
    working_set:                           0.000000
    vector_size:                           4.000000
    native_vector_size:                    4.000000
    num_vectors:                           3825792.000000
    num_scalars:                           0.000000
    scalar_loads_per_vector:               0.000000
    vector_loads_per_vector:               0.000000
    scalar_loads_per_scalar:               0.000000
    bytes_at_task:                         0.000000
    innermost_bytes_at_task:               0.000000
    unique_bytes_read_per_vector:          0.000000
    unique_lines_read_per_vector:          0.000000
    unique_bytes_read_per_task:            0.000000
    unique_lines_read_per_task:            0.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             0.000000
    working_set_at_realization:            0.000000
    working_set_at_root:                   153373408.000000
    num_warps:                             0.000000
    block_occupancy:                       0.000000
    warp_lane_utilization:                 0.000000
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  0.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 0.000000
Schedule features for unsharp_y
    num_realizations:                      1.000000
    num_productions:                       1.000000
    points_computed_per_realization:       15314976.000000
    points_computed_per_production:        20633600.000000
    points_computed_total:                 15314976.000000
    points_computed_minimum:               15314976.000000
    innermost_loop_extent:                 8.000000
    innermost_pure_loop_extent:            8.000000
    unrolled_loop_extent:                  8.000000
    inner_parallelism:                     5200.000000
    outer_parallelism:                     1.000000
    bytes_at_realization:                  15314976.000000
    bytes_at_production:                   15314976.000000
    bytes_at_root:                         15314976.000000
    innermost_bytes_at_realization:        1968.000000
    innermost_bytes_at_production:         1968.000000
    innermost_bytes_at_root:               1968.000000
    inlined_calls:                         0.000000
    unique_bytes_read_per_realization:     15330540.000000
    unique_lines_read_per_realization:     5910.000000
    allocation_bytes_read_per_realization: 15330540.000000
    working_set:                           0.000000
    vector_size:                           4.000000
    native_vector_size:                    4.000000
    num_vectors:                           3828744.000000
    num_scalars:                           0.000000
    scalar_loads_per_vector:               12.000000
    vector_loads_per_vector:               0.000000
    scalar_loads_per_scalar:               3.000000
    bytes_at_task:                         1722.000000
    innermost_bytes_at_task:               246.000000
    unique_bytes_read_per_vector:          6.000000
    unique_lines_read_per_vector:          6.000000
    unique_bytes_read_per_task:            3968.000000
    unique_lines_read_per_task:            496.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             153373408.000000
    working_set_at_realization:            153373408.000000
    working_set_at_root:                   153373408.000000
    num_warps:                             20800.000000
    block_occupancy:                       0.121094
    warp_lane_utilization:                 0.968750
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  0.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 0.000000
Schedule features for f28
    num_realizations:                      1.000000
    num_productions:                       1.000000
    points_computed_per_realization:       15330540.000000
    points_computed_per_production:        15602400.000000
    points_computed_total:                 15330540.000000
    points_computed_minimum:               15330540.000000
    innermost_loop_extent:                 4.000000
    innermost_pure_loop_extent:            4.000000
    unrolled_loop_extent:                  4.000000
    inner_parallelism:                     32505.000000
    outer_parallelism:                     1.000000
    bytes_at_realization:                  15330540.000000
    bytes_at_production:                   15330540.000000
    bytes_at_root:                         15330540.000000
    innermost_bytes_at_realization:        2594.000000
    innermost_bytes_at_production:         2594.000000
    innermost_bytes_at_root:               2594.000000
    inlined_calls:                         0.000000
    unique_bytes_read_per_realization:     30662104.000000
    unique_lines_read_per_realization:     7783.000000
    allocation_bytes_read_per_realization: 30662104.000000
    working_set:                           0.000000
    vector_size:                           4.000000
    native_vector_size:                    4.000000
    num_vectors:                           3829680.000000
    num_scalars:                           11820.000000
    scalar_loads_per_vector:               8.000000
    vector_loads_per_vector:               0.000000
    scalar_loads_per_scalar:               2.000000
    bytes_at_task:                         470.000000
    innermost_bytes_at_task:               235.000000
    unique_bytes_read_per_vector:          1032.000000
    unique_lines_read_per_vector:          5.000000
    unique_bytes_read_per_task:            1968.000000
    unique_lines_read_per_task:            237.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             153373408.000000
    working_set_at_realization:            153373408.000000
    working_set_at_root:                   153373408.000000
    num_warps:                             32505.000000
    block_occupancy:                       0.029297
    warp_lane_utilization:                 0.937500
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  975150.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 0.000000
Schedule features for f27
    num_realizations:                      1.000000
    num_productions:                       1.000000
    points_computed_per_realization:       15330540.000000
    points_computed_per_production:        16220160.000000
    points_computed_total:                 15330540.000000
    points_computed_minimum:               15330540.000000
    innermost_loop_extent:                 192.000000
    innermost_pure_loop_extent:            192.000000
    unrolled_loop_extent:                  1.000000
    inner_parallelism:                     48.000000
    outer_parallelism:                     1.000000
    bytes_at_realization:                  30661080.000000
    bytes_at_production:                   30661080.000000
    bytes_at_root:                         30661080.000000
    innermost_bytes_at_realization:        3940.000000
    innermost_bytes_at_production:         3940.000000
    innermost_bytes_at_root:               3940.000000
    inlined_calls:                         0.000000
    unique_bytes_read_per_realization:     20541276.000000
    unique_lines_read_per_realization:     7489.000000
    allocation_bytes_read_per_realization: 20541276.000000
    working_set:                           0.000000
    vector_size:                           2.000000
    native_vector_size:                    2.000000
    num_vectors:                           7665270.000000
    num_scalars:                           0.000000
    scalar_loads_per_vector:               24.000000
    vector_loads_per_vector:               0.000000
    scalar_loads_per_scalar:               18.000000
    bytes_at_task:                         637632.000000
    innermost_bytes_at_task:               492.000000
    unique_bytes_read_per_vector:          192.000000
    unique_lines_read_per_vector:          20.000000
    unique_bytes_read_per_task:            440152.000000
    unique_lines_read_per_task:            1222.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             153373408.000000
    working_set_at_realization:            153373408.000000
    working_set_at_root:                   153373408.000000
    num_warps:                             1344.000000
    block_occupancy:                       0.859375
    warp_lane_utilization:                 0.982143
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  16128.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 0.000000
Schedule features for output
    num_realizations:                      0.000000
    num_productions:                       0.000000
    points_computed_per_realization:       0.000000
    points_computed_per_production:        0.000000
    points_computed_total:                 0.000000
    points_computed_minimum:               15330540.000000
    innermost_loop_extent:                 0.000000
    innermost_pure_loop_extent:            192.000000
    unrolled_loop_extent:                  0.000000
    inner_parallelism:                     1.000000
    outer_parallelism:                     48.000000
    bytes_at_realization:                  0.000000
    bytes_at_production:                   0.000000
    bytes_at_root:                         30661080.000000
    innermost_bytes_at_realization:        0.000000
    innermost_bytes_at_production:         0.000000
    innermost_bytes_at_root:               3940.000000
    inlined_calls:                         48660480.000000
    unique_bytes_read_per_realization:     0.000000
    unique_lines_read_per_realization:     0.000000
    allocation_bytes_read_per_realization: 0.000000
    working_set:                           0.000000
    vector_size:                           2.000000
    native_vector_size:                    2.000000
    num_vectors:                           22995810.000000
    num_scalars:                           0.000000
    scalar_loads_per_vector:               0.000000
    vector_loads_per_vector:               0.000000
    scalar_loads_per_scalar:               0.000000
    bytes_at_task:                         0.000000
    innermost_bytes_at_task:               0.000000
    unique_bytes_read_per_vector:          0.000000
    unique_lines_read_per_vector:          0.000000
    unique_bytes_read_per_task:            0.000000
    unique_lines_read_per_task:            0.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             0.000000
    working_set_at_realization:            0.000000
    working_set_at_root:                   153373408.000000
    num_warps:                             0.000000
    block_occupancy:                       0.000000
    warp_lane_utilization:                 0.000000
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  0.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 0.000000
Schedule features for f25
    num_realizations:                      0.000000
    num_productions:                       0.000000
    points_computed_per_realization:       0.000000
    points_computed_per_production:        0.000000
    points_computed_total:                 0.000000
    points_computed_minimum:               5110180.000000
    innermost_loop_extent:                 0.000000
    innermost_pure_loop_extent:            192.000000
    unrolled_loop_extent:                  0.000000
    inner_parallelism:                     1.000000
    outer_parallelism:                     48.000000
    bytes_at_realization:                  0.000000
    bytes_at_production:                   0.000000
    bytes_at_root:                         10220360.000000
    innermost_bytes_at_realization:        0.000000
    innermost_bytes_at_production:         0.000000
    innermost_bytes_at_root:               3940.000000
    inlined_calls:                         48660480.000000
    unique_bytes_read_per_realization:     0.000000
    unique_lines_read_per_realization:     0.000000
    allocation_bytes_read_per_realization: 0.000000
    working_set:                           0.000000
    vector_size:                           2.000000
    native_vector_size:                    2.000000
    num_vectors:                           22995810.000000
    num_scalars:                           0.000000
    scalar_loads_per_vector:               0.000000
    vector_loads_per_vector:               0.000000
    scalar_loads_per_scalar:               0.000000
    bytes_at_task:                         0.000000
    innermost_bytes_at_task:               0.000000
    unique_bytes_read_per_vector:          0.000000
    unique_lines_read_per_vector:          0.000000
    unique_bytes_read_per_task:            0.000000
    unique_lines_read_per_task:            0.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             0.000000
    working_set_at_realization:            0.000000
    working_set_at_root:                   153373408.000000
    num_warps:                             0.000000
    block_occupancy:                       0.000000
    warp_lane_utilization:                 0.000000
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  0.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 0.000000
Schedule features for f24
    num_realizations:                      0.000000
    num_productions:                       0.000000
    points_computed_per_realization:       0.000000
    points_computed_per_production:        0.000000
    points_computed_total:                 0.000000
    points_computed_minimum:               2557684.000000
    innermost_loop_extent:                 0.000000
    innermost_pure_loop_extent:            192.000000
    unrolled_loop_extent:                  0.000000
    inner_parallelism:                     1.000000
    outer_parallelism:                     48.000000
    bytes_at_realization:                  0.000000
    bytes_at_production:                   0.000000
    bytes_at_root:                         5115368.000000
    innermost_bytes_at_realization:        0.000000
    innermost_bytes_at_production:         0.000000
    innermost_bytes_at_root:               1972.000000
    inlined_calls:                         48660480.000000
    unique_bytes_read_per_realization:     0.000000
    unique_lines_read_per_realization:     0.000000
    allocation_bytes_read_per_realization: 0.000000
    working_set:                           0.000000
    vector_size:                           2.000000
    native_vector_size:                    2.000000
    num_vectors:                           22995810.000000
    num_scalars:                           0.000000
    scalar_loads_per_vector:               0.000000
    vector_loads_per_vector:               0.000000
    scalar_loads_per_scalar:               0.000000
    bytes_at_task:                         0.000000
    innermost_bytes_at_task:               0.000000
    unique_bytes_read_per_vector:          0.000000
    unique_lines_read_per_vector:          0.000000
    unique_bytes_read_per_task:            0.000000
    unique_lines_read_per_task:            0.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             0.000000
    working_set_at_realization:            0.000000
    working_set_at_root:                   153373408.000000
    num_warps:                             0.000000
    block_occupancy:                       0.000000
    warp_lane_utilization:                 0.000000
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  0.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 0.000000
Schedule features for f8
    num_realizations:                      0.000000
    num_productions:                       0.000000
    points_computed_per_realization:       0.000000
    points_computed_per_production:        0.000000
    points_computed_total:                 0.000000
    points_computed_minimum:               1279828.000000
    innermost_loop_extent:                 0.000000
    innermost_pure_loop_extent:            192.000000
    unrolled_loop_extent:                  0.000000
    inner_parallelism:                     1.000000
    outer_parallelism:                     48.000000
    bytes_at_realization:                  0.000000
    bytes_at_production:                   0.000000
    bytes_at_root:                         2559656.000000
    innermost_bytes_at_realization:        0.000000
    innermost_bytes_at_production:         0.000000
    innermost_bytes_at_root:               1972.000000
    inlined_calls:                         48660480.000000
    unique_bytes_read_per_realization:     0.000000
    unique_lines_read_per_realization:     0.000000
    allocation_bytes_read_per_realization: 0.000000
    working_set:                           0.000000
    vector_size:                           2.000000
    native_vector_size:                    2.000000
    num_vectors:                           22995810.000000
    num_scalars:                           0.000000
    scalar_loads_per_vector:               0.000000
    vector_loads_per_vector:               0.000000
    scalar_loads_per_scalar:               0.000000
    bytes_at_task:                         0.000000
    innermost_bytes_at_task:               0.000000
    unique_bytes_read_per_vector:          0.000000
    unique_lines_read_per_vector:          0.000000
    unique_bytes_read_per_task:            0.000000
    unique_lines_read_per_task:            0.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             0.000000
    working_set_at_realization:            0.000000
    working_set_at_root:                   153373408.000000
    num_warps:                             0.000000
    block_occupancy:                       0.000000
    warp_lane_utilization:                 0.000000
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  0.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 0.000000
Schedule features for f6
    num_realizations:                      0.000000
    num_productions:                       0.000000
    points_computed_per_realization:       0.000000
    points_computed_per_production:        0.000000
    points_computed_total:                 0.000000
    points_computed_minimum:               1279828.000000
    innermost_loop_extent:                 0.000000
    innermost_pure_loop_extent:            192.000000
    unrolled_loop_extent:                  0.000000
    inner_parallelism:                     1.000000
    outer_parallelism:                     48.000000
    bytes_at_realization:                  0.000000
    bytes_at_production:                   0.000000
    bytes_at_root:                         2559656.000000
    innermost_bytes_at_realization:        0.000000
    innermost_bytes_at_production:         0.000000
    innermost_bytes_at_root:               1972.000000
    inlined_calls:                         48660480.000000
    unique_bytes_read_per_realization:     0.000000
    unique_lines_read_per_realization:     0.000000
    allocation_bytes_read_per_realization: 0.000000
    working_set:                           0.000000
    vector_size:                           2.000000
    native_vector_size:                    2.000000
    num_vectors:                           22995810.000000
    num_scalars:                           0.000000
    scalar_loads_per_vector:               0.000000
    vector_loads_per_vector:               0.000000
    scalar_loads_per_scalar:               0.000000
    bytes_at_task:                         0.000000
    innermost_bytes_at_task:               0.000000
    unique_bytes_read_per_vector:          0.000000
    unique_lines_read_per_vector:          0.000000
    unique_bytes_read_per_task:            0.000000
    unique_lines_read_per_task:            0.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             0.000000
    working_set_at_realization:            0.000000
    working_set_at_root:                   153373408.000000
    num_warps:                             0.000000
    block_occupancy:                       0.000000
    warp_lane_utilization:                 0.000000
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  0.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 0.000000
Schedule features for f23
    num_realizations:                      0.000000
    num_productions:                       0.000000
    points_computed_per_realization:       0.000000
    points_computed_per_production:        0.000000
    points_computed_total:                 0.000000
    points_computed_minimum:               2557684.000000
    innermost_loop_extent:                 0.000000
    innermost_pure_loop_extent:            192.000000
    unrolled_loop_extent:                  0.000000
    inner_parallelism:                     1.000000
    outer_parallelism:                     48.000000
    bytes_at_realization:                  0.000000
    bytes_at_production:                   0.000000
    bytes_at_root:                         5115368.000000
    innermost_bytes_at_realization:        0.000000
    innermost_bytes_at_production:         0.000000
    innermost_bytes_at_root:               1972.000000
    inlined_calls:                         48660480.000000
    unique_bytes_read_per_realization:     0.000000
    unique_lines_read_per_realization:     0.000000
    allocation_bytes_read_per_realization: 0.000000
    working_set:                           0.000000
    vector_size:                           2.000000
    native_vector_size:                    2.000000
    num_vectors:                           22995810.000000
    num_scalars:                           0.000000
    scalar_loads_per_vector:               0.000000
    vector_loads_per_vector:               0.000000
    scalar_loads_per_scalar:               0.000000
    bytes_at_task:                         0.000000
    innermost_bytes_at_task:               0.000000
    unique_bytes_read_per_vector:          0.000000
    unique_lines_read_per_vector:          0.000000
    unique_bytes_read_per_task:            0.000000
    unique_lines_read_per_task:            0.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             0.000000
    working_set_at_realization:            0.000000
    working_set_at_root:                   153373408.000000
    num_warps:                             0.000000
    block_occupancy:                       0.000000
    warp_lane_utilization:                 0.000000
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  0.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 0.000000
Schedule features for f10
    num_realizations:                      0.000000
    num_productions:                       0.000000
    points_computed_per_realization:       0.000000
    points_computed_per_production:        0.000000
    points_computed_total:                 0.000000
    points_computed_minimum:               1279828.000000
    innermost_loop_extent:                 0.000000
    innermost_pure_loop_extent:            192.000000
    unrolled_loop_extent:                  0.000000
    inner_parallelism:                     1.000000
    outer_parallelism:                     48.000000
    bytes_at_realization:                  0.000000
    bytes_at_production:                   0.000000
    bytes_at_root:                         2559656.000000
    innermost_bytes_at_realization:        0.000000
    innermost_bytes_at_production:         0.000000
    innermost_bytes_at_root:               1972.000000
    inlined_calls:                         48660480.000000
    unique_bytes_read_per_realization:     0.000000
    unique_lines_read_per_realization:     0.000000
    allocation_bytes_read_per_realization: 0.000000
    working_set:                           0.000000
    vector_size:                           2.000000
    native_vector_size:                    2.000000
    num_vectors:                           22995810.000000
    num_scalars:                           0.000000
    scalar_loads_per_vector:               0.000000
    vector_loads_per_vector:               0.000000
    scalar_loads_per_scalar:               0.000000
    bytes_at_task:                         0.000000
    innermost_bytes_at_task:               0.000000
    unique_bytes_read_per_vector:          0.000000
    unique_lines_read_per_vector:          0.000000
    unique_bytes_read_per_task:            0.000000
    unique_lines_read_per_task:            0.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             0.000000
    working_set_at_realization:            0.000000
    working_set_at_root:                   153373408.000000
    num_warps:                             0.000000
    block_occupancy:                       0.000000
    warp_lane_utilization:                 0.000000
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  0.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 0.000000
Schedule features for f5
    num_realizations:                      0.000000
    num_productions:                       0.000000
    points_computed_per_realization:       0.000000
    points_computed_per_production:        0.000000
    points_computed_total:                 0.000000
    points_computed_minimum:               1282113.000000
    innermost_loop_extent:                 0.000000
    innermost_pure_loop_extent:            192.000000
    unrolled_loop_extent:                  0.000000
    inner_parallelism:                     1.000000
    outer_parallelism:                     48.000000
    bytes_at_realization:                  0.000000
    bytes_at_production:                   0.000000
    bytes_at_root:                         2564226.000000
    innermost_bytes_at_realization:        0.000000
    innermost_bytes_at_production:         0.000000
    innermost_bytes_at_root:               1974.000000
    inlined_calls:                         437944320.000000
    unique_bytes_read_per_realization:     0.000000
    unique_lines_read_per_realization:     0.000000
    allocation_bytes_read_per_realization: 0.000000
    working_set:                           0.000000
    vector_size:                           2.000000
    native_vector_size:                    2.000000
    num_vectors:                           206962290.000000
    num_scalars:                           0.000000
    scalar_loads_per_vector:               0.000000
    vector_loads_per_vector:               0.000000
    scalar_loads_per_scalar:               0.000000
    bytes_at_task:                         0.000000
    innermost_bytes_at_task:               0.000000
    unique_bytes_read_per_vector:          0.000000
    unique_lines_read_per_vector:          0.000000
    unique_bytes_read_per_task:            0.000000
    unique_lines_read_per_task:            0.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             0.000000
    working_set_at_realization:            0.000000
    working_set_at_root:                   153373408.000000
    num_warps:                             0.000000
    block_occupancy:                       0.000000
    warp_lane_utilization:                 0.000000
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  0.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 0.000000
Schedule features for f22
    num_realizations:                      0.000000
    num_productions:                       0.000000
    points_computed_per_realization:       0.000000
    points_computed_per_production:        0.000000
    points_computed_total:                 0.000000
    points_computed_minimum:               5110180.000000
    innermost_loop_extent:                 0.000000
    innermost_pure_loop_extent:            192.000000
    unrolled_loop_extent:                  0.000000
    inner_parallelism:                     1.000000
    outer_parallelism:                     48.000000
    bytes_at_realization:                  0.000000
    bytes_at_production:                   0.000000
    bytes_at_root:                         10220360.000000
    innermost_bytes_at_realization:        0.000000
    innermost_bytes_at_production:         0.000000
    innermost_bytes_at_root:               3940.000000
    inlined_calls:                         48660480.000000
    unique_bytes_read_per_realization:     0.000000
    unique_lines_read_per_realization:     0.000000
    allocation_bytes_read_per_realization: 0.000000
    working_set:                           0.000000
    vector_size:                           2.000000
    native_vector_size:                    2.000000
    num_vectors:                           22995810.000000
    num_scalars:                           0.000000
    scalar_loads_per_vector:               0.000000
    vector_loads_per_vector:               0.000000
    scalar_loads_per_scalar:               0.000000
    bytes_at_task:                         0.000000
    innermost_bytes_at_task:               0.000000
    unique_bytes_read_per_vector:          0.000000
    unique_lines_read_per_vector:          0.000000
    unique_bytes_read_per_task:            0.000000
    unique_lines_read_per_task:            0.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             0.000000
    working_set_at_realization:            0.000000
    working_set_at_root:                   153373408.000000
    num_warps:                             0.000000
    block_occupancy:                       0.000000
    warp_lane_utilization:                 0.000000
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  0.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 0.000000
Schedule features for f21
    num_realizations:                      0.000000
    num_productions:                       0.000000
    points_computed_per_realization:       0.000000
    points_computed_per_production:        0.000000
    points_computed_total:                 0.000000
    points_computed_minimum:               2557684.000000
    innermost_loop_extent:                 0.000000
    innermost_pure_loop_extent:            192.000000
    unrolled_loop_extent:                  0.000000
    inner_parallelism:                     1.000000
    outer_parallelism:                     48.000000
    bytes_at_realization:                  0.000000
    bytes_at_production:                   0.000000
    bytes_at_root:                         5115368.000000
    innermost_bytes_at_realization:        0.000000
    innermost_bytes_at_production:         0.000000
    innermost_bytes_at_root:               1972.000000
    inlined_calls:                         48660480.000000
    unique_bytes_read_per_realization:     0.000000
    unique_lines_read_per_realization:     0.000000
    allocation_bytes_read_per_realization: 0.000000
    working_set:                           0.000000
    vector_size:                           2.000000
    native_vector_size:                    2.000000
    num_vectors:                           22995810.000000
    num_scalars:                           0.000000
    scalar_loads_per_vector:               0.000000
    vector_loads_per_vector:               0.000000
    scalar_loads_per_scalar:               0.000000
    bytes_at_task:                         0.000000
    innermost_bytes_at_task:               0.000000
    unique_bytes_read_per_vector:          0.000000
    unique_lines_read_per_vector:          0.000000
    unique_bytes_read_per_task:            0.000000
    unique_lines_read_per_task:            0.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             0.000000
    working_set_at_realization:            0.000000
    working_set_at_root:                   153373408.000000
    num_warps:                             0.000000
    block_occupancy:                       0.000000
    warp_lane_utilization:                 0.000000
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  0.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 0.000000
Schedule features for f20
    num_realizations:                      0.000000
    num_productions:                       0.000000
    points_computed_per_realization:       0.000000
    points_computed_per_production:        0.000000
    points_computed_total:                 0.000000
    points_computed_minimum:               2557684.000000
    innermost_loop_extent:                 0.000000
    innermost_pure_loop_extent:            192.000000
    unrolled_loop_extent:                  0.000000
    inner_parallelism:                     1.000000
    outer_parallelism:                     48.000000
    bytes_at_realization:                  0.000000
    bytes_at_production:                   0.000000
    bytes_at_root:                         5115368.000000
    innermost_bytes_at_realization:        0.000000
    innermost_bytes_at_production:         0.000000
    innermost_bytes_at_root:               1972.000000
    inlined_calls:                         48660480.000000
    unique_bytes_read_per_realization:     0.000000
    unique_lines_read_per_realization:     0.000000
    allocation_bytes_read_per_realization: 0.000000
    working_set:                           0.000000
    vector_size:                           2.000000
    native_vector_size:                    2.000000
    num_vectors:                           22995810.000000
    num_scalars:                           0.000000
    scalar_loads_per_vector:               0.000000
    vector_loads_per_vector:               0.000000
    scalar_loads_per_scalar:               0.000000
    bytes_at_task:                         0.000000
    innermost_bytes_at_task:               0.000000
    unique_bytes_read_per_vector:          0.000000
    unique_lines_read_per_vector:          0.000000
    unique_bytes_read_per_task:            0.000000
    unique_lines_read_per_task:            0.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             0.000000
    working_set_at_realization:            0.000000
    working_set_at_root:                   153373408.000000
    num_warps:                             0.000000
    block_occupancy:                       0.000000
    warp_lane_utilization:                 0.000000
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  0.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 0.000000
Schedule features for f19
    num_realizations:                      0.000000
    num_productions:                       0.000000
    points_computed_per_realization:       0.000000
    points_computed_per_production:        0.000000
    points_computed_total:                 0.000000
    points_computed_minimum:               5110180.000000
    innermost_loop_extent:                 0.000000
    innermost_pure_loop_extent:            192.000000
    unrolled_loop_extent:                  0.000000
    inner_parallelism:                     1.000000
    outer_parallelism:                     48.000000
    bytes_at_realization:                  0.000000
    bytes_at_production:                   0.000000
    bytes_at_root:                         10220360.000000
    innermost_bytes_at_realization:        0.000000
    innermost_bytes_at_production:         0.000000
    innermost_bytes_at_root:               3940.000000
    inlined_calls:                         48660480.000000
    unique_bytes_read_per_realization:     0.000000
    unique_lines_read_per_realization:     0.000000
    allocation_bytes_read_per_realization: 0.000000
    working_set:                           0.000000
    vector_size:                           2.000000
    native_vector_size:                    2.000000
    num_vectors:                           22995810.000000
    num_scalars:                           0.000000
    scalar_loads_per_vector:               0.000000
    vector_loads_per_vector:               0.000000
    scalar_loads_per_scalar:               0.000000
    bytes_at_task:                         0.000000
    innermost_bytes_at_task:               0.000000
    unique_bytes_read_per_vector:          0.000000
    unique_lines_read_per_vector:          0.000000
    unique_bytes_read_per_task:            0.000000
    unique_lines_read_per_task:            0.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             0.000000
    working_set_at_realization:            0.000000
    working_set_at_root:                   153373408.000000
    num_warps:                             0.000000
    block_occupancy:                       0.000000
    warp_lane_utilization:                 0.000000
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  0.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 0.000000
Schedule features for f18
    num_realizations:                      0.000000
    num_productions:                       0.000000
    points_computed_per_realization:       0.000000
    points_computed_per_production:        0.000000
    points_computed_total:                 0.000000
    points_computed_minimum:               2557684.000000
    innermost_loop_extent:                 0.000000
    innermost_pure_loop_extent:            192.000000
    unrolled_loop_extent:                  0.000000
    inner_parallelism:                     1.000000
    outer_parallelism:                     48.000000
    bytes_at_realization:                  0.000000
    bytes_at_production:                   0.000000
    bytes_at_root:                         5115368.000000
    innermost_bytes_at_realization:        0.000000
    innermost_bytes_at_production:         0.000000
    innermost_bytes_at_root:               1972.000000
    inlined_calls:                         48660480.000000
    unique_bytes_read_per_realization:     0.000000
    unique_lines_read_per_realization:     0.000000
    allocation_bytes_read_per_realization: 0.000000
    working_set:                           0.000000
    vector_size:                           2.000000
    native_vector_size:                    2.000000
    num_vectors:                           22995810.000000
    num_scalars:                           0.000000
    scalar_loads_per_vector:               0.000000
    vector_loads_per_vector:               0.000000
    scalar_loads_per_scalar:               0.000000
    bytes_at_task:                         0.000000
    innermost_bytes_at_task:               0.000000
    unique_bytes_read_per_vector:          0.000000
    unique_lines_read_per_vector:          0.000000
    unique_bytes_read_per_task:            0.000000
    unique_lines_read_per_task:            0.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             0.000000
    working_set_at_realization:            0.000000
    working_set_at_root:                   153373408.000000
    num_warps:                             0.000000
    block_occupancy:                       0.000000
    warp_lane_utilization:                 0.000000
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  0.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 0.000000
Schedule features for f9
    num_realizations:                      0.000000
    num_productions:                       0.000000
    points_computed_per_realization:       0.000000
    points_computed_per_production:        0.000000
    points_computed_total:                 0.000000
    points_computed_minimum:               1279828.000000
    innermost_loop_extent:                 0.000000
    innermost_pure_loop_extent:            192.000000
    unrolled_loop_extent:                  0.000000
    inner_parallelism:                     1.000000
    outer_parallelism:                     48.000000
    bytes_at_realization:                  0.000000
    bytes_at_production:                   0.000000
    bytes_at_root:                         2559656.000000
    innermost_bytes_at_realization:        0.000000
    innermost_bytes_at_production:         0.000000
    innermost_bytes_at_root:               1972.000000
    inlined_calls:                         48660480.000000
    unique_bytes_read_per_realization:     0.000000
    unique_lines_read_per_realization:     0.000000
    allocation_bytes_read_per_realization: 0.000000
    working_set:                           0.000000
    vector_size:                           2.000000
    native_vector_size:                    2.000000
    num_vectors:                           22995810.000000
    num_scalars:                           0.000000
    scalar_loads_per_vector:               0.000000
    vector_loads_per_vector:               0.000000
    scalar_loads_per_scalar:               0.000000
    bytes_at_task:                         0.000000
    innermost_bytes_at_task:               0.000000
    unique_bytes_read_per_vector:          0.000000
    unique_lines_read_per_vector:          0.000000
    unique_bytes_read_per_task:            0.000000
    unique_lines_read_per_task:            0.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             0.000000
    working_set_at_realization:            0.000000
    working_set_at_root:                   153373408.000000
    num_warps:                             0.000000
    block_occupancy:                       0.000000
    warp_lane_utilization:                 0.000000
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  0.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 0.000000
Schedule features for f17
    num_realizations:                      0.000000
    num_productions:                       0.000000
    points_computed_per_realization:       0.000000
    points_computed_per_production:        0.000000
    points_computed_total:                 0.000000
    points_computed_minimum:               2557684.000000
    innermost_loop_extent:                 0.000000
    innermost_pure_loop_extent:            192.000000
    unrolled_loop_extent:                  0.000000
    inner_parallelism:                     1.000000
    outer_parallelism:                     48.000000
    bytes_at_realization:                  0.000000
    bytes_at_production:                   0.000000
    bytes_at_root:                         5115368.000000
    innermost_bytes_at_realization:        0.000000
    innermost_bytes_at_production:         0.000000
    innermost_bytes_at_root:               1972.000000
    inlined_calls:                         48660480.000000
    unique_bytes_read_per_realization:     0.000000
    unique_lines_read_per_realization:     0.000000
    allocation_bytes_read_per_realization: 0.000000
    working_set:                           0.000000
    vector_size:                           2.000000
    native_vector_size:                    2.000000
    num_vectors:                           22995810.000000
    num_scalars:                           0.000000
    scalar_loads_per_vector:               0.000000
    vector_loads_per_vector:               0.000000
    scalar_loads_per_scalar:               0.000000
    bytes_at_task:                         0.000000
    innermost_bytes_at_task:               0.000000
    unique_bytes_read_per_vector:          0.000000
    unique_lines_read_per_vector:          0.000000
    unique_bytes_read_per_task:            0.000000
    unique_lines_read_per_task:            0.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             0.000000
    working_set_at_realization:            0.000000
    working_set_at_root:                   153373408.000000
    num_warps:                             0.000000
    block_occupancy:                       0.000000
    warp_lane_utilization:                 0.000000
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  0.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 0.000000
Schedule features for f12
    num_realizations:                      0.000000
    num_productions:                       0.000000
    points_computed_per_realization:       0.000000
    points_computed_per_production:        0.000000
    points_computed_total:                 0.000000
    points_computed_minimum:               1279828.000000
    innermost_loop_extent:                 0.000000
    innermost_pure_loop_extent:            192.000000
    unrolled_loop_extent:                  0.000000
    inner_parallelism:                     1.000000
    outer_parallelism:                     48.000000
    bytes_at_realization:                  0.000000
    bytes_at_production:                   0.000000
    bytes_at_root:                         2559656.000000
    innermost_bytes_at_realization:        0.000000
    innermost_bytes_at_production:         0.000000
    innermost_bytes_at_root:               1972.000000
    inlined_calls:                         48660480.000000
    unique_bytes_read_per_realization:     0.000000
    unique_lines_read_per_realization:     0.000000
    allocation_bytes_read_per_realization: 0.000000
    working_set:                           0.000000
    vector_size:                           2.000000
    native_vector_size:                    2.000000
    num_vectors:                           22995810.000000
    num_scalars:                           0.000000
    scalar_loads_per_vector:               0.000000
    vector_loads_per_vector:               0.000000
    scalar_loads_per_scalar:               0.000000
    bytes_at_task:                         0.000000
    innermost_bytes_at_task:               0.000000
    unique_bytes_read_per_vector:          0.000000
    unique_lines_read_per_vector:          0.000000
    unique_bytes_read_per_task:            0.000000
    unique_lines_read_per_task:            0.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             0.000000
    working_set_at_realization:            0.000000
    working_set_at_root:                   153373408.000000
    num_warps:                             0.000000
    block_occupancy:                       0.000000
    warp_lane_utilization:                 0.000000
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  0.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 0.000000
Schedule features for f13
    num_realizations:                      0.000000
    num_productions:                       0.000000
    points_computed_per_realization:       0.000000
    points_computed_per_production:        0.000000
    points_computed_total:                 0.000000
    points_computed_minimum:               1282113.000000
    innermost_loop_extent:                 0.000000
    innermost_pure_loop_extent:            192.000000
    unrolled_loop_extent:                  0.000000
    inner_parallelism:                     1.000000
    outer_parallelism:                     48.000000
    bytes_at_realization:                  0.000000
    bytes_at_production:                   0.000000
    bytes_at_root:                         2564226.000000
    innermost_bytes_at_realization:        0.000000
    innermost_bytes_at_production:         0.000000
    innermost_bytes_at_root:               1974.000000
    inlined_calls:                         486604800.000000
    unique_bytes_read_per_realization:     0.000000
    unique_lines_read_per_realization:     0.000000
    allocation_bytes_read_per_realization: 0.000000
    working_set:                           0.000000
    vector_size:                           2.000000
    native_vector_size:                    2.000000
    num_vectors:                           229958100.000000
    num_scalars:                           0.000000
    scalar_loads_per_vector:               0.000000
    vector_loads_per_vector:               0.000000
    scalar_loads_per_scalar:               0.000000
    bytes_at_task:                         0.000000
    innermost_bytes_at_task:               0.000000
    unique_bytes_read_per_vector:          0.000000
    unique_lines_read_per_vector:          0.000000
    unique_bytes_read_per_task:            0.000000
    unique_lines_read_per_task:            0.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             0.000000
    working_set_at_realization:            0.000000
    working_set_at_root:                   153373408.000000
    num_warps:                             0.000000
    block_occupancy:                       0.000000
    warp_lane_utilization:                 0.000000
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  0.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 0.000000
Schedule features for f11
    num_realizations:                      0.000000
    num_productions:                       0.000000
    points_computed_per_realization:       0.000000
    points_computed_per_production:        0.000000
    points_computed_total:                 0.000000
    points_computed_minimum:               1279828.000000
    innermost_loop_extent:                 0.000000
    innermost_pure_loop_extent:            192.000000
    unrolled_loop_extent:                  0.000000
    inner_parallelism:                     1.000000
    outer_parallelism:                     48.000000
    bytes_at_realization:                  0.000000
    bytes_at_production:                   0.000000
    bytes_at_root:                         2559656.000000
    innermost_bytes_at_realization:        0.000000
    innermost_bytes_at_production:         0.000000
    innermost_bytes_at_root:               1972.000000
    inlined_calls:                         48660480.000000
    unique_bytes_read_per_realization:     0.000000
    unique_lines_read_per_realization:     0.000000
    allocation_bytes_read_per_realization: 0.000000
    working_set:                           0.000000
    vector_size:                           2.000000
    native_vector_size:                    2.000000
    num_vectors:                           22995810.000000
    num_scalars:                           0.000000
    scalar_loads_per_vector:               0.000000
    vector_loads_per_vector:               0.000000
    scalar_loads_per_scalar:               0.000000
    bytes_at_task:                         0.000000
    innermost_bytes_at_task:               0.000000
    unique_bytes_read_per_vector:          0.000000
    unique_lines_read_per_vector:          0.000000
    unique_bytes_read_per_task:            0.000000
    unique_lines_read_per_task:            0.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             0.000000
    working_set_at_realization:            0.000000
    working_set_at_root:                   153373408.000000
    num_warps:                             0.000000
    block_occupancy:                       0.000000
    warp_lane_utilization:                 0.000000
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  0.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 0.000000
Schedule features for f7
    num_realizations:                      1.000000
    num_productions:                       1.000000
    points_computed_per_realization:       1282113.000000
    points_computed_per_production:        1351680.000000
    points_computed_total:                 1282113.000000
    points_computed_minimum:               1282113.000000
    innermost_loop_extent:                 64.000000
    innermost_pure_loop_extent:            64.000000
    unrolled_loop_extent:                  1.000000
    inner_parallelism:                     12.000000
    outer_parallelism:                     1.000000
    bytes_at_realization:                  2564226.000000
    bytes_at_production:                   2564226.000000
    bytes_at_root:                         2564226.000000
    innermost_bytes_at_realization:        1974.000000
    innermost_bytes_at_production:         1974.000000
    innermost_bytes_at_root:               1974.000000
    inlined_calls:                         0.000000
    unique_bytes_read_per_realization:     5137600.000000
    unique_lines_read_per_realization:     2288.000000
    allocation_bytes_read_per_realization: 5137600.000000
    working_set:                           0.000000
    vector_size:                           2.000000
    native_vector_size:                    2.000000
    num_vectors:                           640407.000000
    num_scalars:                           1299.000000
    scalar_loads_per_vector:               4.000000
    vector_loads_per_vector:               2.000000
    scalar_loads_per_scalar:               4.000000
    bytes_at_task:                         213036.000000
    innermost_bytes_at_task:               492.000000
    unique_bytes_read_per_vector:          14.000000
    unique_lines_read_per_vector:          3.000000
    unique_bytes_read_per_task:            429164.000000
    unique_lines_read_per_task:            680.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             153373408.000000
    working_set_at_realization:            153373408.000000
    working_set_at_root:                   153373408.000000
    num_warps:                             336.000000
    block_occupancy:                       0.859375
    warp_lane_utilization:                 0.982143
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  0.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 0.000000
Schedule features for f3
    num_realizations:                      1.000000
    num_productions:                       1.000000
    points_computed_per_realization:       1284400.000000
    points_computed_per_production:        1333248.000000
    points_computed_total:                 1284400.000000
    points_computed_minimum:               1284400.000000
    innermost_loop_extent:                 64.000000
    innermost_pure_loop_extent:            64.000000
    unrolled_loop_extent:                  1.000000
    inner_parallelism:                     12.000000
    outer_parallelism:                     1.000000
    bytes_at_realization:                  2568800.000000
    bytes_at_production:                   2568800.000000
    bytes_at_root:                         2568800.000000
    innermost_bytes_at_realization:        2600.000000
    innermost_bytes_at_production:         2600.000000
    innermost_bytes_at_root:               2600.000000
    inlined_calls:                         0.000000
    unique_bytes_read_per_realization:     10275200.000000
    unique_lines_read_per_realization:     2600.000000
    allocation_bytes_read_per_realization: 10275200.000000
    working_set:                           0.000000
    vector_size:                           2.000000
    native_vector_size:                    2.000000
    num_vectors:                           642200.000000
    num_scalars:                           0.000000
    scalar_loads_per_vector:               8.000000
    vector_loads_per_vector:               0.000000
    scalar_loads_per_scalar:               4.000000
    bytes_at_task:                         213408.000000
    innermost_bytes_at_task:               432.000000
    unique_bytes_read_per_vector:          16.000000
    unique_lines_read_per_vector:          4.000000
    unique_bytes_read_per_task:            857584.000000
    unique_lines_read_per_task:            434.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             153373408.000000
    working_set_at_realization:            153373408.000000
    working_set_at_root:                   153373408.000000
    num_warps:                             336.000000
    block_occupancy:                       0.847656
    warp_lane_utilization:                 0.968750
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  0.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 0.000000
Schedule features for f4
    num_realizations:                      1.000000
    num_productions:                       1.000000
    points_computed_per_realization:       1284400.000000
    points_computed_per_production:        1309440.000000
    points_computed_total:                 1284400.000000
    points_computed_minimum:               1284400.000000
    innermost_loop_extent:                 4.000000
    innermost_pure_loop_extent:            4.000000
    unrolled_loop_extent:                  4.000000
    inner_parallelism:                     186.000000
    outer_parallelism:                     1.000000
    bytes_at_realization:                  2568800.000000
    bytes_at_production:                   2568800.000000
    bytes_at_root:                         2568800.000000
    innermost_bytes_at_realization:        1976.000000
    innermost_bytes_at_production:         1976.000000
    innermost_bytes_at_root:               1976.000000
    inlined_calls:                         0.000000
    unique_bytes_read_per_realization:     10275200.000000
    unique_lines_read_per_realization:     2600.000000
    allocation_bytes_read_per_realization: 10275200.000000
    working_set:                           0.000000
    vector_size:                           2.000000
    native_vector_size:                    2.000000
    num_vectors:                           642200.000000
    num_scalars:                           0.000000
    scalar_loads_per_vector:               0.000000
    vector_loads_per_vector:               8.000000
    scalar_loads_per_scalar:               4.000000
    bytes_at_task:                         13392.000000
    innermost_bytes_at_task:               62.000000
    unique_bytes_read_per_vector:          16.000000
    unique_lines_read_per_vector:          2.000000
    unique_bytes_read_per_task:            55552.000000
    unique_lines_read_per_task:            434.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             153373408.000000
    working_set_at_realization:            153373408.000000
    working_set_at_root:                   153373408.000000
    num_warps:                             5208.000000
    block_occupancy:                       0.859375
    warp_lane_utilization:                 0.982143
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  0.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 0.000000
Schedule features for f2
    num_realizations:                      1.000000
    num_productions:                       1.000000
    points_computed_per_realization:       1282113.000000
    points_computed_per_production:        1333248.000000
    points_computed_total:                 1282113.000000
    points_computed_minimum:               1282113.000000
    innermost_loop_extent:                 8.000000
    innermost_pure_loop_extent:            8.000000
    unrolled_loop_extent:                  8.000000
    inner_parallelism:                     336.000000
    outer_parallelism:                     1.000000
    bytes_at_realization:                  2564226.000000
    bytes_at_production:                   2564226.000000
    bytes_at_root:                         2564226.000000
    innermost_bytes_at_realization:        1974.000000
    innermost_bytes_at_production:         1974.000000
    innermost_bytes_at_root:               1974.000000
    inlined_calls:                         0.000000
    unique_bytes_read_per_realization:     10275200.000000
    unique_lines_read_per_realization:     2600.000000
    allocation_bytes_read_per_realization: 10275200.000000
    working_set:                           0.000000
    vector_size:                           2.000000
    native_vector_size:                    2.000000
    num_vectors:                           640407.000000
    num_scalars:                           1299.000000
    scalar_loads_per_vector:               0.000000
    vector_loads_per_vector:               8.000000
    scalar_loads_per_scalar:               4.000000
    bytes_at_task:                         7442.000000
    innermost_bytes_at_task:               122.000000
    unique_bytes_read_per_vector:          16.000000
    unique_lines_read_per_vector:          2.000000
    unique_bytes_read_per_task:            30752.000000
    unique_lines_read_per_task:            124.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             153373408.000000
    working_set_at_realization:            153373408.000000
    working_set_at_root:                   153373408.000000
    num_warps:                             2688.000000
    block_occupancy:                       0.242188
    warp_lane_utilization:                 0.968750
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  0.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 0.000000
Schedule features for deinterleaved
    num_realizations:                      0.000000
    num_productions:                       0.000000
    points_computed_per_realization:       0.000000
    points_computed_per_production:        0.000000
    points_computed_total:                 0.000000
    points_computed_minimum:               5133026.000000
    innermost_loop_extent:                 0.000000
    innermost_pure_loop_extent:            4.000000
    unrolled_loop_extent:                  0.000000
    inner_parallelism:                     1.000000
    outer_parallelism:                     336.000000
    bytes_at_realization:                  0.000000
    bytes_at_production:                   0.000000
    bytes_at_root:                         10275200.000000
    innermost_bytes_at_realization:        0.000000
    innermost_bytes_at_production:         0.000000
    innermost_bytes_at_root:               1976.000000
    inlined_calls:                         441920256.000000
    unique_bytes_read_per_realization:     0.000000
    unique_lines_read_per_realization:     0.000000
    allocation_bytes_read_per_realization: 0.000000
    working_set:                           0.000000
    vector_size:                           2.000000
    native_vector_size:                    2.000000
    num_vectors:                           208887097.000000
    num_scalars:                           1299.000000
    scalar_loads_per_vector:               0.000000
    vector_loads_per_vector:               0.000000
    scalar_loads_per_scalar:               0.000000
    bytes_at_task:                         0.000000
    innermost_bytes_at_task:               0.000000
    unique_bytes_read_per_vector:          0.000000
    unique_lines_read_per_vector:          0.000000
    unique_bytes_read_per_task:            0.000000
    unique_lines_read_per_task:            0.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             0.000000
    working_set_at_realization:            0.000000
    working_set_at_root:                   153373408.000000
    num_warps:                             0.000000
    block_occupancy:                       0.000000
    warp_lane_utilization:                 0.000000
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  0.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 0.000000
Schedule features for f1
    num_realizations:                      1.000000
    num_productions:                       1.000000
    points_computed_per_realization:       5137600.000000
    points_computed_per_production:        5206016.000000
    points_computed_total:                 5137600.000000
    points_computed_minimum:               5137600.000000
    innermost_loop_extent:                 16.000000
    innermost_pure_loop_extent:            16.000000
    unrolled_loop_extent:                  16.000000
    inner_parallelism:                     164.000000
    outer_parallelism:                     1.000000
    bytes_at_realization:                  10275200.000000
    bytes_at_production:                   10275200.000000
    bytes_at_root:                         10275200.000000
    innermost_bytes_at_realization:        3952.000000
    innermost_bytes_at_production:         3952.000000
    innermost_bytes_at_root:               3952.000000
    inlined_calls:                         0.000000
    unique_bytes_read_per_realization:     10311840.000000
    unique_lines_read_per_realization:     2604.000000
    allocation_bytes_read_per_realization: 10311840.000000
    working_set:                           0.000000
    vector_size:                           2.000000
    native_vector_size:                    2.000000
    num_vectors:                           2568800.000000
    num_scalars:                           0.000000
    scalar_loads_per_vector:               0.000000
    vector_loads_per_vector:               5.000000
    scalar_loads_per_scalar:               5.000000
    bytes_at_task:                         62244.000000
    innermost_bytes_at_task:               988.000000
    unique_bytes_read_per_vector:          60.000000
    unique_lines_read_per_vector:          5.000000
    unique_bytes_read_per_task:            67728.000000
    unique_lines_read_per_task:            68.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             153373408.000000
    working_set_at_realization:            153373408.000000
    working_set_at_root:                   153373408.000000
    num_warps:                             5084.000000
    block_occupancy:                       0.968750
    warp_lane_utilization:                 1.000000
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  0.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 0.000000
Schedule features for f0
    num_realizations:                      1.000000
    num_productions:                       1.000000
    points_computed_per_realization:       5155920.000000
    points_computed_per_production:        5341184.000000
    points_computed_total:                 5155920.000000
    points_computed_minimum:               5155920.000000
    innermost_loop_extent:                 4.000000
    innermost_pure_loop_extent:            4.000000
    unrolled_loop_extent:                  4.000000
    inner_parallelism:                     2608.000000
    outer_parallelism:                     1.000000
    bytes_at_realization:                  10311840.000000
    bytes_at_production:                   10311840.000000
    bytes_at_root:                         10311840.000000
    innermost_bytes_at_realization:        3960.000000
    innermost_bytes_at_production:         3960.000000
    innermost_bytes_at_root:               3960.000000
    inlined_calls:                         0.000000
    unique_bytes_read_per_realization:     10311840.000000
    unique_lines_read_per_realization:     1980.000000
    allocation_bytes_read_per_realization: 10311840.000000
    working_set:                           0.000000
    vector_size:                           2.000000
    native_vector_size:                    2.000000
    num_vectors:                           2577960.000000
    num_scalars:                           0.000000
    scalar_loads_per_vector:               2.000000
    vector_loads_per_vector:               0.000000
    scalar_loads_per_scalar:               1.000000
    bytes_at_task:                         3690.000000
    innermost_bytes_at_task:               246.000000
    unique_bytes_read_per_vector:          4.000000
    unique_lines_read_per_vector:          2.000000
    unique_bytes_read_per_task:            3968.000000
    unique_lines_read_per_task:            124.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             153373408.000000
    working_set_at_realization:            153373408.000000
    working_set_at_root:                   153373408.000000
    num_warps:                             20864.000000
    block_occupancy:                       0.250000
    warp_lane_utilization:                 1.000000
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  0.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 0.000000
Schedule features for f26
    num_realizations:                      1.000000
    num_productions:                       1.000000
    points_computed_per_realization:       12.000000
    points_computed_per_production:        12.000000
    points_computed_total:                 12.000000
    points_computed_minimum:               12.000000
    innermost_loop_extent:                 6.000000
    innermost_pure_loop_extent:            6.000000
    unrolled_loop_extent:                  1.000000
    inner_parallelism:                     1.000000
    outer_parallelism:                     1.000000
    bytes_at_realization:                  24.000000
    bytes_at_production:                   24.000000
    bytes_at_root:                         24.000000
    innermost_bytes_at_realization:        8.000000
    innermost_bytes_at_production:         8.000000
    innermost_bytes_at_root:               8.000000
    inlined_calls:                         0.000000
    unique_bytes_read_per_realization:     96.000000
    unique_lines_read_per_realization:     6.000000
    allocation_bytes_read_per_realization: 96.000000
    working_set:                           0.000000
    vector_size:                           2.000000
    native_vector_size:                    2.000000
    num_vectors:                           6.000000
    num_scalars:                           0.000000
    scalar_loads_per_vector:               0.000000
    vector_loads_per_vector:               2.000000
    scalar_loads_per_scalar:               2.000000
    bytes_at_task:                         24.000000
    innermost_bytes_at_task:               8.000000
    unique_bytes_read_per_vector:          16.000000
    unique_lines_read_per_vector:          2.000000
    unique_bytes_read_per_task:            96.000000
    unique_lines_read_per_task:            6.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             153373408.000000
    working_set_at_realization:            153373408.000000
    working_set_at_root:                   153373408.000000
    num_warps:                             1.000000
    block_occupancy:                       0.000977
    warp_lane_utilization:                 0.031250
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  2.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 0.000000
Schedule features for curve
    num_realizations:                      1.000000
    num_productions:                       1.000000
    points_computed_per_realization:       1024.000000
    points_computed_per_production:        1024.000000
    points_computed_total:                 1024.000000
    points_computed_minimum:               1024.000000
    innermost_loop_extent:                 4.000000
    innermost_pure_loop_extent:            4.000000
    unrolled_loop_extent:                  4.000000
    inner_parallelism:                     2.000000
    outer_parallelism:                     1.000000
    bytes_at_realization:                  1024.000000
    bytes_at_production:                   1024.000000
    bytes_at_root:                         1024.000000
    innermost_bytes_at_realization:        1024.000000
    innermost_bytes_at_production:         1024.000000
    innermost_bytes_at_root:               1024.000000
    inlined_calls:                         0.000000
    unique_bytes_read_per_realization:     0.000000
    unique_lines_read_per_realization:     0.000000
    allocation_bytes_read_per_realization: 0.000000
    working_set:                           0.000000
    vector_size:                           4.000000
    native_vector_size:                    4.000000
    num_vectors:                           256.000000
    num_scalars:                           0.000000
    scalar_loads_per_vector:               0.000000
    vector_loads_per_vector:               0.000000
    scalar_loads_per_scalar:               0.000000
    bytes_at_task:                         512.000000
    innermost_bytes_at_task:               512.000000
    unique_bytes_read_per_vector:          0.000000
    unique_lines_read_per_vector:          0.000000
    unique_bytes_read_per_task:            0.000000
    unique_lines_read_per_task:            0.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             153373408.000000
    working_set_at_realization:            153373408.000000
    working_set_at_root:                   153373408.000000
    num_warps:                             2.000000
    block_occupancy:                       0.031250
    warp_lane_utilization:                 1.000000
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  0.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 0.000000
State with cost 100000000000000007629769841091887003294964970946560.000000:
 gpu_none
realize: processed [2592, 1968, 3c] with 1 stages
realize: sharpened [2592, 1968, 3c] with 1 stages
realize: mask [2592, 1968, 3c] with 1 stages
realize: unsharp_y [2594, 1968, 3c] with 1 stages
realize: f28 [2594, 1970, 3c] with 1 stages
realize: f27 [2594, 1970, 3c] with 1 stages
realize: f7 [1299, 987] with 1 stages
realize: f3 [1300, 988] with 1 stages
realize: f4 [1300, 988] with 1 stages
realize: f2 [1299, 987] with 1 stages
realize: f1 [2600, 1976] with 1 stages
realize: f0 [2604, 1980] with 1 stages
realize: f26 [4, 3] with 1 stages
realize: curve [1024] with 1 stages
curve 2 (0, 0) t gpu_block
 curve 32c (0, 0) t gpu_thread
  curve 4c (0, 0) t gpu_serial
   curve 4vc (0, 0) *
f26 1 1 (0, 0) t gpu_block
 f26 1 1 (0, 0) t gpu_thread
  f26 2 3 (0, 0) t gpu_serial
   f26 2vc 1c (0, 0) *
f0 163 16 (1, 1) t gpu_block
 f0 16c 16c (1, 1) t gpu_thread
  f0 1c 4c (1, 1) t gpu_serial
   f0 1c 2vc (1, 1) *
f1 41 4 (1, 1) t gpu_block
 f1 32c 31c (1, 1) t gpu_thread
  f1 2c 8c (1, 1) t gpu_serial
   f1 1c 2vc (1, 1) *
f2 21 16 (1, 1) t gpu_block
 f2 8c 31c (1, 1) t gpu_thread
  f2 8c 1c (1, 1) t gpu_serial
   f2 1c 2vc (1, 1) *
    inlined: deinterleaved 1
f4 6 31 (1, 1) t gpu_block
 f4 55c 16c (1, 1) t gpu_thread
  f4 4c 1c (1, 1) t gpu_serial
   f4 1c 2vc (1, 1) *
    inlined: deinterleaved 1
f3 6 2 (0, 0) t gpu_block
 f3 14c 62c (0, 0) t gpu_thread
  f3 8c 8c (0, 0) t gpu_serial
   f3 2vc 1c (0, 0) *
    inlined: deinterleaved 1
f7 3 4 (1, 1) t gpu_block
 f7 55c 16c (1, 1) t gpu_thread
  f7 8c 8c (1, 1) t gpu_serial
   f7 1c 2vc (1, 1) *
f27 6 8 1c (1, 1) t gpu_block
 f27 55c 16c 1c (1, 1) t gpu_thread
  f27 8c 8c 3c (1, 1) t gpu_serial
   f27 1c 2vc 1c (1, 1) *
    inlined: output 3
    inlined: f25 3
    inlined: f24 3
    inlined: f8 3
    inlined: f6 3
    inlined: f23 3
    inlined: f10 3
    inlined: f5 27
    inlined: f22 3
    inlined: f21 3
    inlined: f20 3
    inlined: f19 3
    inlined: f18 3
    inlined: f9 3
    inlined: f17 3
    inlined: f12 3
    inlined: f13 30
    inlined: f11 3
    inlined: deinterleaved 27
f28 11 985 3c (0, 0) t gpu_block
 f28 15c 2c 1c (0, 0) t gpu_thread
  f28 4c 1c 1c (0, 0) t gpu_serial
   f28 4vc 1c 1c (0, 0) *
unsharp_y 325 8 2c (1, 1) t gpu_block
 unsharp_y 2c 31c 2c (1, 1) t gpu_thread
  unsharp_y 4c 2c 1c (1, 1) t gpu_serial
   unsharp_y 1c 4vc 1c (1, 1) *
mask 648 8 1c (1, 1) t gpu_block
 mask 2c 31c 2c (1, 1) t gpu_thread
  mask 2c 2c 2c (1, 1) t gpu_serial
   mask 1c 4vc 1c (1, 1) *
    inlined: unsharp 1
sharpened 41 16 3c (1, 1) t gpu_block
 sharpened 64c 16c 1c (1, 1) t gpu_thread
  sharpened 1c 2c 1c (1, 1) t gpu_serial
   sharpened 1c 4vc 1c (1, 1) *
    inlined: sharpen_strength_x32 1
processed 41 31 1c (0, 0) t gpu_block
 processed 16c 64c 1c (0, 0) t gpu_thread
  processed 1c 1c 3c (0, 0) t gpu_serial
   processed 4vc 1c 1c (0, 0) *
Func processed = get_pipeline().get_func(37);
Func sharpened = get_pipeline().get_func(36);
Func sharpen_strength_x32 = get_pipeline().get_func(35);
Func mask = get_pipeline().get_func(34);
Func unsharp = get_pipeline().get_func(33);
Func unsharp_y = get_pipeline().get_func(32);
Func f28 = get_pipeline().get_func(31);
Func f27 = get_pipeline().get_func(30);
Func output = get_pipeline().get_func(29);
Func f25 = get_pipeline().get_func(28);
Func f24 = get_pipeline().get_func(27);
Func f8 = get_pipeline().get_func(26);
Func f6 = get_pipeline().get_func(25);
Func f23 = get_pipeline().get_func(24);
Func f10 = get_pipeline().get_func(23);
Func f5 = get_pipeline().get_func(22);
Func f22 = get_pipeline().get_func(21);
Func f21 = get_pipeline().get_func(20);
Func f20 = get_pipeline().get_func(19);
Func f19 = get_pipeline().get_func(18);
Func f18 = get_pipeline().get_func(17);
Func f9 = get_pipeline().get_func(16);
Func f17 = get_pipeline().get_func(15);
Func f12 = get_pipeline().get_func(14);
Func f13 = get_pipeline().get_func(13);
Func f11 = get_pipeline().get_func(12);
Func f7 = get_pipeline().get_func(11);
Func f3 = get_pipeline().get_func(10);
Func f4 = get_pipeline().get_func(9);
Func f2 = get_pipeline().get_func(8);
Func deinterleaved = get_pipeline().get_func(7);
Func f1 = get_pipeline().get_func(6);
Func f0 = get_pipeline().get_func(5);
Func f26 = get_pipeline().get_func(3);
Func curve = get_pipeline().get_func(0);
Var _::c(processed.get_schedule().dims()[2].var), _::ci("_::ci"), _::x(processed.get_schedule().dims()[0].var), _::xi("_::xi"), _::xii("_::xii"), _::xiii("_::xiii"), _::y(processed.get_schedule().dims()[1].var), _::yi("_::yi"), _::yii("_::yii"), _::yiii("_::yiii");
processed
    .split(_::x, _::x, _::xi, 64, TailStrategy::ShiftInwards)
    .split(_::y, _::y, _::yi, 64, TailStrategy::ShiftInwards)
    .split(_::xi, _::xi, _::xii, 4, TailStrategy::ShiftInwards)
    .unroll(_::c)
    .vectorize(_::xii)
    .compute_root()
    .reorder(_::xii, _::c, _::xi, _::yi, _::x, _::y)
    .gpu_blocks(_::y)
    .gpu_blocks(_::x)
    .split(_::xi, _::xi_serial_outer, _::xi, 16)
    .gpu_threads(_::xi)
    .split(_::yi, _::yi_serial_outer, _::yi, 64)
    .gpu_threads(_::yi);
sharpened
    .split(_::y, _::y, _::yi, 124, TailStrategy::ShiftInwards)
    .split(_::x, _::x, _::xi, 64, TailStrategy::ShiftInwards)
    .split(_::yi, _::yi, _::yii, 8, TailStrategy::ShiftInwards)
    .split(_::yii, _::yii, _::yiii, 4, TailStrategy::ShiftInwards)
    .unroll(_::yii)
    .vectorize(_::yiii)
    .compute_root()
    .reorder(_::yiii, _::yii, _::yi, _::xi, _::y, _::x, _::c)
    .gpu_blocks(_::c)
    .gpu_blocks(_::x)
    .gpu_blocks(_::y)
    .reorder_storage(_::y, _::x, _::c)
    .split(_::yi, _::yi_serial_outer, _::yi, 16)
    .gpu_threads(_::yi)
    .split(_::xi, _::xi_serial_outer, _::xi, 64)
    .gpu_threads(_::xi);
mask
    .split(_::y, _::y, _::yi, 248, TailStrategy::ShiftInwards)
    .split(_::x, _::x, _::xi, 4, TailStrategy::ShiftInwards)
    .split(_::yi, _::yi, _::yii, 8, TailStrategy::ShiftInwards)
    .split(_::xi, _::xi, _::xii, 2, TailStrategy::ShiftInwards)
    .split(_::c, _::c, _::ci, 2, TailStrategy::ShiftInwards)
    .split(_::yii, _::yii, _::yiii, 4, TailStrategy::ShiftInwards)
    .unroll(_::yii)
    .unroll(_::xii)
    .unroll(_::ci)
    .vectorize(_::yiii)
    .compute_root()
    .reorder(_::yiii, _::yii, _::xii, _::ci, _::yi, _::xi, _::c, _::y, _::x)
    .gpu_blocks(_::x)
    .gpu_blocks(_::y)
    .reorder_storage(_::y, _::x, _::c)
    .split(_::yi, _::yi_serial_outer, _::yi, 31)
    .gpu_threads(_::yi)
    .split(_::xi, _::xi_serial_outer, _::xi, 2)
    .gpu_threads(_::xi)
    .split(_::c, _::c_serial_outer, _::c, 2)
    .gpu_threads(_::c);
unsharp_y
    .split(_::y, _::y, _::yi, 248, TailStrategy::ShiftInwards)
    .split(_::x, _::x, _::xi, 8, TailStrategy::ShiftInwards)
    .split(_::c, _::c, _::ci, 2, TailStrategy::ShiftInwards)
    .split(_::yi, _::yi, _::yii, 8, TailStrategy::ShiftInwards)
    .split(_::xi, _::xi, _::xii, 4, TailStrategy::ShiftInwards)
    .split(_::yii, _::yii, _::yiii, 4, TailStrategy::ShiftInwards)
    .unroll(_::yii)
    .unroll(_::xii)
    .vectorize(_::yiii)
    .compute_root()
    .reorder(_::yiii, _::yii, _::xii, _::yi, _::xi, _::ci, _::y, _::x, _::c)
    .gpu_blocks(_::c)
    .gpu_blocks(_::x)
    .gpu_blocks(_::y)
    .reorder_storage(_::y, _::x, _::c)
    .split(_::yi, _::yi_serial_outer, _::yi, 31)
    .gpu_threads(_::yi)
    .split(_::xi, _::xi_serial_outer, _::xi, 2)
    .gpu_threads(_::xi)
    .split(_::ci, _::ci_serial_outer, _::ci, 2)
    .gpu_threads(_::ci);
f28
    .split(_::x, _::x, _::xi, 236, TailStrategy::ShiftInwards)
    .split(_::y, _::y, _::yi, 2, TailStrategy::ShiftInwards)
    .split(_::xi, _::xi, _::xii, 16, TailStrategy::ShiftInwards)
    .split(_::xii, _::xii, _::xiii, 4, TailStrategy::ShiftInwards)
    .unroll(_::xii)
    .vectorize(_::xiii)
    .compute_root()
    .reorder(_::xiii, _::xii, _::xi, _::yi, _::x, _::y, _::c)
    .gpu_blocks(_::c)
    .gpu_blocks(_::y)
    .gpu_blocks(_::x)
    .split(_::xi, _::xi_serial_outer, _::xi, 15)
    .gpu_threads(_::xi)
    .split(_::yi, _::yi_serial_outer, _::yi, 2)
    .gpu_threads(_::yi);
f27
    .split(_::y, _::y, _::yi, 248, TailStrategy::ShiftInwards)
    .split(_::x, _::x, _::xi, 433, TailStrategy::ShiftInwards)
    .split(_::yi, _::yi, _::yii, 16, TailStrategy::ShiftInwards)
    .split(_::xi, _::xi, _::xii, 8, TailStrategy::ShiftInwards)
    .split(_::yii, _::yii, _::yiii, 2, TailStrategy::ShiftInwards)
    .vectorize(_::yiii)
    .compute_root()
    .reorder(_::yiii, _::yii, _::xii, _::c, _::yi, _::xi, _::y, _::x)
    .gpu_blocks(_::x)
    .gpu_blocks(_::y)
    .reorder_storage(_::y, _::x, _::c)
    .split(_::yi, _::yi_serial_outer, _::yi, 16)
    .gpu_threads(_::yi)
    .split(_::xi, _::xi_serial_outer, _::xi, 55)
    .gpu_threads(_::xi);
f7
    .split(_::y, _::y, _::yi, 248, TailStrategy::ShiftInwards)
    .split(_::x, _::x, _::xi, 433, TailStrategy::ShiftInwards)
    .split(_::yi, _::yi, _::yii, 16, TailStrategy::ShiftInwards)
    .split(_::xi, _::xi, _::xii, 8, TailStrategy::ShiftInwards)
    .split(_::yii, _::yii, _::yiii, 2, TailStrategy::ShiftInwards)
    .vectorize(_::yiii)
    .compute_root()
    .reorder(_::yiii, _::yii, _::xii, _::yi, _::xi, _::y, _::x)
    .gpu_blocks(_::x)
    .gpu_blocks(_::y)
    .reorder_storage(_::y, _::x)
    .split(_::yi, _::yi_serial_outer, _::yi, 16)
    .gpu_threads(_::yi)
    .split(_::xi, _::xi_serial_outer, _::xi, 55)
    .gpu_threads(_::xi);
f3
    .split(_::x, _::x, _::xi, 218, TailStrategy::ShiftInwards)
    .split(_::y, _::y, _::yi, 494, TailStrategy::ShiftInwards)
    .split(_::xi, _::xi, _::xii, 16, TailStrategy::ShiftInwards)
    .split(_::yi, _::yi, _::yii, 8, TailStrategy::ShiftInwards)
    .split(_::xii, _::xii, _::xiii, 2, TailStrategy::ShiftInwards)
    .vectorize(_::xiii)
    .compute_root()
    .reorder(_::xiii, _::xii, _::yii, _::xi, _::yi, _::x, _::y)
    .gpu_blocks(_::y)
    .gpu_blocks(_::x)
    .split(_::xi, _::xi_serial_outer, _::xi, 14)
    .gpu_threads(_::xi)
    .split(_::yi, _::yi_serial_outer, _::yi, 62)
    .gpu_threads(_::yi);
f4
    .split(_::y, _::y, _::yi, 32, TailStrategy::ShiftInwards)
    .split(_::x, _::x, _::xi, 217, TailStrategy::ShiftInwards)
    .split(_::yi, _::yi, _::yii, 2, TailStrategy::ShiftInwards)
    .split(_::xi, _::xi, _::xii, 4, TailStrategy::ShiftInwards)
    .unroll(_::xii)
    .vectorize(_::yii)
    .compute_root()
    .reorder(_::yii, _::xii, _::yi, _::xi, _::y, _::x)
    .gpu_blocks(_::x)
    .gpu_blocks(_::y)
    .reorder_storage(_::y, _::x)
    .split(_::yi, _::yi_serial_outer, _::yi, 16)
    .gpu_threads(_::yi)
    .split(_::xi, _::xi_serial_outer, _::xi, 55)
    .gpu_threads(_::xi);
f2
    .split(_::y, _::y, _::yi, 62, TailStrategy::ShiftInwards)
    .split(_::x, _::x, _::xi, 62, TailStrategy::ShiftInwards)
    .split(_::yi, _::yi, _::yii, 2, TailStrategy::ShiftInwards)
    .split(_::xi, _::xi, _::xii, 8, TailStrategy::ShiftInwards)
    .unroll(_::xii)
    .vectorize(_::yii)
    .compute_root()
    .reorder(_::yii, _::xii, _::yi, _::xi, _::y, _::x)
    .gpu_blocks(_::x)
    .gpu_blocks(_::y)
    .reorder_storage(_::y, _::x)
    .split(_::yi, _::yi_serial_outer, _::yi, 31)
    .gpu_threads(_::yi)
    .split(_::xi, _::xi_serial_outer, _::xi, 8)
    .gpu_threads(_::xi);
f1
    .split(_::y, _::y, _::yi, 494, TailStrategy::ShiftInwards)
    .split(_::x, _::x, _::xi, 64, TailStrategy::ShiftInwards)
    .split(_::yi, _::yi, _::yii, 16, TailStrategy::ShiftInwards)
    .split(_::xi, _::xi, _::xii, 2, TailStrategy::ShiftInwards)
    .split(_::yii, _::yii, _::yiii, 2, TailStrategy::ShiftInwards)
    .unroll(_::yii)
    .unroll(_::xii)
    .vectorize(_::yiii)
    .compute_root()
    .reorder(_::yiii, _::yii, _::xii, _::yi, _::xi, _::y, _::x)
    .gpu_blocks(_::x)
    .gpu_blocks(_::y)
    .reorder_storage(_::y, _::x)
    .split(_::yi, _::yi_serial_outer, _::yi, 31)
    .gpu_threads(_::yi)
    .split(_::xi, _::xi_serial_outer, _::xi, 32)
    .gpu_threads(_::xi);
f0
    .split(_::y, _::y, _::yi, 124, TailStrategy::ShiftInwards)
    .split(_::x, _::x, _::xi, 16, TailStrategy::ShiftInwards)
    .split(_::yi, _::yi, _::yii, 8, TailStrategy::ShiftInwards)
    .split(_::yii, _::yii, _::yiii, 2, TailStrategy::ShiftInwards)
    .unroll(_::yii)
    .vectorize(_::yiii)
    .compute_root()
    .reorder(_::yiii, _::yii, _::yi, _::xi, _::y, _::x)
    .gpu_blocks(_::x)
    .gpu_blocks(_::y)
    .reorder_storage(_::y, _::x)
    .split(_::yi, _::yi_serial_outer, _::yi, 16)
    .gpu_threads(_::yi)
    .split(_::xi, _::xi_serial_outer, _::xi, 16)
    .gpu_threads(_::xi);
f26
    .split(_::x, _::x, _::xi, 2, TailStrategy::ShiftInwards)
    .vectorize(_::xi)
    .compute_root()
    .reorder(_::xi, _::x, _::y);
curve
    .split(_::x, _::x, _::xi, 512, TailStrategy::ShiftInwards)
    .split(_::xi, _::xi, _::xii, 16, TailStrategy::ShiftInwards)
    .split(_::xii, _::xii, _::xiii, 4, TailStrategy::ShiftInwards)
    .unroll(_::xii)
    .vectorize(_::xiii)
    .compute_root()
    .reorder(_::xiii, _::xii, _::xi, _::x)
    .gpu_blocks(_::x)
    .split(_::xi, _::xi_serial_outer, _::xi, 32)
    .gpu_threads(_::xi);
Creating initial loop nests...
Injecting realization of { processed }
Injecting realization of { sharpened }
Inlining sharpen_strength_x32
Injecting realization of { mask }
Inlining unsharp
Injecting realization of { unsharp_y }
Injecting realization of { f28 }
Injecting realization of { f27 }
Inlining output
Inlining f25
Inlining f24
Inlining f8
Inlining f6
Inlining f23
Inlining f10
Inlining f5
Inlining f22
Inlining f21
Inlining f20
Inlining f19
Inlining f18
Inlining f9
Inlining f17
Inlining f12
Inlining f13
Inlining f11
Injecting realization of { f7 }
Injecting realization of { f3 }
Injecting realization of { f4 }
Injecting realization of { f2 }
Inlining deinterleaved
Injecting realization of { f1 }
Injecting realization of { f0 }
Inlining input_im
Injecting realization of { f26 }
Inlining matrix_7000_im
Inlining matrix_3200_im
Injecting realization of { curve }
Skipping injecting memoization...
Injecting tracing...
Adding checks for parameters
Computing bounds of each function's value
Adding checks for images
Performing computation bounds inference...
Removing extern loops...
Performing sliding window optimization...
Simplifying correlated differences...
Performing allocation bounds inference...
Removing code that depends on undef values...
Uniquifying variable names...
Simplifying...
Performing storage folding optimization...
Injecting debug_to_file calls...
Injecting prefetches...
Dynamically skipping stages...
Forking asynchronous producers...
Destructuring tuple-valued realizations...
Canonicalizing GPU var names...
Performing storage flattening...
Unpacking buffer arguments...
Skipping rewriting memoized allocations...
Selecting a GPU API for GPU loops...
Injecting host <-> dev buffer copies...
Selecting a GPU API for extern stages...
Simplifying...
Reduce prefetch dimension...
Lowering after reduce prefetch dimension:
assert((reinterpret(uint64, processed.buffer) != (uint64)0), halide_error_buffer_argument_is_null("processed"))
assert((reinterpret(uint64, matrix_7000.buffer) != (uint64)0), halide_error_buffer_argument_is_null("matrix_7000"))
assert((reinterpret(uint64, matrix_3200.buffer) != (uint64)0), halide_error_buffer_argument_is_null("matrix_3200"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.type = _halide_buffer_get_type(input.buffer)
let input.dimensions = _halide_buffer_get_dimensions(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.extent.0 = _halide_buffer_get_extent(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.extent.1 = _halide_buffer_get_extent(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let matrix_3200 = _halide_buffer_get_host(matrix_3200.buffer)
let matrix_3200.type = _halide_buffer_get_type(matrix_3200.buffer)
let matrix_3200.dimensions = _halide_buffer_get_dimensions(matrix_3200.buffer)
let matrix_3200.min.0 = _halide_buffer_get_min(matrix_3200.buffer, 0)
let matrix_3200.extent.0 = _halide_buffer_get_extent(matrix_3200.buffer, 0)
let matrix_3200.stride.0 = _halide_buffer_get_stride(matrix_3200.buffer, 0)
let matrix_3200.min.1 = _halide_buffer_get_min(matrix_3200.buffer, 1)
let matrix_3200.extent.1 = _halide_buffer_get_extent(matrix_3200.buffer, 1)
let matrix_3200.stride.1 = _halide_buffer_get_stride(matrix_3200.buffer, 1)
let matrix_7000 = _halide_buffer_get_host(matrix_7000.buffer)
let matrix_7000.type = _halide_buffer_get_type(matrix_7000.buffer)
let matrix_7000.dimensions = _halide_buffer_get_dimensions(matrix_7000.buffer)
let matrix_7000.min.0 = _halide_buffer_get_min(matrix_7000.buffer, 0)
let matrix_7000.extent.0 = _halide_buffer_get_extent(matrix_7000.buffer, 0)
let matrix_7000.stride.0 = _halide_buffer_get_stride(matrix_7000.buffer, 0)
let matrix_7000.min.1 = _halide_buffer_get_min(matrix_7000.buffer, 1)
let matrix_7000.extent.1 = _halide_buffer_get_extent(matrix_7000.buffer, 1)
let matrix_7000.stride.1 = _halide_buffer_get_stride(matrix_7000.buffer, 1)
let processed = _halide_buffer_get_host(processed.buffer)
let processed.type = _halide_buffer_get_type(processed.buffer)
let processed.dimensions = _halide_buffer_get_dimensions(processed.buffer)
let processed.min.0 = _halide_buffer_get_min(processed.buffer, 0)
let processed.extent.0 = _halide_buffer_get_extent(processed.buffer, 0)
let processed.stride.0 = _halide_buffer_get_stride(processed.buffer, 0)
let processed.min.1 = _halide_buffer_get_min(processed.buffer, 1)
let processed.extent.1 = _halide_buffer_get_extent(processed.buffer, 1)
let processed.stride.1 = _halide_buffer_get_stride(processed.buffer, 1)
let processed.min.2 = _halide_buffer_get_min(processed.buffer, 2)
let processed.extent.2 = _halide_buffer_get_extent(processed.buffer, 2)
let processed.stride.2 = _halide_buffer_get_stride(processed.buffer, 2)
let input.extent.0.required.s = (min(((processed.extent.0/2)*2), ((((processed.extent.0 + 10)/16)*16) + 4)) - (min((processed.extent.0/2), 2)*2))
let input.extent.1.required.s = (min(((processed.extent.1/2)*2), ((((processed.extent.1 + 10)/124)*124) + 112)) - (min((processed.extent.1/2), 56)*2))
let processed.extent.0.required.s = (min(((processed.extent.0/2)*2), ((((processed.extent.0 + -2)/64)*64) + 64)) - (min((processed.extent.0/2), 32)*2))
let processed.extent.1.required.s = (min(((processed.extent.1/2)*2), ((((processed.extent.1 + -2)/64)*64) + 64)) - (min((processed.extent.1/2), 32)*2))
let processed.stride.2.required = ((processed.extent.0.required.s + 64)*(processed.extent.1.required.s + 64))
assert((!_halide_buffer_is_bounds_query(input.buffer) || ((-6 <= processed.extent.0) && (((min((processed.extent.0/2), 2)*2) + input.extent.0.required.s) <= 2570))), halide_error_constraints_make_required_region_smaller("Input buffer input", 0, 0, 2591, ((min((processed.extent.0/2), 2)*2) + 6), (((min((processed.extent.0/2), 2)*2) + input.extent.0.required.s) + 21)))
assert((!_halide_buffer_is_bounds_query(input.buffer) || ((106 <= processed.extent.1) && (((min((processed.extent.1/2), 56)*2) + input.extent.1.required.s) <= 1950))), halide_error_constraints_make_required_region_smaller("Input buffer input", 1, 0, 1967, ((min((processed.extent.1/2), 56)*2) + -106), (((min((processed.extent.1/2), 56)*2) + input.extent.1.required.s) + 17)))
if (_halide_buffer_is_bounds_query(input.buffer)) {
  _halide_buffer_init(input.buffer, _halide_buffer_get_shape(input.buffer), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 1, 16, 2, make_struct((halide_dimension_t *), 0, 2592, 1, 0, 0, 1968, (input.extent.0.required.s + 16), 0), (uint64)0)
}
if (_halide_buffer_is_bounds_query(matrix_3200.buffer)) {
  _halide_buffer_init(matrix_3200.buffer, _halide_buffer_get_shape(matrix_3200.buffer), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 2, 32, 2, make_struct((halide_dimension_t *), 0, 4, 1, 0, 0, 3, 4, 0), (uint64)0)
}
if (_halide_buffer_is_bounds_query(matrix_7000.buffer)) {
  _halide_buffer_init(matrix_7000.buffer, _halide_buffer_get_shape(matrix_7000.buffer), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 2, 32, 2, make_struct((halide_dimension_t *), 0, 4, 1, 0, 0, 3, 4, 0), (uint64)0)
}
if (_halide_buffer_is_bounds_query(processed.buffer)) {
  _halide_buffer_init(processed.buffer, _halide_buffer_get_shape(processed.buffer), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 1, 8, 3, make_struct((halide_dimension_t *), ((min((processed.extent.0/2), 32)*2) + -64), (processed.extent.0.required.s + 64), 1, 0, ((min((processed.extent.1/2), 32)*2) + -64), (processed.extent.1.required.s + 64), (processed.extent.0.required.s + 64), 0, 0, 3, processed.stride.2.required, 0), (uint64)0)
}
if (!(_halide_buffer_is_bounds_query(processed.buffer) || (_halide_buffer_is_bounds_query(matrix_7000.buffer) || (_halide_buffer_is_bounds_query(input.buffer) || _halide_buffer_is_bounds_query(matrix_3200.buffer))))) {
  assert((input.type == (uint32)69633), halide_error_bad_type("Input buffer input", input.type, (uint32)69633))
  assert((input.dimensions == 2), halide_error_bad_dimensions("Input buffer input", input.dimensions, 2))
  assert((matrix_3200.type == (uint32)73730), halide_error_bad_type("Input buffer matrix_3200", matrix_3200.type, (uint32)73730))
  assert((matrix_3200.dimensions == 2), halide_error_bad_dimensions("Input buffer matrix_3200", matrix_3200.dimensions, 2))
  assert((matrix_7000.type == (uint32)73730), halide_error_bad_type("Input buffer matrix_7000", matrix_7000.type, (uint32)73730))
  assert((matrix_7000.dimensions == 2), halide_error_bad_dimensions("Input buffer matrix_7000", matrix_7000.dimensions, 2))
  assert((processed.type == (uint32)67585), halide_error_bad_type("Output buffer processed", processed.type, (uint32)67585))
  assert((processed.dimensions == 3), halide_error_bad_dimensions("Output buffer processed", processed.dimensions, 3))
  assert((((input.min.0 + -6) <= (min((processed.extent.0/2), 2)*2)) && ((((min((processed.extent.0/2), 2)*2) + input.extent.0.required.s) + 22) <= (input.extent.0 + input.min.0))), halide_error_access_out_of_bounds("Input buffer input", 0, ((min((processed.extent.0/2), 2)*2) + 6), (((min((processed.extent.0/2), 2)*2) + input.extent.0.required.s) + 21), input.min.0, ((input.extent.0 + input.min.0) + -1)))
  assert((0 <= input.extent.0), halide_error_buffer_extents_negative("Input buffer input", 0, input.extent.0))
  assert((((input.min.1 + 106) <= (min((processed.extent.1/2), 56)*2)) && ((((min((processed.extent.1/2), 56)*2) + input.extent.1.required.s) + 18) <= (input.extent.1 + input.min.1))), halide_error_access_out_of_bounds("Input buffer input", 1, ((min((processed.extent.1/2), 56)*2) + -106), (((min((processed.extent.1/2), 56)*2) + input.extent.1.required.s) + 17), input.min.1, ((input.extent.1 + input.min.1) + -1)))
  assert((0 <= input.extent.1), halide_error_buffer_extents_negative("Input buffer input", 1, input.extent.1))
  assert(((matrix_3200.min.0 <= 0) && (4 <= (matrix_3200.extent.0 + matrix_3200.min.0))), halide_error_access_out_of_bounds("Input buffer matrix_3200", 0, 0, 3, matrix_3200.min.0, ((matrix_3200.extent.0 + matrix_3200.min.0) + -1)))
  assert((0 <= matrix_3200.extent.0), halide_error_buffer_extents_negative("Input buffer matrix_3200", 0, matrix_3200.extent.0))
  assert(((matrix_3200.min.1 <= 0) && (3 <= (matrix_3200.extent.1 + matrix_3200.min.1))), halide_error_access_out_of_bounds("Input buffer matrix_3200", 1, 0, 2, matrix_3200.min.1, ((matrix_3200.extent.1 + matrix_3200.min.1) + -1)))
  assert((0 <= matrix_3200.extent.1), halide_error_buffer_extents_negative("Input buffer matrix_3200", 1, matrix_3200.extent.1))
  assert(((matrix_7000.min.0 <= 0) && (4 <= (matrix_7000.extent.0 + matrix_7000.min.0))), halide_error_access_out_of_bounds("Input buffer matrix_7000", 0, 0, 3, matrix_7000.min.0, ((matrix_7000.extent.0 + matrix_7000.min.0) + -1)))
  assert((0 <= matrix_7000.extent.0), halide_error_buffer_extents_negative("Input buffer matrix_7000", 0, matrix_7000.extent.0))
  assert(((matrix_7000.min.1 <= 0) && (3 <= (matrix_7000.extent.1 + matrix_7000.min.1))), halide_error_access_out_of_bounds("Input buffer matrix_7000", 1, 0, 2, matrix_7000.min.1, ((matrix_7000.extent.1 + matrix_7000.min.1) + -1)))
  assert((0 <= matrix_7000.extent.1), halide_error_buffer_extents_negative("Input buffer matrix_7000", 1, matrix_7000.extent.1))
  assert((((processed.min.0 + 64) <= (min((processed.extent.0/2), 32)*2)) && (((min((processed.extent.0/2), 32)*2) + processed.extent.0.required.s) <= (processed.extent.0 + processed.min.0))), halide_error_access_out_of_bounds("Output buffer processed", 0, ((min((processed.extent.0/2), 32)*2) + -64), (((min((processed.extent.0/2), 32)*2) + processed.extent.0.required.s) + -1), processed.min.0, ((processed.extent.0 + processed.min.0) + -1)))
  assert((0 <= processed.extent.0), halide_error_buffer_extents_negative("Output buffer processed", 0, processed.extent.0))
  assert((((processed.min.1 + 64) <= (min((processed.extent.1/2), 32)*2)) && (((min((processed.extent.1/2), 32)*2) + processed.extent.1.required.s) <= (processed.extent.1 + processed.min.1))), halide_error_access_out_of_bounds("Output buffer processed", 1, ((min((processed.extent.1/2), 32)*2) + -64), (((min((processed.extent.1/2), 32)*2) + processed.extent.1.required.s) + -1), processed.min.1, ((processed.extent.1 + processed.min.1) + -1)))
  assert((0 <= processed.extent.1), halide_error_buffer_extents_negative("Output buffer processed", 1, processed.extent.1))
  assert(((processed.min.2 <= 0) && (3 <= (processed.extent.2 + processed.min.2))), halide_error_access_out_of_bounds("Output buffer processed", 2, 0, 2, processed.min.2, ((processed.extent.2 + processed.min.2) + -1)))
  assert((0 <= processed.extent.2), halide_error_buffer_extents_negative("Output buffer processed", 2, processed.extent.2))
  assert((input.stride.0 == 1), halide_error_constraint_violated("input.stride.0", input.stride.0, "1", 1))
  assert((input.min.0 == 0), halide_error_constraint_violated("input.min.0", input.min.0, "0", 0))
  assert((input.extent.0 == 2592), halide_error_constraint_violated("input.extent.0", input.extent.0, "2592", 2592))
  assert((input.min.1 == 0), halide_error_constraint_violated("input.min.1", input.min.1, "0", 0))
  assert((input.extent.1 == 1968), halide_error_constraint_violated("input.extent.1", input.extent.1, "1968", 1968))
  assert((matrix_3200.stride.0 == 1), halide_error_constraint_violated("matrix_3200.stride.0", matrix_3200.stride.0, "1", 1))
  assert((matrix_7000.stride.0 == 1), halide_error_constraint_violated("matrix_7000.stride.0", matrix_7000.stride.0, "1", 1))
  assert((processed.stride.0 == 1), halide_error_constraint_violated("processed.stride.0", processed.stride.0, "1", 1))
  let matrix_3200.total_extent.1 = (int64(matrix_3200.extent.1)*int64(matrix_3200.extent.0))
  let matrix_7000.total_extent.1 = (int64(matrix_7000.extent.1)*int64(matrix_7000.extent.0))
  let processed.total_extent.1 = (int64(processed.extent.1)*int64(processed.extent.0))
  let processed.total_extent.2 = (processed.total_extent.1*int64(processed.extent.2))
  assert((abs((int64(input.stride.1)*(int64)1968)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("input", abs((int64(input.stride.1)*(int64)1968)), (uint64)2147483647))
  assert((abs(int64(matrix_3200.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("matrix_3200", abs(int64(matrix_3200.extent.0)), (uint64)2147483647))
  assert((abs((int64(matrix_3200.extent.1)*int64(matrix_3200.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("matrix_3200", abs((int64(matrix_3200.extent.1)*int64(matrix_3200.stride.1))), (uint64)2147483647))
  assert((matrix_3200.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("matrix_3200", matrix_3200.total_extent.1, (int64)2147483647))
  assert((abs(int64(matrix_7000.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("matrix_7000", abs(int64(matrix_7000.extent.0)), (uint64)2147483647))
  assert((abs((int64(matrix_7000.extent.1)*int64(matrix_7000.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("matrix_7000", abs((int64(matrix_7000.extent.1)*int64(matrix_7000.stride.1))), (uint64)2147483647))
  assert((matrix_7000.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("matrix_7000", matrix_7000.total_extent.1, (int64)2147483647))
  assert((abs(int64(processed.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("processed", abs(int64(processed.extent.0)), (uint64)2147483647))
  assert((abs((int64(processed.extent.1)*int64(processed.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("processed", abs((int64(processed.extent.1)*int64(processed.stride.1))), (uint64)2147483647))
  assert((processed.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("processed", processed.total_extent.1, (int64)2147483647))
  assert((abs((int64(processed.extent.2)*int64(processed.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("processed", abs((int64(processed.extent.2)*int64(processed.stride.2))), (uint64)2147483647))
  assert((processed.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("processed", processed.total_extent.2, (int64)2147483647))
  assert((matrix_3200 != reinterpret((void *), (uint64)0)), halide_error_host_is_null("Input buffer matrix_3200"))
  assert((matrix_7000 != reinterpret((void *), (uint64)0)), halide_error_host_is_null("Input buffer matrix_7000"))
  allocate curve[uint8 * 1024] if (uint1)0
  let curve.buffer = (let t2975 = make_struct((halide_dimension_t *), 0, 1024, 1, 0) in _halide_buffer_init(alloca(size_of_halide_buffer_t()), t2975, reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 1, 8, 1, t2975, (uint64)0))
  register_destructor("halide_device_free_as_destructor", curve.buffer)
  produce curve {
    if (likely((uint1)1)) {
      let halide_device_malloc_result$28 = halide_device_malloc(curve.buffer, halide_cuda_device_interface())
      assert((halide_device_malloc_result$28 == 0), halide_device_malloc_result$28)
      gpu_block<CUDA> (curve.s0._::x._::x.__block_id_x, 0, 2) {
        gpu_thread<CUDA> (curve.s0._::x._::xi._::xi._::xi.__thread_id_x, 0, 32) {
          unrolled (curve.s0._::x._::xi._::xii._::xii, 0, 4) {
            vectorized (curve.s0._::x._::xi._::xii._::xiii, 0, 4) {
              curve[(min(likely_if_innermost((curve.s0._::x._::x.__block_id_x*512)), 512) + ((curve.s0._::x._::xi._::xi._::xi.__thread_id_x*16) + ((curve.s0._::x._::xi._::xii._::xii*4) + curve.s0._::x._::xi._::xii._::xiii)))] = (let curve.s0.t21 = pow_f32(max(min(((1.000000f/float32((whiteLevel - blackLevel)))*float32(((min(likely_if_innermost((curve.s0._::x._::x.__block_id_x*512)), 512) + ((curve.s0._::x._::xi._::xi._::xi.__thread_id_x*16) + ((curve.s0._::x._::xi._::xii._::xii*4) + curve.s0._::x._::xi._::xii._::xiii))) - blackLevel))), 1.000000f), 0.000000f), (1.000000f/gamma)) in (let curve.s0.t22 = pow_f32(2.000000f, (contrast*0.010000f)) in select((blackLevel < (min(likely_if_innermost((curve.s0._::x._::x.__block_id_x*512)), 512) + ((curve.s0._::x._::xi._::xi._::xi.__thread_id_x*16) + ((curve.s0._::x._::xi._::xii._::xii*4) + curve.s0._::x._::xi._::xii._::xiii)))), select((whiteLevel < (min(likely_if_innermost((curve.s0._::x._::x.__block_id_x*512)), 512) + ((curve.s0._::x._::xi._::xi._::xi.__thread_id_x*16) + ((curve.s0._::x._::xi._::xii._::xii*4) + curve.s0._::x._::xi._::xii._::xiii)))), (uint8)255, uint8((max(min((select((0.500000f < curve.s0.t21), (1.000000f - ((1.000000f - curve.s0.t21)*((((1.000000f - curve.s0.t21)*((curve.s0.t22*2.000000f) + -2.000000f)) - curve.s0.t22) + 2.000000f))), ((((((curve.s0.t22*2.000000f) + -2.000000f)*curve.s0.t21) - curve.s0.t22) + 2.000000f)*curve.s0.t21))*255.000000f), 254.500000f), -0.500000f) + 0.500000f))), (uint8)0)))
            }
          }
        }
      }
      _halide_buffer_set_device_dirty(curve.buffer, (uint1)1)
    }
  }
  let f26.buffer = (let t2974 = make_struct((halide_dimension_t *), 0, 4, 1, 0, 0, 3, 4, 0) in _halide_buffer_init(alloca(size_of_halide_buffer_t()), t2974, reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 0, 16, 2, t2974, (uint64)0))
  if (likely((uint1)1)) {
    let halide_device_and_host_malloc_result = halide_device_and_host_malloc(f26.buffer, halide_cuda_device_interface())
    assert((halide_device_and_host_malloc_result == 0), halide_device_and_host_malloc_result)
  }
  register_destructor("halide_device_and_host_free_as_destructor", f26.buffer)
  allocate f26[int16 * 4 * 3] in Heap if likely((uint1)1)
   custom_new { _halide_buffer_get_host(f26.buffer) }
   custom_delete { halide_device_host_nop_free(f26); }
  produce f26 {
    if (likely((uint1)1)) {
      let halide_copy_to_host_result = halide_copy_to_host(matrix_3200.buffer)
      assert((halide_copy_to_host_result == 0), halide_copy_to_host_result)
      let halide_copy_to_host_result$1 = halide_copy_to_host(matrix_7000.buffer)
      assert((halide_copy_to_host_result$1 == 0), halide_copy_to_host_result$1)
      for (f26.s0._::y, 0, 3) {
        for (f26.s0._::x._::x, 0, 2) {
          vectorized (f26.s0._::x._::xi, 0, 2) {
            f26[((f26.s0._::y*4) + (min(likely_if_innermost((f26.s0._::x._::x*2)), 2) + f26.s0._::x._::xi))] = int16((((matrix_3200[(((f26.s0._::y*matrix_3200.stride.1) + (min(likely_if_innermost((f26.s0._::x._::x*2)), 2) + f26.s0._::x._::xi)) - ((matrix_3200.min.1*matrix_3200.stride.1) + matrix_3200.min.0))]*(((1.000000f/color_temp)*-5894.736816f) + 1.842105f)) + (matrix_7000[(((f26.s0._::y*matrix_7000.stride.1) + (min(likely_if_innermost((f26.s0._::x._::x*2)), 2) + f26.s0._::x._::xi)) - ((matrix_7000.min.1*matrix_7000.stride.1) + matrix_7000.min.0))]*(((1.000000f/color_temp)*5894.736816f) + -0.842105f)))*256.000000f))
          }
        }
      }
      _halide_buffer_set_host_dirty(f26.buffer, (uint1)1)
    }
  }
  let f0._::y.min_realized.s = min((processed.extent.1/2), (min((processed.extent.1/2), 56) + 187))
  let f0._::y.extent_realized.s = (min(((processed.extent.1/2)*2), (max((((processed.extent.1 + 10)/124)*124), ((((processed.extent.1 + 6)/494)*494) + 374)) + 112)) - (f0._::y.min_realized.s*2))
  let f0._::x.min_realized.s = min((processed.extent.0/2), (min((processed.extent.0/2), 2) + 26))
  let f0._::x.extent_realized.s = (min(((processed.extent.0/2)*2), (max((((processed.extent.0 + 10)/16)*16), ((((processed.extent.0 + 6)/64)*64) + 52)) + 4)) - (f0._::x.min_realized.s*2))
  allocate f0[int16 * (f0._::x.extent_realized.s + 68) * (f0._::y.extent_realized.s + 498)] if (uint1)0
  let f0.buffer = (let t2973 = make_struct((halide_dimension_t *), ((f0._::x.min_realized.s*2) + -62), (f0._::x.extent_realized.s + 68), (f0._::y.extent_realized.s + 498), 0, ((f0._::y.min_realized.s*2) + -492), (f0._::y.extent_realized.s + 498), 1, 0) in _halide_buffer_init(alloca(size_of_halide_buffer_t()), t2973, reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 0, 16, 2, t2973, (uint64)0))
  register_destructor("halide_device_free_as_destructor", f0.buffer)
  produce f0 {
    if (likely((uint1)1)) {
      let halide_device_malloc_result$26 = halide_device_malloc(f0.buffer, halide_cuda_device_interface())
      assert((halide_device_malloc_result$26 == 0), halide_device_malloc_result$26)
      let halide_copy_to_device_result$1 = halide_copy_to_device(input.buffer, halide_cuda_device_interface())
      assert((halide_copy_to_device_result$1 == 0), halide_copy_to_device_result$1)
      gpu_block<CUDA> (f0.s0._::x._::x.__block_id_y, 0, ((processed.extent.0 + 26)/16)) {
        let f0.s0._::x._::xi.base = min(likely_if_innermost(((f0.s0._::x._::x.__block_id_y*16) + -6)), (((processed.extent.0/2)*2) + -10))
        gpu_block<CUDA> (f0.s0._::y._::y.__block_id_x, 0, ((processed.extent.1 + 134)/124)) {
          let f0.s0._::y._::yi.base = min(likely_if_innermost(((f0.s0._::y._::y.__block_id_x*124) + -6)), (((processed.extent.1/2)*2) + -118))
          gpu_thread<CUDA> (f0.s0._::x._::xi._::xi.__thread_id_y, 0, 16) {
            gpu_thread<CUDA> (f0.s0._::y._::yi._::yi._::yi.__thread_id_x, 0, 16) {
              unrolled (f0.s0._::y._::yi._::yii._::yii, 0, 4) {
                vectorized (f0.s0._::y._::yi._::yii._::yiii, 0, 2) {
                  f0[((((((f0.s0._::x._::xi._::xi.__thread_id_y + f0.s0._::x._::xi.base) - (f0._::x.min_realized.s*2)) + 62)*(f0._::y.extent_realized.s + 498)) + (((min(likely_if_innermost((f0.s0._::y._::yi._::yi._::yi.__thread_id_x*8)), 116) + ((f0.s0._::y._::yi._::yii._::yii*2) + f0.s0._::y._::yi._::yii._::yiii)) + f0.s0._::y._::yi.base) - (f0._::y.min_realized.s*2))) + 492)] = int16(input[(((input.stride.1*12) + ((((min(likely_if_innermost((f0.s0._::y._::yi._::yi._::yi.__thread_id_x*8)), 116) + ((f0.s0._::y._::yi._::yii._::yii*2) + f0.s0._::y._::yi._::yii._::yiii)) + f0.s0._::y._::yi.base)*input.stride.1) + (f0.s0._::x._::xi._::xi.__thread_id_y + f0.s0._::x._::xi.base))) + 16)])
                }
              }
            }
          }
        }
      }
      _halide_buffer_set_device_dirty(f0.buffer, (uint1)1)
    }
  }
  let f1._::y.min_realized.s = min(min(min(min((min((processed.extent.1/2), 490)*2), (min((min((processed.extent.1/2), 58)*2), ((min((processed.extent.1/2), 28)*2) + 61)) + 864)), ((min((processed.extent.1/2), 490)*2) + 1)), ((min((processed.extent.1/2), 123)*2) + 734)), (((processed.extent.1/2)*2) + 494))
  let f1._::y.extent_realized.s = (max(max(max(((min(((processed.extent.1/2)*2), (((processed.extent.1/248)*248) + 246))/2)*2), (max(max(max((min((processed.extent.1/2), ((((processed.extent.1 + 6)/64)*32) + 28))*2), ((min((processed.extent.1/2), (max((((processed.extent.1 + 6)/64)*32), ((((processed.extent.1 + 4)/124)*62) + 31)) + 28))*2) + 1)), (min((processed.extent.1/2), ((((processed.extent.1 + 6)/988)*494) + 490))*2)), ((min((processed.extent.1/2), ((((processed.extent.1 + 6)/988)*494) + 490))*2) + 1)) + 2)), (((min(((processed.extent.1/2)*2), (((processed.extent.1/248)*248) + 246))/2)*2) + 1)), (min(((processed.extent.1/2)*2), ((((processed.extent.1 + 6)/494)*494) + 486)) + 3)) - f1._::y.min_realized.s)
  let f1._::x.min_realized.s = min(min(min(min(min((min((processed.extent.0/2), 214)*2), (min(min((min((processed.extent.0/2), (min((processed.extent.0/2), 59) + 154))*2), ((min((processed.extent.0/2), 213)*2) + 1)), (min((processed.extent.0/2), 213)*2)) + 2)), ((min((processed.extent.0/2), 214)*2) + 1)), ((min(((processed.extent.0/2)*2), 431)/2)*2)), (((min(((processed.extent.0/2)*2), 431)/2)*2) + 1)), (((processed.extent.0/2)*2) + 372))
  let f1._::x.extent_realized.s = (max(max(((processed.extent.0/2)*2), (max(max((max(min((processed.extent.0/2), ((((processed.extent.0 + 4)/124)*62) + 59)), (min((processed.extent.0/2), ((((processed.extent.0 + 6)/434)*217) + 213)) + 1))*2), ((min((processed.extent.0/2), (max((((processed.extent.0 + 6)/434)*217), ((((processed.extent.0 + 6)/436)*218) + 1)) + 213))*2) + 1)), ((min((processed.extent.0/2), ((((processed.extent.0 + 6)/436)*218) + 214))*2) + 2)) + 1)), (((processed.extent.0/2)*2) + 3)) - f1._::x.min_realized.s)
  allocate f1[int16 * (f1._::x.extent_realized.s + 433) * (f1._::y.extent_realized.s + 985)] if (uint1)0
  let f1.buffer = (let t2972 = make_struct((halide_dimension_t *), (f1._::x.min_realized.s + -432), (f1._::x.extent_realized.s + 433), (f1._::y.extent_realized.s + 985), 0, (f1._::y.min_realized.s + -984), (f1._::y.extent_realized.s + 985), 1, 0) in _halide_buffer_init(alloca(size_of_halide_buffer_t()), t2972, reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 0, 16, 2, t2972, (uint64)0))
  register_destructor("halide_device_free_as_destructor", f1.buffer)
  produce f1 {
    consume f0 {
      if (likely((uint1)1)) {
        let halide_device_malloc_result$21 = halide_device_malloc(f1.buffer, halide_cuda_device_interface())
        assert((halide_device_malloc_result$21 == 0), halide_device_malloc_result$21)
        let halide_device_malloc_result$27 = halide_device_malloc(f0.buffer, halide_cuda_device_interface())
        assert((halide_device_malloc_result$27 == 0), halide_device_malloc_result$27)
        gpu_block<CUDA> (f1.s0._::x._::x.__block_id_y, 0, ((processed.extent.0 + 70)/64)) {
          let f1.s0._::x._::xi.base = min(likely_if_innermost(((f1.s0._::x._::x.__block_id_y*64) + -4)), (((processed.extent.0/2)*2) + -60))
          gpu_block<CUDA> (f1.s0._::y._::y.__block_id_x, 0, ((processed.extent.1 + 500)/494)) {
            let f1.s0._::y._::yi.base = min(likely_if_innermost(((f1.s0._::y._::y.__block_id_x*494) + -4)), (((processed.extent.1/2)*2) + -490))
            gpu_thread<CUDA> (f1.s0._::x._::xi._::xi._::xi.__thread_id_y, 0, 32) {
              gpu_thread<CUDA> (f1.s0._::y._::yi._::yi._::yi.__thread_id_x, 0, 31) {
                unrolled (f1.s0._::x._::xi._::xii, 0, 2) {
                  unrolled (f1.s0._::y._::yi._::yii._::yii, 0, 8) {
                    vectorized (f1.s0._::y._::yi._::yii._::yiii, 0, 2) {
                      f1[((((((((f1.s0._::x._::xi._::xi._::xi.__thread_id_y*2) + f1.s0._::x._::xi._::xii) + f1.s0._::x._::xi.base) - f1._::x.min_realized.s) + 432)*(f1._::y.extent_realized.s + 985)) + (((min(likely_if_innermost((f1.s0._::y._::yi._::yi._::yi.__thread_id_x*16)), 478) + ((f1.s0._::y._::yi._::yii._::yii*2) + f1.s0._::y._::yi._::yii._::yiii)) + f1.s0._::y._::yi.base) - f1._::y.min_realized.s)) + 984)] = max(min(f0[((((((((f1.s0._::x._::xi._::xi._::xi.__thread_id_y*2) + f1.s0._::x._::xi._::xii) + f1.s0._::x._::xi.base) - (f0._::x.min_realized.s*2)) + 62)*(f0._::y.extent_realized.s + 498)) + (((min(likely_if_innermost((f1.s0._::y._::yi._::yi._::yi.__thread_id_x*16)), 478) + ((f1.s0._::y._::yi._::yii._::yii*2) + f1.s0._::y._::yi._::yii._::yiii)) + f1.s0._::y._::yi.base) - (f0._::y.min_realized.s*2))) + 492)], max(f0[(((((((((f1.s0._::x._::xi._::xi._::xi.__thread_id_y*2) + f1.s0._::x._::xi._::xii) + f1.s0._::x._::xi.base) - (f0._::x.min_realized.s*2)) + 62)*(f0._::y.extent_realized.s + 498)) + (((min(likely_if_innermost((f1.s0._::y._::yi._::yi._::yi.__thread_id_x*16)), 478) + ((f1.s0._::y._::yi._::yii._::yii*2) + f1.s0._::y._::yi._::yii._::yiii)) + f1.s0._::y._::yi.base) - (f0._::y.min_realized.s*2))) - (f0._::y.extent_realized.s*2)) + -504)], max(f0[(((f0._::y.extent_realized.s*2) + (((((((f1.s0._::x._::xi._::xi._::xi.__thread_id_y*2) + f1.s0._::x._::xi._::xii) + f1.s0._::x._::xi.base) - (f0._::x.min_realized.s*2)) + 62)*(f0._::y.extent_realized.s + 498)) + (((min(likely_if_innermost((f1.s0._::y._::yi._::yi._::yi.__thread_id_x*16)), 478) + ((f1.s0._::y._::yi._::yii._::yii*2) + f1.s0._::y._::yi._::yii._::yiii)) + f1.s0._::y._::yi.base) - (f0._::y.min_realized.s*2)))) + 1488)], max(f0[((((((((f1.s0._::x._::xi._::xi._::xi.__thread_id_y*2) + f1.s0._::x._::xi._::xii) + f1.s0._::x._::xi.base) - (f0._::x.min_realized.s*2)) + 62)*(f0._::y.extent_realized.s + 498)) + (((min(likely_if_innermost((f1.s0._::y._::yi._::yi._::yi.__thread_id_x*16)), 478) + ((f1.s0._::y._::yi._::yii._::yii*2) + f1.s0._::y._::yi._::yii._::yiii)) + f1.s0._::y._::yi.base) - (f0._::y.min_realized.s*2))) + 490)], f0[((((((((f1.s0._::x._::xi._::xi._::xi.__thread_id_y*2) + f1.s0._::x._::xi._::xii) + f1.s0._::x._::xi.base) - (f0._::x.min_realized.s*2)) + 62)*(f0._::y.extent_realized.s + 498)) + (((min(likely_if_innermost((f1.s0._::y._::yi._::yi._::yi.__thread_id_x*16)), 478) + ((f1.s0._::y._::yi._::yii._::yii*2) + f1.s0._::y._::yi._::yii._::yiii)) + f1.s0._::y._::yi.base) - (f0._::y.min_realized.s*2))) + 494)])))), (int16)0)
                    }
                  }
                }
              }
            }
          }
        }
        _halide_buffer_set_device_dirty(f1.buffer, (uint1)1)
      }
      let halide_device_free_result$10 = halide_device_free(f0.buffer)
      assert((halide_device_free_result$10 == 0), halide_device_free_result$10)
    }
  }
  let f2._::y.min_realized.s = min((processed.extent.1/2), (min((processed.extent.1/2), 59) + 64))
  let f2._::y.extent_realized.s = (max(min((processed.extent.1/2), ((((processed.extent.1 + 4)/124)*62) + 59)), (min(((processed.extent.1/2)*2), (((processed.extent.1/248)*248) + 246))/2)) - f2._::y.min_realized.s)
  let f2._::x.min_realized.s = min((min(((processed.extent.0/2)*2), 431)/2), (min((processed.extent.0/2), 59) + 156))
  let f2._::x.extent_realized.s = ((processed.extent.0/2) - f2._::x.min_realized.s)
  allocate f2[int16 * (f2._::x.extent_realized.s + 218) * (f2._::y.extent_realized.s + 126)] if (uint1)0
  let f2.buffer = (let t2971 = make_struct((halide_dimension_t *), (f2._::x.min_realized.s + -217), (f2._::x.extent_realized.s + 218), (f2._::y.extent_realized.s + 126), 0, (f2._::y.min_realized.s + -124), (f2._::y.extent_realized.s + 126), 1, 0) in _halide_buffer_init(alloca(size_of_halide_buffer_t()), t2971, reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 0, 16, 2, t2971, (uint64)0))
  register_destructor("halide_device_free_as_destructor", f2.buffer)
  produce f2 {
    consume f1 {
      if (likely((uint1)1)) {
        let halide_device_malloc_result$19 = halide_device_malloc(f2.buffer, halide_cuda_device_interface())
        assert((halide_device_malloc_result$19 == 0), halide_device_malloc_result$19)
        let halide_device_malloc_result$22 = halide_device_malloc(f1.buffer, halide_cuda_device_interface())
        assert((halide_device_malloc_result$22 == 0), halide_device_malloc_result$22)
        gpu_block<CUDA> (f2.s0._::x._::x.__block_id_y, 0, ((processed.extent.0 + 128)/124)) {
          let f2.s0._::x._::xi.base = min(likely_if_innermost(((f2.s0._::x._::x.__block_id_y*62) + -2)), ((processed.extent.0/2) + -61))
          gpu_block<CUDA> (f2.s0._::y._::y.__block_id_x, 0, ((processed.extent.1 + 128)/124)) {
            let f2.s0._::y._::yi.base = min(likely_if_innermost(((f2.s0._::y._::y.__block_id_x*62) + -1)), ((processed.extent.1/2) + -60))
            gpu_thread<CUDA> (f2.s0._::x._::xi._::xi._::xi.__thread_id_y, 0, 8) {
              gpu_thread<CUDA> (f2.s0._::y._::yi._::yi._::yi.__thread_id_x, 0, 31) {
                unrolled (f2.s0._::x._::xi._::xii, 0, 8) {
                  vectorized (f2.s0._::y._::yi._::yii, 0, 2) {
                    f2[(((((((min(likely_if_innermost((f2.s0._::x._::xi._::xi._::xi.__thread_id_y*8)), 54) + f2.s0._::x._::xi._::xii) + f2.s0._::x._::xi.base) - f2._::x.min_realized.s) + 217)*(f2._::y.extent_realized.s + 126)) + ((((f2.s0._::y._::yi._::yi._::yi.__thread_id_x*2) + f2.s0._::y._::yi._::yii) + f2.s0._::y._::yi.base) - f2._::y.min_realized.s)) + 124)] = f1[(((((((((min(likely_if_innermost((f2.s0._::x._::xi._::xi._::xi.__thread_id_y*8)), 54) + f2.s0._::x._::xi._::xii) + f2.s0._::x._::xi.base)*2) - f1._::x.min_realized.s) + 432)*(f1._::y.extent_realized.s + 985)) + (((((f2.s0._::y._::yi._::yi._::yi.__thread_id_x*2) + f2.s0._::y._::yi._::yii) + f2.s0._::y._::yi.base)*2) - f1._::y.min_realized.s)) + f1._::y.extent_realized.s) + 1969)]
                  }
                }
              }
            }
          }
        }
        _halide_buffer_set_device_dirty(f2.buffer, (uint1)1)
      }
    }
  }
  let f4._::y.min_realized.s = min(min((processed.extent.1/2), (min((processed.extent.1/2), 123) + 122)), ((processed.extent.1/2) + 217))
  let f4._::y.extent_realized.s = (max(max(max((min(((processed.extent.1/2)*2), (((processed.extent.1/248)*248) + 246))/2), (min((processed.extent.1/2), ((((processed.extent.1 + 4)/496)*248) + 245)) + 1)), ((min(((processed.extent.1/2)*2), (((processed.extent.1/248)*248) + 246))/2) + -1)), (min((processed.extent.1/2), ((((processed.extent.1 + 6)/64)*32) + 28)) + 1)) - f4._::y.min_realized.s)
  let f4._::x.min_realized.s = min(min((min(((processed.extent.0/2)*2), 431) + 430), processed.extent.0), (processed.extent.0 + 434))
  let f4._::x.extent_realized.s = (max(max(max(min((processed.extent.0/2), ((((processed.extent.0 + 4)/866)*433) + 430)), ((processed.extent.0/2) + -1)), (processed.extent.0/2)), ((processed.extent.0/2) + 1)) - (f4._::x.min_realized.s/2))
  allocate f4[int16 * (f4._::x.extent_realized.s + 433) * (f4._::y.extent_realized.s + 248)] if (uint1)0
  let f4.buffer = (let t2970 = make_struct((halide_dimension_t *), ((f4._::x.min_realized.s/2) + -432), (f4._::x.extent_realized.s + 433), (f4._::y.extent_realized.s + 248), 0, (f4._::y.min_realized.s + -247), (f4._::y.extent_realized.s + 248), 1, 0) in _halide_buffer_init(alloca(size_of_halide_buffer_t()), t2970, reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 0, 16, 2, t2970, (uint64)0))
  register_destructor("halide_device_free_as_destructor", f4.buffer)
  produce f4 {
    consume f1 {
      if (likely((uint1)1)) {
        let halide_device_malloc_result$16 = halide_device_malloc(f4.buffer, halide_cuda_device_interface())
        assert((halide_device_malloc_result$16 == 0), halide_device_malloc_result$16)
        let halide_device_malloc_result$23 = halide_device_malloc(f1.buffer, halide_cuda_device_interface())
        assert((halide_device_malloc_result$23 == 0), halide_device_malloc_result$23)
        gpu_block<CUDA> (f4.s0._::x._::x.__block_id_y, 0, ((processed.extent.0 + 440)/434)) {
          let f4.s0._::x._::xi.base = min(likely_if_innermost(((f4.s0._::x._::x.__block_id_y*217) + -2)), ((processed.extent.0/2) + -215))
          gpu_block<CUDA> (f4.s0._::y._::y.__block_id_x, 0, ((processed.extent.1 + 70)/64)) {
            let f4.s0._::y._::yi.base = min(likely_if_innermost(((f4.s0._::y._::y.__block_id_x*32) + -2)), ((processed.extent.1/2) + -30))
            gpu_thread<CUDA> (f4.s0._::x._::xi._::xi._::xi.__thread_id_y, 0, 55) {
              gpu_thread<CUDA> (f4.s0._::y._::yi._::yi._::yi.__thread_id_x, 0, 16) {
                unrolled (f4.s0._::x._::xi._::xii, 0, 4) {
                  vectorized (f4.s0._::y._::yi._::yii, 0, 2) {
                    f4[(((((((min(likely_if_innermost((f4.s0._::x._::xi._::xi._::xi.__thread_id_y*4)), 213) + f4.s0._::x._::xi._::xii) + f4.s0._::x._::xi.base) - (f4._::x.min_realized.s/2)) + 432)*(f4._::y.extent_realized.s + 248)) + ((((f4.s0._::y._::yi._::yi._::yi.__thread_id_x*2) + f4.s0._::y._::yi._::yii) + f4.s0._::y._::yi.base) - f4._::y.min_realized.s)) + 247)] = f1[(((((((((min(likely_if_innermost((f4.s0._::x._::xi._::xi._::xi.__thread_id_y*4)), 213) + f4.s0._::x._::xi._::xii) + f4.s0._::x._::xi.base)*2) - f1._::x.min_realized.s) + 432)*(f1._::y.extent_realized.s + 985)) + (((((f4.s0._::y._::yi._::yi._::yi.__thread_id_x*2) + f4.s0._::y._::yi._::yii) + f4.s0._::y._::yi.base)*2) - f1._::y.min_realized.s)) + f1._::y.extent_realized.s) + 1970)]
                  }
                }
              }
            }
          }
        }
        _halide_buffer_set_device_dirty(f4.buffer, (uint1)1)
      }
    }
  }
  let f3._::y.min_realized.s = min((processed.extent.1/2), (min((processed.extent.1/2), (min((processed.extent.1/2), 123) + 121)) + 246))
  let f3._::y.extent_realized.s = (max((min(((processed.extent.1/2)*2), (((processed.extent.1/248)*248) + 246))/2), (max(max(min((processed.extent.1/2), ((((processed.extent.1 + 4)/496)*248) + 245)), (min(((processed.extent.1/2)*2), (((processed.extent.1/248)*248) + 246))/2)), min((processed.extent.1/2), ((((processed.extent.1 + 6)/988)*494) + 490))) + 1)) - f3._::y.min_realized.s)
  let f3._::x.min_realized.s = min((min(((processed.extent.0/2)*2), 431) + 432), processed.extent.0)
  let f3._::x.extent_realized.s = ((processed.extent.0/2) - min((f3._::x.min_realized.s/2), 430))
  allocate f3[int16 * (f3._::x.extent_realized.s + 434) * (f3._::y.extent_realized.s + 493)] if (uint1)0
  let f3.buffer = (let t2969 = make_struct((halide_dimension_t *), (min((f3._::x.min_realized.s/2), 430) + -432), (f3._::x.extent_realized.s + 434), 1, 0, (f3._::y.min_realized.s + -492), (f3._::y.extent_realized.s + 493), (f3._::x.extent_realized.s + 434), 0) in _halide_buffer_init(alloca(size_of_halide_buffer_t()), t2969, reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 0, 16, 2, t2969, (uint64)0))
  register_destructor("halide_device_free_as_destructor", f3.buffer)
  produce f3 {
    consume f1 {
      if (likely((uint1)1)) {
        let halide_device_malloc_result$13 = halide_device_malloc(f3.buffer, halide_cuda_device_interface())
        assert((halide_device_malloc_result$13 == 0), halide_device_malloc_result$13)
        let halide_device_malloc_result$24 = halide_device_malloc(f1.buffer, halide_cuda_device_interface())
        assert((halide_device_malloc_result$24 == 0), halide_device_malloc_result$24)
        gpu_block<CUDA> (f3.s0._::y._::y.__block_id_y, 0, ((processed.extent.1 + 994)/988)) {
          let f3.s0._::y._::yi.base = min(likely_if_innermost(((f3.s0._::y._::y.__block_id_y*494) + -2)), ((processed.extent.1/2) + -492))
          gpu_block<CUDA> (f3.s0._::x._::x.__block_id_x, 0, ((processed.extent.0 + 442)/436)) {
            let f3.s0._::x._::xi.base = min(likely_if_innermost(((f3.s0._::x._::x.__block_id_x*218) + -2)), ((processed.extent.0/2) + -216))
            gpu_thread<CUDA> (f3.s0._::y._::yi._::yi._::yi.__thread_id_y, 0, 62) {
              gpu_thread<CUDA> (f3.s0._::x._::xi._::xi._::xi.__thread_id_x, 0, 14) {
                for (f3.s0._::y._::yi._::yii, 0, 8) {
                  for (f3.s0._::x._::xi._::xii._::xii, 0, 8) {
                    vectorized (f3.s0._::x._::xi._::xii._::xiii, 0, 2) {
                      f3[(((((((min(likely_if_innermost((f3.s0._::y._::yi._::yi._::yi.__thread_id_y*8)), 486) + f3.s0._::y._::yi._::yii) + f3.s0._::y._::yi.base) - f3._::y.min_realized.s) + 492)*(f3._::x.extent_realized.s + 434)) + (((min(likely_if_innermost((f3.s0._::x._::xi._::xi._::xi.__thread_id_x*16)), 202) + ((f3.s0._::x._::xi._::xii._::xii*2) + f3.s0._::x._::xi._::xii._::xiii)) + f3.s0._::x._::xi.base) - min((f3._::x.min_realized.s/2), 430))) + 432)] = (let t2202.s = (min(likely_if_innermost((f3.s0._::x._::xi._::xi._::xi.__thread_id_x*16)), 202) + ((f3.s0._::x._::xi._::xii._::xii*2) + f3.s0._::x._::xi._::xii._::xiii)) in f1[(((((((f3.s0._::x._::xi.base + t2202.s)*2) - f1._::x.min_realized.s) + 432)*(f1._::y.extent_realized.s + 985)) + ((((min(likely_if_innermost((f3.s0._::y._::yi._::yi._::yi.__thread_id_y*8)), 486) + f3.s0._::y._::yi._::yii) + f3.s0._::y._::yi.base)*2) - f1._::y.min_realized.s)) + 984)])
                    }
                  }
                }
              }
            }
          }
        }
        _halide_buffer_set_device_dirty(f3.buffer, (uint1)1)
      }
    }
  }
  let f7._::y.min_realized.s = min((processed.extent.1/2), (min((processed.extent.1/2), 123) + 122))
  let f7._::y.extent_realized.s = (max(min((processed.extent.1/2), ((((processed.extent.1 + 4)/496)*248) + 245)), (min(((processed.extent.1/2)*2), (((processed.extent.1/248)*248) + 246))/2)) - f7._::y.min_realized.s)
  let f7._::x.min_realized.s = min((min(((processed.extent.0/2)*2), 431) + 430), processed.extent.0)
  let f7._::x.extent_realized.s = ((processed.extent.0/2) - (f7._::x.min_realized.s/2))
  allocate f7[int16 * (f7._::x.extent_realized.s + 433) * (f7._::y.extent_realized.s + 248)] if (uint1)0
  let f7.buffer = (let t2968 = make_struct((halide_dimension_t *), ((f7._::x.min_realized.s/2) + -432), (f7._::x.extent_realized.s + 433), (f7._::y.extent_realized.s + 248), 0, (f7._::y.min_realized.s + -246), (f7._::y.extent_realized.s + 248), 1, 0) in _halide_buffer_init(alloca(size_of_halide_buffer_t()), t2968, reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 0, 16, 2, t2968, (uint64)0))
  register_destructor("halide_device_free_as_destructor", f7.buffer)
  produce f7 {
    consume f3 {
      consume f4 {
        if (likely((uint1)1)) {
          let halide_device_malloc_result$11 = halide_device_malloc(f7.buffer, halide_cuda_device_interface())
          assert((halide_device_malloc_result$11 == 0), halide_device_malloc_result$11)
          let halide_device_malloc_result$14 = halide_device_malloc(f3.buffer, halide_cuda_device_interface())
          assert((halide_device_malloc_result$14 == 0), halide_device_malloc_result$14)
          let halide_device_malloc_result$17 = halide_device_malloc(f4.buffer, halide_cuda_device_interface())
          assert((halide_device_malloc_result$17 == 0), halide_device_malloc_result$17)
          gpu_block<CUDA> (f7.s0._::x._::x.__block_id_y, 0, ((processed.extent.0 + 870)/866)) {
            let f7.s0._::x._::xi.base = min(likely_if_innermost(((f7.s0._::x._::x.__block_id_y*433) + -2)), ((processed.extent.0/2) + -432))
            gpu_block<CUDA> (f7.s0._::y._::y.__block_id_x, 0, ((processed.extent.1 + 500)/496)) {
              let f7.s0._::y._::yi.base = min(likely_if_innermost(((f7.s0._::y._::y.__block_id_x*248) + -1)), ((processed.extent.1/2) + -246))
              gpu_thread<CUDA> (f7.s0._::x._::xi._::xi._::xi.__thread_id_y, 0, 55) {
                gpu_thread<CUDA> (f7.s0._::y._::yi._::yi._::yi.__thread_id_x, 0, 16) {
                  for (f7.s0._::x._::xi._::xii, 0, 8) {
                    for (f7.s0._::y._::yi._::yii._::yii, 0, 8) {
                      vectorized (f7.s0._::y._::yi._::yii._::yiii, 0, 2) {
                        f7[(((((((min(likely_if_innermost((f7.s0._::x._::xi._::xi._::xi.__thread_id_y*8)), 425) + f7.s0._::x._::xi._::xii) + f7.s0._::x._::xi.base) - (f7._::x.min_realized.s/2)) + 432)*(f7._::y.extent_realized.s + 248)) + (((min(likely_if_innermost((f7.s0._::y._::yi._::yi._::yi.__thread_id_x*16)), 232) + ((f7.s0._::y._::yi._::yii._::yii*2) + f7.s0._::y._::yi._::yii._::yiii)) + f7.s0._::y._::yi.base) - f7._::y.min_realized.s)) + 246)] = (let f7.s0.t0 = f3[(((((((min(likely_if_innermost((f7.s0._::y._::yi._::yi._::yi.__thread_id_x*16)), 232) + ((f7.s0._::y._::yi._::yii._::yii*2) + f7.s0._::y._::yi._::yii._::yiii)) + f7.s0._::y._::yi.base) - f3._::y.min_realized.s) + 492)*(f3._::x.extent_realized.s + 434)) + (((min(likely_if_innermost((f7.s0._::x._::xi._::xi._::xi.__thread_id_y*8)), 425) + f7.s0._::x._::xi._::xii) + f7.s0._::x._::xi.base) - min((f3._::x.min_realized.s/2), 430))) + 433)] in (let f7.s0.t1 = f3[(((((((min(likely_if_innermost((f7.s0._::y._::yi._::yi._::yi.__thread_id_x*16)), 232) + ((f7.s0._::y._::yi._::yii._::yii*2) + f7.s0._::y._::yi._::yii._::yiii)) + f7.s0._::y._::yi.base) - f3._::y.min_realized.s) + 492)*(f3._::x.extent_realized.s + 434)) + (((min(likely_if_innermost((f7.s0._::x._::xi._::xi._::xi.__thread_id_y*8)), 425) + f7.s0._::x._::xi._::xii) + f7.s0._::x._::xi.base) - min((f3._::x.min_realized.s/2), 430))) + 432)] in (let f7.s0.t2 = f4[(((((((min(likely_if_innermost((f7.s0._::x._::xi._::xi._::xi.__thread_id_y*8)), 425) + f7.s0._::x._::xi._::xii) + f7.s0._::x._::xi.base) - (f4._::x.min_realized.s/2)) + 432)*(f4._::y.extent_realized.s + 248)) + (((min(likely_if_innermost((f7.s0._::y._::yi._::yi._::yi.__thread_id_x*16)), 232) + ((f7.s0._::y._::yi._::yii._::yii*2) + f7.s0._::y._::yi._::yii._::yiii)) + f7.s0._::y._::yi.base) - f4._::y.min_realized.s)) + 246)] in (let f7.s0.t3 = f4[(((((((min(likely_if_innermost((f7.s0._::x._::xi._::xi._::xi.__thread_id_y*8)), 425) + f7.s0._::x._::xi._::xii) + f7.s0._::x._::xi.base) - (f4._::x.min_realized.s/2)) + 432)*(f4._::y.extent_realized.s + 248)) + (((min(likely_if_innermost((f7.s0._::y._::yi._::yi._::yi.__thread_id_x*16)), 232) + ((f7.s0._::y._::yi._::yii._::yii*2) + f7.s0._::y._::yi._::yii._::yiii)) + f7.s0._::y._::yi.base) - f4._::y.min_realized.s)) + 247)] in select((absd(f7.s0.t0, f7.s0.t1) < absd(f7.s0.t2, f7.s0.t3)), int16((((int32(f7.s0.t0) + int32(f7.s0.t1)) + 1)/2)), int16((((int32(f7.s0.t2) + int32(f7.s0.t3)) + 1)/2)))))))
                      }
                    }
                  }
                }
              }
            }
          }
          _halide_buffer_set_device_dirty(f7.buffer, (uint1)1)
        }
      }
    }
  }
  let f27._::x.min_realized.s = min(((processed.extent.0/2)*2), ((min((processed.extent.0/2), 117)*2) + 197))
  let f27.stride.2 = (((max((processed.extent.1/2), 123)*2) + 2)*(max((max((processed.extent.0/2), 117)*2), 431) + 2))
  allocate f27[int16 * (max((max((processed.extent.0/2), 117)*2), 431) + 2) * ((max((processed.extent.1/2), 123)*2) + 2) * 3] if (uint1)0
  let f27.buffer = (let t2967 = make_struct((halide_dimension_t *), (f27._::x.min_realized.s + -432), (max((max((processed.extent.0/2), 117)*2), 431) + 2), ((max((processed.extent.1/2), 123)*2) + 2), 0, ((min((processed.extent.1/2), 123)*2) + -247), ((max((processed.extent.1/2), 123)*2) + 2), 1, 0, 0, 3, f27.stride.2, 0) in _halide_buffer_init(alloca(size_of_halide_buffer_t()), t2967, reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 0, 16, 3, t2967, (uint64)0))
  register_destructor("halide_device_free_as_destructor", f27.buffer)
  produce f27 {
    consume f7 {
      consume f3 {
        consume f4 {
          consume f2 {
            consume f1 {
              consume f26 {
                if (likely((uint1)1)) {
                  let halide_device_malloc_result$9 = halide_device_malloc(f27.buffer, halide_cuda_device_interface())
                  assert((halide_device_malloc_result$9 == 0), halide_device_malloc_result$9)
                  let halide_device_malloc_result$12 = halide_device_malloc(f7.buffer, halide_cuda_device_interface())
                  assert((halide_device_malloc_result$12 == 0), halide_device_malloc_result$12)
                  let halide_device_malloc_result$15 = halide_device_malloc(f3.buffer, halide_cuda_device_interface())
                  assert((halide_device_malloc_result$15 == 0), halide_device_malloc_result$15)
                  let halide_device_malloc_result$18 = halide_device_malloc(f4.buffer, halide_cuda_device_interface())
                  assert((halide_device_malloc_result$18 == 0), halide_device_malloc_result$18)
                  let halide_device_malloc_result$20 = halide_device_malloc(f2.buffer, halide_cuda_device_interface())
                  assert((halide_device_malloc_result$20 == 0), halide_device_malloc_result$20)
                  let halide_device_malloc_result$25 = halide_device_malloc(f1.buffer, halide_cuda_device_interface())
                  assert((halide_device_malloc_result$25 == 0), halide_device_malloc_result$25)
                  let halide_copy_to_device_result = halide_copy_to_device(f26.buffer, halide_cuda_device_interface())
                  assert((halide_copy_to_device_result == 0), halide_copy_to_device_result)
                  gpu_block<CUDA> (f27.s0._::x._::x.__block_id_y, 0, ((((processed.extent.0/2)*2) + 434)/433)) {
                    let f27.s0._::x._::xi.base = min(likely_if_innermost(((f27.s0._::x._::x.__block_id_y*433) + -1)), (((processed.extent.0/2)*2) + -432))
                    gpu_block<CUDA> (f27.s0._::y._::y.__block_id_x, 0, ((processed.extent.1/248) + 1)) {
                      let f27.s0._::y._::yi.base = min(likely_if_innermost(((f27.s0._::y._::y.__block_id_x*248) + -1)), (((processed.extent.1/2)*2) + -247))
                      gpu_thread<CUDA> (f27.s0._::x._::xi._::xi._::xi.__thread_id_y, 0, 55) {
                        gpu_thread<CUDA> (f27.s0._::y._::yi._::yi._::yi.__thread_id_x, 0, 16) {
                          for (f27.s0._::c, 0, 3) {
                            for (f27.s0._::x._::xi._::xii, 0, 8) {
                              for (f27.s0._::y._::yi._::yii._::yii, 0, 8) {
                                vectorized (f27.s0._::y._::yi._::yii._::yiii, 0, 2) {
                                  f27[(((f27.s0._::c*f27.stride.2) + ((((((min(likely_if_innermost((f27.s0._::x._::xi._::xi._::xi.__thread_id_y*8)), 425) + f27.s0._::x._::xi._::xii) + f27.s0._::x._::xi.base) - f27._::x.min_realized.s) + 432)*((max((processed.extent.1/2), 123)*2) + 2)) + (((min(likely_if_innermost((f27.s0._::y._::yi._::yi._::yi.__thread_id_x*16)), 232) + ((f27.s0._::y._::yi._::yii._::yii*2) + f27.s0._::y._::yi._::yii._::yiii)) + f27.s0._::y._::yi.base) - (min((processed.extent.1/2), 123)*2)))) + 247)] = (let t2203.s = (min(likely_if_innermost((f27.s0._::y._::yi._::yi._::yi.__thread_id_x*16)), 232) + ((f27.s0._::y._::yi._::yii._::yii*2) + f27.s0._::y._::yi._::yii._::yiii)) in (let t2205 = (((f27.s0._::y._::yi.base + t2203.s) % 2) == 0) in (let t2206 = ((((min(likely_if_innermost((f27.s0._::x._::xi._::xi._::xi.__thread_id_y*8)), 425) + f27.s0._::x._::xi._::xii) + f27.s0._::x._::xi.base) % 2) == 0) in (let t2207 = f3[(((((((f27.s0._::y._::yi.base + t2203.s)/2) - f3._::y.min_realized.s) + 492)*(f3._::x.extent_realized.s + 434)) + ((((min(likely_if_innermost((f27.s0._::x._::xi._::xi._::xi.__thread_id_y*8)), 425) + f27.s0._::x._::xi._::xii) + f27.s0._::x._::xi.base)/2) - min((f3._::x.min_realized.s/2), 430))) + 432)] in (let t2208 = f7[((((((((min(likely_if_innermost((f27.s0._::x._::xi._::xi._::xi.__thread_id_y*8)), 425) + f27.s0._::x._::xi._::xii) + f27.s0._::x._::xi.base)/2) - (f7._::x.min_realized.s/2)) + 432)*(f7._::y.extent_realized.s + 248)) + (((f27.s0._::y._::yi.base + t2203.s)/2) - f7._::y.min_realized.s)) + 246)] in (let t2209 = f2[((((((((min(likely_if_innermost((f27.s0._::x._::xi._::xi._::xi.__thread_id_y*8)), 425) + f27.s0._::x._::xi._::xii) + f27.s0._::x._::xi.base)/2) - f2._::x.min_realized.s) + 217)*(f2._::y.extent_realized.s + 126)) + (((f27.s0._::y._::yi.base + t2203.s)/2) - f2._::y.min_realized.s)) + 124)] in (let t2211.s = f7[(((((((((min(likely_if_innermost((f27.s0._::x._::xi._::xi._::xi.__thread_id_y*8)), 425) + f27.s0._::x._::xi._::xii) + f27.s0._::x._::xi.base)/2) - (f7._::x.min_realized.s/2)) + 432)*(f7._::y.extent_realized.s + 248)) + (((f27.s0._::y._::yi.base + t2203.s)/2) - f7._::y.min_realized.s)) - f7._::y.extent_realized.s) + -2)] in (let t2212 = f2[(((((((((min(likely_if_innermost((f27.s0._::x._::xi._::xi._::xi.__thread_id_y*8)), 425) + f27.s0._::x._::xi._::xii) + f27.s0._::x._::xi.base)/2) - f2._::x.min_realized.s) + 217)*(f2._::y.extent_realized.s + 126)) + (((f27.s0._::y._::yi.base + t2203.s)/2) - f2._::y.min_realized.s)) - f2._::y.extent_realized.s) + -2)] in (let t2215 = f2[(((((((((min(likely_if_innermost((f27.s0._::x._::xi._::xi._::xi.__thread_id_y*8)), 425) + f27.s0._::x._::xi._::xii) + f27.s0._::x._::xi.base)/2) - f2._::x.min_realized.s) + 217)*(f2._::y.extent_realized.s + 126)) + (((f27.s0._::y._::yi.base + t2203.s)/2) - f2._::y.min_realized.s)) - f2._::y.extent_realized.s) + -1)] in (let t2216 = f2[((((((((min(likely_if_innermost((f27.s0._::x._::xi._::xi._::xi.__thread_id_y*8)), 425) + f27.s0._::x._::xi._::xii) + f27.s0._::x._::xi.base)/2) - f2._::x.min_realized.s) + 217)*(f2._::y.extent_realized.s + 126)) + (((f27.s0._::y._::yi.base + t2203.s)/2) - f2._::y.min_realized.s)) + 125)] in (let t2217 = f4[(((((((((min(likely_if_innermost((f27.s0._::x._::xi._::xi._::xi.__thread_id_y*8)), 425) + f27.s0._::x._::xi._::xii) + f27.s0._::x._::xi.base)/2) - (f4._::x.min_realized.s/2)) + 432)*(f4._::y.extent_realized.s + 248)) + (((f27.s0._::y._::yi.base + t2203.s)/2) - f4._::y.min_realized.s)) - f4._::y.extent_realized.s) + -1)] in (let t2218 = f4[((((((((min(likely_if_innermost((f27.s0._::x._::xi._::xi._::xi.__thread_id_y*8)), 425) + f27.s0._::x._::xi._::xii) + f27.s0._::x._::xi.base)/2) - (f4._::x.min_realized.s/2)) + 432)*(f4._::y.extent_realized.s + 248)) + (((f27.s0._::y._::yi.base + t2203.s)/2) - f4._::y.min_realized.s)) + 247)] in (let t2219 = f3[((((((((f27.s0._::y._::yi.base + t2203.s)/2) - f3._::y.min_realized.s) + 492)*(f3._::x.extent_realized.s + 434)) + ((((min(likely_if_innermost((f27.s0._::x._::xi._::xi._::xi.__thread_id_y*8)), 425) + f27.s0._::x._::xi._::xii) + f27.s0._::x._::xi.base)/2) - min((f3._::x.min_realized.s/2), 430))) + f3._::x.extent_realized.s) + 866)] in (let t2220 = select((absd(t2217, t2218) < absd(t2219, t2207)), int16((((int32(t2217) + int32(t2218)) + 1)/2)), int16((((int32(t2219) + int32(t2207)) + 1)/2))) in (let t2221.s = f7[((((((((min(likely_if_innermost((f27.s0._::x._::xi._::xi._::xi.__thread_id_y*8)), 425) + f27.s0._::x._::xi._::xii) + f27.s0._::x._::xi.base)/2) - (f7._::x.min_realized.s/2)) + 432)*(f7._::y.extent_realized.s + 248)) + (((f27.s0._::y._::yi.base + t2203.s)/2) - f7._::y.min_realized.s)) + 247)] in (let t2223 = select(t2205, select(t2206, ((t2207 - int16((((int32(t2208) + int32(t2211.s)) + 1)/2))) + int16((((int32(t2212) + int32(t2209)) + 1)/2))), t2209), select(t2206, select((absd(t2209, t2215) < absd(t2212, t2216)), ((t2220 - int16((((int32(t2208) + int32(f7[(((((((((min(likely_if_innermost((f27.s0._::x._::xi._::xi._::xi.__thread_id_y*8)), 425) + f27.s0._::x._::xi._::xii) + f27.s0._::x._::xi.base)/2) - (f7._::x.min_realized.s/2)) + 432)*(f7._::y.extent_realized.s + 248)) + (((f27.s0._::y._::yi.base + t2203.s)/2) - f7._::y.min_realized.s)) - f7._::y.extent_realized.s) + -1)])) + 1)/2))) + int16((((int32(t2209) + int32(t2215)) + 1)/2))), ((t2220 - int16((((int32(t2211.s) + int32(t2221.s)) + 1)/2))) + int16((((int32(t2212) + int32(t2216)) + 1)/2)))), ((t2218 - int16((((int32(t2208) + int32(t2221.s)) + 1)/2))) + int16((((int32(t2209) + int32(t2216)) + 1)/2))))) in (let t2224 = select(t2205, select(t2206, t2207, t2208), select(t2206, t2220, t2218)) in (let t2226 = f4[(((((((((min(likely_if_innermost((f27.s0._::x._::xi._::xi._::xi.__thread_id_y*8)), 425) + f27.s0._::x._::xi._::xii) + f27.s0._::x._::xi.base)/2) - (f4._::x.min_realized.s/2)) + 432)*(f4._::y.extent_realized.s + 248)) + (((f27.s0._::y._::yi.base + t2203.s)/2) - f4._::y.min_realized.s)) - f4._::y.extent_realized.s) + -2)] in (let t2227 = f4[((((((((min(likely_if_innermost((f27.s0._::x._::xi._::xi._::xi.__thread_id_y*8)), 425) + f27.s0._::x._::xi._::xii) + f27.s0._::x._::xi.base)/2) - (f4._::x.min_realized.s/2)) + 432)*(f4._::y.extent_realized.s + 248)) + (((f27.s0._::y._::yi.base + t2203.s)/2) - f4._::y.min_realized.s)) + 246)] in (let t2228 = f3[(((((((f27.s0._::y._::yi.base + t2203.s)/2) - f3._::y.min_realized.s) + 492)*(f3._::x.extent_realized.s + 434)) + ((((min(likely_if_innermost((f27.s0._::x._::xi._::xi._::xi.__thread_id_y*8)), 425) + f27.s0._::x._::xi._::xii) + f27.s0._::x._::xi.base)/2) - min((f3._::x.min_realized.s/2), 430))) + 432)] in (let t2229 = f3[((((((((f27.s0._::y._::yi.base + t2203.s)/2) - f3._::y.min_realized.s) + 492)*(f3._::x.extent_realized.s + 434)) + ((((min(likely_if_innermost((f27.s0._::x._::xi._::xi._::xi.__thread_id_y*8)), 425) + f27.s0._::x._::xi._::xii) + f27.s0._::x._::xi.base)/2) - min((f3._::x.min_realized.s/2), 430))) - f3._::x.extent_realized.s) + -2)] in (let t2230.s = select((absd(t2226, t2227) < absd(t2228, t2229)), int16((((int32(t2226) + int32(t2227)) + 1)/2)), int16((((int32(t2228) + int32(t2229)) + 1)/2))) in (let t2234 = f1[(((((((((min(likely_if_innermost((f27.s0._::x._::xi._::xi._::xi.__thread_id_y*8)), 425) + f27.s0._::x._::xi._::xii) + f27.s0._::x._::xi.base)/2)*2) - f1._::x.min_realized.s) + 432)*(f1._::y.extent_realized.s + 985)) + ((((f27.s0._::y._::yi.base + t2203.s)/2)*2) - f1._::y.min_realized.s)) + 985)] in (let t2236 = f1[(((((((((min(likely_if_innermost((f27.s0._::x._::xi._::xi._::xi.__thread_id_y*8)), 425) + f27.s0._::x._::xi._::xii) + f27.s0._::x._::xi.base)/2)*2) - f1._::x.min_realized.s) + 432)*(f1._::y.extent_realized.s + 985)) + ((((f27.s0._::y._::yi.base + t2203.s)/2)*2) - f1._::y.min_realized.s)) + 983)] in (let t2238 = f1[(((f1._::y.extent_realized.s*2) + ((((((((min(likely_if_innermost((f27.s0._::x._::xi._::xi._::xi.__thread_id_y*8)), 425) + f27.s0._::x._::xi._::xii) + f27.s0._::x._::xi.base)/2)*2) - f1._::x.min_realized.s) + 432)*(f1._::y.extent_realized.s + 985)) + ((((f27.s0._::y._::yi.base + t2203.s)/2)*2) - f1._::y.min_realized.s))) + 2953)] in (let t2239 = f1[(((f1._::y.extent_realized.s*2) + ((((((((min(likely_if_innermost((f27.s0._::x._::xi._::xi._::xi.__thread_id_y*8)), 425) + f27.s0._::x._::xi._::xii) + f27.s0._::x._::xi.base)/2)*2) - f1._::x.min_realized.s) + 432)*(f1._::y.extent_realized.s + 985)) + ((((f27.s0._::y._::yi.base + t2203.s)/2)*2) - f1._::y.min_realized.s))) + 2955)] in (let t2240 = f4[((((((((min(likely_if_innermost((f27.s0._::x._::xi._::xi._::xi.__thread_id_y*8)), 425) + f27.s0._::x._::xi._::xii) + f27.s0._::x._::xi.base)/2) - (f4._::x.min_realized.s/2)) + 432)*(f4._::y.extent_realized.s + 248)) + (((f27.s0._::y._::yi.base + t2203.s)/2) - f4._::y.min_realized.s)) + 247)] in (let t2241 = f4[(((((((((min(likely_if_innermost((f27.s0._::x._::xi._::xi._::xi.__thread_id_y*8)), 425) + f27.s0._::x._::xi._::xii) + f27.s0._::x._::xi.base)/2) - (f4._::x.min_realized.s/2)) + 432)*(f4._::y.extent_realized.s + 248)) + (((f27.s0._::y._::yi.base + t2203.s)/2) - f4._::y.min_realized.s)) + f4._::y.extent_realized.s) + 495)] in (let t2242 = f3[((((((((f27.s0._::y._::yi.base + t2203.s)/2) - f3._::y.min_realized.s) + 492)*(f3._::x.extent_realized.s + 434)) + ((((min(likely_if_innermost((f27.s0._::x._::xi._::xi._::xi.__thread_id_y*8)), 425) + f27.s0._::x._::xi._::xii) + f27.s0._::x._::xi.base)/2) - min((f3._::x.min_realized.s/2), 430))) + f3._::x.extent_realized.s) + 867)] in (let t2243 = f3[(((((((f27.s0._::y._::yi.base + t2203.s)/2) - f3._::y.min_realized.s) + 492)*(f3._::x.extent_realized.s + 434)) + ((((min(likely_if_innermost((f27.s0._::x._::xi._::xi._::xi.__thread_id_y*8)), 425) + f27.s0._::x._::xi._::xii) + f27.s0._::x._::xi.base)/2) - min((f3._::x.min_realized.s/2), 430))) + 433)] in (let t2244.s = select((absd(t2240, t2241) < absd(t2242, t2243)), int16((((int32(t2240) + int32(t2241)) + 1)/2)), int16((((int32(t2242) + int32(t2243)) + 1)/2))) in (let t2246 = f4[((((((((min(likely_if_innermost((f27.s0._::x._::xi._::xi._::xi.__thread_id_y*8)), 425) + f27.s0._::x._::xi._::xii) + f27.s0._::x._::xi.base)/2) - (f4._::x.min_realized.s/2)) + 432)*(f4._::y.extent_realized.s + 248)) + (((f27.s0._::y._::yi.base + t2203.s)/2) - f4._::y.min_realized.s)) + 246)] in (let t2247 = f4[(((((((((min(likely_if_innermost((f27.s0._::x._::xi._::xi._::xi.__thread_id_y*8)), 425) + f27.s0._::x._::xi._::xii) + f27.s0._::x._::xi.base)/2) - (f4._::x.min_realized.s/2)) + 432)*(f4._::y.extent_realized.s + 248)) + (((f27.s0._::y._::yi.base + t2203.s)/2) - f4._::y.min_realized.s)) + f4._::y.extent_realized.s) + 494)] in (let t2248 = f3[(((((((f27.s0._::y._::yi.base + t2203.s)/2) - f3._::y.min_realized.s) + 492)*(f3._::x.extent_realized.s + 434)) + ((((min(likely_if_innermost((f27.s0._::x._::xi._::xi._::xi.__thread_id_y*8)), 425) + f27.s0._::x._::xi._::xii) + f27.s0._::x._::xi.base)/2) - min((f3._::x.min_realized.s/2), 430))) + 433)] in (let t2249 = f3[((((((((f27.s0._::y._::yi.base + t2203.s)/2) - f3._::y.min_realized.s) + 492)*(f3._::x.extent_realized.s + 434)) + ((((min(likely_if_innermost((f27.s0._::x._::xi._::xi._::xi.__thread_id_y*8)), 425) + f27.s0._::x._::xi._::xii) + f27.s0._::x._::xi.base)/2) - min((f3._::x.min_realized.s/2), 430))) - f3._::x.extent_realized.s) + -1)] in (let t2250 = select(t2205, select(t2206, ((t2207 - int16((((int32(t2220) + int32(t2230.s)) + 1)/2))) + int16((((int32(t2234) + int32(t2236)) + 1)/2))), select((absd(t2234, t2238) < absd(t2239, t2236)), ((t2208 - int16((((int32(t2220) + int32(select((absd(t2246, t2247) < absd(t2248, t2249)), int16((((int32(t2246) + int32(t2247)) + 1)/2)), int16((((int32(t2248) + int32(t2249)) + 1)/2))))) + 1)/2))) + int16((((int32(t2234) + int32(t2238)) + 1)/2))), ((t2208 - int16((((int32(t2244.s) + int32(t2230.s)) + 1)/2))) + int16((((int32(t2239) + int32(t2236)) + 1)/2))))), select(t2206, t2234, ((t2218 - int16((((int32(t2220) + int32(t2244.s)) + 1)/2))) + int16((((int32(t2234) + int32(t2239)) + 1)/2))))) in select((f27.s0._::c == 0), int16((((int32(f26[2])*int32(t2250)) + ((int32(f26[1])*int32(t2224)) + ((int32(f26[0])*int32(t2223)) + int32(f26[3]))))/256)), select((f27.s0._::c == 1), int16((((int32(f26[6])*int32(t2250)) + ((int32(f26[5])*int32(t2224)) + ((int32(f26[4])*int32(t2223)) + int32(f26[7]))))/256)), int16((((int32(f26[10])*int32(t2250)) + ((int32(f26[9])*int32(t2224)) + ((int32(f26[8])*int32(t2223)) + int32(f26[11]))))/256))))))))))))))))))))))))))))))))))))))))
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  _halide_buffer_set_device_dirty(f27.buffer, (uint1)1)
                }
                let halide_device_and_host_free_result = halide_device_and_host_free(f26.buffer)
                assert((halide_device_and_host_free_result == 0), halide_device_and_host_free_result)
                let halide_device_free_result$9 = halide_device_free(f1.buffer)
                assert((halide_device_free_result$9 == 0), halide_device_free_result$9)
                let halide_device_free_result$8 = halide_device_free(f2.buffer)
                assert((halide_device_free_result$8 == 0), halide_device_free_result$8)
                let halide_device_free_result$7 = halide_device_free(f4.buffer)
                assert((halide_device_free_result$7 == 0), halide_device_free_result$7)
                let halide_device_free_result$6 = halide_device_free(f3.buffer)
                assert((halide_device_free_result$6 == 0), halide_device_free_result$6)
                let halide_device_free_result$5 = halide_device_free(f7.buffer)
                assert((halide_device_free_result$5 == 0), halide_device_free_result$5)
              }
            }
          }
        }
      }
    }
  }
  let f28._::y.min_realized.s = min((min((processed.extent.1/2), 124)*2), (((processed.extent.1/2)*2) + 125))
  let f28._::y.extent_realized.s = (max(max(min(((processed.extent.1/2)*2), ((((processed.extent.1 + -2)/248)*248) + 248)), (min(((processed.extent.1/2)*2), ((((processed.extent.1 + -2)/124)*124) + 124)) + -1)), ((processed.extent.1/2)*2)) - f28._::y.min_realized.s)
  let f28._::x.min_realized.s = min(((processed.extent.0/2)*2), (min(((processed.extent.0/2)*2), (min((min((processed.extent.0/2), 3)*2), (((processed.extent.0/2)*2) + 3)) + 57)) + 171))
  let f28._::x.extent_realized.s = (max(max(min(((processed.extent.0/2)*2), (((processed.extent.0/8)*8) + 6)), (min(((processed.extent.0/2)*2), (max((((processed.extent.0 + -2)/4)*4), ((((processed.extent.0 + -2)/64)*64) + 60)) + 4)) + -1)), min(((processed.extent.0/2)*2), (((processed.extent.0/236)*236) + 234))) - f28._::x.min_realized.s)
  let f28.stride.2 = ((f28._::x.extent_realized.s + 236)*(f28._::y.extent_realized.s + 250))
  allocate f28[uint8 * (f28._::x.extent_realized.s + 236) * (f28._::y.extent_realized.s + 250) * 3] if (uint1)0
  let f28.buffer = (let t2966 = make_struct((halide_dimension_t *), (f28._::x.min_realized.s + -235), (f28._::x.extent_realized.s + 236), 1, 0, (f28._::y.min_realized.s + -249), (f28._::y.extent_realized.s + 250), (f28._::x.extent_realized.s + 236), 0, 0, 3, f28.stride.2, 0) in _halide_buffer_init(alloca(size_of_halide_buffer_t()), t2966, reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 1, 8, 3, t2966, (uint64)0))
  register_destructor("halide_device_free_as_destructor", f28.buffer)
  produce f28 {
    consume f27 {
      consume curve {
        if (likely((uint1)1)) {
          let halide_device_malloc_result$5 = halide_device_malloc(f28.buffer, halide_cuda_device_interface())
          assert((halide_device_malloc_result$5 == 0), halide_device_malloc_result$5)
          let halide_device_malloc_result$10 = halide_device_malloc(f27.buffer, halide_cuda_device_interface())
          assert((halide_device_malloc_result$10 == 0), halide_device_malloc_result$10)
          let halide_device_malloc_result$29 = halide_device_malloc(curve.buffer, halide_cuda_device_interface())
          assert((halide_device_malloc_result$29 == 0), halide_device_malloc_result$29)
          gpu_block<CUDA> (f28.s0._::c.__block_id_z, 0, 3) {
            gpu_block<CUDA> (f28.s0._::y._::y.__block_id_y, 0, ((processed.extent.1/2) + 1)) {
              let f28.s0._::y._::yi.base = min(likely_if_innermost(((f28.s0._::y._::y.__block_id_y*2) + -1)), (((processed.extent.1/2)*2) + -1))
              gpu_block<CUDA> (f28.s0._::x._::x.__block_id_x, 0, ((processed.extent.0/236) + 1)) {
                let f28.s0._::x._::xi.base = min(likely_if_innermost(((f28.s0._::x._::x.__block_id_x*236) + -1)), (((processed.extent.0/2)*2) + -235))
                gpu_thread<CUDA> (f28.s0._::y._::yi._::yi.__thread_id_y, 0, 2) {
                  gpu_thread<CUDA> (f28.s0._::x._::xi._::xi._::xi.__thread_id_x, 0, 15) {
                    unrolled (f28.s0._::x._::xi._::xii._::xii, 0, 4) {
                      vectorized (f28.s0._::x._::xi._::xii._::xiii, 0, 4) {
                        f28[(((f28.s0._::c.__block_id_z*f28.stride.2) + (((((f28.s0._::y._::yi._::yi.__thread_id_y + f28.s0._::y._::yi.base) - f28._::y.min_realized.s) + 249)*(f28._::x.extent_realized.s + 236)) + (((min(likely_if_innermost((f28.s0._::x._::xi._::xi._::xi.__thread_id_x*16)), 220) + ((f28.s0._::x._::xi._::xii._::xii*4) + f28.s0._::x._::xi._::xii._::xiii)) + f28.s0._::x._::xi.base) - f28._::x.min_realized.s))) + 235)] = curve[int32(max(min(f27[(((f27.stride.2*f28.s0._::c.__block_id_z) + ((((((min(likely_if_innermost((f28.s0._::x._::xi._::xi._::xi.__thread_id_x*16)), 220) + ((f28.s0._::x._::xi._::xii._::xii*4) + f28.s0._::x._::xi._::xii._::xiii)) + f28.s0._::x._::xi.base) - f27._::x.min_realized.s) + 432)*((max((processed.extent.1/2), 123)*2) + 2)) + ((f28.s0._::y._::yi._::yi.__thread_id_y + f28.s0._::y._::yi.base) - (min((processed.extent.1/2), 123)*2)))) + 247)], (int16)1023), (int16)0))]
                      }
                    }
                  }
                }
              }
            }
          }
          _halide_buffer_set_device_dirty(f28.buffer, (uint1)1)
        }
        let halide_device_free_result$11 = halide_device_free(curve.buffer)
        assert((halide_device_free_result$11 == 0), halide_device_free_result$11)
        let halide_device_free_result$4 = halide_device_free(f27.buffer)
        assert((halide_device_free_result$4 == 0), halide_device_free_result$4)
      }
    }
  }
  let unsharp_y._::y.extent_realized.s = (min(((processed.extent.1/2)*2), ((((processed.extent.1 + -2)/248)*248) + 248)) - (min((processed.extent.1/2), 124)*2))
  let unsharp_y._::x.min_realized.s = min((processed.extent.0/2), (min((processed.extent.0/2), 2) + 1))
  let unsharp_y._::x.extent_realized.s = (min(((processed.extent.0/2)*2), (max((((processed.extent.0 + -2)/4)*4), (((processed.extent.0/8)*8) + 2)) + 4)) - (unsharp_y._::x.min_realized.s*2))
  let unsharp_y.stride.2 = ((unsharp_y._::y.extent_realized.s + 248)*(unsharp_y._::x.extent_realized.s + 8))
  allocate unsharp_y[uint8 * (unsharp_y._::x.extent_realized.s + 8) * (unsharp_y._::y.extent_realized.s + 248) * 3] if (uint1)0
  let unsharp_y.buffer = (let t2965 = make_struct((halide_dimension_t *), ((unsharp_y._::x.min_realized.s*2) + -7), (unsharp_y._::x.extent_realized.s + 8), (unsharp_y._::y.extent_realized.s + 248), 0, ((min((processed.extent.1/2), 124)*2) + -248), (unsharp_y._::y.extent_realized.s + 248), 1, 0, 0, 3, unsharp_y.stride.2, 0) in _halide_buffer_init(alloca(size_of_halide_buffer_t()), t2965, reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 1, 8, 3, t2965, (uint64)0))
  register_destructor("halide_device_free_as_destructor", unsharp_y.buffer)
  produce unsharp_y {
    consume f28 {
      if (likely((uint1)1)) {
        let halide_device_malloc_result$3 = halide_device_malloc(unsharp_y.buffer, halide_cuda_device_interface())
        assert((halide_device_malloc_result$3 == 0), halide_device_malloc_result$3)
        let halide_device_malloc_result$6 = halide_device_malloc(f28.buffer, halide_cuda_device_interface())
        assert((halide_device_malloc_result$6 == 0), halide_device_malloc_result$6)
        gpu_block<CUDA> (unsharp_y.s0._::c._::c.__block_id_z, 0, 2) {
          gpu_block<CUDA> (unsharp_y.s0._::x._::x.__block_id_y, 0, ((processed.extent.0/8) + 1)) {
            let unsharp_y.s0._::x._::xi.base = min(likely_if_innermost(((unsharp_y.s0._::x._::x.__block_id_y*8) + -1)), (((processed.extent.0/2)*2) + -7))
            gpu_block<CUDA> (unsharp_y.s0._::y._::y.__block_id_x, 0, ((processed.extent.1 + 246)/248)) {
              let unsharp_y.s0._::y._::yi.base = min(likely_if_innermost((unsharp_y.s0._::y._::y.__block_id_x*248)), (((processed.extent.1/2)*2) + -248))
              gpu_thread<CUDA> (unsharp_y.s0._::c._::ci._::ci.__thread_id_z, 0, 2) {
                gpu_thread<CUDA> (unsharp_y.s0._::x._::xi._::xi._::xi.__thread_id_y, 0, 2) {
                  gpu_thread<CUDA> (unsharp_y.s0._::y._::yi._::yi._::yi.__thread_id_x, 0, 31) {
                    unrolled (unsharp_y.s0._::x._::xi._::xii, 0, 4) {
                      unrolled (unsharp_y.s0._::y._::yi._::yii._::yii, 0, 2) {
                        vectorized (unsharp_y.s0._::y._::yi._::yii._::yiii, 0, 4) {
                          unsharp_y[((((min(likely_if_innermost((unsharp_y.s0._::c._::c.__block_id_z*2)), 1) + unsharp_y.s0._::c._::ci._::ci.__thread_id_z)*unsharp_y.stride.2) + (((((((unsharp_y.s0._::x._::xi._::xi._::xi.__thread_id_y*4) + unsharp_y.s0._::x._::xi._::xii) + unsharp_y.s0._::x._::xi.base) - (unsharp_y._::x.min_realized.s*2)) + 7)*(unsharp_y._::y.extent_realized.s + 248)) + ((((unsharp_y.s0._::y._::yi._::yi._::yi.__thread_id_x*8) + ((unsharp_y.s0._::y._::yi._::yii._::yii*4) + unsharp_y.s0._::y._::yi._::yii._::yiii)) + unsharp_y.s0._::y._::yi.base) - (min((processed.extent.1/2), 124)*2)))) + 248)] = uint8((((uint16(uint8((((uint16(f28[(((((min(likely_if_innermost((unsharp_y.s0._::c._::c.__block_id_z*2)), 1) + unsharp_y.s0._::c._::ci._::ci.__thread_id_z)*f28.stride.2) + (((((((unsharp_y.s0._::y._::yi._::yi._::yi.__thread_id_x*8) + ((unsharp_y.s0._::y._::yi._::yii._::yii*4) + unsharp_y.s0._::y._::yi._::yii._::yiii)) + unsharp_y.s0._::y._::yi.base) - f28._::y.min_realized.s) + 249)*(f28._::x.extent_realized.s + 236)) + ((((unsharp_y.s0._::x._::xi._::xi._::xi.__thread_id_y*4) + unsharp_y.s0._::x._::xi._::xii) + unsharp_y.s0._::x._::xi.base) - f28._::x.min_realized.s))) - f28._::x.extent_realized.s) + -1)]) + uint16(f28[(((((min(likely_if_innermost((unsharp_y.s0._::c._::c.__block_id_z*2)), 1) + unsharp_y.s0._::c._::ci._::ci.__thread_id_z)*f28.stride.2) + (((((((unsharp_y.s0._::y._::yi._::yi._::yi.__thread_id_x*8) + ((unsharp_y.s0._::y._::yi._::yii._::yii*4) + unsharp_y.s0._::y._::yi._::yii._::yiii)) + unsharp_y.s0._::y._::yi.base) - f28._::y.min_realized.s) + 249)*(f28._::x.extent_realized.s + 236)) + ((((unsharp_y.s0._::x._::xi._::xi._::xi.__thread_id_y*4) + unsharp_y.s0._::x._::xi._::xii) + unsharp_y.s0._::x._::xi.base) - f28._::x.min_realized.s))) + f28._::x.extent_realized.s) + 471)])) + (uint16)1)/(uint16)2))) + uint16(f28[((((min(likely_if_innermost((unsharp_y.s0._::c._::c.__block_id_z*2)), 1) + unsharp_y.s0._::c._::ci._::ci.__thread_id_z)*f28.stride.2) + (((((((unsharp_y.s0._::y._::yi._::yi._::yi.__thread_id_x*8) + ((unsharp_y.s0._::y._::yi._::yii._::yii*4) + unsharp_y.s0._::y._::yi._::yii._::yiii)) + unsharp_y.s0._::y._::yi.base) - f28._::y.min_realized.s) + 249)*(f28._::x.extent_realized.s + 236)) + ((((unsharp_y.s0._::x._::xi._::xi._::xi.__thread_id_y*4) + unsharp_y.s0._::x._::xi._::xii) + unsharp_y.s0._::x._::xi.base) - f28._::x.min_realized.s))) + 235)])) + (uint16)1)/(uint16)2))
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        _halide_buffer_set_device_dirty(unsharp_y.buffer, (uint1)1)
      }
    }
  }
  let mask._::y.min_realized.s = min((processed.extent.1/2), (min((processed.extent.1/2), 62) + 62))
  let mask._::y.extent_realized.s = (min(((processed.extent.1/2)*2), (max((((processed.extent.1 + -2)/124)*124), ((((processed.extent.1 + -2)/248)*248) + 124)) + 124)) - (mask._::y.min_realized.s*2))
  let mask._::x.extent_realized.s = (min(((processed.extent.0/2)*2), (max((((processed.extent.0 + -2)/4)*4), ((((processed.extent.0 + -2)/64)*64) + 60)) + 4)) - (min((processed.extent.0/2), 32)*2))
  let mask.stride.2 = ((mask._::y.extent_realized.s + 248)*(mask._::x.extent_realized.s + 64))
  allocate mask[int16 * (mask._::x.extent_realized.s + 64) * (mask._::y.extent_realized.s + 248) * 3] if (uint1)0
  let mask.buffer = (let t2964 = make_struct((halide_dimension_t *), ((min((processed.extent.0/2), 32)*2) + -64), (mask._::x.extent_realized.s + 64), (mask._::y.extent_realized.s + 248), 0, ((mask._::y.min_realized.s*2) + -248), (mask._::y.extent_realized.s + 248), 1, 0, 0, 3, mask.stride.2, 0) in _halide_buffer_init(alloca(size_of_halide_buffer_t()), t2964, reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 0, 16, 3, t2964, (uint64)0))
  register_destructor("halide_device_free_as_destructor", mask.buffer)
  produce mask {
    consume unsharp_y {
      consume f28 {
        if (likely((uint1)1)) {
          let halide_device_malloc_result$1 = halide_device_malloc(mask.buffer, halide_cuda_device_interface())
          assert((halide_device_malloc_result$1 == 0), halide_device_malloc_result$1)
          let halide_device_malloc_result$4 = halide_device_malloc(unsharp_y.buffer, halide_cuda_device_interface())
          assert((halide_device_malloc_result$4 == 0), halide_device_malloc_result$4)
          let halide_device_malloc_result$7 = halide_device_malloc(f28.buffer, halide_cuda_device_interface())
          assert((halide_device_malloc_result$7 == 0), halide_device_malloc_result$7)
          gpu_block<CUDA> (mask.s0._::x._::x.__block_id_y, 0, ((processed.extent.0 + 2)/4)) {
            let mask.s0._::x._::xi.base = min(likely_if_innermost((mask.s0._::x._::x.__block_id_y*4)), (((processed.extent.0/2)*2) + -4))
            gpu_block<CUDA> (mask.s0._::y._::y.__block_id_x, 0, ((processed.extent.1 + 246)/248)) {
              let mask.s0._::y._::yi.base = min(likely_if_innermost((mask.s0._::y._::y.__block_id_x*248)), (((processed.extent.1/2)*2) + -248))
              gpu_thread<CUDA> (mask.s0._::c._::c._::c.__thread_id_z, 0, 2) {
                gpu_thread<CUDA> (mask.s0._::x._::xi._::xi._::xi.__thread_id_y, 0, 2) {
                  gpu_thread<CUDA> (mask.s0._::y._::yi._::yi._::yi.__thread_id_x, 0, 31) {
                    unrolled (mask.s0._::c._::ci, 0, 2) {
                      unrolled (mask.s0._::x._::xi._::xii, 0, 2) {
                        unrolled (mask.s0._::y._::yi._::yii._::yii, 0, 2) {
                          vectorized (mask.s0._::y._::yi._::yii._::yiii, 0, 4) {
                            mask[((((min(likely_if_innermost((mask.s0._::c._::c._::c.__thread_id_z*2)), 1) + mask.s0._::c._::ci)*mask.stride.2) + (((((((mask.s0._::x._::xi._::xi._::xi.__thread_id_y*2) + mask.s0._::x._::xi._::xii) + mask.s0._::x._::xi.base) - (min((processed.extent.0/2), 32)*2)) + 64)*(mask._::y.extent_realized.s + 248)) + ((((mask.s0._::y._::yi._::yi._::yi.__thread_id_x*8) + ((mask.s0._::y._::yi._::yii._::yii*4) + mask.s0._::y._::yi._::yii._::yiii)) + mask.s0._::y._::yi.base) - (mask._::y.min_realized.s*2)))) + 248)] = (let t1797.s = ((mask.s0._::y._::yi._::yi._::yi.__thread_id_x*8) + ((mask.s0._::y._::yi._::yii._::yii*4) + mask.s0._::y._::yi._::yii._::yiii)) in (int16(f28[((((min(likely_if_innermost((mask.s0._::c._::c._::c.__thread_id_z*2)), 1) + mask.s0._::c._::ci)*f28.stride.2) + (((((mask.s0._::y._::yi.base + t1797.s) - f28._::y.min_realized.s) + 249)*(f28._::x.extent_realized.s + 236)) + ((((mask.s0._::x._::xi._::xi._::xi.__thread_id_y*2) + mask.s0._::x._::xi._::xii) + mask.s0._::x._::xi.base) - f28._::x.min_realized.s))) + 235)]) - int16(uint8((((uint16(uint8((((uint16(unsharp_y[((((min(likely_if_innermost((mask.s0._::c._::c._::c.__thread_id_z*2)), 1) + mask.s0._::c._::ci)*unsharp_y.stride.2) + (((((((mask.s0._::x._::xi._::xi._::xi.__thread_id_y*2) + mask.s0._::x._::xi._::xii) + mask.s0._::x._::xi.base) - (unsharp_y._::x.min_realized.s*2)) + 7)*(unsharp_y._::y.extent_realized.s + 248)) + ((mask.s0._::y._::yi.base + t1797.s) - (min((processed.extent.1/2), 124)*2)))) - unsharp_y._::y.extent_realized.s)]) + uint16(unsharp_y[(((((min(likely_if_innermost((mask.s0._::c._::c._::c.__thread_id_z*2)), 1) + mask.s0._::c._::ci)*unsharp_y.stride.2) + (((((((mask.s0._::x._::xi._::xi._::xi.__thread_id_y*2) + mask.s0._::x._::xi._::xii) + mask.s0._::x._::xi.base) - (unsharp_y._::x.min_realized.s*2)) + 7)*(unsharp_y._::y.extent_realized.s + 248)) + ((mask.s0._::y._::yi.base + t1797.s) - (min((processed.extent.1/2), 124)*2)))) + unsharp_y._::y.extent_realized.s) + 496)])) + (uint16)1)/(uint16)2))) + uint16(unsharp_y[((((min(likely_if_innermost((mask.s0._::c._::c._::c.__thread_id_z*2)), 1) + mask.s0._::c._::ci)*unsharp_y.stride.2) + (((((((mask.s0._::x._::xi._::xi._::xi.__thread_id_y*2) + mask.s0._::x._::xi._::xii) + mask.s0._::x._::xi.base) - (unsharp_y._::x.min_realized.s*2)) + 7)*(unsharp_y._::y.extent_realized.s + 248)) + ((mask.s0._::y._::yi.base + t1797.s) - (min((processed.extent.1/2), 124)*2)))) + 248)])) + (uint16)1)/(uint16)2)))))
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          _halide_buffer_set_device_dirty(mask.buffer, (uint1)1)
        }
        let halide_device_free_result$2 = halide_device_free(unsharp_y.buffer)
        assert((halide_device_free_result$2 == 0), halide_device_free_result$2)
      }
    }
  }
  let sharpened._::y.min_realized.s = min((processed.extent.1/2), (min((processed.extent.1/2), 32) + 30))
  let sharpened._::y.extent_realized.s = (min(((processed.extent.1/2)*2), (max((((processed.extent.1 + -2)/64)*64), ((((processed.extent.1 + -2)/124)*124) + 60)) + 64)) - (sharpened._::y.min_realized.s*2))
  let sharpened._::x.extent_realized.s = processed.extent.0.required.s
  let sharpened.stride.2 = ((sharpened._::y.extent_realized.s + 124)*(sharpened._::x.extent_realized.s + 64))
  allocate sharpened[uint8 * (sharpened._::x.extent_realized.s + 64) * (sharpened._::y.extent_realized.s + 124) * 3] if (uint1)0
  let sharpened.buffer = (let t2963 = make_struct((halide_dimension_t *), ((min((processed.extent.0/2), 32)*2) + -64), (sharpened._::x.extent_realized.s + 64), (sharpened._::y.extent_realized.s + 124), 0, ((sharpened._::y.min_realized.s*2) + -124), (sharpened._::y.extent_realized.s + 124), 1, 0, 0, 3, sharpened.stride.2, 0) in _halide_buffer_init(alloca(size_of_halide_buffer_t()), t2963, reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 1, 8, 3, t2963, (uint64)0))
  register_destructor("halide_device_free_as_destructor", sharpened.buffer)
  produce sharpened {
    consume mask {
      consume f28 {
        let halide_device_malloc_result = halide_device_malloc(sharpened.buffer, halide_cuda_device_interface())
        assert((halide_device_malloc_result == 0), halide_device_malloc_result)
        let halide_device_malloc_result$2 = halide_device_malloc(mask.buffer, halide_cuda_device_interface())
        assert((halide_device_malloc_result$2 == 0), halide_device_malloc_result$2)
        let halide_device_malloc_result$8 = halide_device_malloc(f28.buffer, halide_cuda_device_interface())
        assert((halide_device_malloc_result$8 == 0), halide_device_malloc_result$8)
        gpu_block<CUDA> (sharpened.s0._::c.__block_id_z, 0, 3) {
          gpu_block<CUDA> (sharpened.s0._::x._::x.__block_id_y, 0, ((processed.extent.0 + 62)/64)) {
            let sharpened.s0._::x._::xi.base = min(likely_if_innermost((sharpened.s0._::x._::x.__block_id_y*64)), (((processed.extent.0/2)*2) + -64))
            gpu_block<CUDA> (sharpened.s0._::y._::y.__block_id_x, 0, ((processed.extent.1 + 122)/124)) {
              let sharpened.s0._::y._::yi.base = min(likely_if_innermost((sharpened.s0._::y._::y.__block_id_x*124)), (((processed.extent.1/2)*2) + -124))
              gpu_thread<CUDA> (sharpened.s0._::x._::xi._::xi.__thread_id_y, 0, 64) {
                gpu_thread<CUDA> (sharpened.s0._::y._::yi._::yi._::yi.__thread_id_x, 0, 16) {
                  if (likely((uint1)1)) {
                    unrolled (sharpened.s0._::y._::yi._::yii._::yii, 0, 2) {
                      vectorized (sharpened.s0._::y._::yi._::yii._::yiii, 0, 4) {
                        sharpened[(((sharpened.s0._::c.__block_id_z*sharpened.stride.2) + (((((sharpened.s0._::x._::xi._::xi.__thread_id_y + sharpened.s0._::x._::xi.base) - (min((processed.extent.0/2), 32)*2)) + 64)*(sharpened._::y.extent_realized.s + 124)) + (((min(likely_if_innermost((sharpened.s0._::y._::yi._::yi._::yi.__thread_id_x*8)), 116) + ((sharpened.s0._::y._::yi._::yii._::yii*4) + sharpened.s0._::y._::yi._::yii._::yiii)) + sharpened.s0._::y._::yi.base) - (sharpened._::y.min_realized.s*2)))) + 124)] = (let t1795.s = (min(likely_if_innermost((sharpened.s0._::y._::yi._::yi._::yi.__thread_id_x*8)), 116) + ((sharpened.s0._::y._::yi._::yii._::yii*4) + sharpened.s0._::y._::yi._::yii._::yiii)) in uint8(max(min((((mask[(((mask.stride.2*sharpened.s0._::c.__block_id_z) + (((((sharpened.s0._::x._::xi._::xi.__thread_id_y + sharpened.s0._::x._::xi.base) - (min((processed.extent.0/2), 32)*2)) + 64)*(mask._::y.extent_realized.s + 248)) + ((sharpened.s0._::y._::yi.base + t1795.s) - (mask._::y.min_realized.s*2)))) + 248)]*int16(uint8(max(min((sharpen_strength*32.000000f), 255.000000f), 0.000000f))))/(int16)32) + int16(f28[(((f28.stride.2*sharpened.s0._::c.__block_id_z) + (((((sharpened.s0._::y._::yi.base + t1795.s) - f28._::y.min_realized.s) + 249)*(f28._::x.extent_realized.s + 236)) + ((sharpened.s0._::x._::xi._::xi.__thread_id_y + sharpened.s0._::x._::xi.base) - f28._::x.min_realized.s))) + 235)])), (int16)255), (int16)0)))
                      }
                    }
                  }
                }
              }
            }
          }
        }
        let halide_device_free_result$3 = halide_device_free(f28.buffer)
        assert((halide_device_free_result$3 == 0), halide_device_free_result$3)
        let halide_device_free_result$1 = halide_device_free(mask.buffer)
        assert((halide_device_free_result$1 == 0), halide_device_free_result$1)
        _halide_buffer_set_device_dirty(sharpened.buffer, (uint1)1)
      }
    }
  }
  assert(((0 <= processed.min.1) && (((processed.extent.1 % 2) + processed.min.1) <= 0)), halide_error_explicit_bounds_too_small("_::y", "processed", 0, (((processed.extent.1/2)*2) + -1), processed.min.1, ((processed.extent.1 + processed.min.1) + -1)))
  assert(((0 <= processed.min.0) && (((processed.extent.0 % 2) + processed.min.0) <= 0)), halide_error_explicit_bounds_too_small("_::x", "processed", 0, (((processed.extent.0/2)*2) + -1), processed.min.0, ((processed.extent.0 + processed.min.0) + -1)))
  assert(((0 <= processed.min.2) && ((processed.extent.2 + processed.min.2) <= 3)), halide_error_explicit_bounds_too_small("_::c", "processed", 0, 2, processed.min.2, ((processed.extent.2 + processed.min.2) + -1)))
  produce processed {
    consume sharpened {
      let halide_copy_to_device_result$2 = halide_copy_to_device(processed.buffer, halide_cuda_device_interface())
      assert((halide_copy_to_device_result$2 == 0), halide_copy_to_device_result$2)
      gpu_block<CUDA> (processed.s0._::y._::y.__block_id_y, 0, ((processed.extent.1 + 62)/64)) {
        let processed.s0._::y._::yi.base = min(likely_if_innermost((processed.s0._::y._::y.__block_id_y*64)), (((processed.extent.1/2)*2) + -64))
        gpu_block<CUDA> (processed.s0._::x._::x.__block_id_x, 0, ((processed.extent.0 + 62)/64)) {
          let processed.s0._::x._::xi.base = min(likely_if_innermost((processed.s0._::x._::x.__block_id_x*64)), (((processed.extent.0/2)*2) + -64))
          gpu_thread<CUDA> (processed.s0._::y._::yi._::yi.__thread_id_y, 0, 64) {
            gpu_thread<CUDA> (processed.s0._::x._::xi._::xi._::xi.__thread_id_x, 0, 16) {
              unrolled (processed.s0._::c, 0, 3) {
                vectorized (processed.s0._::x._::xi._::xii, 0, 4) {
                  processed[(((processed.s0._::c*processed.stride.2) + (((processed.s0._::y._::yi._::yi.__thread_id_y + processed.s0._::y._::yi.base)*processed.stride.1) + (((processed.s0._::x._::xi._::xi._::xi.__thread_id_x*4) + processed.s0._::x._::xi._::xii) + processed.s0._::x._::xi.base))) - ((processed.min.1*processed.stride.1) + processed.min.0))] = sharpened[(((processed.s0._::c*sharpened.stride.2) + (((((((processed.s0._::x._::xi._::xi._::xi.__thread_id_x*4) + processed.s0._::x._::xi._::xii) + processed.s0._::x._::xi.base) - (min((processed.extent.0/2), 32)*2)) + 64)*(sharpened._::y.extent_realized.s + 124)) + ((processed.s0._::y._::yi._::yi.__thread_id_y + processed.s0._::y._::yi.base) - (sharpened._::y.min_realized.s*2)))) + 124)]
                }
              }
            }
          }
        }
      }
      _halide_buffer_set_device_dirty(processed.buffer, (uint1)1)
      let halide_device_free_result = halide_device_free(sharpened.buffer)
      assert((halide_device_free_result == 0), halide_device_free_result)
    }
  }
}

Simplifying correlated differences...
Unrolling...
Vectorizing...
Injecting per-block gpu synchronization...
Detecting vector interleavings...
Partitioning loops to simplify boundary conditions...
Trimming loops to the region over which they do something...
Injecting early frees...
Simplifying correlated differences...
Bounding small allocations...
Injecting warp shuffles...
Simplifying...
Lowering unsafe promises...
Lowering after final simplification:
assert((reinterpret(uint64, processed.buffer) != (uint64)0), halide_error_buffer_argument_is_null("processed"))
assert((reinterpret(uint64, matrix_7000.buffer) != (uint64)0), halide_error_buffer_argument_is_null("matrix_7000"))
assert((reinterpret(uint64, matrix_3200.buffer) != (uint64)0), halide_error_buffer_argument_is_null("matrix_3200"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.type = _halide_buffer_get_type(input.buffer)
let input.dimensions = _halide_buffer_get_dimensions(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.extent.0 = _halide_buffer_get_extent(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.extent.1 = _halide_buffer_get_extent(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let matrix_3200 = _halide_buffer_get_host(matrix_3200.buffer)
let matrix_3200.type = _halide_buffer_get_type(matrix_3200.buffer)
let matrix_3200.dimensions = _halide_buffer_get_dimensions(matrix_3200.buffer)
let matrix_3200.min.0 = _halide_buffer_get_min(matrix_3200.buffer, 0)
let matrix_3200.extent.0 = _halide_buffer_get_extent(matrix_3200.buffer, 0)
let matrix_3200.stride.0 = _halide_buffer_get_stride(matrix_3200.buffer, 0)
let matrix_3200.min.1 = _halide_buffer_get_min(matrix_3200.buffer, 1)
let matrix_3200.extent.1 = _halide_buffer_get_extent(matrix_3200.buffer, 1)
let matrix_3200.stride.1 = _halide_buffer_get_stride(matrix_3200.buffer, 1)
let matrix_7000 = _halide_buffer_get_host(matrix_7000.buffer)
let matrix_7000.type = _halide_buffer_get_type(matrix_7000.buffer)
let matrix_7000.dimensions = _halide_buffer_get_dimensions(matrix_7000.buffer)
let matrix_7000.min.0 = _halide_buffer_get_min(matrix_7000.buffer, 0)
let matrix_7000.extent.0 = _halide_buffer_get_extent(matrix_7000.buffer, 0)
let matrix_7000.stride.0 = _halide_buffer_get_stride(matrix_7000.buffer, 0)
let matrix_7000.min.1 = _halide_buffer_get_min(matrix_7000.buffer, 1)
let matrix_7000.extent.1 = _halide_buffer_get_extent(matrix_7000.buffer, 1)
let matrix_7000.stride.1 = _halide_buffer_get_stride(matrix_7000.buffer, 1)
let processed = _halide_buffer_get_host(processed.buffer)
let processed.type = _halide_buffer_get_type(processed.buffer)
let processed.dimensions = _halide_buffer_get_dimensions(processed.buffer)
let processed.min.0 = _halide_buffer_get_min(processed.buffer, 0)
let processed.extent.0 = _halide_buffer_get_extent(processed.buffer, 0)
let processed.stride.0 = _halide_buffer_get_stride(processed.buffer, 0)
let processed.min.1 = _halide_buffer_get_min(processed.buffer, 1)
let processed.extent.1 = _halide_buffer_get_extent(processed.buffer, 1)
let processed.stride.1 = _halide_buffer_get_stride(processed.buffer, 1)
let processed.min.2 = _halide_buffer_get_min(processed.buffer, 2)
let processed.extent.2 = _halide_buffer_get_extent(processed.buffer, 2)
let processed.stride.2 = _halide_buffer_get_stride(processed.buffer, 2)
let input.extent.0.required.s = (min(((processed.extent.0/2)*2), ((((processed.extent.0 + 10)/16)*16) + 4)) - (min((processed.extent.0/2), 2)*2))
let input.extent.1.required.s = (min(((processed.extent.1/2)*2), ((((processed.extent.1 + 10)/124)*124) + 112)) - (min((processed.extent.1/2), 56)*2))
let processed.extent.0.required.s = (min(((processed.extent.0/2)*2), ((((processed.extent.0 + -2)/64)*64) + 64)) - (min((processed.extent.0/2), 32)*2))
let processed.extent.1.required.s = (min(((processed.extent.1/2)*2), ((((processed.extent.1 + -2)/64)*64) + 64)) - (min((processed.extent.1/2), 32)*2))
let processed.stride.2.required = ((processed.extent.0.required.s + 64)*(processed.extent.1.required.s + 64))
assert((!_halide_buffer_is_bounds_query(input.buffer) || ((-6 <= processed.extent.0) && (((min((processed.extent.0/2), 2)*2) + input.extent.0.required.s) <= 2570))), halide_error_constraints_make_required_region_smaller("Input buffer input", 0, 0, 2591, ((min((processed.extent.0/2), 2)*2) + 6), (((min((processed.extent.0/2), 2)*2) + input.extent.0.required.s) + 21)))
assert((!_halide_buffer_is_bounds_query(input.buffer) || ((106 <= processed.extent.1) && (((min((processed.extent.1/2), 56)*2) + input.extent.1.required.s) <= 1950))), halide_error_constraints_make_required_region_smaller("Input buffer input", 1, 0, 1967, ((min((processed.extent.1/2), 56)*2) + -106), (((min((processed.extent.1/2), 56)*2) + input.extent.1.required.s) + 17)))
if (_halide_buffer_is_bounds_query(input.buffer)) {
  _halide_buffer_init(input.buffer, _halide_buffer_get_shape(input.buffer), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 1, 16, 2, make_struct((halide_dimension_t *), 0, 2592, 1, 0, 0, 1968, (input.extent.0.required.s + 16), 0), (uint64)0)
}
if (_halide_buffer_is_bounds_query(matrix_3200.buffer)) {
  _halide_buffer_init(matrix_3200.buffer, _halide_buffer_get_shape(matrix_3200.buffer), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 2, 32, 2, make_struct((halide_dimension_t *), 0, 4, 1, 0, 0, 3, 4, 0), (uint64)0)
}
if (_halide_buffer_is_bounds_query(matrix_7000.buffer)) {
  _halide_buffer_init(matrix_7000.buffer, _halide_buffer_get_shape(matrix_7000.buffer), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 2, 32, 2, make_struct((halide_dimension_t *), 0, 4, 1, 0, 0, 3, 4, 0), (uint64)0)
}
if (_halide_buffer_is_bounds_query(processed.buffer)) {
  _halide_buffer_init(processed.buffer, _halide_buffer_get_shape(processed.buffer), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 1, 8, 3, make_struct((halide_dimension_t *), ((min((processed.extent.0/2), 32)*2) + -64), (processed.extent.0.required.s + 64), 1, 0, ((min((processed.extent.1/2), 32)*2) + -64), (processed.extent.1.required.s + 64), (processed.extent.0.required.s + 64), 0, 0, 3, processed.stride.2.required, 0), (uint64)0)
}
if (!(_halide_buffer_is_bounds_query(processed.buffer) || (_halide_buffer_is_bounds_query(matrix_7000.buffer) || (_halide_buffer_is_bounds_query(input.buffer) || _halide_buffer_is_bounds_query(matrix_3200.buffer))))) {
  assert((input.type == (uint32)69633), halide_error_bad_type("Input buffer input", input.type, (uint32)69633))
  assert((input.dimensions == 2), halide_error_bad_dimensions("Input buffer input", input.dimensions, 2))
  assert((matrix_3200.type == (uint32)73730), halide_error_bad_type("Input buffer matrix_3200", matrix_3200.type, (uint32)73730))
  assert((matrix_3200.dimensions == 2), halide_error_bad_dimensions("Input buffer matrix_3200", matrix_3200.dimensions, 2))
  assert((matrix_7000.type == (uint32)73730), halide_error_bad_type("Input buffer matrix_7000", matrix_7000.type, (uint32)73730))
  assert((matrix_7000.dimensions == 2), halide_error_bad_dimensions("Input buffer matrix_7000", matrix_7000.dimensions, 2))
  assert((processed.type == (uint32)67585), halide_error_bad_type("Output buffer processed", processed.type, (uint32)67585))
  assert((processed.dimensions == 3), halide_error_bad_dimensions("Output buffer processed", processed.dimensions, 3))
  assert((((input.min.0 + -6) <= (min((processed.extent.0/2), 2)*2)) && ((((min((processed.extent.0/2), 2)*2) + input.extent.0.required.s) + 22) <= (input.extent.0 + input.min.0))), halide_error_access_out_of_bounds("Input buffer input", 0, ((min((processed.extent.0/2), 2)*2) + 6), (((min((processed.extent.0/2), 2)*2) + input.extent.0.required.s) + 21), input.min.0, ((input.extent.0 + input.min.0) + -1)))
  assert((0 <= input.extent.0), halide_error_buffer_extents_negative("Input buffer input", 0, input.extent.0))
  assert((((input.min.1 + 106) <= (min((processed.extent.1/2), 56)*2)) && ((((min((processed.extent.1/2), 56)*2) + input.extent.1.required.s) + 18) <= (input.extent.1 + input.min.1))), halide_error_access_out_of_bounds("Input buffer input", 1, ((min((processed.extent.1/2), 56)*2) + -106), (((min((processed.extent.1/2), 56)*2) + input.extent.1.required.s) + 17), input.min.1, ((input.extent.1 + input.min.1) + -1)))
  assert((0 <= input.extent.1), halide_error_buffer_extents_negative("Input buffer input", 1, input.extent.1))
  assert(((matrix_3200.min.0 <= 0) && (4 <= (matrix_3200.extent.0 + matrix_3200.min.0))), halide_error_access_out_of_bounds("Input buffer matrix_3200", 0, 0, 3, matrix_3200.min.0, ((matrix_3200.extent.0 + matrix_3200.min.0) + -1)))
  assert((0 <= matrix_3200.extent.0), halide_error_buffer_extents_negative("Input buffer matrix_3200", 0, matrix_3200.extent.0))
  assert(((matrix_3200.min.1 <= 0) && (3 <= (matrix_3200.extent.1 + matrix_3200.min.1))), halide_error_access_out_of_bounds("Input buffer matrix_3200", 1, 0, 2, matrix_3200.min.1, ((matrix_3200.extent.1 + matrix_3200.min.1) + -1)))
  assert((0 <= matrix_3200.extent.1), halide_error_buffer_extents_negative("Input buffer matrix_3200", 1, matrix_3200.extent.1))
  assert(((matrix_7000.min.0 <= 0) && (4 <= (matrix_7000.extent.0 + matrix_7000.min.0))), halide_error_access_out_of_bounds("Input buffer matrix_7000", 0, 0, 3, matrix_7000.min.0, ((matrix_7000.extent.0 + matrix_7000.min.0) + -1)))
  assert((0 <= matrix_7000.extent.0), halide_error_buffer_extents_negative("Input buffer matrix_7000", 0, matrix_7000.extent.0))
  assert(((matrix_7000.min.1 <= 0) && (3 <= (matrix_7000.extent.1 + matrix_7000.min.1))), halide_error_access_out_of_bounds("Input buffer matrix_7000", 1, 0, 2, matrix_7000.min.1, ((matrix_7000.extent.1 + matrix_7000.min.1) + -1)))
  assert((0 <= matrix_7000.extent.1), halide_error_buffer_extents_negative("Input buffer matrix_7000", 1, matrix_7000.extent.1))
  assert((((processed.min.0 + 64) <= (min((processed.extent.0/2), 32)*2)) && (((min((processed.extent.0/2), 32)*2) + processed.extent.0.required.s) <= (processed.extent.0 + processed.min.0))), halide_error_access_out_of_bounds("Output buffer processed", 0, ((min((processed.extent.0/2), 32)*2) + -64), (((min((processed.extent.0/2), 32)*2) + processed.extent.0.required.s) + -1), processed.min.0, ((processed.extent.0 + processed.min.0) + -1)))
  assert((0 <= processed.extent.0), halide_error_buffer_extents_negative("Output buffer processed", 0, processed.extent.0))
  assert((((processed.min.1 + 64) <= (min((processed.extent.1/2), 32)*2)) && (((min((processed.extent.1/2), 32)*2) + processed.extent.1.required.s) <= (processed.extent.1 + processed.min.1))), halide_error_access_out_of_bounds("Output buffer processed", 1, ((min((processed.extent.1/2), 32)*2) + -64), (((min((processed.extent.1/2), 32)*2) + processed.extent.1.required.s) + -1), processed.min.1, ((processed.extent.1 + processed.min.1) + -1)))
  assert((0 <= processed.extent.1), halide_error_buffer_extents_negative("Output buffer processed", 1, processed.extent.1))
  assert(((processed.min.2 <= 0) && (3 <= (processed.extent.2 + processed.min.2))), halide_error_access_out_of_bounds("Output buffer processed", 2, 0, 2, processed.min.2, ((processed.extent.2 + processed.min.2) + -1)))
  assert((0 <= processed.extent.2), halide_error_buffer_extents_negative("Output buffer processed", 2, processed.extent.2))
  assert((input.stride.0 == 1), halide_error_constraint_violated("input.stride.0", input.stride.0, "1", 1))
  assert((input.min.0 == 0), halide_error_constraint_violated("input.min.0", input.min.0, "0", 0))
  assert((input.extent.0 == 2592), halide_error_constraint_violated("input.extent.0", input.extent.0, "2592", 2592))
  assert((input.min.1 == 0), halide_error_constraint_violated("input.min.1", input.min.1, "0", 0))
  assert((input.extent.1 == 1968), halide_error_constraint_violated("input.extent.1", input.extent.1, "1968", 1968))
  assert((matrix_3200.stride.0 == 1), halide_error_constraint_violated("matrix_3200.stride.0", matrix_3200.stride.0, "1", 1))
  assert((matrix_7000.stride.0 == 1), halide_error_constraint_violated("matrix_7000.stride.0", matrix_7000.stride.0, "1", 1))
  assert((processed.stride.0 == 1), halide_error_constraint_violated("processed.stride.0", processed.stride.0, "1", 1))
  let matrix_3200.total_extent.1 = (int64(matrix_3200.extent.1)*int64(matrix_3200.extent.0))
  let matrix_7000.total_extent.1 = (int64(matrix_7000.extent.1)*int64(matrix_7000.extent.0))
  let processed.total_extent.1 = (int64(processed.extent.1)*int64(processed.extent.0))
  let processed.total_extent.2 = (processed.total_extent.1*int64(processed.extent.2))
  assert((abs((int64(input.stride.1)*(int64)1968)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("input", abs((int64(input.stride.1)*(int64)1968)), (uint64)2147483647))
  assert((abs(int64(matrix_3200.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("matrix_3200", abs(int64(matrix_3200.extent.0)), (uint64)2147483647))
  assert((abs((int64(matrix_3200.extent.1)*int64(matrix_3200.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("matrix_3200", abs((int64(matrix_3200.extent.1)*int64(matrix_3200.stride.1))), (uint64)2147483647))
  assert((matrix_3200.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("matrix_3200", matrix_3200.total_extent.1, (int64)2147483647))
  assert((abs(int64(matrix_7000.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("matrix_7000", abs(int64(matrix_7000.extent.0)), (uint64)2147483647))
  assert((abs((int64(matrix_7000.extent.1)*int64(matrix_7000.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("matrix_7000", abs((int64(matrix_7000.extent.1)*int64(matrix_7000.stride.1))), (uint64)2147483647))
  assert((matrix_7000.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("matrix_7000", matrix_7000.total_extent.1, (int64)2147483647))
  assert((abs(int64(processed.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("processed", abs(int64(processed.extent.0)), (uint64)2147483647))
  assert((abs((int64(processed.extent.1)*int64(processed.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("processed", abs((int64(processed.extent.1)*int64(processed.stride.1))), (uint64)2147483647))
  assert((processed.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("processed", processed.total_extent.1, (int64)2147483647))
  assert((abs((int64(processed.extent.2)*int64(processed.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("processed", abs((int64(processed.extent.2)*int64(processed.stride.2))), (uint64)2147483647))
  assert((processed.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("processed", processed.total_extent.2, (int64)2147483647))
  assert((matrix_3200 != reinterpret((void *), (uint64)0)), halide_error_host_is_null("Input buffer matrix_3200"))
  assert((matrix_7000 != reinterpret((void *), (uint64)0)), halide_error_host_is_null("Input buffer matrix_7000"))
  allocate curve[uint8 * 1024] if (uint1)0
  let curve.buffer = _halide_buffer_init(alloca(size_of_halide_buffer_t()), make_struct((halide_dimension_t *), 0, 1024, 1, 0), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 1, 8, 1, make_struct((halide_dimension_t *), 0, 1024, 1, 0), (uint64)0)
  register_destructor("halide_device_free_as_destructor", curve.buffer)
  produce curve {
    let halide_device_malloc_result$28 = halide_device_malloc(curve.buffer, halide_cuda_device_interface())
    assert((halide_device_malloc_result$28 == 0), halide_device_malloc_result$28)
    let t4358 = pow_f32(2.000000f, (contrast*0.010000f))
    let t4357 = (1.000000f/gamma)
    let t4356 = (1.000000f/float32((whiteLevel - blackLevel)))
    let t6155 = ((t4358*2.000000f) + -2.000000f)
    let t6154 = (max(min((blackLevel/512), 1), -1) + 1)
    gpu_block<CUDA> (curve.s0._::x._::x.__block_id_x, 0, 2) {
      gpu_thread<CUDA> (.__thread_id_x, 0, 32) {
        if ((t6154 <= curve.s0._::x._::x.__block_id_x)) {
          curve[ramp((((curve.s0._::x._::x.__block_id_x*32) + .__thread_id_x)*16), 1, 4) aligned(16, 0)] = (let t5588 = pow_f32(max(min((float32x4(ramp(((((curve.s0._::x._::x.__block_id_x*32) + .__thread_id_x)*16) - blackLevel), 1, 4))*x4(t4356)), x4(1.000000f)), x4(0.000000f)), x4(t4357)) in select((x4(whiteLevel) < ramp((((curve.s0._::x._::x.__block_id_x*32) + .__thread_id_x)*16), 1, 4)), x4((uint8)255), uint8x4((max(min((select((x4(0.500000f) < t5588), (x4(1.000000f) - ((x4(1.000000f) - t5588)*((((x4(1.000000f) - t5588)*x4(t6155)) - x4(t4358)) + x4(2.000000f)))), ((((t5588*x4(t6155)) - x4(t4358)) + x4(2.000000f))*t5588))*x4(255.000000f)), x4(254.500000f)), x4(-0.500000f)) + x4(0.500000f)))))
          curve[ramp(((((curve.s0._::x._::x.__block_id_x*32) + .__thread_id_x)*16) + 4), 1, 4) aligned(16, 4)] = (let t5590 = pow_f32(max(min((float32x4(ramp((((((curve.s0._::x._::x.__block_id_x*32) + .__thread_id_x)*16) - blackLevel) + 4), 1, 4))*x4(t4356)), x4(1.000000f)), x4(0.000000f)), x4(t4357)) in select((x4(whiteLevel) < ramp(((((curve.s0._::x._::x.__block_id_x*32) + .__thread_id_x)*16) + 4), 1, 4)), x4((uint8)255), uint8x4((max(min((select((x4(0.500000f) < t5590), (x4(1.000000f) - ((x4(1.000000f) - t5590)*((((x4(1.000000f) - t5590)*x4(t6155)) - x4(t4358)) + x4(2.000000f)))), ((((t5590*x4(t6155)) - x4(t4358)) + x4(2.000000f))*t5590))*x4(255.000000f)), x4(254.500000f)), x4(-0.500000f)) + x4(0.500000f)))))
          curve[ramp(((((curve.s0._::x._::x.__block_id_x*32) + .__thread_id_x)*16) + 8), 1, 4) aligned(16, 8)] = (let t5592 = pow_f32(max(min((float32x4(ramp((((((curve.s0._::x._::x.__block_id_x*32) + .__thread_id_x)*16) - blackLevel) + 8), 1, 4))*x4(t4356)), x4(1.000000f)), x4(0.000000f)), x4(t4357)) in select((x4(whiteLevel) < ramp(((((curve.s0._::x._::x.__block_id_x*32) + .__thread_id_x)*16) + 8), 1, 4)), x4((uint8)255), uint8x4((max(min((select((x4(0.500000f) < t5592), (x4(1.000000f) - ((x4(1.000000f) - t5592)*((((x4(1.000000f) - t5592)*x4(t6155)) - x4(t4358)) + x4(2.000000f)))), ((((t5592*x4(t6155)) - x4(t4358)) + x4(2.000000f))*t5592))*x4(255.000000f)), x4(254.500000f)), x4(-0.500000f)) + x4(0.500000f)))))
          curve[ramp(((((curve.s0._::x._::x.__block_id_x*32) + .__thread_id_x)*16) + 12), 1, 4) aligned(16, 12)] = (let t5594 = pow_f32(max(min((float32x4(ramp((((((curve.s0._::x._::x.__block_id_x*32) + .__thread_id_x)*16) - blackLevel) + 12), 1, 4))*x4(t4356)), x4(1.000000f)), x4(0.000000f)), x4(t4357)) in select((x4(whiteLevel) < ramp(((((curve.s0._::x._::x.__block_id_x*32) + .__thread_id_x)*16) + 12), 1, 4)), x4((uint8)255), uint8x4((max(min((select((x4(0.500000f) < t5594), (x4(1.000000f) - ((x4(1.000000f) - t5594)*((((x4(1.000000f) - t5594)*x4(t6155)) - x4(t4358)) + x4(2.000000f)))), ((((t5594*x4(t6155)) - x4(t4358)) + x4(2.000000f))*t5594))*x4(255.000000f)), x4(254.500000f)), x4(-0.500000f)) + x4(0.500000f)))))
        } else {
          curve[ramp((((curve.s0._::x._::x.__block_id_x*32) + .__thread_id_x)*16), 1, 4) aligned(16, 0)] = (let t5596 = pow_f32(max(min((float32x4(ramp(((((curve.s0._::x._::x.__block_id_x*32) + .__thread_id_x)*16) - blackLevel), 1, 4))*x4(t4356)), x4(1.000000f)), x4(0.000000f)), x4(t4357)) in select((x4(blackLevel) < ramp((((curve.s0._::x._::x.__block_id_x*32) + .__thread_id_x)*16), 1, 4)), select((x4(whiteLevel) < ramp((((curve.s0._::x._::x.__block_id_x*32) + .__thread_id_x)*16), 1, 4)), x4((uint8)255), uint8x4((max(min((select((x4(0.500000f) < t5596), (x4(1.000000f) - ((x4(1.000000f) - t5596)*((((x4(1.000000f) - t5596)*x4(t6155)) - x4(t4358)) + x4(2.000000f)))), ((((t5596*x4(t6155)) - x4(t4358)) + x4(2.000000f))*t5596))*x4(255.000000f)), x4(254.500000f)), x4(-0.500000f)) + x4(0.500000f)))), x4((uint8)0)))
          curve[ramp(((((curve.s0._::x._::x.__block_id_x*32) + .__thread_id_x)*16) + 4), 1, 4) aligned(16, 4)] = (let t5598 = pow_f32(max(min((float32x4(ramp((((((curve.s0._::x._::x.__block_id_x*32) + .__thread_id_x)*16) - blackLevel) + 4), 1, 4))*x4(t4356)), x4(1.000000f)), x4(0.000000f)), x4(t4357)) in select((x4(blackLevel) < ramp(((((curve.s0._::x._::x.__block_id_x*32) + .__thread_id_x)*16) + 4), 1, 4)), select((x4(whiteLevel) < ramp(((((curve.s0._::x._::x.__block_id_x*32) + .__thread_id_x)*16) + 4), 1, 4)), x4((uint8)255), uint8x4((max(min((select((x4(0.500000f) < t5598), (x4(1.000000f) - ((x4(1.000000f) - t5598)*((((x4(1.000000f) - t5598)*x4(t6155)) - x4(t4358)) + x4(2.000000f)))), ((((t5598*x4(t6155)) - x4(t4358)) + x4(2.000000f))*t5598))*x4(255.000000f)), x4(254.500000f)), x4(-0.500000f)) + x4(0.500000f)))), x4((uint8)0)))
          curve[ramp(((((curve.s0._::x._::x.__block_id_x*32) + .__thread_id_x)*16) + 8), 1, 4) aligned(16, 8)] = (let t5600 = pow_f32(max(min((float32x4(ramp((((((curve.s0._::x._::x.__block_id_x*32) + .__thread_id_x)*16) - blackLevel) + 8), 1, 4))*x4(t4356)), x4(1.000000f)), x4(0.000000f)), x4(t4357)) in select((x4(blackLevel) < ramp(((((curve.s0._::x._::x.__block_id_x*32) + .__thread_id_x)*16) + 8), 1, 4)), select((x4(whiteLevel) < ramp(((((curve.s0._::x._::x.__block_id_x*32) + .__thread_id_x)*16) + 8), 1, 4)), x4((uint8)255), uint8x4((max(min((select((x4(0.500000f) < t5600), (x4(1.000000f) - ((x4(1.000000f) - t5600)*((((x4(1.000000f) - t5600)*x4(t6155)) - x4(t4358)) + x4(2.000000f)))), ((((t5600*x4(t6155)) - x4(t4358)) + x4(2.000000f))*t5600))*x4(255.000000f)), x4(254.500000f)), x4(-0.500000f)) + x4(0.500000f)))), x4((uint8)0)))
          curve[ramp(((((curve.s0._::x._::x.__block_id_x*32) + .__thread_id_x)*16) + 12), 1, 4) aligned(16, 12)] = (let t5602 = pow_f32(max(min((float32x4(ramp((((((curve.s0._::x._::x.__block_id_x*32) + .__thread_id_x)*16) - blackLevel) + 12), 1, 4))*x4(t4356)), x4(1.000000f)), x4(0.000000f)), x4(t4357)) in select((x4(blackLevel) < ramp(((((curve.s0._::x._::x.__block_id_x*32) + .__thread_id_x)*16) + 12), 1, 4)), select((x4(whiteLevel) < ramp(((((curve.s0._::x._::x.__block_id_x*32) + .__thread_id_x)*16) + 12), 1, 4)), x4((uint8)255), uint8x4((max(min((select((x4(0.500000f) < t5602), (x4(1.000000f) - ((x4(1.000000f) - t5602)*((((x4(1.000000f) - t5602)*x4(t6155)) - x4(t4358)) + x4(2.000000f)))), ((((t5602*x4(t6155)) - x4(t4358)) + x4(2.000000f))*t5602))*x4(255.000000f)), x4(254.500000f)), x4(-0.500000f)) + x4(0.500000f)))), x4((uint8)0)))
        }
      }
    }
    _halide_buffer_set_device_dirty(curve.buffer, (uint1)1)
  }
  let f26.buffer = _halide_buffer_init(alloca(size_of_halide_buffer_t()), make_struct((halide_dimension_t *), 0, 4, 1, 0, 0, 3, 4, 0), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 0, 16, 2, make_struct((halide_dimension_t *), 0, 4, 1, 0, 0, 3, 4, 0), (uint64)0)
  let halide_device_and_host_malloc_result = halide_device_and_host_malloc(f26.buffer, halide_cuda_device_interface())
  assert((halide_device_and_host_malloc_result == 0), halide_device_and_host_malloc_result)
  register_destructor("halide_device_and_host_free_as_destructor", f26.buffer)
  allocate f26[int16 * 4 * 3] in Heap
   custom_new { _halide_buffer_get_host(f26.buffer) }
   custom_delete { halide_device_host_nop_free(f26); }
  produce f26 {
    let halide_copy_to_host_result = halide_copy_to_host(matrix_3200.buffer)
    assert((halide_copy_to_host_result == 0), halide_copy_to_host_result)
    let halide_copy_to_host_result$1 = halide_copy_to_host(matrix_7000.buffer)
    assert((halide_copy_to_host_result$1 == 0), halide_copy_to_host_result$1)
    let t4366 = (1.000000f/color_temp)
    let t6162 = ((t4366*5894.736816f) + -0.842105f)
    let t6161 = ((t4366*-5894.736816f) + 1.842105f)
    let t6159 = ((matrix_7000.min.1*matrix_7000.stride.1) + matrix_7000.min.0)
    let t6160 = ((matrix_3200.min.1*matrix_3200.stride.1) + matrix_3200.min.0)
    for (f26.s0._::y, 0, 3) {
      let t4368 = ((f26.s0._::y*matrix_7000.stride.1) - t6159)
      let t4367 = ((f26.s0._::y*matrix_3200.stride.1) - t6160)
      let t6163 = (f26.s0._::y*2)
      for (f26.s0._::x._::x, 0, 2) {
        f26[ramp(((f26.s0._::x._::x + t6163)*2), 1, 2) aligned(2, 0)] = int16x2((((matrix_3200[ramp(((f26.s0._::x._::x*2) + t4367), 1, 2)]*x2(t6161)) + (matrix_7000[ramp(((f26.s0._::x._::x*2) + t4368), 1, 2)]*x2(t6162)))*x2(256.000000f)))
      }
    }
    _halide_buffer_set_host_dirty(f26.buffer, (uint1)1)
  }
  let f0._::y.min_realized.s = min((processed.extent.1/2), (min((processed.extent.1/2), 56) + 187))
  let f0._::y.extent_realized.s = (min(((processed.extent.1/2)*2), (max((((processed.extent.1 + 10)/124)*124), ((((processed.extent.1 + 6)/494)*494) + 374)) + 112)) - (f0._::y.min_realized.s*2))
  let f0._::x.min_realized.s = min((processed.extent.0/2), (min((processed.extent.0/2), 2) + 26))
  let f0._::x.extent_realized.s = (min(((processed.extent.0/2)*2), (max((((processed.extent.0 + 10)/16)*16), ((((processed.extent.0 + 6)/64)*64) + 52)) + 4)) - (f0._::x.min_realized.s*2))
  allocate f0[int16 * (f0._::x.extent_realized.s + 68) * (f0._::y.extent_realized.s + 498)] if (uint1)0
  let f0.buffer = _halide_buffer_init(alloca(size_of_halide_buffer_t()), make_struct((halide_dimension_t *), ((f0._::x.min_realized.s*2) + -62), (f0._::x.extent_realized.s + 68), (f0._::y.extent_realized.s + 498), 0, ((f0._::y.min_realized.s*2) + -492), (f0._::y.extent_realized.s + 498), 1, 0), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 0, 16, 2, make_struct((halide_dimension_t *), ((f0._::x.min_realized.s*2) + -62), (f0._::x.extent_realized.s + 68), (f0._::y.extent_realized.s + 498), 0, ((f0._::y.min_realized.s*2) + -492), (f0._::y.extent_realized.s + 498), 1, 0), (uint64)0)
  register_destructor("halide_device_free_as_destructor", f0.buffer)
  produce f0 {
    let halide_device_malloc_result$26 = halide_device_malloc(f0.buffer, halide_cuda_device_interface())
    assert((halide_device_malloc_result$26 == 0), halide_device_malloc_result$26)
    let halide_copy_to_device_result$1 = halide_copy_to_device(input.buffer, halide_cuda_device_interface())
    assert((halide_copy_to_device_result$1 == 0), halide_copy_to_device_result$1)
    let t4380 = (492 - (f0._::y.min_realized.s*2))
    let t4379 = (490 - (f0._::y.min_realized.s*2))
    let t4378 = (488 - (f0._::y.min_realized.s*2))
    let t4375 = (486 - (f0._::y.min_realized.s*2))
    let t4376 = (52 - (f0._::x.min_realized.s*2))
    let t6178 = (processed.extent.1/2)
    let t6179 = ((t6178 - f0._::y.min_realized.s)*2)
    let t6180 = (t6178*2)
    let t6165 = ((processed.extent.1 + 134)/124)
    let t6167 = ((processed.extent.1 + 12)/124)
    let t6164 = ((processed.extent.0 + 26)/16)
    let t6166 = ((processed.extent.0/2)*2)
    let t6176 = (t6180 + -112)
    let t6174 = (t6180 + -114)
    let t6172 = (t6180 + -116)
    let t6170 = (t6180 + -118)
    let t6177 = (t6179 + 380)
    let t6175 = (t6179 + 378)
    let t6173 = (t6179 + 376)
    let t6171 = (t6179 + 374)
    let t6168 = ((input.stride.1*12) + 6)
    let t6169 = (f0._::y.extent_realized.s + 498)
    gpu_block<CUDA> (f0.s0._::x._::x.__block_id_y, 0, t6164) {
      gpu_block<CUDA> (f0.s0._::y._::y.__block_id_x, 0, t6165) {
        gpu_thread<CUDA> (.__thread_id_y, 0, 16) {
          gpu_thread<CUDA> (.__thread_id_x, 0, 16) {
            let f0.s0._::x._::xi.base.s = min(((f0.s0._::x._::x.__block_id_y*16) + 4), t6166)
            if ((f0.s0._::y._::y.__block_id_x < t6167)) {
              if ((.__thread_id_x < 15)) {
                f0[ramp(((.__thread_id_x*8) + ((((f0.s0._::x._::xi.base.s + t4376) + .__thread_id_y)*t6169) + ((f0.s0._::y._::y.__block_id_x*124) + t4375))), 1, 2) aligned(2, 0)] = int16x2(input[ramp((((((.__thread_id_x*8) + (f0.s0._::y._::y.__block_id_x*124)) + -6)*input.stride.1) + ((f0.s0._::x._::xi.base.s + t6168) + .__thread_id_y)), input.stride.1, 2)])
                f0[ramp(((.__thread_id_x*8) + ((((f0.s0._::x._::xi.base.s + t4376) + .__thread_id_y)*t6169) + ((f0.s0._::y._::y.__block_id_x*124) + t4378))), 1, 2) aligned(2, 0)] = int16x2(input[ramp((((((.__thread_id_x*8) + (f0.s0._::y._::y.__block_id_x*124)) + -4)*input.stride.1) + ((f0.s0._::x._::xi.base.s + t6168) + .__thread_id_y)), input.stride.1, 2)])
                f0[ramp(((.__thread_id_x*8) + ((((f0.s0._::x._::xi.base.s + t4376) + .__thread_id_y)*t6169) + ((f0.s0._::y._::y.__block_id_x*124) + t4379))), 1, 2) aligned(2, 0)] = int16x2(input[ramp((((((.__thread_id_x*8) + (f0.s0._::y._::y.__block_id_x*124)) + -2)*input.stride.1) + ((f0.s0._::x._::xi.base.s + t6168) + .__thread_id_y)), input.stride.1, 2)])
                f0[ramp(((.__thread_id_x*8) + ((((f0.s0._::x._::xi.base.s + t4376) + .__thread_id_y)*t6169) + ((f0.s0._::y._::y.__block_id_x*124) + t4380))), 1, 2) aligned(2, 0)] = int16x2(input[ramp(((((f0.s0._::y._::y.__block_id_x*124) + (.__thread_id_x*8))*input.stride.1) + ((f0.s0._::x._::xi.base.s + t6168) + .__thread_id_y)), input.stride.1, 2)])
              } else {
                f0[ramp((((((f0.s0._::x._::xi.base.s + t4376) + .__thread_id_y)*t6169) + (((f0.s0._::y._::y.__block_id_x*62) - f0._::y.min_realized.s)*2)) + 602), 1, 2) aligned(2, 0)] = int16x2(input[ramp((((((f0.s0._::y._::y.__block_id_x*124) + 110)*input.stride.1) + (f0.s0._::x._::xi.base.s + t6168)) + .__thread_id_y), input.stride.1, 2)])
                f0[ramp((((((f0.s0._::x._::xi.base.s + t4376) + .__thread_id_y)*t6169) + (((f0.s0._::y._::y.__block_id_x*62) - f0._::y.min_realized.s)*2)) + 604), 1, 2) aligned(2, 0)] = int16x2(input[ramp((((((f0.s0._::y._::y.__block_id_x*124) + 112)*input.stride.1) + (f0.s0._::x._::xi.base.s + t6168)) + .__thread_id_y), input.stride.1, 2)])
                f0[ramp((((((f0.s0._::x._::xi.base.s + t4376) + .__thread_id_y)*t6169) + (((f0.s0._::y._::y.__block_id_x*62) - f0._::y.min_realized.s)*2)) + 606), 1, 2) aligned(2, 0)] = int16x2(input[ramp((((((f0.s0._::y._::y.__block_id_x*124) + 114)*input.stride.1) + (f0.s0._::x._::xi.base.s + t6168)) + .__thread_id_y), input.stride.1, 2)])
                f0[ramp((((((f0.s0._::x._::xi.base.s + t4376) + .__thread_id_y)*t6169) + (((f0.s0._::y._::y.__block_id_x*62) - f0._::y.min_realized.s)*2)) + 608), 1, 2) aligned(2, 0)] = int16x2(input[ramp((((((f0.s0._::y._::y.__block_id_x*124) + 116)*input.stride.1) + (f0.s0._::x._::xi.base.s + t6168)) + .__thread_id_y), input.stride.1, 2)])
              }
            } else {
              f0[ramp((min((.__thread_id_x*8), 116) + ((((f0.s0._::x._::xi.base.s + t4376) + .__thread_id_y)*t6169) + t6171)), 1, 2) aligned(2, 0)] = int16x2(input[ramp((((min((.__thread_id_x*8), 116) + t6170)*input.stride.1) + ((f0.s0._::x._::xi.base.s + t6168) + .__thread_id_y)), input.stride.1, 2)])
              f0[ramp((min((.__thread_id_x*8), 116) + ((((f0.s0._::x._::xi.base.s + t4376) + .__thread_id_y)*t6169) + t6173)), 1, 2) aligned(2, 0)] = int16x2(input[ramp((((min((.__thread_id_x*8), 116) + t6172)*input.stride.1) + ((f0.s0._::x._::xi.base.s + t6168) + .__thread_id_y)), input.stride.1, 2)])
              f0[ramp((min((.__thread_id_x*8), 116) + ((((f0.s0._::x._::xi.base.s + t4376) + .__thread_id_y)*t6169) + t6175)), 1, 2) aligned(2, 0)] = int16x2(input[ramp((((min((.__thread_id_x*8), 116) + t6174)*input.stride.1) + ((f0.s0._::x._::xi.base.s + t6168) + .__thread_id_y)), input.stride.1, 2)])
              f0[ramp((min((.__thread_id_x*8), 116) + ((((f0.s0._::x._::xi.base.s + t4376) + .__thread_id_y)*t6169) + t6177)), 1, 2) aligned(2, 0)] = int16x2(input[ramp((((min((.__thread_id_x*8), 116) + t6176)*input.stride.1) + ((f0.s0._::x._::xi.base.s + t6168) + .__thread_id_y)), input.stride.1, 2)])
            }
          }
        }
      }
    }
    _halide_buffer_set_device_dirty(f0.buffer, (uint1)1)
  }
  let f1._::y.min_realized.s = min(min(min(min((min((processed.extent.1/2), 490)*2), (min((min((processed.extent.1/2), 58)*2), ((min((processed.extent.1/2), 28)*2) + 61)) + 864)), ((min((processed.extent.1/2), 490)*2) + 1)), ((min((processed.extent.1/2), 123)*2) + 734)), (((processed.extent.1/2)*2) + 494))
  let f1._::y.extent_realized.s.s = (let t5604 = min(((processed.extent.1/2)*2), (((processed.extent.1/248)*248) + 246)) in (let t5605 = min((processed.extent.1/2), ((((processed.extent.1 + 6)/988)*494) + 490)) in max(max(max(((t5604/2)*2), (max(max(max((min((processed.extent.1/2), ((((processed.extent.1 + 6)/64)*32) + 28))*2), ((min((processed.extent.1/2), (max((((processed.extent.1 + 6)/64)*32), ((((processed.extent.1 + 4)/124)*62) + 31)) + 28))*2) + 1)), (t5605*2)), ((t5605*2) + 1)) + 2)), (((t5604/2)*2) + 1)), (min(((processed.extent.1/2)*2), ((((processed.extent.1 + 6)/494)*494) + 486)) + 3))))
  let f1._::x.min_realized.s = min(min(min(min(min((min((processed.extent.0/2), 214)*2), (min(min((min((processed.extent.0/2), (min((processed.extent.0/2), 59) + 154))*2), ((min((processed.extent.0/2), 213)*2) + 1)), (min((processed.extent.0/2), 213)*2)) + 2)), ((min((processed.extent.0/2), 214)*2) + 1)), ((min(((processed.extent.0/2)*2), 431)/2)*2)), (((min(((processed.extent.0/2)*2), 431)/2)*2) + 1)), (((processed.extent.0/2)*2) + 372))
  let f1._::x.extent_realized.s.s = max(max(((processed.extent.0/2)*2), (max(max((max(min((processed.extent.0/2), ((((processed.extent.0 + 4)/124)*62) + 59)), (min((processed.extent.0/2), ((((processed.extent.0 + 6)/434)*217) + 213)) + 1))*2), ((min((processed.extent.0/2), (max((((processed.extent.0 + 6)/434)*217), ((((processed.extent.0 + 6)/436)*218) + 1)) + 213))*2) + 1)), ((min((processed.extent.0/2), ((((processed.extent.0 + 6)/436)*218) + 214))*2) + 2)) + 1)), (((processed.extent.0/2)*2) + 3))
  allocate f1[int16 * ((f1._::x.extent_realized.s.s - f1._::x.min_realized.s) + 433) * ((f1._::y.extent_realized.s.s - f1._::y.min_realized.s) + 985)] if (uint1)0
  let f1.buffer = _halide_buffer_init(alloca(size_of_halide_buffer_t()), make_struct((halide_dimension_t *), (f1._::x.min_realized.s + -432), ((f1._::x.extent_realized.s.s - f1._::x.min_realized.s) + 433), ((f1._::y.extent_realized.s.s - f1._::y.min_realized.s) + 985), 0, (f1._::y.min_realized.s + -984), ((f1._::y.extent_realized.s.s - f1._::y.min_realized.s) + 985), 1, 0), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 0, 16, 2, make_struct((halide_dimension_t *), (f1._::x.min_realized.s + -432), ((f1._::x.extent_realized.s.s - f1._::x.min_realized.s) + 433), ((f1._::y.extent_realized.s.s - f1._::y.min_realized.s) + 985), 0, (f1._::y.min_realized.s + -984), ((f1._::y.extent_realized.s.s - f1._::y.min_realized.s) + 985), 1, 0), (uint64)0)
  register_destructor("halide_device_free_as_destructor", f1.buffer)
  produce f1 {
    consume f0 {
      let halide_device_malloc_result$21 = halide_device_malloc(f1.buffer, halide_cuda_device_interface())
      assert((halide_device_malloc_result$21 == 0), halide_device_malloc_result$21)
      let halide_device_malloc_result$27 = halide_device_malloc(f0.buffer, halide_cuda_device_interface())
      assert((halide_device_malloc_result$27 == 0), halide_device_malloc_result$27)
      let t4433 = (504 - (f0._::y.min_realized.s*2))
      let t4429 = (502 - (f0._::y.min_realized.s*2))
      let t4425 = (500 - (f0._::y.min_realized.s*2))
      let t4421 = (498 - (f0._::y.min_realized.s*2))
      let t4417 = (496 - (f0._::y.min_realized.s*2))
      let t4413 = (494 - (f0._::y.min_realized.s*2))
      let t4409 = (492 - (f0._::y.min_realized.s*2))
      let t4403 = (490 - (f0._::y.min_realized.s*2))
      let t4399 = (488 - (f0._::y.min_realized.s*2))
      let t4402 = (486 - (f0._::y.min_realized.s*2))
      let t4435 = (3 - (f0._::x.min_realized.s*2))
      let t4431 = (-494 - ((f0._::y.extent_realized.s + f0._::y.min_realized.s)*2))
      let t4427 = (-496 - ((f0._::y.extent_realized.s + f0._::y.min_realized.s)*2))
      let t4423 = (-498 - ((f0._::y.extent_realized.s + f0._::y.min_realized.s)*2))
      let t4419 = (-500 - ((f0._::y.extent_realized.s + f0._::y.min_realized.s)*2))
      let t4415 = (-502 - ((f0._::y.extent_realized.s + f0._::y.min_realized.s)*2))
      let t4411 = (-504 - ((f0._::y.extent_realized.s + f0._::y.min_realized.s)*2))
      let t4407 = (-506 - ((f0._::y.extent_realized.s + f0._::y.min_realized.s)*2))
      let t4400 = (-508 - ((f0._::y.extent_realized.s + f0._::y.min_realized.s)*2))
      let t6225 = (processed.extent.1/2)
      let t6226 = ((t6225*2) - f1._::y.min_realized.s)
      let t6227 = (((f0._::y.extent_realized.s + t6225) - f0._::y.min_realized.s)*2)
      let t6182 = ((processed.extent.1 + 500)/494)
      let t6184 = ((processed.extent.1 + 8)/494)
      let t6181 = ((processed.extent.0 + 70)/64)
      let t6183 = ((processed.extent.0/2)*2)
      let t6186 = ((1 - f0._::x.min_realized.s)*2)
      let t6208 = (t6225 - f0._::y.min_realized.s)
      let t6207 = (1472 - f1._::y.min_realized.s)
      let t6206 = (1470 - f1._::y.min_realized.s)
      let t6205 = (1468 - f1._::y.min_realized.s)
      let t6204 = (1466 - f1._::y.min_realized.s)
      let t6203 = (1464 - f1._::y.min_realized.s)
      let t6202 = (1462 - f1._::y.min_realized.s)
      let t6201 = (1460 - f1._::y.min_realized.s)
      let t6200 = (1458 - f1._::y.min_realized.s)
      let t6197 = (994 - f1._::y.min_realized.s)
      let t6196 = (992 - f1._::y.min_realized.s)
      let t6195 = (990 - f1._::y.min_realized.s)
      let t6194 = (988 - f1._::y.min_realized.s)
      let t6193 = (986 - f1._::y.min_realized.s)
      let t6192 = (984 - f1._::y.min_realized.s)
      let t6191 = (982 - f1._::y.min_realized.s)
      let t6188 = (980 - f1._::y.min_realized.s)
      let t6198 = (373 - f1._::x.min_realized.s)
      let t6189 = (372 - f1._::x.min_realized.s)
      let t6223 = (t6227 + 1012)
      let t6221 = (t6227 + 1010)
      let t6219 = (t6227 + 1008)
      let t6217 = (t6227 + 1006)
      let t6215 = (t6227 + 1004)
      let t6213 = (t6227 + 1002)
      let t6211 = (t6227 + 1000)
      let t6209 = (t6227 + 998)
      let t6224 = (t6226 + 508)
      let t6222 = (t6226 + 506)
      let t6220 = (t6226 + 504)
      let t6218 = (t6226 + 502)
      let t6216 = (t6226 + 500)
      let t6214 = (t6226 + 498)
      let t6212 = (t6226 + 496)
      let t6210 = (t6226 + 494)
      let t6190 = ((f1._::y.extent_realized.s.s - f1._::y.min_realized.s) + 985)
      gpu_block<CUDA> (f1.s0._::x._::x.__block_id_y, 0, t6181) {
        gpu_block<CUDA> (f1.s0._::y._::y.__block_id_x, 0, t6182) {
          gpu_thread<CUDA> (.__thread_id_y, 0, 32) {
            gpu_thread<CUDA> (.__thread_id_x, 0, 31) {
              let f1.s0._::x._::xi.base.s = min(((f1.s0._::x._::x.__block_id_y*64) + 56), t6183)
              if ((f1.s0._::y._::y.__block_id_x < t6184)) {
                if ((.__thread_id_x < 30)) {
                  f1[ramp(((.__thread_id_x*16) + ((((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6189))*t6190) + ((f1.s0._::y._::y.__block_id_x*494) + t6188))), 1, 2)] = (let t5611 = ((f0._::y.extent_realized.s + 498)*((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6186))) in max(min(f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4399) + t5611)), 1, 2) aligned(2, 0)], max(f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4400) + t5611)), 1, 2) aligned(2, 0)], max(f0[ramp((((.__thread_id_x*16) + ((((f1.s0._::y._::y.__block_id_x*247) + (f0._::y.extent_realized.s - f0._::y.min_realized.s))*2) + t5611)) + 1484), 1, 2) aligned(2, 0)], max(f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4402) + t5611)), 1, 2) aligned(2, 0)], f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4403) + t5611)), 1, 2) aligned(2, 0)])))), x2((int16)0)))
                  f1[ramp(((.__thread_id_x*16) + ((((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6189))*t6190) + ((f1.s0._::y._::y.__block_id_x*494) + t6191))), 1, 2)] = (let t5612 = ((f0._::y.extent_realized.s + 498)*((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6186))) in max(min(f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4403) + t5612)), 1, 2) aligned(2, 0)], max(f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4407) + t5612)), 1, 2) aligned(2, 0)], max(f0[ramp((((.__thread_id_x*16) + ((((f1.s0._::y._::y.__block_id_x*247) + (f0._::y.extent_realized.s - f0._::y.min_realized.s))*2) + t5612)) + 1486), 1, 2) aligned(2, 0)], max(f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4399) + t5612)), 1, 2) aligned(2, 0)], f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4409) + t5612)), 1, 2) aligned(2, 0)])))), x2((int16)0)))
                  f1[ramp(((.__thread_id_x*16) + ((((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6189))*t6190) + ((f1.s0._::y._::y.__block_id_x*494) + t6192))), 1, 2)] = (let t5613 = ((f0._::y.extent_realized.s + 498)*((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6186))) in max(min(f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4409) + t5613)), 1, 2) aligned(2, 0)], max(f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4411) + t5613)), 1, 2) aligned(2, 0)], max(f0[ramp((((.__thread_id_x*16) + ((((f1.s0._::y._::y.__block_id_x*247) + (f0._::y.extent_realized.s - f0._::y.min_realized.s))*2) + t5613)) + 1488), 1, 2) aligned(2, 0)], max(f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4403) + t5613)), 1, 2) aligned(2, 0)], f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4413) + t5613)), 1, 2) aligned(2, 0)])))), x2((int16)0)))
                  f1[ramp(((.__thread_id_x*16) + ((((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6189))*t6190) + ((f1.s0._::y._::y.__block_id_x*494) + t6193))), 1, 2)] = (let t5614 = ((f0._::y.extent_realized.s + 498)*((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6186))) in max(min(f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4413) + t5614)), 1, 2) aligned(2, 0)], max(f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4415) + t5614)), 1, 2) aligned(2, 0)], max(f0[ramp((((.__thread_id_x*16) + ((((f1.s0._::y._::y.__block_id_x*247) + (f0._::y.extent_realized.s - f0._::y.min_realized.s))*2) + t5614)) + 1490), 1, 2) aligned(2, 0)], max(f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4409) + t5614)), 1, 2) aligned(2, 0)], f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4417) + t5614)), 1, 2) aligned(2, 0)])))), x2((int16)0)))
                  f1[ramp(((.__thread_id_x*16) + ((((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6189))*t6190) + ((f1.s0._::y._::y.__block_id_x*494) + t6194))), 1, 2)] = (let t5615 = ((f0._::y.extent_realized.s + 498)*((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6186))) in max(min(f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4417) + t5615)), 1, 2) aligned(2, 0)], max(f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4419) + t5615)), 1, 2) aligned(2, 0)], max(f0[ramp((((.__thread_id_x*16) + ((((f1.s0._::y._::y.__block_id_x*247) + (f0._::y.extent_realized.s - f0._::y.min_realized.s))*2) + t5615)) + 1492), 1, 2) aligned(2, 0)], max(f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4413) + t5615)), 1, 2) aligned(2, 0)], f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4421) + t5615)), 1, 2) aligned(2, 0)])))), x2((int16)0)))
                  f1[ramp(((.__thread_id_x*16) + ((((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6189))*t6190) + ((f1.s0._::y._::y.__block_id_x*494) + t6195))), 1, 2)] = (let t5616 = ((f0._::y.extent_realized.s + 498)*((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6186))) in max(min(f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4421) + t5616)), 1, 2) aligned(2, 0)], max(f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4423) + t5616)), 1, 2) aligned(2, 0)], max(f0[ramp((((.__thread_id_x*16) + ((((f1.s0._::y._::y.__block_id_x*247) + (f0._::y.extent_realized.s - f0._::y.min_realized.s))*2) + t5616)) + 1494), 1, 2) aligned(2, 0)], max(f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4417) + t5616)), 1, 2) aligned(2, 0)], f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4425) + t5616)), 1, 2) aligned(2, 0)])))), x2((int16)0)))
                  f1[ramp(((.__thread_id_x*16) + ((((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6189))*t6190) + ((f1.s0._::y._::y.__block_id_x*494) + t6196))), 1, 2)] = (let t5617 = ((f0._::y.extent_realized.s + 498)*((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6186))) in max(min(f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4425) + t5617)), 1, 2) aligned(2, 0)], max(f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4427) + t5617)), 1, 2) aligned(2, 0)], max(f0[ramp((((.__thread_id_x*16) + ((((f1.s0._::y._::y.__block_id_x*247) + (f0._::y.extent_realized.s - f0._::y.min_realized.s))*2) + t5617)) + 1496), 1, 2) aligned(2, 0)], max(f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4421) + t5617)), 1, 2) aligned(2, 0)], f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4429) + t5617)), 1, 2) aligned(2, 0)])))), x2((int16)0)))
                  f1[ramp(((.__thread_id_x*16) + ((((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6189))*t6190) + ((f1.s0._::y._::y.__block_id_x*494) + t6197))), 1, 2)] = (let t5618 = ((f0._::y.extent_realized.s + 498)*((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6186))) in max(min(f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4429) + t5618)), 1, 2) aligned(2, 0)], max(f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4431) + t5618)), 1, 2) aligned(2, 0)], max(f0[ramp((((.__thread_id_x*16) + ((((f1.s0._::y._::y.__block_id_x*247) + (f0._::y.extent_realized.s - f0._::y.min_realized.s))*2) + t5618)) + 1498), 1, 2) aligned(2, 0)], max(f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4425) + t5618)), 1, 2) aligned(2, 0)], f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4433) + t5618)), 1, 2) aligned(2, 0)])))), x2((int16)0)))
                  f1[ramp(((.__thread_id_x*16) + ((((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6198))*t6190) + ((f1.s0._::y._::y.__block_id_x*494) + t6188))), 1, 2)] = (let t5619 = ((f0._::y.extent_realized.s + 498)*((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t4435))) in max(min(f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4399) + t5619)), 1, 2) aligned(2, 0)], max(f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4400) + t5619)), 1, 2) aligned(2, 0)], max(f0[ramp((((.__thread_id_x*16) + ((((f1.s0._::y._::y.__block_id_x*247) + (f0._::y.extent_realized.s - f0._::y.min_realized.s))*2) + t5619)) + 1484), 1, 2) aligned(2, 0)], max(f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4402) + t5619)), 1, 2) aligned(2, 0)], f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4403) + t5619)), 1, 2) aligned(2, 0)])))), x2((int16)0)))
                  f1[ramp(((.__thread_id_x*16) + ((((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6198))*t6190) + ((f1.s0._::y._::y.__block_id_x*494) + t6191))), 1, 2)] = (let t5620 = ((f0._::y.extent_realized.s + 498)*((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t4435))) in max(min(f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4403) + t5620)), 1, 2) aligned(2, 0)], max(f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4407) + t5620)), 1, 2) aligned(2, 0)], max(f0[ramp((((.__thread_id_x*16) + ((((f1.s0._::y._::y.__block_id_x*247) + (f0._::y.extent_realized.s - f0._::y.min_realized.s))*2) + t5620)) + 1486), 1, 2) aligned(2, 0)], max(f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4399) + t5620)), 1, 2) aligned(2, 0)], f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4409) + t5620)), 1, 2) aligned(2, 0)])))), x2((int16)0)))
                  f1[ramp(((.__thread_id_x*16) + ((((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6198))*t6190) + ((f1.s0._::y._::y.__block_id_x*494) + t6192))), 1, 2)] = (let t5621 = ((f0._::y.extent_realized.s + 498)*((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t4435))) in max(min(f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4409) + t5621)), 1, 2) aligned(2, 0)], max(f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4411) + t5621)), 1, 2) aligned(2, 0)], max(f0[ramp((((.__thread_id_x*16) + ((((f1.s0._::y._::y.__block_id_x*247) + (f0._::y.extent_realized.s - f0._::y.min_realized.s))*2) + t5621)) + 1488), 1, 2) aligned(2, 0)], max(f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4403) + t5621)), 1, 2) aligned(2, 0)], f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4413) + t5621)), 1, 2) aligned(2, 0)])))), x2((int16)0)))
                  f1[ramp(((.__thread_id_x*16) + ((((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6198))*t6190) + ((f1.s0._::y._::y.__block_id_x*494) + t6193))), 1, 2)] = (let t5622 = ((f0._::y.extent_realized.s + 498)*((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t4435))) in max(min(f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4413) + t5622)), 1, 2) aligned(2, 0)], max(f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4415) + t5622)), 1, 2) aligned(2, 0)], max(f0[ramp((((.__thread_id_x*16) + ((((f1.s0._::y._::y.__block_id_x*247) + (f0._::y.extent_realized.s - f0._::y.min_realized.s))*2) + t5622)) + 1490), 1, 2) aligned(2, 0)], max(f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4409) + t5622)), 1, 2) aligned(2, 0)], f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4417) + t5622)), 1, 2) aligned(2, 0)])))), x2((int16)0)))
                  f1[ramp(((.__thread_id_x*16) + ((((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6198))*t6190) + ((f1.s0._::y._::y.__block_id_x*494) + t6194))), 1, 2)] = (let t5623 = ((f0._::y.extent_realized.s + 498)*((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t4435))) in max(min(f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4417) + t5623)), 1, 2) aligned(2, 0)], max(f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4419) + t5623)), 1, 2) aligned(2, 0)], max(f0[ramp((((.__thread_id_x*16) + ((((f1.s0._::y._::y.__block_id_x*247) + (f0._::y.extent_realized.s - f0._::y.min_realized.s))*2) + t5623)) + 1492), 1, 2) aligned(2, 0)], max(f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4413) + t5623)), 1, 2) aligned(2, 0)], f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4421) + t5623)), 1, 2) aligned(2, 0)])))), x2((int16)0)))
                  f1[ramp(((.__thread_id_x*16) + ((((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6198))*t6190) + ((f1.s0._::y._::y.__block_id_x*494) + t6195))), 1, 2)] = (let t5624 = ((f0._::y.extent_realized.s + 498)*((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t4435))) in max(min(f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4421) + t5624)), 1, 2) aligned(2, 0)], max(f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4423) + t5624)), 1, 2) aligned(2, 0)], max(f0[ramp((((.__thread_id_x*16) + ((((f1.s0._::y._::y.__block_id_x*247) + (f0._::y.extent_realized.s - f0._::y.min_realized.s))*2) + t5624)) + 1494), 1, 2) aligned(2, 0)], max(f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4417) + t5624)), 1, 2) aligned(2, 0)], f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4425) + t5624)), 1, 2) aligned(2, 0)])))), x2((int16)0)))
                  f1[ramp(((.__thread_id_x*16) + ((((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6198))*t6190) + ((f1.s0._::y._::y.__block_id_x*494) + t6196))), 1, 2)] = (let t5625 = ((f0._::y.extent_realized.s + 498)*((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t4435))) in max(min(f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4425) + t5625)), 1, 2) aligned(2, 0)], max(f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4427) + t5625)), 1, 2) aligned(2, 0)], max(f0[ramp((((.__thread_id_x*16) + ((((f1.s0._::y._::y.__block_id_x*247) + (f0._::y.extent_realized.s - f0._::y.min_realized.s))*2) + t5625)) + 1496), 1, 2) aligned(2, 0)], max(f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4421) + t5625)), 1, 2) aligned(2, 0)], f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4429) + t5625)), 1, 2) aligned(2, 0)])))), x2((int16)0)))
                  f1[ramp(((.__thread_id_x*16) + ((((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6198))*t6190) + ((f1.s0._::y._::y.__block_id_x*494) + t6197))), 1, 2)] = (let t5626 = ((f0._::y.extent_realized.s + 498)*((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t4435))) in max(min(f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4429) + t5626)), 1, 2) aligned(2, 0)], max(f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4431) + t5626)), 1, 2) aligned(2, 0)], max(f0[ramp((((.__thread_id_x*16) + ((((f1.s0._::y._::y.__block_id_x*247) + (f0._::y.extent_realized.s - f0._::y.min_realized.s))*2) + t5626)) + 1498), 1, 2) aligned(2, 0)], max(f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4425) + t5626)), 1, 2) aligned(2, 0)], f0[ramp(((.__thread_id_x*16) + (((f1.s0._::y._::y.__block_id_x*494) + t4433) + t5626)), 1, 2) aligned(2, 0)])))), x2((int16)0)))
                } else {
                  f1[ramp(((((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6189))*t6190) + ((f1.s0._::y._::y.__block_id_x*494) + t6200)), 1, 2)] = (let t5627 = ((f0._::y.extent_realized.s + 498)*((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6186))) in max(min(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - f0._::y.min_realized.s)*2) + t5627) + 966), 1, 2) aligned(2, 0)], max(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - (f0._::y.extent_realized.s + f0._::y.min_realized.s))*2) + t5627) + -30), 1, 2) aligned(2, 0)], max(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) + (f0._::y.extent_realized.s - f0._::y.min_realized.s))*2) + t5627) + 1962), 1, 2) aligned(2, 0)], max(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - f0._::y.min_realized.s)*2) + t5627) + 964), 1, 2) aligned(2, 0)], f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - f0._::y.min_realized.s)*2) + t5627) + 968), 1, 2) aligned(2, 0)])))), x2((int16)0)))
                  f1[ramp(((((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6189))*t6190) + ((f1.s0._::y._::y.__block_id_x*494) + t6201)), 1, 2)] = (let t5629 = ((f0._::y.extent_realized.s + 498)*((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6186))) in max(min(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - f0._::y.min_realized.s)*2) + t5629) + 968), 1, 2) aligned(2, 0)], max(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - (f0._::y.extent_realized.s + f0._::y.min_realized.s))*2) + t5629) + -28), 1, 2) aligned(2, 0)], max(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) + (f0._::y.extent_realized.s - f0._::y.min_realized.s))*2) + t5629) + 1964), 1, 2) aligned(2, 0)], max(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - f0._::y.min_realized.s)*2) + t5629) + 966), 1, 2) aligned(2, 0)], f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - f0._::y.min_realized.s)*2) + t5629) + 970), 1, 2) aligned(2, 0)])))), x2((int16)0)))
                  f1[ramp(((((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6189))*t6190) + ((f1.s0._::y._::y.__block_id_x*494) + t6202)), 1, 2)] = (let t5631 = ((f0._::y.extent_realized.s + 498)*((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6186))) in max(min(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - f0._::y.min_realized.s)*2) + t5631) + 970), 1, 2) aligned(2, 0)], max(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - (f0._::y.extent_realized.s + f0._::y.min_realized.s))*2) + t5631) + -26), 1, 2) aligned(2, 0)], max(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) + (f0._::y.extent_realized.s - f0._::y.min_realized.s))*2) + t5631) + 1966), 1, 2) aligned(2, 0)], max(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - f0._::y.min_realized.s)*2) + t5631) + 968), 1, 2) aligned(2, 0)], f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - f0._::y.min_realized.s)*2) + t5631) + 972), 1, 2) aligned(2, 0)])))), x2((int16)0)))
                  f1[ramp(((((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6189))*t6190) + ((f1.s0._::y._::y.__block_id_x*494) + t6203)), 1, 2)] = (let t5633 = ((f0._::y.extent_realized.s + 498)*((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6186))) in max(min(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - f0._::y.min_realized.s)*2) + t5633) + 972), 1, 2) aligned(2, 0)], max(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - (f0._::y.extent_realized.s + f0._::y.min_realized.s))*2) + t5633) + -24), 1, 2) aligned(2, 0)], max(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) + (f0._::y.extent_realized.s - f0._::y.min_realized.s))*2) + t5633) + 1968), 1, 2) aligned(2, 0)], max(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - f0._::y.min_realized.s)*2) + t5633) + 970), 1, 2) aligned(2, 0)], f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - f0._::y.min_realized.s)*2) + t5633) + 974), 1, 2) aligned(2, 0)])))), x2((int16)0)))
                  f1[ramp(((((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6189))*t6190) + ((f1.s0._::y._::y.__block_id_x*494) + t6204)), 1, 2)] = (let t5635 = ((f0._::y.extent_realized.s + 498)*((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6186))) in max(min(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - f0._::y.min_realized.s)*2) + t5635) + 974), 1, 2) aligned(2, 0)], max(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - (f0._::y.extent_realized.s + f0._::y.min_realized.s))*2) + t5635) + -22), 1, 2) aligned(2, 0)], max(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) + (f0._::y.extent_realized.s - f0._::y.min_realized.s))*2) + t5635) + 1970), 1, 2) aligned(2, 0)], max(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - f0._::y.min_realized.s)*2) + t5635) + 972), 1, 2) aligned(2, 0)], f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - f0._::y.min_realized.s)*2) + t5635) + 976), 1, 2) aligned(2, 0)])))), x2((int16)0)))
                  f1[ramp(((((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6189))*t6190) + ((f1.s0._::y._::y.__block_id_x*494) + t6205)), 1, 2)] = (let t5637 = ((f0._::y.extent_realized.s + 498)*((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6186))) in max(min(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - f0._::y.min_realized.s)*2) + t5637) + 976), 1, 2) aligned(2, 0)], max(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - (f0._::y.extent_realized.s + f0._::y.min_realized.s))*2) + t5637) + -20), 1, 2) aligned(2, 0)], max(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) + (f0._::y.extent_realized.s - f0._::y.min_realized.s))*2) + t5637) + 1972), 1, 2) aligned(2, 0)], max(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - f0._::y.min_realized.s)*2) + t5637) + 974), 1, 2) aligned(2, 0)], f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - f0._::y.min_realized.s)*2) + t5637) + 978), 1, 2) aligned(2, 0)])))), x2((int16)0)))
                  f1[ramp(((((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6189))*t6190) + ((f1.s0._::y._::y.__block_id_x*494) + t6206)), 1, 2)] = (let t5639 = ((f0._::y.extent_realized.s + 498)*((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6186))) in max(min(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - f0._::y.min_realized.s)*2) + t5639) + 978), 1, 2) aligned(2, 0)], max(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - (f0._::y.extent_realized.s + f0._::y.min_realized.s))*2) + t5639) + -18), 1, 2) aligned(2, 0)], max(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) + (f0._::y.extent_realized.s - f0._::y.min_realized.s))*2) + t5639) + 1974), 1, 2) aligned(2, 0)], max(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - f0._::y.min_realized.s)*2) + t5639) + 976), 1, 2) aligned(2, 0)], f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - f0._::y.min_realized.s)*2) + t5639) + 980), 1, 2) aligned(2, 0)])))), x2((int16)0)))
                  f1[ramp(((((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6189))*t6190) + ((f1.s0._::y._::y.__block_id_x*494) + t6207)), 1, 2)] = (let t5641 = ((f0._::y.extent_realized.s + 498)*((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6186))) in max(min(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - f0._::y.min_realized.s)*2) + t5641) + 980), 1, 2) aligned(2, 0)], max(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - (f0._::y.extent_realized.s + f0._::y.min_realized.s))*2) + t5641) + -16), 1, 2) aligned(2, 0)], max(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) + (f0._::y.extent_realized.s - f0._::y.min_realized.s))*2) + t5641) + 1976), 1, 2) aligned(2, 0)], max(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - f0._::y.min_realized.s)*2) + t5641) + 978), 1, 2) aligned(2, 0)], f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - f0._::y.min_realized.s)*2) + t5641) + 982), 1, 2) aligned(2, 0)])))), x2((int16)0)))
                  f1[ramp(((((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6198))*t6190) + ((f1.s0._::y._::y.__block_id_x*494) + t6200)), 1, 2)] = (let t5643 = ((f0._::y.extent_realized.s + 498)*((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t4435))) in max(min(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - f0._::y.min_realized.s)*2) + t5643) + 966), 1, 2) aligned(2, 0)], max(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - (f0._::y.extent_realized.s + f0._::y.min_realized.s))*2) + t5643) + -30), 1, 2) aligned(2, 0)], max(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) + (f0._::y.extent_realized.s - f0._::y.min_realized.s))*2) + t5643) + 1962), 1, 2) aligned(2, 0)], max(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - f0._::y.min_realized.s)*2) + t5643) + 964), 1, 2) aligned(2, 0)], f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - f0._::y.min_realized.s)*2) + t5643) + 968), 1, 2) aligned(2, 0)])))), x2((int16)0)))
                  f1[ramp(((((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6198))*t6190) + ((f1.s0._::y._::y.__block_id_x*494) + t6201)), 1, 2)] = (let t5645 = ((f0._::y.extent_realized.s + 498)*((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t4435))) in max(min(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - f0._::y.min_realized.s)*2) + t5645) + 968), 1, 2) aligned(2, 0)], max(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - (f0._::y.extent_realized.s + f0._::y.min_realized.s))*2) + t5645) + -28), 1, 2) aligned(2, 0)], max(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) + (f0._::y.extent_realized.s - f0._::y.min_realized.s))*2) + t5645) + 1964), 1, 2) aligned(2, 0)], max(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - f0._::y.min_realized.s)*2) + t5645) + 966), 1, 2) aligned(2, 0)], f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - f0._::y.min_realized.s)*2) + t5645) + 970), 1, 2) aligned(2, 0)])))), x2((int16)0)))
                  f1[ramp(((((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6198))*t6190) + ((f1.s0._::y._::y.__block_id_x*494) + t6202)), 1, 2)] = (let t5647 = ((f0._::y.extent_realized.s + 498)*((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t4435))) in max(min(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - f0._::y.min_realized.s)*2) + t5647) + 970), 1, 2) aligned(2, 0)], max(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - (f0._::y.extent_realized.s + f0._::y.min_realized.s))*2) + t5647) + -26), 1, 2) aligned(2, 0)], max(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) + (f0._::y.extent_realized.s - f0._::y.min_realized.s))*2) + t5647) + 1966), 1, 2) aligned(2, 0)], max(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - f0._::y.min_realized.s)*2) + t5647) + 968), 1, 2) aligned(2, 0)], f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - f0._::y.min_realized.s)*2) + t5647) + 972), 1, 2) aligned(2, 0)])))), x2((int16)0)))
                  f1[ramp(((((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6198))*t6190) + ((f1.s0._::y._::y.__block_id_x*494) + t6203)), 1, 2)] = (let t5649 = ((f0._::y.extent_realized.s + 498)*((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t4435))) in max(min(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - f0._::y.min_realized.s)*2) + t5649) + 972), 1, 2) aligned(2, 0)], max(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - (f0._::y.extent_realized.s + f0._::y.min_realized.s))*2) + t5649) + -24), 1, 2) aligned(2, 0)], max(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) + (f0._::y.extent_realized.s - f0._::y.min_realized.s))*2) + t5649) + 1968), 1, 2) aligned(2, 0)], max(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - f0._::y.min_realized.s)*2) + t5649) + 970), 1, 2) aligned(2, 0)], f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - f0._::y.min_realized.s)*2) + t5649) + 974), 1, 2) aligned(2, 0)])))), x2((int16)0)))
                  f1[ramp(((((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6198))*t6190) + ((f1.s0._::y._::y.__block_id_x*494) + t6204)), 1, 2)] = (let t5651 = ((f0._::y.extent_realized.s + 498)*((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t4435))) in max(min(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - f0._::y.min_realized.s)*2) + t5651) + 974), 1, 2) aligned(2, 0)], max(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - (f0._::y.extent_realized.s + f0._::y.min_realized.s))*2) + t5651) + -22), 1, 2) aligned(2, 0)], max(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) + (f0._::y.extent_realized.s - f0._::y.min_realized.s))*2) + t5651) + 1970), 1, 2) aligned(2, 0)], max(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - f0._::y.min_realized.s)*2) + t5651) + 972), 1, 2) aligned(2, 0)], f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - f0._::y.min_realized.s)*2) + t5651) + 976), 1, 2) aligned(2, 0)])))), x2((int16)0)))
                  f1[ramp(((((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6198))*t6190) + ((f1.s0._::y._::y.__block_id_x*494) + t6205)), 1, 2)] = (let t5653 = ((f0._::y.extent_realized.s + 498)*((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t4435))) in max(min(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - f0._::y.min_realized.s)*2) + t5653) + 976), 1, 2) aligned(2, 0)], max(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - (f0._::y.extent_realized.s + f0._::y.min_realized.s))*2) + t5653) + -20), 1, 2) aligned(2, 0)], max(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) + (f0._::y.extent_realized.s - f0._::y.min_realized.s))*2) + t5653) + 1972), 1, 2) aligned(2, 0)], max(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - f0._::y.min_realized.s)*2) + t5653) + 974), 1, 2) aligned(2, 0)], f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - f0._::y.min_realized.s)*2) + t5653) + 978), 1, 2) aligned(2, 0)])))), x2((int16)0)))
                  f1[ramp(((((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6198))*t6190) + ((f1.s0._::y._::y.__block_id_x*494) + t6206)), 1, 2)] = (let t5655 = ((f0._::y.extent_realized.s + 498)*((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t4435))) in max(min(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - f0._::y.min_realized.s)*2) + t5655) + 978), 1, 2) aligned(2, 0)], max(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - (f0._::y.extent_realized.s + f0._::y.min_realized.s))*2) + t5655) + -18), 1, 2) aligned(2, 0)], max(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) + (f0._::y.extent_realized.s - f0._::y.min_realized.s))*2) + t5655) + 1974), 1, 2) aligned(2, 0)], max(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - f0._::y.min_realized.s)*2) + t5655) + 976), 1, 2) aligned(2, 0)], f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - f0._::y.min_realized.s)*2) + t5655) + 980), 1, 2) aligned(2, 0)])))), x2((int16)0)))
                  f1[ramp(((((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6198))*t6190) + ((f1.s0._::y._::y.__block_id_x*494) + t6207)), 1, 2)] = (let t5657 = ((f0._::y.extent_realized.s + 498)*((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t4435))) in max(min(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - f0._::y.min_realized.s)*2) + t5657) + 980), 1, 2) aligned(2, 0)], max(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - (f0._::y.extent_realized.s + f0._::y.min_realized.s))*2) + t5657) + -16), 1, 2) aligned(2, 0)], max(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) + (f0._::y.extent_realized.s - f0._::y.min_realized.s))*2) + t5657) + 1976), 1, 2) aligned(2, 0)], max(f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - f0._::y.min_realized.s)*2) + t5657) + 978), 1, 2) aligned(2, 0)], f0[ramp((((((f1.s0._::y._::y.__block_id_x*247) - f0._::y.min_realized.s)*2) + t5657) + 982), 1, 2) aligned(2, 0)])))), x2((int16)0)))
                }
              } else {
                f1[ramp((min((.__thread_id_x*16), 478) + ((((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6189))*t6190) + t6210)), 1, 2)] = (let t5659 = ((f0._::y.extent_realized.s + 498)*((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6186))) in (let t5662 = (min((.__thread_id_x*16), 478) + ((t6208*2) + t5659)) in max(min(f0[ramp((t5662 + 2), 1, 2) aligned(2, 0)], max(f0[ramp(((min((.__thread_id_x*16), 478) + (((t6208 - f0._::y.extent_realized.s)*2) + t5659)) + -994), 1, 2) aligned(2, 0)], max(f0[ramp((min((.__thread_id_x*16), 478) + (t5659 + t6209)), 1, 2) aligned(2, 0)], max(f0[ramp(t5662, 1, 2) aligned(2, 0)], f0[ramp((t5662 + 4), 1, 2) aligned(2, 0)])))), x2((int16)0))))
                f1[ramp((min((.__thread_id_x*16), 478) + ((((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6189))*t6190) + t6212)), 1, 2)] = (let t5663 = ((f0._::y.extent_realized.s + 498)*((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6186))) in (let t5666 = (min((.__thread_id_x*16), 478) + ((t6208*2) + t5663)) in max(min(f0[ramp((t5666 + 4), 1, 2) aligned(2, 0)], max(f0[ramp(((min((.__thread_id_x*16), 478) + (((t6208 - f0._::y.extent_realized.s)*2) + t5663)) + -992), 1, 2) aligned(2, 0)], max(f0[ramp((min((.__thread_id_x*16), 478) + (t5663 + t6211)), 1, 2) aligned(2, 0)], max(f0[ramp((t5666 + 2), 1, 2) aligned(2, 0)], f0[ramp((t5666 + 6), 1, 2) aligned(2, 0)])))), x2((int16)0))))
                f1[ramp((min((.__thread_id_x*16), 478) + ((((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6189))*t6190) + t6214)), 1, 2)] = (let t5667 = ((f0._::y.extent_realized.s + 498)*((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6186))) in (let t5670 = (min((.__thread_id_x*16), 478) + ((t6208*2) + t5667)) in max(min(f0[ramp((t5670 + 6), 1, 2) aligned(2, 0)], max(f0[ramp(((min((.__thread_id_x*16), 478) + (((t6208 - f0._::y.extent_realized.s)*2) + t5667)) + -990), 1, 2) aligned(2, 0)], max(f0[ramp((min((.__thread_id_x*16), 478) + (t5667 + t6213)), 1, 2) aligned(2, 0)], max(f0[ramp((t5670 + 4), 1, 2) aligned(2, 0)], f0[ramp((t5670 + 8), 1, 2) aligned(2, 0)])))), x2((int16)0))))
                f1[ramp((min((.__thread_id_x*16), 478) + ((((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6189))*t6190) + t6216)), 1, 2)] = (let t5671 = ((f0._::y.extent_realized.s + 498)*((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6186))) in (let t5674 = (min((.__thread_id_x*16), 478) + ((t6208*2) + t5671)) in max(min(f0[ramp((t5674 + 8), 1, 2) aligned(2, 0)], max(f0[ramp(((min((.__thread_id_x*16), 478) + (((t6208 - f0._::y.extent_realized.s)*2) + t5671)) + -988), 1, 2) aligned(2, 0)], max(f0[ramp((min((.__thread_id_x*16), 478) + (t5671 + t6215)), 1, 2) aligned(2, 0)], max(f0[ramp((t5674 + 6), 1, 2) aligned(2, 0)], f0[ramp((t5674 + 10), 1, 2) aligned(2, 0)])))), x2((int16)0))))
                f1[ramp((min((.__thread_id_x*16), 478) + ((((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6189))*t6190) + t6218)), 1, 2)] = (let t5675 = ((f0._::y.extent_realized.s + 498)*((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6186))) in (let t5678 = (min((.__thread_id_x*16), 478) + ((t6208*2) + t5675)) in max(min(f0[ramp((t5678 + 10), 1, 2) aligned(2, 0)], max(f0[ramp(((min((.__thread_id_x*16), 478) + (((t6208 - f0._::y.extent_realized.s)*2) + t5675)) + -986), 1, 2) aligned(2, 0)], max(f0[ramp((min((.__thread_id_x*16), 478) + (t5675 + t6217)), 1, 2) aligned(2, 0)], max(f0[ramp((t5678 + 8), 1, 2) aligned(2, 0)], f0[ramp((t5678 + 12), 1, 2) aligned(2, 0)])))), x2((int16)0))))
                f1[ramp((min((.__thread_id_x*16), 478) + ((((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6189))*t6190) + t6220)), 1, 2)] = (let t5679 = ((f0._::y.extent_realized.s + 498)*((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6186))) in (let t5682 = (min((.__thread_id_x*16), 478) + ((t6208*2) + t5679)) in max(min(f0[ramp((t5682 + 12), 1, 2) aligned(2, 0)], max(f0[ramp(((min((.__thread_id_x*16), 478) + (((t6208 - f0._::y.extent_realized.s)*2) + t5679)) + -984), 1, 2) aligned(2, 0)], max(f0[ramp((min((.__thread_id_x*16), 478) + (t5679 + t6219)), 1, 2) aligned(2, 0)], max(f0[ramp((t5682 + 10), 1, 2) aligned(2, 0)], f0[ramp((t5682 + 14), 1, 2) aligned(2, 0)])))), x2((int16)0))))
                f1[ramp((min((.__thread_id_x*16), 478) + ((((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6189))*t6190) + t6222)), 1, 2)] = (let t5683 = ((f0._::y.extent_realized.s + 498)*((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6186))) in (let t5686 = (min((.__thread_id_x*16), 478) + ((t6208*2) + t5683)) in max(min(f0[ramp((t5686 + 14), 1, 2) aligned(2, 0)], max(f0[ramp(((min((.__thread_id_x*16), 478) + (((t6208 - f0._::y.extent_realized.s)*2) + t5683)) + -982), 1, 2) aligned(2, 0)], max(f0[ramp((min((.__thread_id_x*16), 478) + (t5683 + t6221)), 1, 2) aligned(2, 0)], max(f0[ramp((t5686 + 12), 1, 2) aligned(2, 0)], f0[ramp((t5686 + 16), 1, 2) aligned(2, 0)])))), x2((int16)0))))
                f1[ramp((min((.__thread_id_x*16), 478) + ((((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6189))*t6190) + t6224)), 1, 2)] = (let t5687 = ((f0._::y.extent_realized.s + 498)*((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6186))) in (let t5690 = (min((.__thread_id_x*16), 478) + ((t6208*2) + t5687)) in max(min(f0[ramp((t5690 + 16), 1, 2) aligned(2, 0)], max(f0[ramp(((min((.__thread_id_x*16), 478) + (((t6208 - f0._::y.extent_realized.s)*2) + t5687)) + -980), 1, 2) aligned(2, 0)], max(f0[ramp((min((.__thread_id_x*16), 478) + (t5687 + t6223)), 1, 2) aligned(2, 0)], max(f0[ramp((t5690 + 14), 1, 2) aligned(2, 0)], f0[ramp((t5690 + 18), 1, 2) aligned(2, 0)])))), x2((int16)0))))
                f1[ramp((min((.__thread_id_x*16), 478) + ((((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6198))*t6190) + t6210)), 1, 2)] = (let t5691 = ((f0._::y.extent_realized.s + 498)*((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t4435))) in (let t5694 = (min((.__thread_id_x*16), 478) + ((t6208*2) + t5691)) in max(min(f0[ramp((t5694 + 2), 1, 2) aligned(2, 0)], max(f0[ramp(((min((.__thread_id_x*16), 478) + (((t6208 - f0._::y.extent_realized.s)*2) + t5691)) + -994), 1, 2) aligned(2, 0)], max(f0[ramp((min((.__thread_id_x*16), 478) + (t5691 + t6209)), 1, 2) aligned(2, 0)], max(f0[ramp(t5694, 1, 2) aligned(2, 0)], f0[ramp((t5694 + 4), 1, 2) aligned(2, 0)])))), x2((int16)0))))
                f1[ramp((min((.__thread_id_x*16), 478) + ((((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6198))*t6190) + t6212)), 1, 2)] = (let t5695 = ((f0._::y.extent_realized.s + 498)*((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t4435))) in (let t5698 = (min((.__thread_id_x*16), 478) + ((t6208*2) + t5695)) in max(min(f0[ramp((t5698 + 4), 1, 2) aligned(2, 0)], max(f0[ramp(((min((.__thread_id_x*16), 478) + (((t6208 - f0._::y.extent_realized.s)*2) + t5695)) + -992), 1, 2) aligned(2, 0)], max(f0[ramp((min((.__thread_id_x*16), 478) + (t5695 + t6211)), 1, 2) aligned(2, 0)], max(f0[ramp((t5698 + 2), 1, 2) aligned(2, 0)], f0[ramp((t5698 + 6), 1, 2) aligned(2, 0)])))), x2((int16)0))))
                f1[ramp((min((.__thread_id_x*16), 478) + ((((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6198))*t6190) + t6214)), 1, 2)] = (let t5699 = ((f0._::y.extent_realized.s + 498)*((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t4435))) in (let t5702 = (min((.__thread_id_x*16), 478) + ((t6208*2) + t5699)) in max(min(f0[ramp((t5702 + 6), 1, 2) aligned(2, 0)], max(f0[ramp(((min((.__thread_id_x*16), 478) + (((t6208 - f0._::y.extent_realized.s)*2) + t5699)) + -990), 1, 2) aligned(2, 0)], max(f0[ramp((min((.__thread_id_x*16), 478) + (t5699 + t6213)), 1, 2) aligned(2, 0)], max(f0[ramp((t5702 + 4), 1, 2) aligned(2, 0)], f0[ramp((t5702 + 8), 1, 2) aligned(2, 0)])))), x2((int16)0))))
                f1[ramp((min((.__thread_id_x*16), 478) + ((((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6198))*t6190) + t6216)), 1, 2)] = (let t5703 = ((f0._::y.extent_realized.s + 498)*((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t4435))) in (let t5706 = (min((.__thread_id_x*16), 478) + ((t6208*2) + t5703)) in max(min(f0[ramp((t5706 + 8), 1, 2) aligned(2, 0)], max(f0[ramp(((min((.__thread_id_x*16), 478) + (((t6208 - f0._::y.extent_realized.s)*2) + t5703)) + -988), 1, 2) aligned(2, 0)], max(f0[ramp((min((.__thread_id_x*16), 478) + (t5703 + t6215)), 1, 2) aligned(2, 0)], max(f0[ramp((t5706 + 6), 1, 2) aligned(2, 0)], f0[ramp((t5706 + 10), 1, 2) aligned(2, 0)])))), x2((int16)0))))
                f1[ramp((min((.__thread_id_x*16), 478) + ((((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6198))*t6190) + t6218)), 1, 2)] = (let t5707 = ((f0._::y.extent_realized.s + 498)*((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t4435))) in (let t5710 = (min((.__thread_id_x*16), 478) + ((t6208*2) + t5707)) in max(min(f0[ramp((t5710 + 10), 1, 2) aligned(2, 0)], max(f0[ramp(((min((.__thread_id_x*16), 478) + (((t6208 - f0._::y.extent_realized.s)*2) + t5707)) + -986), 1, 2) aligned(2, 0)], max(f0[ramp((min((.__thread_id_x*16), 478) + (t5707 + t6217)), 1, 2) aligned(2, 0)], max(f0[ramp((t5710 + 8), 1, 2) aligned(2, 0)], f0[ramp((t5710 + 12), 1, 2) aligned(2, 0)])))), x2((int16)0))))
                f1[ramp((min((.__thread_id_x*16), 478) + ((((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6198))*t6190) + t6220)), 1, 2)] = (let t5711 = ((f0._::y.extent_realized.s + 498)*((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t4435))) in (let t5714 = (min((.__thread_id_x*16), 478) + ((t6208*2) + t5711)) in max(min(f0[ramp((t5714 + 12), 1, 2) aligned(2, 0)], max(f0[ramp(((min((.__thread_id_x*16), 478) + (((t6208 - f0._::y.extent_realized.s)*2) + t5711)) + -984), 1, 2) aligned(2, 0)], max(f0[ramp((min((.__thread_id_x*16), 478) + (t5711 + t6219)), 1, 2) aligned(2, 0)], max(f0[ramp((t5714 + 10), 1, 2) aligned(2, 0)], f0[ramp((t5714 + 14), 1, 2) aligned(2, 0)])))), x2((int16)0))))
                f1[ramp((min((.__thread_id_x*16), 478) + ((((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6198))*t6190) + t6222)), 1, 2)] = (let t5715 = ((f0._::y.extent_realized.s + 498)*((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t4435))) in (let t5718 = (min((.__thread_id_x*16), 478) + ((t6208*2) + t5715)) in max(min(f0[ramp((t5718 + 14), 1, 2) aligned(2, 0)], max(f0[ramp(((min((.__thread_id_x*16), 478) + (((t6208 - f0._::y.extent_realized.s)*2) + t5715)) + -982), 1, 2) aligned(2, 0)], max(f0[ramp((min((.__thread_id_x*16), 478) + (t5715 + t6221)), 1, 2) aligned(2, 0)], max(f0[ramp((t5718 + 12), 1, 2) aligned(2, 0)], f0[ramp((t5718 + 16), 1, 2) aligned(2, 0)])))), x2((int16)0))))
                f1[ramp((min((.__thread_id_x*16), 478) + ((((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t6198))*t6190) + t6224)), 1, 2)] = (let t5719 = ((f0._::y.extent_realized.s + 498)*((.__thread_id_y*2) + (f1.s0._::x._::xi.base.s + t4435))) in (let t5722 = (min((.__thread_id_x*16), 478) + ((t6208*2) + t5719)) in max(min(f0[ramp((t5722 + 16), 1, 2) aligned(2, 0)], max(f0[ramp(((min((.__thread_id_x*16), 478) + (((t6208 - f0._::y.extent_realized.s)*2) + t5719)) + -980), 1, 2) aligned(2, 0)], max(f0[ramp((min((.__thread_id_x*16), 478) + (t5719 + t6223)), 1, 2) aligned(2, 0)], max(f0[ramp((t5722 + 14), 1, 2) aligned(2, 0)], f0[ramp((t5722 + 18), 1, 2) aligned(2, 0)])))), x2((int16)0))))
              }
            }
          }
        }
      }
      _halide_buffer_set_device_dirty(f1.buffer, (uint1)1)
      let halide_device_free_result$10 = halide_device_free(f0.buffer)
      assert((halide_device_free_result$10 == 0), halide_device_free_result$10)
      free f0
    }
  }
  let f2._::y.min_realized.s = min((processed.extent.1/2), (min((processed.extent.1/2), 59) + 64))
  let f2._::y.extent_realized.s.s = max(min((processed.extent.1/2), ((((processed.extent.1 + 4)/124)*62) + 59)), (min(((processed.extent.1/2)*2), (((processed.extent.1/248)*248) + 246))/2))
  let f2._::x.min_realized.s = min((min(((processed.extent.0/2)*2), 431)/2), (min((processed.extent.0/2), 59) + 156))
  allocate f2[int16 * (((processed.extent.0/2) - f2._::x.min_realized.s) + 218) * ((f2._::y.extent_realized.s.s - f2._::y.min_realized.s) + 126)] if (uint1)0
  let f2.buffer = _halide_buffer_init(alloca(size_of_halide_buffer_t()), make_struct((halide_dimension_t *), (f2._::x.min_realized.s + -217), (((processed.extent.0/2) - f2._::x.min_realized.s) + 218), ((f2._::y.extent_realized.s.s - f2._::y.min_realized.s) + 126), 0, (f2._::y.min_realized.s + -124), ((f2._::y.extent_realized.s.s - f2._::y.min_realized.s) + 126), 1, 0), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 0, 16, 2, make_struct((halide_dimension_t *), (f2._::x.min_realized.s + -217), (((processed.extent.0/2) - f2._::x.min_realized.s) + 218), ((f2._::y.extent_realized.s.s - f2._::y.min_realized.s) + 126), 0, (f2._::y.min_realized.s + -124), ((f2._::y.extent_realized.s.s - f2._::y.min_realized.s) + 126), 1, 0), (uint64)0)
  register_destructor("halide_device_free_as_destructor", f2.buffer)
  produce f2 {
    consume f1 {
      let halide_device_malloc_result$19 = halide_device_malloc(f2.buffer, halide_cuda_device_interface())
      assert((halide_device_malloc_result$19 == 0), halide_device_malloc_result$19)
      let halide_device_malloc_result$22 = halide_device_malloc(f1.buffer, halide_cuda_device_interface())
      assert((halide_device_malloc_result$22 == 0), halide_device_malloc_result$22)
      let t6269 = (processed.extent.1/2)
      let t6229 = ((processed.extent.1 + 128)/124)
      let t6231 = ((processed.extent.1 + 6)/124)
      let t6228 = ((processed.extent.0 + 128)/124)
      let t6230 = (processed.extent.0/2)
      let t6232 = (f1._::y.extent_realized.s.s - f1._::y.min_realized.s)
      let t6265 = (432 - f1._::x.min_realized.s)
      let t6263 = (430 - f1._::x.min_realized.s)
      let t6261 = (428 - f1._::x.min_realized.s)
      let t6259 = (426 - f1._::x.min_realized.s)
      let t6257 = (424 - f1._::x.min_realized.s)
      let t6255 = (422 - f1._::x.min_realized.s)
      let t6253 = (420 - f1._::x.min_realized.s)
      let t6251 = (418 - f1._::x.min_realized.s)
      let t6249 = (324 - f1._::x.min_realized.s)
      let t6247 = (322 - f1._::x.min_realized.s)
      let t6245 = (320 - f1._::x.min_realized.s)
      let t6243 = (318 - f1._::x.min_realized.s)
      let t6241 = (316 - f1._::x.min_realized.s)
      let t6239 = (314 - f1._::x.min_realized.s)
      let t6237 = (312 - f1._::x.min_realized.s)
      let t6233 = (310 - f1._::x.min_realized.s)
      let t6266 = (217 - f2._::x.min_realized.s)
      let t6264 = (216 - f2._::x.min_realized.s)
      let t6262 = (215 - f2._::x.min_realized.s)
      let t6260 = (214 - f2._::x.min_realized.s)
      let t6258 = (213 - f2._::x.min_realized.s)
      let t6256 = (212 - f2._::x.min_realized.s)
      let t6254 = (211 - f2._::x.min_realized.s)
      let t6252 = (210 - f2._::x.min_realized.s)
      let t6250 = (163 - f2._::x.min_realized.s)
      let t6248 = (162 - f2._::x.min_realized.s)
      let t6246 = (161 - f2._::x.min_realized.s)
      let t6244 = (160 - f2._::x.min_realized.s)
      let t6242 = (159 - f2._::x.min_realized.s)
      let t6240 = (158 - f2._::x.min_realized.s)
      let t6238 = (157 - f2._::x.min_realized.s)
      let t6235 = (156 - f2._::x.min_realized.s)
      let t6234 = (123 - f2._::y.min_realized.s)
      let t6268 = ((t6269 - f2._::y.min_realized.s) + 64)
      let t6236 = ((f2._::y.extent_realized.s.s - f2._::y.min_realized.s) + 126)
      gpu_block<CUDA> (f2.s0._::x._::x.__block_id_y, 0, t6228) {
        gpu_block<CUDA> (f2.s0._::y._::y.__block_id_x, 0, t6229) {
          gpu_thread<CUDA> (.__thread_id_y, 0, 8) {
            gpu_thread<CUDA> (.__thread_id_x, 0, 31) {
              let f2.s0._::x._::xi.base.s = min(((f2.s0._::x._::x.__block_id_y*62) + 59), t6230)
              if ((f2.s0._::y._::y.__block_id_x < t6231)) {
                if ((.__thread_id_y < 7)) {
                  f2[ramp(((((f2.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*2) + ((((.__thread_id_y*8) + (f2.s0._::x._::xi.base.s + t6235))*t6236) + t6234)), 1, 2)] = f1[ramp((((((f2.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) + ((((((.__thread_id_y*8) + f2.s0._::x._::xi.base.s)*2) + t6233)*(t6232 + 985)) + (t6232 - f1._::y.min_realized.s))) + 1967), 2, 2)]
                  f2[ramp(((((f2.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*2) + ((((.__thread_id_y*8) + (f2.s0._::x._::xi.base.s + t6238))*t6236) + t6234)), 1, 2)] = f1[ramp((((((f2.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) + ((((((.__thread_id_y*8) + f2.s0._::x._::xi.base.s)*2) + t6237)*(t6232 + 985)) + (t6232 - f1._::y.min_realized.s))) + 1967), 2, 2)]
                  f2[ramp(((((f2.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*2) + ((((.__thread_id_y*8) + (f2.s0._::x._::xi.base.s + t6240))*t6236) + t6234)), 1, 2)] = f1[ramp((((((f2.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) + ((((((.__thread_id_y*8) + f2.s0._::x._::xi.base.s)*2) + t6239)*(t6232 + 985)) + (t6232 - f1._::y.min_realized.s))) + 1967), 2, 2)]
                  f2[ramp(((((f2.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*2) + ((((.__thread_id_y*8) + (f2.s0._::x._::xi.base.s + t6242))*t6236) + t6234)), 1, 2)] = f1[ramp((((((f2.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) + ((((((.__thread_id_y*8) + f2.s0._::x._::xi.base.s)*2) + t6241)*(t6232 + 985)) + (t6232 - f1._::y.min_realized.s))) + 1967), 2, 2)]
                  f2[ramp(((((f2.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*2) + ((((.__thread_id_y*8) + (f2.s0._::x._::xi.base.s + t6244))*t6236) + t6234)), 1, 2)] = f1[ramp((((((f2.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) + ((((((.__thread_id_y*8) + f2.s0._::x._::xi.base.s)*2) + t6243)*(t6232 + 985)) + (t6232 - f1._::y.min_realized.s))) + 1967), 2, 2)]
                  f2[ramp(((((f2.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*2) + ((((.__thread_id_y*8) + (f2.s0._::x._::xi.base.s + t6246))*t6236) + t6234)), 1, 2)] = f1[ramp((((((f2.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) + ((((((.__thread_id_y*8) + f2.s0._::x._::xi.base.s)*2) + t6245)*(t6232 + 985)) + (t6232 - f1._::y.min_realized.s))) + 1967), 2, 2)]
                  f2[ramp(((((f2.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*2) + ((((.__thread_id_y*8) + (f2.s0._::x._::xi.base.s + t6248))*t6236) + t6234)), 1, 2)] = f1[ramp((((((f2.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) + ((((((.__thread_id_y*8) + f2.s0._::x._::xi.base.s)*2) + t6247)*(t6232 + 985)) + (t6232 - f1._::y.min_realized.s))) + 1967), 2, 2)]
                  f2[ramp(((((f2.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*2) + ((((.__thread_id_y*8) + (f2.s0._::x._::xi.base.s + t6250))*t6236) + t6234)), 1, 2)] = f1[ramp((((((f2.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) + ((((((.__thread_id_y*8) + f2.s0._::x._::xi.base.s)*2) + t6249)*(t6232 + 985)) + (t6232 - f1._::y.min_realized.s))) + 1967), 2, 2)]
                } else {
                  f2[ramp(((((f2.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*2) + (((f2.s0._::x._::xi.base.s + t6252)*t6236) + t6234)), 1, 2)] = f1[ramp((((((f2.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) + ((((f2.s0._::x._::xi.base.s*2) + t6251)*(t6232 + 985)) + (t6232 - f1._::y.min_realized.s))) + 1967), 2, 2)]
                  f2[ramp(((((f2.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*2) + (((f2.s0._::x._::xi.base.s + t6254)*t6236) + t6234)), 1, 2)] = f1[ramp((((((f2.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) + ((((f2.s0._::x._::xi.base.s*2) + t6253)*(t6232 + 985)) + (t6232 - f1._::y.min_realized.s))) + 1967), 2, 2)]
                  f2[ramp(((((f2.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*2) + (((f2.s0._::x._::xi.base.s + t6256)*t6236) + t6234)), 1, 2)] = f1[ramp((((((f2.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) + ((((f2.s0._::x._::xi.base.s*2) + t6255)*(t6232 + 985)) + (t6232 - f1._::y.min_realized.s))) + 1967), 2, 2)]
                  f2[ramp(((((f2.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*2) + (((f2.s0._::x._::xi.base.s + t6258)*t6236) + t6234)), 1, 2)] = f1[ramp((((((f2.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) + ((((f2.s0._::x._::xi.base.s*2) + t6257)*(t6232 + 985)) + (t6232 - f1._::y.min_realized.s))) + 1967), 2, 2)]
                  f2[ramp(((((f2.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*2) + (((f2.s0._::x._::xi.base.s + t6260)*t6236) + t6234)), 1, 2)] = f1[ramp((((((f2.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) + ((((f2.s0._::x._::xi.base.s*2) + t6259)*(t6232 + 985)) + (t6232 - f1._::y.min_realized.s))) + 1967), 2, 2)]
                  f2[ramp(((((f2.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*2) + (((f2.s0._::x._::xi.base.s + t6262)*t6236) + t6234)), 1, 2)] = f1[ramp((((((f2.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) + ((((f2.s0._::x._::xi.base.s*2) + t6261)*(t6232 + 985)) + (t6232 - f1._::y.min_realized.s))) + 1967), 2, 2)]
                  f2[ramp(((((f2.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*2) + (((f2.s0._::x._::xi.base.s + t6264)*t6236) + t6234)), 1, 2)] = f1[ramp((((((f2.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) + ((((f2.s0._::x._::xi.base.s*2) + t6263)*(t6232 + 985)) + (t6232 - f1._::y.min_realized.s))) + 1967), 2, 2)]
                  f2[ramp(((((f2.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*2) + (((f2.s0._::x._::xi.base.s + t6266)*t6236) + t6234)), 1, 2)] = f1[ramp((((((f2.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) + ((((f2.s0._::x._::xi.base.s*2) + t6265)*(t6232 + 985)) + (t6232 - f1._::y.min_realized.s))) + 1967), 2, 2)]
                }
              } else {
                f2[ramp(((.__thread_id_x*2) + (((min((.__thread_id_y*8), 54) + (f2.s0._::x._::xi.base.s + t6235))*t6236) + t6268)), 1, 2)] = f1[ramp((((((.__thread_id_x*2) + t6269)*2) + (((((min((.__thread_id_y*8), 54) + f2.s0._::x._::xi.base.s)*2) + t6233)*(t6232 + 985)) + (t6232 - f1._::y.min_realized.s))) + 1849), 2, 2)]
                f2[ramp(((.__thread_id_x*2) + (((min((.__thread_id_y*8), 54) + (f2.s0._::x._::xi.base.s + t6238))*t6236) + t6268)), 1, 2)] = f1[ramp((((((.__thread_id_x*2) + t6269)*2) + (((((min((.__thread_id_y*8), 54) + f2.s0._::x._::xi.base.s)*2) + t6237)*(t6232 + 985)) + (t6232 - f1._::y.min_realized.s))) + 1849), 2, 2)]
                f2[ramp(((.__thread_id_x*2) + (((min((.__thread_id_y*8), 54) + (f2.s0._::x._::xi.base.s + t6240))*t6236) + t6268)), 1, 2)] = f1[ramp((((((.__thread_id_x*2) + t6269)*2) + (((((min((.__thread_id_y*8), 54) + f2.s0._::x._::xi.base.s)*2) + t6239)*(t6232 + 985)) + (t6232 - f1._::y.min_realized.s))) + 1849), 2, 2)]
                f2[ramp(((.__thread_id_x*2) + (((min((.__thread_id_y*8), 54) + (f2.s0._::x._::xi.base.s + t6242))*t6236) + t6268)), 1, 2)] = f1[ramp((((((.__thread_id_x*2) + t6269)*2) + (((((min((.__thread_id_y*8), 54) + f2.s0._::x._::xi.base.s)*2) + t6241)*(t6232 + 985)) + (t6232 - f1._::y.min_realized.s))) + 1849), 2, 2)]
                f2[ramp(((.__thread_id_x*2) + (((min((.__thread_id_y*8), 54) + (f2.s0._::x._::xi.base.s + t6244))*t6236) + t6268)), 1, 2)] = f1[ramp((((((.__thread_id_x*2) + t6269)*2) + (((((min((.__thread_id_y*8), 54) + f2.s0._::x._::xi.base.s)*2) + t6243)*(t6232 + 985)) + (t6232 - f1._::y.min_realized.s))) + 1849), 2, 2)]
                f2[ramp(((.__thread_id_x*2) + (((min((.__thread_id_y*8), 54) + (f2.s0._::x._::xi.base.s + t6246))*t6236) + t6268)), 1, 2)] = f1[ramp((((((.__thread_id_x*2) + t6269)*2) + (((((min((.__thread_id_y*8), 54) + f2.s0._::x._::xi.base.s)*2) + t6245)*(t6232 + 985)) + (t6232 - f1._::y.min_realized.s))) + 1849), 2, 2)]
                f2[ramp(((.__thread_id_x*2) + (((min((.__thread_id_y*8), 54) + (f2.s0._::x._::xi.base.s + t6248))*t6236) + t6268)), 1, 2)] = f1[ramp((((((.__thread_id_x*2) + t6269)*2) + (((((min((.__thread_id_y*8), 54) + f2.s0._::x._::xi.base.s)*2) + t6247)*(t6232 + 985)) + (t6232 - f1._::y.min_realized.s))) + 1849), 2, 2)]
                f2[ramp(((.__thread_id_x*2) + (((min((.__thread_id_y*8), 54) + (f2.s0._::x._::xi.base.s + t6250))*t6236) + t6268)), 1, 2)] = f1[ramp((((((.__thread_id_x*2) + t6269)*2) + (((((min((.__thread_id_y*8), 54) + f2.s0._::x._::xi.base.s)*2) + t6249)*(t6232 + 985)) + (t6232 - f1._::y.min_realized.s))) + 1849), 2, 2)]
              }
            }
          }
        }
      }
      _halide_buffer_set_device_dirty(f2.buffer, (uint1)1)
    }
  }
  let f4._::y.min_realized.s = min(min((processed.extent.1/2), (min((processed.extent.1/2), 123) + 122)), ((processed.extent.1/2) + 217))
  let f4._::y.extent_realized.s.s = (let t5749 = min(((processed.extent.1/2)*2), (((processed.extent.1/248)*248) + 246)) in max(max(max((t5749/2), (min((processed.extent.1/2), ((((processed.extent.1 + 4)/496)*248) + 245)) + 1)), ((t5749/2) + -1)), (min((processed.extent.1/2), ((((processed.extent.1 + 6)/64)*32) + 28)) + 1)))
  let f4._::x.min_realized.s = min(min((min(((processed.extent.0/2)*2), 431) + 430), processed.extent.0), (processed.extent.0 + 434))
  let f4._::x.extent_realized.s = (max(max(max(min((processed.extent.0/2), ((((processed.extent.0 + 4)/866)*433) + 430)), ((processed.extent.0/2) + -1)), (processed.extent.0/2)), ((processed.extent.0/2) + 1)) - (f4._::x.min_realized.s/2))
  allocate f4[int16 * (f4._::x.extent_realized.s + 433) * ((f4._::y.extent_realized.s.s - f4._::y.min_realized.s) + 248)] if (uint1)0
  let f4.buffer = _halide_buffer_init(alloca(size_of_halide_buffer_t()), make_struct((halide_dimension_t *), ((f4._::x.min_realized.s/2) + -432), (f4._::x.extent_realized.s + 433), ((f4._::y.extent_realized.s.s - f4._::y.min_realized.s) + 248), 0, (f4._::y.min_realized.s + -247), ((f4._::y.extent_realized.s.s - f4._::y.min_realized.s) + 248), 1, 0), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 0, 16, 2, make_struct((halide_dimension_t *), ((f4._::x.min_realized.s/2) + -432), (f4._::x.extent_realized.s + 433), ((f4._::y.extent_realized.s.s - f4._::y.min_realized.s) + 248), 0, (f4._::y.min_realized.s + -247), ((f4._::y.extent_realized.s.s - f4._::y.min_realized.s) + 248), 1, 0), (uint64)0)
  register_destructor("halide_device_free_as_destructor", f4.buffer)
  produce f4 {
    consume f1 {
      let halide_device_malloc_result$16 = halide_device_malloc(f4.buffer, halide_cuda_device_interface())
      assert((halide_device_malloc_result$16 == 0), halide_device_malloc_result$16)
      let halide_device_malloc_result$23 = halide_device_malloc(f1.buffer, halide_cuda_device_interface())
      assert((halide_device_malloc_result$23 == 0), halide_device_malloc_result$23)
      let t4550 = (433 - (f4._::x.min_realized.s/2))
      let t4548 = (432 - (f4._::x.min_realized.s/2))
      let t4546 = (431 - (f4._::x.min_realized.s/2))
      let t4544 = (430 - (f4._::x.min_realized.s/2))
      let t4542 = (220 - (f4._::x.min_realized.s/2))
      let t4540 = (219 - (f4._::x.min_realized.s/2))
      let t4538 = (218 - (f4._::x.min_realized.s/2))
      let t4535 = (217 - (f4._::x.min_realized.s/2))
      let t6287 = (processed.extent.1/2)
      let t6271 = ((processed.extent.1 + 70)/64)
      let t6273 = ((processed.extent.1 + 8)/64)
      let t6270 = ((processed.extent.0 + 440)/434)
      let t6272 = (processed.extent.0/2)
      let t6274 = (f1._::y.extent_realized.s.s - f1._::y.min_realized.s)
      let t6284 = (434 - f1._::x.min_realized.s)
      let t6283 = (432 - f1._::x.min_realized.s)
      let t6282 = (430 - f1._::x.min_realized.s)
      let t6281 = (428 - f1._::x.min_realized.s)
      let t6276 = (245 - f4._::y.min_realized.s)
      let t6280 = (8 - f1._::x.min_realized.s)
      let t6279 = (6 - f1._::x.min_realized.s)
      let t6278 = (4 - f1._::x.min_realized.s)
      let t6275 = (2 - f1._::x.min_realized.s)
      let t6286 = ((t6287 - f4._::y.min_realized.s) + 217)
      let t6277 = ((f4._::y.extent_realized.s.s - f4._::y.min_realized.s) + 248)
      gpu_block<CUDA> (f4.s0._::x._::x.__block_id_y, 0, t6270) {
        gpu_block<CUDA> (f4.s0._::y._::y.__block_id_x, 0, t6271) {
          gpu_thread<CUDA> (.__thread_id_y, 0, 55) {
            gpu_thread<CUDA> (.__thread_id_x, 0, 16) {
              let f4.s0._::x._::xi.base.s = min(((f4.s0._::x._::x.__block_id_y*217) + 213), t6272)
              if ((f4.s0._::y._::y.__block_id_x < t6273)) {
                if ((.__thread_id_y < 54)) {
                  f4[ramp(((((f4.s0._::y._::y.__block_id_x*16) + .__thread_id_x)*2) + ((((.__thread_id_y*4) + (f4.s0._::x._::xi.base.s + t4535))*t6277) + t6276)), 1, 2)] = f1[ramp((((((f4.s0._::y._::y.__block_id_x*16) + .__thread_id_x)*4) + ((((((.__thread_id_y*4) + f4.s0._::x._::xi.base.s)*2) + t6275)*(t6274 + 985)) + (t6274 - f1._::y.min_realized.s))) + 1966), 2, 2)]
                  f4[ramp(((((f4.s0._::y._::y.__block_id_x*16) + .__thread_id_x)*2) + ((((.__thread_id_y*4) + (f4.s0._::x._::xi.base.s + t4538))*t6277) + t6276)), 1, 2)] = f1[ramp((((((f4.s0._::y._::y.__block_id_x*16) + .__thread_id_x)*4) + ((((((.__thread_id_y*4) + f4.s0._::x._::xi.base.s)*2) + t6278)*(t6274 + 985)) + (t6274 - f1._::y.min_realized.s))) + 1966), 2, 2)]
                  f4[ramp(((((f4.s0._::y._::y.__block_id_x*16) + .__thread_id_x)*2) + ((((.__thread_id_y*4) + (f4.s0._::x._::xi.base.s + t4540))*t6277) + t6276)), 1, 2)] = f1[ramp((((((f4.s0._::y._::y.__block_id_x*16) + .__thread_id_x)*4) + ((((((.__thread_id_y*4) + f4.s0._::x._::xi.base.s)*2) + t6279)*(t6274 + 985)) + (t6274 - f1._::y.min_realized.s))) + 1966), 2, 2)]
                  f4[ramp(((((f4.s0._::y._::y.__block_id_x*16) + .__thread_id_x)*2) + ((((.__thread_id_y*4) + (f4.s0._::x._::xi.base.s + t4542))*t6277) + t6276)), 1, 2)] = f1[ramp((((((f4.s0._::y._::y.__block_id_x*16) + .__thread_id_x)*4) + ((((((.__thread_id_y*4) + f4.s0._::x._::xi.base.s)*2) + t6280)*(t6274 + 985)) + (t6274 - f1._::y.min_realized.s))) + 1966), 2, 2)]
                } else {
                  f4[ramp(((((f4.s0._::y._::y.__block_id_x*16) + .__thread_id_x)*2) + (((f4.s0._::x._::xi.base.s + t4544)*t6277) + t6276)), 1, 2)] = f1[ramp((((((f4.s0._::y._::y.__block_id_x*16) + .__thread_id_x)*4) + ((((f4.s0._::x._::xi.base.s*2) + t6281)*(t6274 + 985)) + (t6274 - f1._::y.min_realized.s))) + 1966), 2, 2)]
                  f4[ramp(((((f4.s0._::y._::y.__block_id_x*16) + .__thread_id_x)*2) + (((f4.s0._::x._::xi.base.s + t4546)*t6277) + t6276)), 1, 2)] = f1[ramp((((((f4.s0._::y._::y.__block_id_x*16) + .__thread_id_x)*4) + ((((f4.s0._::x._::xi.base.s*2) + t6282)*(t6274 + 985)) + (t6274 - f1._::y.min_realized.s))) + 1966), 2, 2)]
                  f4[ramp(((((f4.s0._::y._::y.__block_id_x*16) + .__thread_id_x)*2) + (((f4.s0._::x._::xi.base.s + t4548)*t6277) + t6276)), 1, 2)] = f1[ramp((((((f4.s0._::y._::y.__block_id_x*16) + .__thread_id_x)*4) + ((((f4.s0._::x._::xi.base.s*2) + t6283)*(t6274 + 985)) + (t6274 - f1._::y.min_realized.s))) + 1966), 2, 2)]
                  f4[ramp(((((f4.s0._::y._::y.__block_id_x*16) + .__thread_id_x)*2) + (((f4.s0._::x._::xi.base.s + t4550)*t6277) + t6276)), 1, 2)] = f1[ramp((((((f4.s0._::y._::y.__block_id_x*16) + .__thread_id_x)*4) + ((((f4.s0._::x._::xi.base.s*2) + t6284)*(t6274 + 985)) + (t6274 - f1._::y.min_realized.s))) + 1966), 2, 2)]
                }
              } else {
                f4[ramp(((.__thread_id_x*2) + (((min((.__thread_id_y*4), 213) + (f4.s0._::x._::xi.base.s + t4535))*t6277) + t6286)), 1, 2)] = f1[ramp((((((.__thread_id_x*2) + t6287)*2) + (((((min((.__thread_id_y*4), 213) + f4.s0._::x._::xi.base.s)*2) + t6275)*(t6274 + 985)) + (t6274 - f1._::y.min_realized.s))) + 1910), 2, 2)]
                f4[ramp(((.__thread_id_x*2) + (((min((.__thread_id_y*4), 213) + (f4.s0._::x._::xi.base.s + t4538))*t6277) + t6286)), 1, 2)] = f1[ramp((((((.__thread_id_x*2) + t6287)*2) + (((((min((.__thread_id_y*4), 213) + f4.s0._::x._::xi.base.s)*2) + t6278)*(t6274 + 985)) + (t6274 - f1._::y.min_realized.s))) + 1910), 2, 2)]
                f4[ramp(((.__thread_id_x*2) + (((min((.__thread_id_y*4), 213) + (f4.s0._::x._::xi.base.s + t4540))*t6277) + t6286)), 1, 2)] = f1[ramp((((((.__thread_id_x*2) + t6287)*2) + (((((min((.__thread_id_y*4), 213) + f4.s0._::x._::xi.base.s)*2) + t6279)*(t6274 + 985)) + (t6274 - f1._::y.min_realized.s))) + 1910), 2, 2)]
                f4[ramp(((.__thread_id_x*2) + (((min((.__thread_id_y*4), 213) + (f4.s0._::x._::xi.base.s + t4542))*t6277) + t6286)), 1, 2)] = f1[ramp((((((.__thread_id_x*2) + t6287)*2) + (((((min((.__thread_id_y*4), 213) + f4.s0._::x._::xi.base.s)*2) + t6280)*(t6274 + 985)) + (t6274 - f1._::y.min_realized.s))) + 1910), 2, 2)]
              }
            }
          }
        }
      }
      _halide_buffer_set_device_dirty(f4.buffer, (uint1)1)
    }
  }
  let f3._::y.min_realized.s = min((processed.extent.1/2), (min((processed.extent.1/2), (min((processed.extent.1/2), 123) + 121)) + 246))
  let f3._::y.extent_realized.s.s = (let t5763 = min(((processed.extent.1/2)*2), (((processed.extent.1/248)*248) + 246)) in max((t5763/2), (max(max(min((processed.extent.1/2), ((((processed.extent.1 + 4)/496)*248) + 245)), (t5763/2)), min((processed.extent.1/2), ((((processed.extent.1 + 6)/988)*494) + 490))) + 1)))
  let f3._::x.min_realized.s = min((min(((processed.extent.0/2)*2), 431) + 432), processed.extent.0)
  let f3._::x.extent_realized.s = ((processed.extent.0/2) - min((f3._::x.min_realized.s/2), 430))
  allocate f3[int16 * (f3._::x.extent_realized.s + 434) * ((f3._::y.extent_realized.s.s - f3._::y.min_realized.s) + 493)] if (uint1)0
  let f3.buffer = _halide_buffer_init(alloca(size_of_halide_buffer_t()), make_struct((halide_dimension_t *), (min((f3._::x.min_realized.s/2), 430) + -432), (f3._::x.extent_realized.s + 434), 1, 0, (f3._::y.min_realized.s + -492), ((f3._::y.extent_realized.s.s - f3._::y.min_realized.s) + 493), (f3._::x.extent_realized.s + 434), 0), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 0, 16, 2, make_struct((halide_dimension_t *), (min((f3._::x.min_realized.s/2), 430) + -432), (f3._::x.extent_realized.s + 434), 1, 0, (f3._::y.min_realized.s + -492), ((f3._::y.extent_realized.s.s - f3._::y.min_realized.s) + 493), (f3._::x.extent_realized.s + 434), 0), (uint64)0)
  register_destructor("halide_device_free_as_destructor", f3.buffer)
  produce f3 {
    consume f1 {
      let halide_device_malloc_result$13 = halide_device_malloc(f3.buffer, halide_cuda_device_interface())
      assert((halide_device_malloc_result$13 == 0), halide_device_malloc_result$13)
      let halide_device_malloc_result$24 = halide_device_malloc(f1.buffer, halide_cuda_device_interface())
      assert((halide_device_malloc_result$24 == 0), halide_device_malloc_result$24)
      let t4563 = (418 - min((f3._::x.min_realized.s/2), 430))
      let t4560 = (216 - min((f3._::x.min_realized.s/2), 430))
      let t6288 = ((processed.extent.1 + 994)/988)
      let t6289 = ((processed.extent.0 + 442)/436)
      let t6290 = (processed.extent.1/2)
      let t6291 = (processed.extent.0/2)
      let t6293 = (f1._::y.extent_realized.s.s - f1._::y.min_realized.s)
      let t6292 = (f3._::x.extent_realized.s + 434)
      gpu_block<CUDA> (f3.s0._::y._::y.__block_id_y, 0, t6288) {
        gpu_block<CUDA> (f3.s0._::x._::x.__block_id_x, 0, t6289) {
          gpu_thread<CUDA> (.__thread_id_y, 0, 62) {
            gpu_thread<CUDA> (.__thread_id_x, 0, 14) {
              let f3.s0._::y._::yi.base.s = min(((f3.s0._::y._::y.__block_id_y*494) + 490), t6290)
              if ((.__thread_id_y < 61)) {
                if ((.__thread_id_x < 13)) {
                  let f3.s0._::x._::xi.base.s = min(((f3.s0._::x._::x.__block_id_x*218) + 214), t6291)
                  let t4572 = ((.__thread_id_y*8) + (f3.s0._::y._::yi.base.s - f3._::y.min_realized.s))
                  let t6299 = (.__thread_id_x*8)
                  let t6301 = ((t6293*2) + 1970)
                  let t6298 = ((.__thread_id_y*8) + f3.s0._::y._::yi.base.s)
                  let t6300 = (t6293 + 985)
                  let t6297 = (f3.s0._::x._::xi.base.s + t4560)
                  for (f3.s0._::y._::yi._::yii, 0, 8) {
                    let t4575 = (((f3.s0._::y._::yi._::yii + t4572)*t6292) + t6297)
                    let t6302 = (((f3.s0._::y._::yi._::yii + t6298)*2) - f1._::y.min_realized.s)
                    for (f3.s0._::x._::xi._::xii._::xii, 0, 8) {
                      f3[ramp((((f3.s0._::x._::xi._::xii._::xii + t6299)*2) + t4575), 1, 2)] = f1[ramp((((((((f3.s0._::x._::xi._::xii._::xii + t6299)*2) + f3.s0._::x._::xi.base.s)*2) - f1._::x.min_realized.s)*t6300) + t6302), t6301, 2)]
                    }
                  }
                } else {
                  let f3.s0._::x._::xi.base.s = min(((f3.s0._::x._::x.__block_id_x*218) + 214), t6291)
                  let t4581 = ((.__thread_id_y*8) + (f3.s0._::y._::yi.base.s - f3._::y.min_realized.s))
                  let t6305 = (404 - f1._::x.min_realized.s)
                  let t6307 = ((t6293*2) + 1970)
                  let t6304 = ((.__thread_id_y*8) + f3.s0._::y._::yi.base.s)
                  let t6306 = (t6293 + 985)
                  let t6303 = (f3.s0._::x._::xi.base.s + t4563)
                  for (f3.s0._::y._::yi._::yii, 0, 8) {
                    let t4584 = (((f3.s0._::y._::yi._::yii + t4581)*t6292) + t6303)
                    let t6308 = (((f3.s0._::y._::yi._::yii + t6304)*2) - f1._::y.min_realized.s)
                    for (f3.s0._::x._::xi._::xii._::xii, 0, 8) {
                      f3[ramp(((f3.s0._::x._::xi._::xii._::xii*2) + t4584), 1, 2)] = f1[ramp(((((((f3.s0._::x._::xi._::xii._::xii*2) + f3.s0._::x._::xi.base.s)*2) + t6305)*t6306) + t6308), t6307, 2)]
                    }
                  }
                }
              } else {
                let f3.s0._::x._::xi.base.s = min(((f3.s0._::x._::x.__block_id_x*218) + 214), t6291)
                let t4589 = (min((.__thread_id_x*16), 202) + (f3.s0._::x._::xi.base.s + t4560))
                let t6310 = (972 - f1._::y.min_realized.s)
                let t6311 = (min((.__thread_id_x*16), 202) + f3.s0._::x._::xi.base.s)
                let t6313 = ((t6293*2) + 1970)
                let t6309 = ((f3.s0._::y._::yi.base.s - f3._::y.min_realized.s) + 486)
                let t6312 = (t6293 + 985)
                for (f3.s0._::y._::yi._::yii, 0, 8) {
                  let t4593.s = ((f3.s0._::y._::yi._::yii + t6309)*t6292)
                  let t6314 = (((f3.s0._::y._::yi._::yii + f3.s0._::y._::yi.base.s)*2) + t6310)
                  let t6315 = (t4589 + t4593.s)
                  for (f3.s0._::x._::xi._::xii._::xii, 0, 8) {
                    f3[ramp(((f3.s0._::x._::xi._::xii._::xii*2) + t6315), 1, 2)] = f1[ramp(((((((f3.s0._::x._::xi._::xii._::xii*2) + t6311)*2) - f1._::x.min_realized.s)*t6312) + t6314), t6313, 2)]
                  }
                }
              }
            }
          }
        }
      }
      _halide_buffer_set_device_dirty(f3.buffer, (uint1)1)
    }
  }
  let f7._::y.min_realized.s = min((processed.extent.1/2), (min((processed.extent.1/2), 123) + 122))
  let f7._::y.extent_realized.s.s = max(min((processed.extent.1/2), ((((processed.extent.1 + 4)/496)*248) + 245)), (min(((processed.extent.1/2)*2), (((processed.extent.1/248)*248) + 246))/2))
  let f7._::x.min_realized.s = min((min(((processed.extent.0/2)*2), 431) + 430), processed.extent.0)
  let f7._::x.extent_realized.s = ((processed.extent.0/2) - (f7._::x.min_realized.s/2))
  allocate f7[int16 * (f7._::x.extent_realized.s + 433) * ((f7._::y.extent_realized.s.s - f7._::y.min_realized.s) + 248)] if (uint1)0
  let f7.buffer = _halide_buffer_init(alloca(size_of_halide_buffer_t()), make_struct((halide_dimension_t *), ((f7._::x.min_realized.s/2) + -432), (f7._::x.extent_realized.s + 433), ((f7._::y.extent_realized.s.s - f7._::y.min_realized.s) + 248), 0, (f7._::y.min_realized.s + -246), ((f7._::y.extent_realized.s.s - f7._::y.min_realized.s) + 248), 1, 0), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 0, 16, 2, make_struct((halide_dimension_t *), ((f7._::x.min_realized.s/2) + -432), (f7._::x.extent_realized.s + 433), ((f7._::y.extent_realized.s.s - f7._::y.min_realized.s) + 248), 0, (f7._::y.min_realized.s + -246), ((f7._::y.extent_realized.s.s - f7._::y.min_realized.s) + 248), 1, 0), (uint64)0)
  register_destructor("halide_device_free_as_destructor", f7.buffer)
  produce f7 {
    consume f3 {
      consume f4 {
        let halide_device_malloc_result$11 = halide_device_malloc(f7.buffer, halide_cuda_device_interface())
        assert((halide_device_malloc_result$11 == 0), halide_device_malloc_result$11)
        let halide_device_malloc_result$14 = halide_device_malloc(f3.buffer, halide_cuda_device_interface())
        assert((halide_device_malloc_result$14 == 0), halide_device_malloc_result$14)
        let halide_device_malloc_result$17 = halide_device_malloc(f4.buffer, halide_cuda_device_interface())
        assert((halide_device_malloc_result$17 == 0), halide_device_malloc_result$17)
        let t6320 = min((f3._::x.min_realized.s/2), 430)
        let t6317 = ((processed.extent.1 + 500)/496)
        let t6316 = ((processed.extent.0 + 870)/866)
        let t6319 = (processed.extent.1/2)
        let t6318 = (processed.extent.0/2)
        let t6321 = (f7._::x.min_realized.s/2)
        let t6322 = (f4._::x.min_realized.s/2)
        let t6324 = ((f7._::y.extent_realized.s.s - f7._::y.min_realized.s) + 248)
        let t6323 = ((f4._::y.extent_realized.s.s - f4._::y.min_realized.s) + 248)
        let t6326 = (f3._::x.extent_realized.s + 434)
        gpu_block<CUDA> (f7.s0._::x._::x.__block_id_y, 0, t6316) {
          gpu_block<CUDA> (f7.s0._::y._::y.__block_id_x, 0, t6317) {
            gpu_thread<CUDA> (.__thread_id_y, 0, 55) {
              gpu_thread<CUDA> (.__thread_id_x, 0, 16) {
                let f7.s0._::x._::xi.base.s = min(((f7.s0._::x._::x.__block_id_y*433) + 430), t6318)
                if ((.__thread_id_y < 54)) {
                  if ((.__thread_id_x < 15)) {
                    let f7.s0._::y._::yi.base.s = min(((f7.s0._::y._::y.__block_id_x*248) + 245), t6319)
                    let t4624 = ((.__thread_id_y*8) + (f7.s0._::x._::xi.base.s - t6320))
                    let t4622 = ((.__thread_id_y*8) + (f7.s0._::x._::xi.base.s - t6321))
                    let t4618 = ((.__thread_id_y*8) + (f7.s0._::x._::xi.base.s - t6322))
                    let t6329 = (.__thread_id_x*8)
                    let t6328 = (f7.s0._::y._::yi.base.s - f7._::y.min_realized.s)
                    let t6331 = (f7.s0._::y._::yi.base.s - f4._::y.min_realized.s)
                    let t6330 = ((f7.s0._::y._::yi.base.s - f3._::y.min_realized.s) + 246)
                    for (f7.s0._::x._::xi._::xii, 0, 8) {
                      let t4628 = ((f7.s0._::x._::xi._::xii + t4618)*t6323)
                      let t4630 = (((f7.s0._::x._::xi._::xii + t4622)*t6324) + t6328)
                      let t6333 = (t4628 + t6331)
                      let t6332 = (f7.s0._::x._::xi._::xii + t4624)
                      for (f7.s0._::y._::yi._::yii._::yii, 0, 8) {
                        f7[ramp((((f7.s0._::y._::yi._::yii._::yii + t6329)*2) + t4630), 1, 2)] = (let t5772 = f3[ramp(((((((f7.s0._::y._::yi._::yii._::yii + t6329)*2) + t6330)*t6326) + t6332) + 1), t6326, 2)] in (let t5773 = f3[ramp((((((f7.s0._::y._::yi._::yii._::yii + t6329)*2) + t6330)*t6326) + t6332), t6326, 2)] in (let t5775 = f4[ramp((((f7.s0._::y._::yi._::yii._::yii + t6329)*2) + t6333), 1, 2)] in (let t5776 = f4[ramp(((((f7.s0._::y._::yi._::yii._::yii + t6329)*2) + t6333) + 1), 1, 2)] in select((absd(t5772, t5773) < absd(t5775, t5776)), int16x2((((int32x2(t5772) + int32x2(t5773)) + x2(1))/x2(2))), int16x2((((int32x2(t5775) + int32x2(t5776)) + x2(1))/x2(2))))))))
                      }
                    }
                  } else {
                    let f7.s0._::y._::yi.base.s = min(((f7.s0._::y._::y.__block_id_x*248) + 245), t6319)
                    let t4641 = ((.__thread_id_y*8) + (f7.s0._::x._::xi.base.s - t6320))
                    let t4639 = ((.__thread_id_y*8) + (f7.s0._::x._::xi.base.s - t6321))
                    let t4635 = ((.__thread_id_y*8) + (f7.s0._::x._::xi.base.s - t6322))
                    let t6334 = (f7.s0._::y._::yi.base.s - f7._::y.min_realized.s)
                    let t6336 = (f7.s0._::y._::yi.base.s - f4._::y.min_realized.s)
                    let t6335 = ((f7.s0._::y._::yi.base.s - f3._::y.min_realized.s) + 478)
                    for (f7.s0._::x._::xi._::xii, 0, 8) {
                      let t4645 = ((f7.s0._::x._::xi._::xii + t4635)*t6323)
                      let t4646.s = (((f7.s0._::x._::xi._::xii + t4639)*t6324) + t6334)
                      let t6339 = (t4646.s + 232)
                      let t6338 = (t4645 + t6336)
                      let t6337 = (f7.s0._::x._::xi._::xii + t4641)
                      for (f7.s0._::y._::yi._::yii._::yii, 0, 8) {
                        f7[ramp(((f7.s0._::y._::yi._::yii._::yii*2) + t6339), 1, 2)] = (let t5778 = f3[ramp((((((f7.s0._::y._::yi._::yii._::yii*2) + t6335)*t6326) + t6337) + 1), t6326, 2)] in (let t5779 = f3[ramp(((((f7.s0._::y._::yi._::yii._::yii*2) + t6335)*t6326) + t6337), t6326, 2)] in (let t5781 = f4[ramp((((f7.s0._::y._::yi._::yii._::yii*2) + t6338) + 232), 1, 2)] in (let t5782 = f4[ramp((((f7.s0._::y._::yi._::yii._::yii*2) + t6338) + 233), 1, 2)] in select((absd(t5778, t5779) < absd(t5781, t5782)), int16x2((((int32x2(t5778) + int32x2(t5779)) + x2(1))/x2(2))), int16x2((((int32x2(t5781) + int32x2(t5782)) + x2(1))/x2(2))))))))
                      }
                    }
                  }
                } else {
                  let f7.s0._::y._::yi.base.s = min(((f7.s0._::y._::y.__block_id_x*248) + 245), t6319)
                  let t4657 = (f7.s0._::x._::xi.base.s - t6320)
                  let t4655 = (min((.__thread_id_x*16), 232) + (f7.s0._::y._::yi.base.s - f7._::y.min_realized.s))
                  let t4656.s = (f7.s0._::x._::xi.base.s - t6321)
                  let t4652.s = (f7.s0._::x._::xi.base.s - t6322)
                  let t6344 = min((.__thread_id_x*16), 232)
                  let t6340 = ((f7.s0._::y._::yi.base.s - f4._::y.min_realized.s) + t6344)
                  let t6343 = ((f7.s0._::y._::yi.base.s - f3._::y.min_realized.s) + t6344)
                  let t6342 = (t4656.s + 425)
                  let t6341 = (t4652.s + 425)
                  for (f7.s0._::x._::xi._::xii, 0, 8) {
                    let t4663 = ((f7.s0._::x._::xi._::xii + t6341)*t6323)
                    let t4666.s = ((f7.s0._::x._::xi._::xii + t6342)*t6324)
                    let t6346 = (t6343 + 246)
                    let t6347 = (t4663 + t6340)
                    let t6348 = (t4655 + t4666.s)
                    let t6345 = (f7.s0._::x._::xi._::xii + t4657)
                    for (f7.s0._::y._::yi._::yii._::yii, 0, 8) {
                      f7[ramp(((f7.s0._::y._::yi._::yii._::yii*2) + t6348), 1, 2)] = (let t5784 = f3[ramp((((((f7.s0._::y._::yi._::yii._::yii*2) + t6346)*t6326) + t6345) + 426), t6326, 2)] in (let t5785 = f3[ramp((((((f7.s0._::y._::yi._::yii._::yii*2) + t6346)*t6326) + t6345) + 425), t6326, 2)] in (let t5787 = f4[ramp(((f7.s0._::y._::yi._::yii._::yii*2) + t6347), 1, 2)] in (let t5788 = f4[ramp((((f7.s0._::y._::yi._::yii._::yii*2) + t6347) + 1), 1, 2)] in select((absd(t5784, t5785) < absd(t5787, t5788)), int16x2((((int32x2(t5784) + int32x2(t5785)) + x2(1))/x2(2))), int16x2((((int32x2(t5787) + int32x2(t5788)) + x2(1))/x2(2))))))))
                    }
                  }
                }
              }
            }
          }
        }
        _halide_buffer_set_device_dirty(f7.buffer, (uint1)1)
      }
    }
  }
  let f27._::x.min_realized.s = min(((processed.extent.0/2)*2), ((min((processed.extent.0/2), 117)*2) + 197))
  let f27.stride.2 = (((max((processed.extent.1/2), 123)*2) + 2)*(max((max((processed.extent.0/2), 117)*2), 431) + 2))
  allocate f27[int16 * (max((max((processed.extent.0/2), 117)*2), 431) + 2) * ((max((processed.extent.1/2), 123)*2) + 2) * 3] if (uint1)0
  let f27.buffer = _halide_buffer_init(alloca(size_of_halide_buffer_t()), make_struct((halide_dimension_t *), (f27._::x.min_realized.s + -432), (max((max((processed.extent.0/2), 117)*2), 431) + 2), ((max((processed.extent.1/2), 123)*2) + 2), 0, ((min((processed.extent.1/2), 123)*2) + -247), ((max((processed.extent.1/2), 123)*2) + 2), 1, 0, 0, 3, f27.stride.2, 0), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 0, 16, 3, make_struct((halide_dimension_t *), (f27._::x.min_realized.s + -432), (max((max((processed.extent.0/2), 117)*2), 431) + 2), ((max((processed.extent.1/2), 123)*2) + 2), 0, ((min((processed.extent.1/2), 123)*2) + -247), ((max((processed.extent.1/2), 123)*2) + 2), 1, 0, 0, 3, f27.stride.2, 0), (uint64)0)
  register_destructor("halide_device_free_as_destructor", f27.buffer)
  produce f27 {
    consume f7 {
      consume f3 {
        consume f4 {
          consume f2 {
            consume f1 {
              consume f26 {
                let halide_device_malloc_result$9 = halide_device_malloc(f27.buffer, halide_cuda_device_interface())
                assert((halide_device_malloc_result$9 == 0), halide_device_malloc_result$9)
                let halide_device_malloc_result$12 = halide_device_malloc(f7.buffer, halide_cuda_device_interface())
                assert((halide_device_malloc_result$12 == 0), halide_device_malloc_result$12)
                let halide_device_malloc_result$15 = halide_device_malloc(f3.buffer, halide_cuda_device_interface())
                assert((halide_device_malloc_result$15 == 0), halide_device_malloc_result$15)
                let halide_device_malloc_result$18 = halide_device_malloc(f4.buffer, halide_cuda_device_interface())
                assert((halide_device_malloc_result$18 == 0), halide_device_malloc_result$18)
                let halide_device_malloc_result$20 = halide_device_malloc(f2.buffer, halide_cuda_device_interface())
                assert((halide_device_malloc_result$20 == 0), halide_device_malloc_result$20)
                let halide_device_malloc_result$25 = halide_device_malloc(f1.buffer, halide_cuda_device_interface())
                assert((halide_device_malloc_result$25 == 0), halide_device_malloc_result$25)
                let halide_copy_to_device_result = halide_copy_to_device(f26.buffer, halide_cuda_device_interface())
                assert((halide_copy_to_device_result == 0), halide_copy_to_device_result)
                let t4688 = (432 - (f7._::x.min_realized.s/2))
                let t4690 = (432 - (f4._::x.min_realized.s/2))
                let t4674 = (216 - (f7._::x.min_realized.s/2))
                let t4682 = (216 - (f4._::x.min_realized.s/2))
                let t6388 = (processed.extent.1/2)
                let t6389 = ((processed.extent.0/2)*2)
                let t6354 = min((f3._::x.min_realized.s/2), 430)
                let t6349 = ((t6389 + 434)/433)
                let t6353 = (min(t6388, 123)*2)
                let t6352 = (t6388*2)
                let t6366 = (f4._::y.extent_realized.s.s - f4._::y.min_realized.s)
                let t6373 = (f1._::y.extent_realized.s.s - f1._::y.min_realized.s)
                let t6356 = (492 - f3._::y.min_realized.s)
                let t6379 = (247 - f7._::y.min_realized.s)
                let t6359 = (246 - f7._::y.min_realized.s)
                let t6382 = (217 - f2._::x.min_realized.s)
                let t6365 = (125 - f2._::y.min_realized.s)
                let t6362 = (124 - f2._::y.min_realized.s)
                let t6360 = (1 - f2._::x.min_realized.s)
                let t6380 = (-1 - f7._::y.extent_realized.s.s)
                let t6367 = (-1 - f4._::y.extent_realized.s.s)
                let t6387 = (-1 - f3._::x.extent_realized.s)
                let t6364 = (-1 - f2._::y.extent_realized.s.s)
                let t6378 = (-2 - f7._::y.extent_realized.s.s)
                let t6370 = (-2 - f4._::y.extent_realized.s.s)
                let t6384 = (-2 - f3._::x.extent_realized.s)
                let t6363 = (-2 - f2._::y.extent_realized.s.s)
                let t6377 = (-217 - f3._::x.extent_realized.s)
                let t6372 = (-218 - f3._::x.extent_realized.s)
                let t6350 = ((processed.extent.1/248) + 1)
                let t6355 = ((max(t6388, 123)*2) + 2)
                let t6358 = ((f7._::y.extent_realized.s.s - f7._::y.min_realized.s) + 248)
                let t6361 = ((f2._::y.extent_realized.s.s - f2._::y.min_realized.s) + 126)
                let t6386 = (f3._::x.extent_realized.s + 867)
                let t6383 = (f3._::x.extent_realized.s + 866)
                let t6376 = (f3._::x.extent_realized.s + 651)
                let t6369 = (f3._::x.extent_realized.s + 650)
                let t6357 = (f3._::x.extent_realized.s + 434)
                gpu_block<CUDA> (f27.s0._::x._::x.__block_id_y, 0, t6349) {
                  gpu_block<CUDA> (f27.s0._::y._::y.__block_id_x, 0, t6350) {
                    gpu_thread<CUDA> (.__thread_id_y, 0, 55) {
                      gpu_thread<CUDA> (.__thread_id_x, 0, 16) {
                        let f27.s0._::x._::xi.base.s = min(((f27.s0._::x._::x.__block_id_y*433) + 431), t6389)
                        if ((.__thread_id_y < 54)) {
                          if ((.__thread_id_x < 15)) {
                            let f27.s0._::y._::yi.base.s = min(((f27.s0._::y._::y.__block_id_x*248) + 246), t6352)
                            let t4712 = (f27.s0._::y._::yi.base.s - t6353)
                            let t4713 = ((.__thread_id_y*8) + (f27.s0._::x._::xi.base.s - f27._::x.min_realized.s))
                            let t4702.s = ((.__thread_id_y*4) - t6354)
                            let t6412 = (.__thread_id_y*4)
                            let t6393 = (.__thread_id_x*8)
                            let t6407 = ((t6373*2) - f1._::y.min_realized.s)
                            let t6408 = (t6366 - f4._::y.min_realized.s)
                            let t6405 = (985 - f1._::y.min_realized.s)
                            let t6406 = (983 - f1._::y.min_realized.s)
                            let t6399 = (247 - f4._::y.min_realized.s)
                            let t6401 = (246 - f4._::y.min_realized.s)
                            let t6390 = ((.__thread_id_y*8) + f27.s0._::x._::xi.base.s)
                            let t6396 = (t6360 + t6412)
                            let t6397 = (t4682 + t6412)
                            let t6395 = (t4674 + t6412)
                            let t6404 = (t6373 + 985)
                            let t6398 = (t6366 + 248)
                            let t6411 = (t4702.s + t6377)
                            let t6409 = (t4702.s + t6376)
                            let t6402 = (t4702.s + t6372)
                            let t6400 = (t4702.s + t6369)
                            let t6410 = (t4702.s + 217)
                            let t6394 = (t4702.s + 216)
                            let t6391 = (f27.s0._::y._::yi.base.s + 1)
                            let t6392 = (f27.s0._::y._::yi.base.s + -247)
                            for (f27.s0._::c, 0, 3) {
                              let t4719 = (f27.s0._::c == 1)
                              let t4718 = (f27.s0._::c == 0)
                              let t6413 = ((f27.s0._::c*f27.stride.2) + t4712)
                              let t6416 = (t6408 + 495)
                              let t6417 = (t6408 + 494)
                              let t6415 = (t6407 + 2955)
                              let t6414 = (t6407 + 2953)
                              for (f27.s0._::x._::xi._::xii, 0, 8) {
                                let t4721 = (((f27.s0._::x._::xi._::xii + t6390) % 2) == 0)
                                let t4725 = (((f27.s0._::x._::xi._::xii + t4713)*t6355) + t6413)
                                let t6418 = (f27.s0._::x._::xi._::xii + f27.s0._::x._::xi.base.s)
                                for (f27.s0._::y._::yi._::yii._::yii, 0, 8) {
                                  f27[ramp((((f27.s0._::y._::yi._::yii._::yii + t6393)*2) + t4725), 1, 2) aligned(2, 0)] = (let t5792 = ((ramp(t6391, 1, 2) % x2(2)) == x2(0)) in (let t5794 = (((ramp((((f27.s0._::y._::yi._::yii._::yii + t6393)*2) + t6392), 1, 2)/x2(2)) + x2(t6356))*x2(t6357)) in (let t5796 = f3[(t5794 + x2(((t6418/2) + t6394)))] in (let t5798 = f7[((ramp((((f27.s0._::y._::yi._::yii._::yii + t6393)*2) + t6392), 1, 2)/x2(2)) + x2(((((t6418/2) + t6395)*t6358) + t6359)))] in (let t5800 = f2[((ramp((((f27.s0._::y._::yi._::yii._::yii + t6393)*2) + t6392), 1, 2)/x2(2)) + x2(((((t6418/2) + t6396)*t6361) + t6362)))] in (let t5801 = f2[((ramp((((f27.s0._::y._::yi._::yii._::yii + t6393)*2) + t6392), 1, 2)/x2(2)) + x2(((((t6418/2) + t6396)*t6361) + t6363)))] in (let t5802 = f2[((ramp((((f27.s0._::y._::yi._::yii._::yii + t6393)*2) + t6392), 1, 2)/x2(2)) + x2(((((t6418/2) + t6396)*t6361) + t6364)))] in (let t5803 = f2[((ramp((((f27.s0._::y._::yi._::yii._::yii + t6393)*2) + t6392), 1, 2)/x2(2)) + x2(((((t6418/2) + t6396)*t6361) + t6365)))] in (let t5806 = f4[((ramp((((f27.s0._::y._::yi._::yii._::yii + t6393)*2) + t6392), 1, 2)/x2(2)) + x2(((((t6418/2) + t6397)*t6398) + t6367)))] in (let t5807 = f4[((ramp((((f27.s0._::y._::yi._::yii._::yii + t6393)*2) + t6392), 1, 2)/x2(2)) + x2(((((t6418/2) + t6397)*t6398) + t6399)))] in (let t5808 = f3[(t5794 + x2(((t6418/2) + t6400)))] in (let t5811 = select((absd(t5806, t5807) < absd(t5808, t5796)), int16x2((((int32x2(t5806) + int32x2(t5807)) + x2(1))/x2(2))), int16x2((((int32x2(t5808) + int32x2(t5796)) + x2(1))/x2(2)))) in (let t5812 = f4[((ramp((((f27.s0._::y._::yi._::yii._::yii + t6393)*2) + t6392), 1, 2)/x2(2)) + x2(((((t6418/2) + t6397)*t6398) + t6370)))] in (let t5813 = f4[((ramp((((f27.s0._::y._::yi._::yii._::yii + t6393)*2) + t6392), 1, 2)/x2(2)) + x2(((((t6418/2) + t6397)*t6398) + t6401)))] in (let t5814 = f3[(t5794 + x2(((t6418/2) + t6402)))] in (let t5817 = f1[(((ramp((((f27.s0._::y._::yi._::yii._::yii + t6393)*2) + t6392), 1, 2)/x2(2))*x2(2)) + x2(((((((t6418/2) + t6412)*2) - f1._::x.min_realized.s)*t6404) + t6405)))] in (let t5818 = f1[(((ramp((((f27.s0._::y._::yi._::yii._::yii + t6393)*2) + t6392), 1, 2)/x2(2))*x2(2)) + x2(((((((t6418/2) + t6412)*2) - f1._::x.min_realized.s)*t6404) + t6406)))] in (let t5820 = f1[(((ramp((((f27.s0._::y._::yi._::yii._::yii + t6393)*2) + t6392), 1, 2)/x2(2))*x2(2)) + x2(((((((t6418/2) + t6412)*2) - f1._::x.min_realized.s)*t6404) + t6414)))] in (let t5821 = f1[(((ramp((((f27.s0._::y._::yi._::yii._::yii + t6393)*2) + t6392), 1, 2)/x2(2))*x2(2)) + x2(((((((t6418/2) + t6412)*2) - f1._::x.min_realized.s)*t6404) + t6415)))] in (let t5823 = f4[((ramp((((f27.s0._::y._::yi._::yii._::yii + t6393)*2) + t6392), 1, 2)/x2(2)) + x2(((((t6418/2) + t6397)*t6398) + t6416)))] in (let t5824 = f3[(t5794 + x2(((t6418/2) + t6409)))] in (let t5825 = f3[(t5794 + x2(((t6418/2) + t6410)))] in (let t5826 = f4[((ramp((((f27.s0._::y._::yi._::yii._::yii + t6393)*2) + t6392), 1, 2)/x2(2)) + x2(((((t6418/2) + t6397)*t6398) + t6417)))] in (let t5827 = f3[(t5794 + x2(((t6418/2) + t6411)))] in (let t5831.s = f7[((ramp((((f27.s0._::y._::yi._::yii._::yii + t6393)*2) + t6392), 1, 2)/x2(2)) + x2(((((t6418/2) + t6395)*t6358) + t6378)))] in (let t5834.s = f7[((ramp((((f27.s0._::y._::yi._::yii._::yii + t6393)*2) + t6392), 1, 2)/x2(2)) + x2(((((t6418/2) + t6395)*t6358) + t6379)))] in (let t5837.s = select((absd(t5812, t5813) < absd(t5796, t5814)), int16x2((((int32x2(t5812) + int32x2(t5813)) + x2(1))/x2(2))), int16x2((((int32x2(t5796) + int32x2(t5814)) + x2(1))/x2(2)))) in (let t5840.s = select((absd(t5807, t5823) < absd(t5824, t5825)), int16x2((((int32x2(t5807) + int32x2(t5823)) + x2(1))/x2(2))), int16x2((((int32x2(t5824) + int32x2(t5825)) + x2(1))/x2(2)))) in (let t5842.s = select(t5792, select(t4721, ((t5796 - int16x2((((int32x2(t5798) + int32x2(t5831.s)) + x2(1))/x2(2)))) + int16x2((((int32x2(t5801) + int32x2(t5800)) + x2(1))/x2(2)))), t5800), select(t4721, select((absd(t5800, t5802) < absd(t5801, t5803)), ((t5811 - int16x2((((int32x2(t5798) + int32x2(f7[((ramp((((f27.s0._::y._::yi._::yii._::yii + t6393)*2) + t6392), 1, 2)/x2(2)) + x2(((((t6418/2) + t6395)*t6358) + t6380)))])) + x2(1))/x2(2)))) + int16x2((((int32x2(t5800) + int32x2(t5802)) + x2(1))/x2(2)))), ((t5811 - int16x2((((int32x2(t5831.s) + int32x2(t5834.s)) + x2(1))/x2(2)))) + int16x2((((int32x2(t5801) + int32x2(t5803)) + x2(1))/x2(2))))), ((t5807 - int16x2((((int32x2(t5798) + int32x2(t5834.s)) + x2(1))/x2(2)))) + int16x2((((int32x2(t5800) + int32x2(t5803)) + x2(1))/x2(2)))))) in (let t5843.s = select(t5792, select(t4721, t5796, t5798), select(t4721, t5811, t5807)) in (let t5844.s = select(t5792, select(t4721, ((t5796 - int16x2((((int32x2(t5811) + int32x2(t5837.s)) + x2(1))/x2(2)))) + int16x2((((int32x2(t5817) + int32x2(t5818)) + x2(1))/x2(2)))), select((absd(t5817, t5820) < absd(t5821, t5818)), ((t5798 - int16x2((((int32x2(t5811) + int32x2(select((absd(t5813, t5826) < absd(t5825, t5827)), int16x2((((int32x2(t5813) + int32x2(t5826)) + x2(1))/x2(2))), int16x2((((int32x2(t5825) + int32x2(t5827)) + x2(1))/x2(2)))))) + x2(1))/x2(2)))) + int16x2((((int32x2(t5817) + int32x2(t5820)) + x2(1))/x2(2)))), ((t5798 - int16x2((((int32x2(t5840.s) + int32x2(t5837.s)) + x2(1))/x2(2)))) + int16x2((((int32x2(t5821) + int32x2(t5818)) + x2(1))/x2(2)))))), select(t4721, t5817, ((t5807 - int16x2((((int32x2(t5811) + int32x2(t5840.s)) + x2(1))/x2(2)))) + int16x2((((int32x2(t5817) + int32x2(t5821)) + x2(1))/x2(2)))))) in select(t4718, int16x2((((int32x2(t5844.s)*x2(int32(f26[2]))) + ((int32x2(t5843.s)*x2(int32(f26[1]))) + ((int32x2(t5842.s)*x2(int32(f26[0]))) + x2(int32(f26[3])))))/x2(256))), select(t4719, int16x2((((int32x2(t5844.s)*x2(int32(f26[6]))) + ((int32x2(t5843.s)*x2(int32(f26[5]))) + ((int32x2(t5842.s)*x2(int32(f26[4]))) + x2(int32(f26[7])))))/x2(256))), int16x2((((int32x2(t5844.s)*x2(int32(f26[10]))) + ((int32x2(t5843.s)*x2(int32(f26[9]))) + ((int32x2(t5842.s)*x2(int32(f26[8]))) + x2(int32(f26[11])))))/x2(256))))))))))))))))))))))))))))))))))))
                                }
                              }
                            }
                          } else {
                            let f27.s0._::y._::yi.base.s = min(((f27.s0._::y._::y.__block_id_x*248) + 246), t6352)
                            let t4739 = ((.__thread_id_y*8) + (f27.s0._::x._::xi.base.s - f27._::x.min_realized.s))
                            let t4728.s = ((.__thread_id_y*4) - t6354)
                            let t4738.s = (f27.s0._::y._::yi.base.s - t6353)
                            let t6440 = (.__thread_id_y*4)
                            let t6435 = ((t6373*2) - f1._::y.min_realized.s)
                            let t6436 = (t6366 - f4._::y.min_realized.s)
                            let t6433 = (985 - f1._::y.min_realized.s)
                            let t6434 = (983 - f1._::y.min_realized.s)
                            let t6427 = (247 - f4._::y.min_realized.s)
                            let t6429 = (246 - f4._::y.min_realized.s)
                            let t6419 = ((.__thread_id_y*8) + f27.s0._::x._::xi.base.s)
                            let t6424 = (t6360 + t6440)
                            let t6425 = (t4682 + t6440)
                            let t6423 = (t4674 + t6440)
                            let t6432 = (t6373 + 985)
                            let t6426 = (t6366 + 248)
                            let t6439 = (t4728.s + t6377)
                            let t6437 = (t4728.s + t6376)
                            let t6430 = (t4728.s + t6372)
                            let t6428 = (t4728.s + t6369)
                            let t6438 = (t4728.s + 217)
                            let t6422 = (t4728.s + 216)
                            let t6420 = (f27.s0._::y._::yi.base.s + 1)
                            let t6421 = (f27.s0._::y._::yi.base.s + -15)
                            for (f27.s0._::c, 0, 3) {
                              let t4745 = (f27.s0._::c == 1)
                              let t4744 = (f27.s0._::c == 0)
                              let t6441 = ((f27.s0._::c*f27.stride.2) + t4738.s)
                              let t6444 = (t6436 + 495)
                              let t6445 = (t6436 + 494)
                              let t6443 = (t6435 + 2955)
                              let t6442 = (t6435 + 2953)
                              for (f27.s0._::x._::xi._::xii, 0, 8) {
                                let t4747 = (((f27.s0._::x._::xi._::xii + t6419) % 2) == 0)
                                let t4751.s = (((f27.s0._::x._::xi._::xii + t4739)*t6355) + t6441)
                                let t6447 = (t4751.s + 232)
                                let t6446 = (f27.s0._::x._::xi._::xii + f27.s0._::x._::xi.base.s)
                                for (f27.s0._::y._::yi._::yii._::yii, 0, 8) {
                                  f27[ramp(((f27.s0._::y._::yi._::yii._::yii*2) + t6447), 1, 2) aligned(2, 0)] = (let t5845 = ((ramp(t6420, 1, 2) % x2(2)) == x2(0)) in (let t5847 = (((ramp(((f27.s0._::y._::yi._::yii._::yii*2) + t6421), 1, 2)/x2(2)) + x2(t6356))*x2(t6357)) in (let t5849 = f3[(t5847 + x2(((t6446/2) + t6422)))] in (let t5851 = f7[((ramp(((f27.s0._::y._::yi._::yii._::yii*2) + t6421), 1, 2)/x2(2)) + x2(((((t6446/2) + t6423)*t6358) + t6359)))] in (let t5853 = f2[((ramp(((f27.s0._::y._::yi._::yii._::yii*2) + t6421), 1, 2)/x2(2)) + x2(((((t6446/2) + t6424)*t6361) + t6362)))] in (let t5854 = f2[((ramp(((f27.s0._::y._::yi._::yii._::yii*2) + t6421), 1, 2)/x2(2)) + x2(((((t6446/2) + t6424)*t6361) + t6363)))] in (let t5855 = f2[((ramp(((f27.s0._::y._::yi._::yii._::yii*2) + t6421), 1, 2)/x2(2)) + x2(((((t6446/2) + t6424)*t6361) + t6364)))] in (let t5856 = f2[((ramp(((f27.s0._::y._::yi._::yii._::yii*2) + t6421), 1, 2)/x2(2)) + x2(((((t6446/2) + t6424)*t6361) + t6365)))] in (let t5859 = f4[((ramp(((f27.s0._::y._::yi._::yii._::yii*2) + t6421), 1, 2)/x2(2)) + x2(((((t6446/2) + t6425)*t6426) + t6367)))] in (let t5860 = f4[((ramp(((f27.s0._::y._::yi._::yii._::yii*2) + t6421), 1, 2)/x2(2)) + x2(((((t6446/2) + t6425)*t6426) + t6427)))] in (let t5861 = f3[(t5847 + x2(((t6446/2) + t6428)))] in (let t5864 = select((absd(t5859, t5860) < absd(t5861, t5849)), int16x2((((int32x2(t5859) + int32x2(t5860)) + x2(1))/x2(2))), int16x2((((int32x2(t5861) + int32x2(t5849)) + x2(1))/x2(2)))) in (let t5865 = f4[((ramp(((f27.s0._::y._::yi._::yii._::yii*2) + t6421), 1, 2)/x2(2)) + x2(((((t6446/2) + t6425)*t6426) + t6370)))] in (let t5866 = f4[((ramp(((f27.s0._::y._::yi._::yii._::yii*2) + t6421), 1, 2)/x2(2)) + x2(((((t6446/2) + t6425)*t6426) + t6429)))] in (let t5867 = f3[(t5847 + x2(((t6446/2) + t6430)))] in (let t5870 = f1[(((ramp(((f27.s0._::y._::yi._::yii._::yii*2) + t6421), 1, 2)/x2(2))*x2(2)) + x2(((((((t6446/2) + t6440)*2) - f1._::x.min_realized.s)*t6432) + t6433)))] in (let t5871 = f1[(((ramp(((f27.s0._::y._::yi._::yii._::yii*2) + t6421), 1, 2)/x2(2))*x2(2)) + x2(((((((t6446/2) + t6440)*2) - f1._::x.min_realized.s)*t6432) + t6434)))] in (let t5873 = f1[(((ramp(((f27.s0._::y._::yi._::yii._::yii*2) + t6421), 1, 2)/x2(2))*x2(2)) + x2(((((((t6446/2) + t6440)*2) - f1._::x.min_realized.s)*t6432) + t6442)))] in (let t5874 = f1[(((ramp(((f27.s0._::y._::yi._::yii._::yii*2) + t6421), 1, 2)/x2(2))*x2(2)) + x2(((((((t6446/2) + t6440)*2) - f1._::x.min_realized.s)*t6432) + t6443)))] in (let t5876 = f4[((ramp(((f27.s0._::y._::yi._::yii._::yii*2) + t6421), 1, 2)/x2(2)) + x2(((((t6446/2) + t6425)*t6426) + t6444)))] in (let t5877 = f3[(t5847 + x2(((t6446/2) + t6437)))] in (let t5878 = f3[(t5847 + x2(((t6446/2) + t6438)))] in (let t5879 = f4[((ramp(((f27.s0._::y._::yi._::yii._::yii*2) + t6421), 1, 2)/x2(2)) + x2(((((t6446/2) + t6425)*t6426) + t6445)))] in (let t5880 = f3[(t5847 + x2(((t6446/2) + t6439)))] in (let t5884.s = f7[((ramp(((f27.s0._::y._::yi._::yii._::yii*2) + t6421), 1, 2)/x2(2)) + x2(((((t6446/2) + t6423)*t6358) + t6378)))] in (let t5887.s = f7[((ramp(((f27.s0._::y._::yi._::yii._::yii*2) + t6421), 1, 2)/x2(2)) + x2(((((t6446/2) + t6423)*t6358) + t6379)))] in (let t5890.s = select((absd(t5865, t5866) < absd(t5849, t5867)), int16x2((((int32x2(t5865) + int32x2(t5866)) + x2(1))/x2(2))), int16x2((((int32x2(t5849) + int32x2(t5867)) + x2(1))/x2(2)))) in (let t5893.s = select((absd(t5860, t5876) < absd(t5877, t5878)), int16x2((((int32x2(t5860) + int32x2(t5876)) + x2(1))/x2(2))), int16x2((((int32x2(t5877) + int32x2(t5878)) + x2(1))/x2(2)))) in (let t5895.s = select(t5845, select(t4747, ((t5849 - int16x2((((int32x2(t5851) + int32x2(t5884.s)) + x2(1))/x2(2)))) + int16x2((((int32x2(t5854) + int32x2(t5853)) + x2(1))/x2(2)))), t5853), select(t4747, select((absd(t5853, t5855) < absd(t5854, t5856)), ((t5864 - int16x2((((int32x2(t5851) + int32x2(f7[((ramp(((f27.s0._::y._::yi._::yii._::yii*2) + t6421), 1, 2)/x2(2)) + x2(((((t6446/2) + t6423)*t6358) + t6380)))])) + x2(1))/x2(2)))) + int16x2((((int32x2(t5853) + int32x2(t5855)) + x2(1))/x2(2)))), ((t5864 - int16x2((((int32x2(t5884.s) + int32x2(t5887.s)) + x2(1))/x2(2)))) + int16x2((((int32x2(t5854) + int32x2(t5856)) + x2(1))/x2(2))))), ((t5860 - int16x2((((int32x2(t5851) + int32x2(t5887.s)) + x2(1))/x2(2)))) + int16x2((((int32x2(t5853) + int32x2(t5856)) + x2(1))/x2(2)))))) in (let t5896.s = select(t5845, select(t4747, t5849, t5851), select(t4747, t5864, t5860)) in (let t5897.s = select(t5845, select(t4747, ((t5849 - int16x2((((int32x2(t5864) + int32x2(t5890.s)) + x2(1))/x2(2)))) + int16x2((((int32x2(t5870) + int32x2(t5871)) + x2(1))/x2(2)))), select((absd(t5870, t5873) < absd(t5874, t5871)), ((t5851 - int16x2((((int32x2(t5864) + int32x2(select((absd(t5866, t5879) < absd(t5878, t5880)), int16x2((((int32x2(t5866) + int32x2(t5879)) + x2(1))/x2(2))), int16x2((((int32x2(t5878) + int32x2(t5880)) + x2(1))/x2(2)))))) + x2(1))/x2(2)))) + int16x2((((int32x2(t5870) + int32x2(t5873)) + x2(1))/x2(2)))), ((t5851 - int16x2((((int32x2(t5893.s) + int32x2(t5890.s)) + x2(1))/x2(2)))) + int16x2((((int32x2(t5874) + int32x2(t5871)) + x2(1))/x2(2)))))), select(t4747, t5870, ((t5860 - int16x2((((int32x2(t5864) + int32x2(t5893.s)) + x2(1))/x2(2)))) + int16x2((((int32x2(t5870) + int32x2(t5874)) + x2(1))/x2(2)))))) in select(t4744, int16x2((((int32x2(t5897.s)*x2(int32(f26[2]))) + ((int32x2(t5896.s)*x2(int32(f26[1]))) + ((int32x2(t5895.s)*x2(int32(f26[0]))) + x2(int32(f26[3])))))/x2(256))), select(t4745, int16x2((((int32x2(t5897.s)*x2(int32(f26[6]))) + ((int32x2(t5896.s)*x2(int32(f26[5]))) + ((int32x2(t5895.s)*x2(int32(f26[4]))) + x2(int32(f26[7])))))/x2(256))), int16x2((((int32x2(t5897.s)*x2(int32(f26[10]))) + ((int32x2(t5896.s)*x2(int32(f26[9]))) + ((int32x2(t5895.s)*x2(int32(f26[8]))) + x2(int32(f26[11])))))/x2(256))))))))))))))))))))))))))))))))))))
                                }
                              }
                            }
                          }
                        } else {
                          let f27.s0._::y._::yi.base.s = min(((f27.s0._::y._::y.__block_id_x*248) + 246), t6352)
                          let t4762 = (min((.__thread_id_x*16), 232) + (f27.s0._::y._::yi.base.s - t6353))
                          let t6450 = min((.__thread_id_x*16), 232)
                          let t6461 = ((t6373*2) - f1._::y.min_realized.s)
                          let t6462 = (t6366 - f4._::y.min_realized.s)
                          let t6459 = (985 - f1._::y.min_realized.s)
                          let t6460 = (983 - f1._::y.min_realized.s)
                          let t6457 = (432 - f1._::x.min_realized.s)
                          let t6455 = (247 - f4._::y.min_realized.s)
                          let t6456 = (246 - f4._::y.min_realized.s)
                          let t6449 = ((f27.s0._::x._::xi.base.s - f27._::x.min_realized.s) + 425)
                          let t6458 = (t6373 + 985)
                          let t6454 = (t6366 + 248)
                          let t6451 = (f27.s0._::y._::yi.base.s + 1)
                          let t6452 = (f27.s0._::y._::yi.base.s + -247)
                          let t6448 = (f27.s0._::x._::xi.base.s + 1)
                          let t6453 = (f27.s0._::x._::xi.base.s + -7)
                          for (f27.s0._::c, 0, 3) {
                            let t4768 = (f27.s0._::c == 1)
                            let t4767 = (f27.s0._::c == 0)
                            let t6463 = ((f27.s0._::c*f27.stride.2) + t4762)
                            let t6466 = (t6462 + 495)
                            let t6467 = (t6462 + 494)
                            let t6465 = (t6461 + 2955)
                            let t6464 = (t6461 + 2953)
                            for (f27.s0._::x._::xi._::xii, 0, 8) {
                              let t4770 = (((f27.s0._::x._::xi._::xii + t6448) % 2) == 0)
                              let t4774 = (((f27.s0._::x._::xi._::xii + t6449)*t6355) + t6463)
                              let t6468 = (f27.s0._::x._::xi._::xii + t6453)
                              for (f27.s0._::y._::yi._::yii._::yii, 0, 8) {
                                f27[ramp(((f27.s0._::y._::yi._::yii._::yii*2) + t4774), 1, 2) aligned(2, 0)] = (let t5899 = ((ramp((((f27.s0._::y._::yi._::yii._::yii*2) + t6450) + t6451), 1, 2) % x2(2)) == x2(0)) in (let t5901 = (((ramp((((f27.s0._::y._::yi._::yii._::yii*2) + t6450) + t6452), 1, 2)/x2(2)) + x2(t6356))*x2(t6357)) in (let t5904 = f3[(t5901 + x2((((t6468/2) - t6354) + 432)))] in (let t5906 = f7[((ramp((((f27.s0._::y._::yi._::yii._::yii*2) + t6450) + t6452), 1, 2)/x2(2)) + x2(((((t6468/2) + t4688)*t6358) + t6359)))] in (let t5908 = f2[((ramp((((f27.s0._::y._::yi._::yii._::yii*2) + t6450) + t6452), 1, 2)/x2(2)) + x2(((((t6468/2) + t6382)*t6361) + t6362)))] in (let t5909 = f2[((ramp((((f27.s0._::y._::yi._::yii._::yii*2) + t6450) + t6452), 1, 2)/x2(2)) + x2(((((t6468/2) + t6382)*t6361) + t6363)))] in (let t5910 = f2[((ramp((((f27.s0._::y._::yi._::yii._::yii*2) + t6450) + t6452), 1, 2)/x2(2)) + x2(((((t6468/2) + t6382)*t6361) + t6364)))] in (let t5911 = f2[((ramp((((f27.s0._::y._::yi._::yii._::yii*2) + t6450) + t6452), 1, 2)/x2(2)) + x2(((((t6468/2) + t6382)*t6361) + t6365)))] in (let t5914 = f4[((ramp((((f27.s0._::y._::yi._::yii._::yii*2) + t6450) + t6452), 1, 2)/x2(2)) + x2(((((t6468/2) + t4690)*t6454) + t6367)))] in (let t5915 = f4[((ramp((((f27.s0._::y._::yi._::yii._::yii*2) + t6450) + t6452), 1, 2)/x2(2)) + x2(((((t6468/2) + t4690)*t6454) + t6455)))] in (let t5916 = f3[(t5901 + x2((((t6468/2) - t6354) + t6383)))] in (let t5919 = select((absd(t5914, t5915) < absd(t5916, t5904)), int16x2((((int32x2(t5914) + int32x2(t5915)) + x2(1))/x2(2))), int16x2((((int32x2(t5916) + int32x2(t5904)) + x2(1))/x2(2)))) in (let t5920 = f4[((ramp((((f27.s0._::y._::yi._::yii._::yii*2) + t6450) + t6452), 1, 2)/x2(2)) + x2(((((t6468/2) + t4690)*t6454) + t6370)))] in (let t5921 = f4[((ramp((((f27.s0._::y._::yi._::yii._::yii*2) + t6450) + t6452), 1, 2)/x2(2)) + x2(((((t6468/2) + t4690)*t6454) + t6456)))] in (let t5922 = f3[(t5901 + x2((((t6468/2) - t6354) + t6384)))] in (let t5925 = f1[(((ramp((((f27.s0._::y._::yi._::yii._::yii*2) + t6450) + t6452), 1, 2)/x2(2))*x2(2)) + x2((((((t6468/2)*2) + t6457)*t6458) + t6459)))] in (let t5926 = f1[(((ramp((((f27.s0._::y._::yi._::yii._::yii*2) + t6450) + t6452), 1, 2)/x2(2))*x2(2)) + x2((((((t6468/2)*2) + t6457)*t6458) + t6460)))] in (let t5928 = f1[(((ramp((((f27.s0._::y._::yi._::yii._::yii*2) + t6450) + t6452), 1, 2)/x2(2))*x2(2)) + x2((((((t6468/2)*2) + t6457)*t6458) + t6464)))] in (let t5929 = f1[(((ramp((((f27.s0._::y._::yi._::yii._::yii*2) + t6450) + t6452), 1, 2)/x2(2))*x2(2)) + x2((((((t6468/2)*2) + t6457)*t6458) + t6465)))] in (let t5931 = f4[((ramp((((f27.s0._::y._::yi._::yii._::yii*2) + t6450) + t6452), 1, 2)/x2(2)) + x2(((((t6468/2) + t4690)*t6454) + t6466)))] in (let t5932 = f3[(t5901 + x2((((t6468/2) - t6354) + t6386)))] in (let t5933 = f3[(t5901 + x2((((t6468/2) - t6354) + 433)))] in (let t5934 = f4[((ramp((((f27.s0._::y._::yi._::yii._::yii*2) + t6450) + t6452), 1, 2)/x2(2)) + x2(((((t6468/2) + t4690)*t6454) + t6467)))] in (let t5935 = f3[(t5901 + x2((((t6468/2) - t6354) + t6387)))] in (let t5939.s = f7[((ramp((((f27.s0._::y._::yi._::yii._::yii*2) + t6450) + t6452), 1, 2)/x2(2)) + x2(((((t6468/2) + t4688)*t6358) + t6378)))] in (let t5942.s = f7[((ramp((((f27.s0._::y._::yi._::yii._::yii*2) + t6450) + t6452), 1, 2)/x2(2)) + x2(((((t6468/2) + t4688)*t6358) + t6379)))] in (let t5945.s = select((absd(t5920, t5921) < absd(t5904, t5922)), int16x2((((int32x2(t5920) + int32x2(t5921)) + x2(1))/x2(2))), int16x2((((int32x2(t5904) + int32x2(t5922)) + x2(1))/x2(2)))) in (let t5948.s = select((absd(t5915, t5931) < absd(t5932, t5933)), int16x2((((int32x2(t5915) + int32x2(t5931)) + x2(1))/x2(2))), int16x2((((int32x2(t5932) + int32x2(t5933)) + x2(1))/x2(2)))) in (let t5950.s = select(t5899, select(t4770, ((t5904 - int16x2((((int32x2(t5906) + int32x2(t5939.s)) + x2(1))/x2(2)))) + int16x2((((int32x2(t5909) + int32x2(t5908)) + x2(1))/x2(2)))), t5908), select(t4770, select((absd(t5908, t5910) < absd(t5909, t5911)), ((t5919 - int16x2((((int32x2(t5906) + int32x2(f7[((ramp((((f27.s0._::y._::yi._::yii._::yii*2) + t6450) + t6452), 1, 2)/x2(2)) + x2(((((t6468/2) + t4688)*t6358) + t6380)))])) + x2(1))/x2(2)))) + int16x2((((int32x2(t5908) + int32x2(t5910)) + x2(1))/x2(2)))), ((t5919 - int16x2((((int32x2(t5939.s) + int32x2(t5942.s)) + x2(1))/x2(2)))) + int16x2((((int32x2(t5909) + int32x2(t5911)) + x2(1))/x2(2))))), ((t5915 - int16x2((((int32x2(t5906) + int32x2(t5942.s)) + x2(1))/x2(2)))) + int16x2((((int32x2(t5908) + int32x2(t5911)) + x2(1))/x2(2)))))) in (let t5951.s = select(t5899, select(t4770, t5904, t5906), select(t4770, t5919, t5915)) in (let t5952.s = select(t5899, select(t4770, ((t5904 - int16x2((((int32x2(t5919) + int32x2(t5945.s)) + x2(1))/x2(2)))) + int16x2((((int32x2(t5925) + int32x2(t5926)) + x2(1))/x2(2)))), select((absd(t5925, t5928) < absd(t5929, t5926)), ((t5906 - int16x2((((int32x2(t5919) + int32x2(select((absd(t5921, t5934) < absd(t5933, t5935)), int16x2((((int32x2(t5921) + int32x2(t5934)) + x2(1))/x2(2))), int16x2((((int32x2(t5933) + int32x2(t5935)) + x2(1))/x2(2)))))) + x2(1))/x2(2)))) + int16x2((((int32x2(t5925) + int32x2(t5928)) + x2(1))/x2(2)))), ((t5906 - int16x2((((int32x2(t5948.s) + int32x2(t5945.s)) + x2(1))/x2(2)))) + int16x2((((int32x2(t5929) + int32x2(t5926)) + x2(1))/x2(2)))))), select(t4770, t5925, ((t5915 - int16x2((((int32x2(t5919) + int32x2(t5948.s)) + x2(1))/x2(2)))) + int16x2((((int32x2(t5925) + int32x2(t5929)) + x2(1))/x2(2)))))) in select(t4767, int16x2((((int32x2(t5952.s)*x2(int32(f26[2]))) + ((int32x2(t5951.s)*x2(int32(f26[1]))) + ((int32x2(t5950.s)*x2(int32(f26[0]))) + x2(int32(f26[3])))))/x2(256))), select(t4768, int16x2((((int32x2(t5952.s)*x2(int32(f26[6]))) + ((int32x2(t5951.s)*x2(int32(f26[5]))) + ((int32x2(t5950.s)*x2(int32(f26[4]))) + x2(int32(f26[7])))))/x2(256))), int16x2((((int32x2(t5952.s)*x2(int32(f26[10]))) + ((int32x2(t5951.s)*x2(int32(f26[9]))) + ((int32x2(t5950.s)*x2(int32(f26[8]))) + x2(int32(f26[11])))))/x2(256))))))))))))))))))))))))))))))))))))
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                _halide_buffer_set_device_dirty(f27.buffer, (uint1)1)
                let halide_device_and_host_free_result = halide_device_and_host_free(f26.buffer)
                assert((halide_device_and_host_free_result == 0), halide_device_and_host_free_result)
                free f26
                let halide_device_free_result$9 = halide_device_free(f1.buffer)
                assert((halide_device_free_result$9 == 0), halide_device_free_result$9)
                free f1
                let halide_device_free_result$8 = halide_device_free(f2.buffer)
                assert((halide_device_free_result$8 == 0), halide_device_free_result$8)
                free f2
                let halide_device_free_result$7 = halide_device_free(f4.buffer)
                assert((halide_device_free_result$7 == 0), halide_device_free_result$7)
                free f4
                let halide_device_free_result$6 = halide_device_free(f3.buffer)
                assert((halide_device_free_result$6 == 0), halide_device_free_result$6)
                free f3
                let halide_device_free_result$5 = halide_device_free(f7.buffer)
                assert((halide_device_free_result$5 == 0), halide_device_free_result$5)
                free f7
              }
            }
          }
        }
      }
    }
  }
  let f28._::y.min_realized.s = min((min((processed.extent.1/2), 124)*2), (((processed.extent.1/2)*2) + 125))
  let f28._::y.extent_realized.s.s = max(max(min(((processed.extent.1/2)*2), ((((processed.extent.1 + -2)/248)*248) + 248)), (min(((processed.extent.1/2)*2), ((((processed.extent.1 + -2)/124)*124) + 124)) + -1)), ((processed.extent.1/2)*2))
  let f28._::x.min_realized.s = min(((processed.extent.0/2)*2), (min(((processed.extent.0/2)*2), (min((min((processed.extent.0/2), 3)*2), (((processed.extent.0/2)*2) + 3)) + 57)) + 171))
  let f28._::x.extent_realized.s.s = max(max(min(((processed.extent.0/2)*2), (((processed.extent.0/8)*8) + 6)), (min(((processed.extent.0/2)*2), (max((((processed.extent.0 + -2)/4)*4), ((((processed.extent.0 + -2)/64)*64) + 60)) + 4)) + -1)), min(((processed.extent.0/2)*2), (((processed.extent.0/236)*236) + 234)))
  let f28.stride.2 = (((f28._::x.extent_realized.s.s - f28._::x.min_realized.s) + 236)*((f28._::y.extent_realized.s.s - f28._::y.min_realized.s) + 250))
  allocate f28[uint8 * ((f28._::x.extent_realized.s.s - f28._::x.min_realized.s) + 236) * ((f28._::y.extent_realized.s.s - f28._::y.min_realized.s) + 250) * 3] if (uint1)0
  let f28.buffer = _halide_buffer_init(alloca(size_of_halide_buffer_t()), make_struct((halide_dimension_t *), (f28._::x.min_realized.s + -235), ((f28._::x.extent_realized.s.s - f28._::x.min_realized.s) + 236), 1, 0, (f28._::y.min_realized.s + -249), ((f28._::y.extent_realized.s.s - f28._::y.min_realized.s) + 250), ((f28._::x.extent_realized.s.s - f28._::x.min_realized.s) + 236), 0, 0, 3, f28.stride.2, 0), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 1, 8, 3, make_struct((halide_dimension_t *), (f28._::x.min_realized.s + -235), ((f28._::x.extent_realized.s.s - f28._::x.min_realized.s) + 236), 1, 0, (f28._::y.min_realized.s + -249), ((f28._::y.extent_realized.s.s - f28._::y.min_realized.s) + 250), ((f28._::x.extent_realized.s.s - f28._::x.min_realized.s) + 236), 0, 0, 3, f28.stride.2, 0), (uint64)0)
  register_destructor("halide_device_free_as_destructor", f28.buffer)
  produce f28 {
    consume f27 {
      consume curve {
        let halide_device_malloc_result$5 = halide_device_malloc(f28.buffer, halide_cuda_device_interface())
        assert((halide_device_malloc_result$5 == 0), halide_device_malloc_result$5)
        let halide_device_malloc_result$10 = halide_device_malloc(f27.buffer, halide_cuda_device_interface())
        assert((halide_device_malloc_result$10 == 0), halide_device_malloc_result$10)
        let halide_device_malloc_result$29 = halide_device_malloc(curve.buffer, halide_cuda_device_interface())
        assert((halide_device_malloc_result$29 == 0), halide_device_malloc_result$29)
        let t4780 = (246 - (min((processed.extent.1/2), 123)*2))
        let t6500 = ((processed.extent.0/2)*2)
        let t6501 = (t6500 - f27._::x.min_realized.s)
        let t6502 = (t6500 - f28._::x.min_realized.s)
        let t6503 = (processed.extent.1/2)
        let t6473 = max(t6503, 123)
        let t6472 = ((processed.extent.0 + 2)/236)
        let t6490 = (663 - f27._::x.min_realized.s)
        let t6488 = (659 - f27._::x.min_realized.s)
        let t6486 = (655 - f27._::x.min_realized.s)
        let t6484 = (651 - f27._::x.min_realized.s)
        let t6491 = (466 - f28._::x.min_realized.s)
        let t6489 = (462 - f28._::x.min_realized.s)
        let t6487 = (458 - f28._::x.min_realized.s)
        let t6485 = (454 - f28._::x.min_realized.s)
        let t6482 = (443 - f27._::x.min_realized.s)
        let t6480 = (439 - f27._::x.min_realized.s)
        let t6478 = (435 - f27._::x.min_realized.s)
        let t6474 = (431 - f27._::x.min_realized.s)
        let t6476 = (248 - f28._::y.min_realized.s)
        let t6483 = (246 - f28._::x.min_realized.s)
        let t6481 = (242 - f28._::x.min_realized.s)
        let t6479 = (238 - f28._::x.min_realized.s)
        let t6475 = (234 - f28._::x.min_realized.s)
        let t6470 = ((processed.extent.0/236) + 1)
        let t6498 = (t6501 + 209)
        let t6496 = (t6501 + 205)
        let t6494 = (t6501 + 201)
        let t6492 = (t6501 + 197)
        let t6477 = ((f28._::x.extent_realized.s.s - f28._::x.min_realized.s) + 236)
        gpu_block<CUDA> (f28.s0._::c.__block_id_z, 0, 3) {
          gpu_block<CUDA> (f28.s0._::y._::y.__block_id_y, 0, (t6503 + 1)) {
            gpu_block<CUDA> (f28.s0._::x._::x.__block_id_x, 0, t6470) {
              gpu_thread<CUDA> (.__thread_id_y, 0, 2) {
                gpu_thread<CUDA> (.__thread_id_x, 0, 15) {
                  let f28.s0._::y._::yi.base.s = min(f28.s0._::y._::y.__block_id_y, t6503)
                  if ((f28.s0._::x._::x.__block_id_x < t6472)) {
                    if ((.__thread_id_x < 14)) {
                      f28[ramp(((.__thread_id_x*16) + (((((f28.s0._::y._::yi.base.s*2) + t6476) + .__thread_id_y)*t6477) + ((f28.s0._::x._::x.__block_id_x*236) + ((f28.s0._::c.__block_id_z*f28.stride.2) + t6475)))), 1, 4)] = curve[int32x4(max(min(f27[ramp(((((.__thread_id_x*16) + ((f28.s0._::x._::x.__block_id_x*236) + t6474))*((t6473*2) + 2)) + (((f28.s0._::y._::yi.base.s*2) + ((f27.stride.2*f28.s0._::c.__block_id_z) + t4780)) + .__thread_id_y)), ((t6473*2) + 2), 4)], x4((int16)1023)), x4((int16)0)))]
                      f28[ramp(((.__thread_id_x*16) + (((((f28.s0._::y._::yi.base.s*2) + t6476) + .__thread_id_y)*t6477) + ((f28.s0._::x._::x.__block_id_x*236) + ((f28.s0._::c.__block_id_z*f28.stride.2) + t6479)))), 1, 4)] = curve[int32x4(max(min(f27[ramp(((((.__thread_id_x*16) + ((f28.s0._::x._::x.__block_id_x*236) + t6478))*((t6473*2) + 2)) + (((f28.s0._::y._::yi.base.s*2) + ((f27.stride.2*f28.s0._::c.__block_id_z) + t4780)) + .__thread_id_y)), ((t6473*2) + 2), 4)], x4((int16)1023)), x4((int16)0)))]
                      f28[ramp(((.__thread_id_x*16) + (((((f28.s0._::y._::yi.base.s*2) + t6476) + .__thread_id_y)*t6477) + ((f28.s0._::x._::x.__block_id_x*236) + ((f28.s0._::c.__block_id_z*f28.stride.2) + t6481)))), 1, 4)] = curve[int32x4(max(min(f27[ramp(((((.__thread_id_x*16) + ((f28.s0._::x._::x.__block_id_x*236) + t6480))*((t6473*2) + 2)) + (((f28.s0._::y._::yi.base.s*2) + ((f27.stride.2*f28.s0._::c.__block_id_z) + t4780)) + .__thread_id_y)), ((t6473*2) + 2), 4)], x4((int16)1023)), x4((int16)0)))]
                      f28[ramp(((.__thread_id_x*16) + (((((f28.s0._::y._::yi.base.s*2) + t6476) + .__thread_id_y)*t6477) + ((f28.s0._::x._::x.__block_id_x*236) + ((f28.s0._::c.__block_id_z*f28.stride.2) + t6483)))), 1, 4)] = curve[int32x4(max(min(f27[ramp(((((.__thread_id_x*16) + ((f28.s0._::x._::x.__block_id_x*236) + t6482))*((t6473*2) + 2)) + (((f28.s0._::y._::yi.base.s*2) + ((f27.stride.2*f28.s0._::c.__block_id_z) + t4780)) + .__thread_id_y)), ((t6473*2) + 2), 4)], x4((int16)1023)), x4((int16)0)))]
                    } else {
                      f28[ramp((((((f28.s0._::y._::yi.base.s*2) + t6476) + .__thread_id_y)*t6477) + ((f28.s0._::x._::x.__block_id_x*236) + ((f28.s0._::c.__block_id_z*f28.stride.2) + t6485))), 1, 4)] = curve[int32x4(max(min(f27[ramp((((((f28.s0._::x._::x.__block_id_x*236) + t6484)*((t6473*2) + 2)) + ((f28.s0._::y._::yi.base.s*2) + ((f27.stride.2*f28.s0._::c.__block_id_z) + t4780))) + .__thread_id_y), ((t6473*2) + 2), 4)], x4((int16)1023)), x4((int16)0)))]
                      f28[ramp((((((f28.s0._::y._::yi.base.s*2) + t6476) + .__thread_id_y)*t6477) + ((f28.s0._::x._::x.__block_id_x*236) + ((f28.s0._::c.__block_id_z*f28.stride.2) + t6487))), 1, 4)] = curve[int32x4(max(min(f27[ramp((((((f28.s0._::x._::x.__block_id_x*236) + t6486)*((t6473*2) + 2)) + ((f28.s0._::y._::yi.base.s*2) + ((f27.stride.2*f28.s0._::c.__block_id_z) + t4780))) + .__thread_id_y), ((t6473*2) + 2), 4)], x4((int16)1023)), x4((int16)0)))]
                      f28[ramp((((((f28.s0._::y._::yi.base.s*2) + t6476) + .__thread_id_y)*t6477) + ((f28.s0._::x._::x.__block_id_x*236) + ((f28.s0._::c.__block_id_z*f28.stride.2) + t6489))), 1, 4)] = curve[int32x4(max(min(f27[ramp((((((f28.s0._::x._::x.__block_id_x*236) + t6488)*((t6473*2) + 2)) + ((f28.s0._::y._::yi.base.s*2) + ((f27.stride.2*f28.s0._::c.__block_id_z) + t4780))) + .__thread_id_y), ((t6473*2) + 2), 4)], x4((int16)1023)), x4((int16)0)))]
                      f28[ramp((((((f28.s0._::y._::yi.base.s*2) + t6476) + .__thread_id_y)*t6477) + ((f28.s0._::x._::x.__block_id_x*236) + ((f28.s0._::c.__block_id_z*f28.stride.2) + t6491))), 1, 4)] = curve[int32x4(max(min(f27[ramp((((((f28.s0._::x._::x.__block_id_x*236) + t6490)*((t6473*2) + 2)) + ((f28.s0._::y._::yi.base.s*2) + ((f27.stride.2*f28.s0._::c.__block_id_z) + t4780))) + .__thread_id_y), ((t6473*2) + 2), 4)], x4((int16)1023)), x4((int16)0)))]
                    }
                  } else {
                    f28[ramp((min((.__thread_id_x*16), 220) + (((((f28.s0._::y._::yi.base.s*2) + t6476) + .__thread_id_y)*t6477) + ((f28.s0._::c.__block_id_z*f28.stride.2) + t6502))), 1, 4)] = curve[int32x4(max(min(f27[ramp((((min((.__thread_id_x*16), 220) + t6492)*((t6473*2) + 2)) + (((f28.s0._::y._::yi.base.s*2) + ((f27.stride.2*f28.s0._::c.__block_id_z) + t4780)) + .__thread_id_y)), ((t6473*2) + 2), 4)], x4((int16)1023)), x4((int16)0)))]
                    f28[ramp(((min((.__thread_id_x*16), 220) + (((((f28.s0._::y._::yi.base.s*2) + t6476) + .__thread_id_y)*t6477) + ((f28.s0._::c.__block_id_z*f28.stride.2) + t6502))) + 4), 1, 4)] = curve[int32x4(max(min(f27[ramp((((min((.__thread_id_x*16), 220) + t6494)*((t6473*2) + 2)) + (((f28.s0._::y._::yi.base.s*2) + ((f27.stride.2*f28.s0._::c.__block_id_z) + t4780)) + .__thread_id_y)), ((t6473*2) + 2), 4)], x4((int16)1023)), x4((int16)0)))]
                    f28[ramp(((min((.__thread_id_x*16), 220) + (((((f28.s0._::y._::yi.base.s*2) + t6476) + .__thread_id_y)*t6477) + ((f28.s0._::c.__block_id_z*f28.stride.2) + t6502))) + 8), 1, 4)] = curve[int32x4(max(min(f27[ramp((((min((.__thread_id_x*16), 220) + t6496)*((t6473*2) + 2)) + (((f28.s0._::y._::yi.base.s*2) + ((f27.stride.2*f28.s0._::c.__block_id_z) + t4780)) + .__thread_id_y)), ((t6473*2) + 2), 4)], x4((int16)1023)), x4((int16)0)))]
                    f28[ramp(((min((.__thread_id_x*16), 220) + (((((f28.s0._::y._::yi.base.s*2) + t6476) + .__thread_id_y)*t6477) + ((f28.s0._::c.__block_id_z*f28.stride.2) + t6502))) + 12), 1, 4)] = curve[int32x4(max(min(f27[ramp((((min((.__thread_id_x*16), 220) + t6498)*((t6473*2) + 2)) + (((f28.s0._::y._::yi.base.s*2) + ((f27.stride.2*f28.s0._::c.__block_id_z) + t4780)) + .__thread_id_y)), ((t6473*2) + 2), 4)], x4((int16)1023)), x4((int16)0)))]
                  }
                }
              }
            }
          }
        }
        _halide_buffer_set_device_dirty(f28.buffer, (uint1)1)
        let halide_device_free_result$11 = halide_device_free(curve.buffer)
        assert((halide_device_free_result$11 == 0), halide_device_free_result$11)
        free curve
        let halide_device_free_result$4 = halide_device_free(f27.buffer)
        assert((halide_device_free_result$4 == 0), halide_device_free_result$4)
        free f27
      }
    }
  }
  let unsharp_y._::y.extent_realized.s = (min(((processed.extent.1/2)*2), ((((processed.extent.1 + -2)/248)*248) + 248)) - (min((processed.extent.1/2), 124)*2))
  let unsharp_y._::x.min_realized.s = min((processed.extent.0/2), (min((processed.extent.0/2), 2) + 1))
  let unsharp_y._::x.extent_realized.s = (min(((processed.extent.0/2)*2), (max((((processed.extent.0 + -2)/4)*4), (((processed.extent.0/8)*8) + 2)) + 4)) - (unsharp_y._::x.min_realized.s*2))
  let unsharp_y.stride.2 = ((unsharp_y._::y.extent_realized.s + 248)*(unsharp_y._::x.extent_realized.s + 8))
  allocate unsharp_y[uint8 * (unsharp_y._::x.extent_realized.s + 8) * (unsharp_y._::y.extent_realized.s + 248) * 3] if (uint1)0
  let unsharp_y.buffer = _halide_buffer_init(alloca(size_of_halide_buffer_t()), make_struct((halide_dimension_t *), ((unsharp_y._::x.min_realized.s*2) + -7), (unsharp_y._::x.extent_realized.s + 8), (unsharp_y._::y.extent_realized.s + 248), 0, ((min((processed.extent.1/2), 124)*2) + -248), (unsharp_y._::y.extent_realized.s + 248), 1, 0, 0, 3, unsharp_y.stride.2, 0), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 1, 8, 3, make_struct((halide_dimension_t *), ((unsharp_y._::x.min_realized.s*2) + -7), (unsharp_y._::x.extent_realized.s + 8), (unsharp_y._::y.extent_realized.s + 248), 0, ((min((processed.extent.1/2), 124)*2) + -248), (unsharp_y._::y.extent_realized.s + 248), 1, 0, 0, 3, unsharp_y.stride.2, 0), (uint64)0)
  register_destructor("halide_device_free_as_destructor", unsharp_y.buffer)
  produce unsharp_y {
    consume f28 {
      let halide_device_malloc_result$3 = halide_device_malloc(unsharp_y.buffer, halide_cuda_device_interface())
      assert((halide_device_malloc_result$3 == 0), halide_device_malloc_result$3)
      let halide_device_malloc_result$6 = halide_device_malloc(f28.buffer, halide_cuda_device_interface())
      assert((halide_device_malloc_result$6 == 0), halide_device_malloc_result$6)
      let t4838 = (252 - (min((processed.extent.1/2), 124)*2))
      let t4837 = (248 - (min((processed.extent.1/2), 124)*2))
      let t6530 = (processed.extent.1/2)
      let t6531 = (unsharp_y._::x.min_realized.s*2)
      let t6527 = max(t6530, 124)
      let t6514 = min(t6530, 124)
      let t6505 = ((processed.extent.1 + 246)/248)
      let t6507 = (processed.extent.1/248)
      let t6506 = ((processed.extent.0/2)*2)
      let t6521 = ((1 - unsharp_y._::x.min_realized.s)*2)
      let t6508 = (f28._::x.extent_realized.s.s - f28._::x.min_realized.s)
      let t6515 = (253 - f28._::y.min_realized.s)
      let t6509 = (249 - f28._::y.min_realized.s)
      let t6528 = (5 - f28._::y.min_realized.s)
      let t6525 = (1 - f28._::y.min_realized.s)
      let t6522 = (-5 - f28._::x.extent_realized.s.s)
      let t6519 = (-6 - f28._::x.extent_realized.s.s)
      let t6516 = (-7 - f28._::x.extent_realized.s.s)
      let t6510 = (-8 - f28._::x.extent_realized.s.s)
      let t6504 = ((processed.extent.0/8) + 1)
      let t6529 = ((t6530*2) + -248)
      let t6513 = (unsharp_y._::y.extent_realized.s + 248)
      gpu_block<CUDA> (unsharp_y.s0._::c._::c.__block_id_z, 0, 2) {
        gpu_block<CUDA> (unsharp_y.s0._::x._::x.__block_id_y, 0, t6504) {
          gpu_block<CUDA> (unsharp_y.s0._::y._::y.__block_id_x, 0, t6505) {
            gpu_thread<CUDA> (.__thread_id_z, 0, 2) {
              gpu_thread<CUDA> (.__thread_id_y, 0, 2) {
                gpu_thread<CUDA> (.__thread_id_x, 0, 31) {
                  if ((unsharp_y.s0._::c._::c.__block_id_z < 1)) {
                    let unsharp_y.s0._::x._::xi.base.s = min(((unsharp_y.s0._::x._::x.__block_id_y*8) + 6), t6506)
                    if ((unsharp_y.s0._::y._::y.__block_id_x < t6507)) {
                      unsharp_y[ramp((((((((unsharp_y.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6514)*2) + ((((.__thread_id_y*4) + (unsharp_y.s0._::x._::xi.base.s - t6531))*t6513) + (.__thread_id_z*unsharp_y.stride.2))) + 248), 1, 4) aligned(2, 0)] = (let t5969 = (((((unsharp_y.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*8) + t6509)*(t6508 + 236)) in uint8x4((((uint16x4(uint8x4((((uint16x4(f28[ramp((((.__thread_id_y*4) + ((.__thread_id_z*f28.stride.2) + (t6510 + unsharp_y.s0._::x._::xi.base.s))) + t5969), (t6508 + 236), 4)]) + uint16x4(f28[ramp(((((.__thread_id_y*4) + ((.__thread_id_z*f28.stride.2) + ((t6508 - f28._::x.min_realized.s) + unsharp_y.s0._::x._::xi.base.s))) + t5969) + 464), (t6508 + 236), 4)])) + x4((uint16)1))/x4((uint16)2)))) + uint16x4(f28[ramp(((((.__thread_id_y*4) + ((.__thread_id_z*f28.stride.2) + (unsharp_y.s0._::x._::xi.base.s - f28._::x.min_realized.s))) + t5969) + 228), (t6508 + 236), 4)])) + x4((uint16)1))/x4((uint16)2))))
                      unsharp_y[ramp((((((((unsharp_y.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6514)*2) + ((((.__thread_id_y*4) + (unsharp_y.s0._::x._::xi.base.s - t6531))*t6513) + (.__thread_id_z*unsharp_y.stride.2))) + 252), 1, 4) aligned(2, 0)] = (let t5972 = (((((unsharp_y.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*8) + t6515)*(t6508 + 236)) in uint8x4((((uint16x4(uint8x4((((uint16x4(f28[ramp((((.__thread_id_y*4) + ((.__thread_id_z*f28.stride.2) + (t6510 + unsharp_y.s0._::x._::xi.base.s))) + t5972), (t6508 + 236), 4)]) + uint16x4(f28[ramp(((((.__thread_id_y*4) + ((.__thread_id_z*f28.stride.2) + ((t6508 - f28._::x.min_realized.s) + unsharp_y.s0._::x._::xi.base.s))) + t5972) + 464), (t6508 + 236), 4)])) + x4((uint16)1))/x4((uint16)2)))) + uint16x4(f28[ramp(((((.__thread_id_y*4) + ((.__thread_id_z*f28.stride.2) + (unsharp_y.s0._::x._::xi.base.s - f28._::x.min_realized.s))) + t5972) + 228), (t6508 + 236), 4)])) + x4((uint16)1))/x4((uint16)2))))
                      unsharp_y[ramp((((((((unsharp_y.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6514)*2) + (((((.__thread_id_y*4) + (unsharp_y.s0._::x._::xi.base.s - t6531)) + 1)*t6513) + (.__thread_id_z*unsharp_y.stride.2))) + 248), 1, 4) aligned(2, 0)] = (let t5975 = (((((unsharp_y.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*8) + t6509)*(t6508 + 236)) in uint8x4((((uint16x4(uint8x4((((uint16x4(f28[ramp((((.__thread_id_y*4) + ((.__thread_id_z*f28.stride.2) + (t6516 + unsharp_y.s0._::x._::xi.base.s))) + t5975), (t6508 + 236), 4)]) + uint16x4(f28[ramp(((((.__thread_id_y*4) + ((.__thread_id_z*f28.stride.2) + ((t6508 - f28._::x.min_realized.s) + unsharp_y.s0._::x._::xi.base.s))) + t5975) + 465), (t6508 + 236), 4)])) + x4((uint16)1))/x4((uint16)2)))) + uint16x4(f28[ramp(((((.__thread_id_y*4) + ((.__thread_id_z*f28.stride.2) + (unsharp_y.s0._::x._::xi.base.s - f28._::x.min_realized.s))) + t5975) + 229), (t6508 + 236), 4)])) + x4((uint16)1))/x4((uint16)2))))
                      unsharp_y[ramp((((((((unsharp_y.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6514)*2) + (((((.__thread_id_y*4) + (unsharp_y.s0._::x._::xi.base.s - t6531)) + 1)*t6513) + (.__thread_id_z*unsharp_y.stride.2))) + 252), 1, 4) aligned(2, 0)] = (let t5978 = (((((unsharp_y.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*8) + t6515)*(t6508 + 236)) in uint8x4((((uint16x4(uint8x4((((uint16x4(f28[ramp((((.__thread_id_y*4) + ((.__thread_id_z*f28.stride.2) + (t6516 + unsharp_y.s0._::x._::xi.base.s))) + t5978), (t6508 + 236), 4)]) + uint16x4(f28[ramp(((((.__thread_id_y*4) + ((.__thread_id_z*f28.stride.2) + ((t6508 - f28._::x.min_realized.s) + unsharp_y.s0._::x._::xi.base.s))) + t5978) + 465), (t6508 + 236), 4)])) + x4((uint16)1))/x4((uint16)2)))) + uint16x4(f28[ramp(((((.__thread_id_y*4) + ((.__thread_id_z*f28.stride.2) + (unsharp_y.s0._::x._::xi.base.s - f28._::x.min_realized.s))) + t5978) + 229), (t6508 + 236), 4)])) + x4((uint16)1))/x4((uint16)2))))
                      unsharp_y[ramp((((((((unsharp_y.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6514)*2) + ((((.__thread_id_y*4) + (t6521 + unsharp_y.s0._::x._::xi.base.s))*t6513) + (.__thread_id_z*unsharp_y.stride.2))) + 248), 1, 4) aligned(2, 0)] = (let t5981 = (((((unsharp_y.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*8) + t6509)*(t6508 + 236)) in uint8x4((((uint16x4(uint8x4((((uint16x4(f28[ramp((((.__thread_id_y*4) + ((.__thread_id_z*f28.stride.2) + (t6519 + unsharp_y.s0._::x._::xi.base.s))) + t5981), (t6508 + 236), 4)]) + uint16x4(f28[ramp(((((.__thread_id_y*4) + ((.__thread_id_z*f28.stride.2) + ((t6508 - f28._::x.min_realized.s) + unsharp_y.s0._::x._::xi.base.s))) + t5981) + 466), (t6508 + 236), 4)])) + x4((uint16)1))/x4((uint16)2)))) + uint16x4(f28[ramp(((((.__thread_id_y*4) + ((.__thread_id_z*f28.stride.2) + (unsharp_y.s0._::x._::xi.base.s - f28._::x.min_realized.s))) + t5981) + 230), (t6508 + 236), 4)])) + x4((uint16)1))/x4((uint16)2))))
                      unsharp_y[ramp((((((((unsharp_y.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6514)*2) + ((((.__thread_id_y*4) + (t6521 + unsharp_y.s0._::x._::xi.base.s))*t6513) + (.__thread_id_z*unsharp_y.stride.2))) + 252), 1, 4) aligned(2, 0)] = (let t5984 = (((((unsharp_y.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*8) + t6515)*(t6508 + 236)) in uint8x4((((uint16x4(uint8x4((((uint16x4(f28[ramp((((.__thread_id_y*4) + ((.__thread_id_z*f28.stride.2) + (t6519 + unsharp_y.s0._::x._::xi.base.s))) + t5984), (t6508 + 236), 4)]) + uint16x4(f28[ramp(((((.__thread_id_y*4) + ((.__thread_id_z*f28.stride.2) + ((t6508 - f28._::x.min_realized.s) + unsharp_y.s0._::x._::xi.base.s))) + t5984) + 466), (t6508 + 236), 4)])) + x4((uint16)1))/x4((uint16)2)))) + uint16x4(f28[ramp(((((.__thread_id_y*4) + ((.__thread_id_z*f28.stride.2) + (unsharp_y.s0._::x._::xi.base.s - f28._::x.min_realized.s))) + t5984) + 230), (t6508 + 236), 4)])) + x4((uint16)1))/x4((uint16)2))))
                      unsharp_y[ramp((((((((unsharp_y.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6514)*2) + (((((.__thread_id_y*4) + (unsharp_y.s0._::x._::xi.base.s - t6531)) + 3)*t6513) + (.__thread_id_z*unsharp_y.stride.2))) + 248), 1, 4) aligned(2, 0)] = (let t5987 = (((((unsharp_y.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*8) + t6509)*(t6508 + 236)) in uint8x4((((uint16x4(uint8x4((((uint16x4(f28[ramp((((.__thread_id_y*4) + ((.__thread_id_z*f28.stride.2) + (t6522 + unsharp_y.s0._::x._::xi.base.s))) + t5987), (t6508 + 236), 4)]) + uint16x4(f28[ramp(((((.__thread_id_y*4) + ((.__thread_id_z*f28.stride.2) + ((t6508 - f28._::x.min_realized.s) + unsharp_y.s0._::x._::xi.base.s))) + t5987) + 467), (t6508 + 236), 4)])) + x4((uint16)1))/x4((uint16)2)))) + uint16x4(f28[ramp(((((.__thread_id_y*4) + ((.__thread_id_z*f28.stride.2) + (unsharp_y.s0._::x._::xi.base.s - f28._::x.min_realized.s))) + t5987) + 231), (t6508 + 236), 4)])) + x4((uint16)1))/x4((uint16)2))))
                      unsharp_y[ramp((((((((unsharp_y.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6514)*2) + (((((.__thread_id_y*4) + (unsharp_y.s0._::x._::xi.base.s - t6531)) + 3)*t6513) + (.__thread_id_z*unsharp_y.stride.2))) + 252), 1, 4) aligned(2, 0)] = (let t5990 = (((((unsharp_y.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*8) + t6515)*(t6508 + 236)) in uint8x4((((uint16x4(uint8x4((((uint16x4(f28[ramp((((.__thread_id_y*4) + ((.__thread_id_z*f28.stride.2) + (t6522 + unsharp_y.s0._::x._::xi.base.s))) + t5990), (t6508 + 236), 4)]) + uint16x4(f28[ramp(((((.__thread_id_y*4) + ((.__thread_id_z*f28.stride.2) + ((t6508 - f28._::x.min_realized.s) + unsharp_y.s0._::x._::xi.base.s))) + t5990) + 467), (t6508 + 236), 4)])) + x4((uint16)1))/x4((uint16)2)))) + uint16x4(f28[ramp(((((.__thread_id_y*4) + ((.__thread_id_z*f28.stride.2) + (unsharp_y.s0._::x._::xi.base.s - f28._::x.min_realized.s))) + t5990) + 231), (t6508 + 236), 4)])) + x4((uint16)1))/x4((uint16)2))))
                    } else {
                      unsharp_y[ramp((((((.__thread_id_x*4) + t6527)*2) + ((((.__thread_id_y*4) + (unsharp_y.s0._::x._::xi.base.s - t6531))*t6513) + (.__thread_id_z*unsharp_y.stride.2))) + -248), 1, 4) aligned(2, 0)] = (let t5993 = (((((.__thread_id_x*4) + t6530)*2) + t6525)*(t6508 + 236)) in uint8x4((((uint16x4(uint8x4((((uint16x4(f28[ramp((((.__thread_id_y*4) + ((.__thread_id_z*f28.stride.2) + (t6510 + unsharp_y.s0._::x._::xi.base.s))) + t5993), (t6508 + 236), 4)]) + uint16x4(f28[ramp(((((.__thread_id_y*4) + ((.__thread_id_z*f28.stride.2) + ((t6508 - f28._::x.min_realized.s) + unsharp_y.s0._::x._::xi.base.s))) + t5993) + 464), (t6508 + 236), 4)])) + x4((uint16)1))/x4((uint16)2)))) + uint16x4(f28[ramp(((((.__thread_id_y*4) + ((.__thread_id_z*f28.stride.2) + (unsharp_y.s0._::x._::xi.base.s - f28._::x.min_realized.s))) + t5993) + 228), (t6508 + 236), 4)])) + x4((uint16)1))/x4((uint16)2))))
                      unsharp_y[ramp((((((.__thread_id_x*4) + t6527)*2) + ((((.__thread_id_y*4) + (unsharp_y.s0._::x._::xi.base.s - t6531))*t6513) + (.__thread_id_z*unsharp_y.stride.2))) + -244), 1, 4) aligned(2, 0)] = (let t5996 = (((((.__thread_id_x*4) + t6530)*2) + t6528)*(t6508 + 236)) in uint8x4((((uint16x4(uint8x4((((uint16x4(f28[ramp((((.__thread_id_y*4) + ((.__thread_id_z*f28.stride.2) + (t6510 + unsharp_y.s0._::x._::xi.base.s))) + t5996), (t6508 + 236), 4)]) + uint16x4(f28[ramp(((((.__thread_id_y*4) + ((.__thread_id_z*f28.stride.2) + ((t6508 - f28._::x.min_realized.s) + unsharp_y.s0._::x._::xi.base.s))) + t5996) + 464), (t6508 + 236), 4)])) + x4((uint16)1))/x4((uint16)2)))) + uint16x4(f28[ramp(((((.__thread_id_y*4) + ((.__thread_id_z*f28.stride.2) + (unsharp_y.s0._::x._::xi.base.s - f28._::x.min_realized.s))) + t5996) + 228), (t6508 + 236), 4)])) + x4((uint16)1))/x4((uint16)2))))
                      unsharp_y[ramp((((((.__thread_id_x*4) + t6527)*2) + (((((.__thread_id_y*4) + (unsharp_y.s0._::x._::xi.base.s - t6531)) + 1)*t6513) + (.__thread_id_z*unsharp_y.stride.2))) + -248), 1, 4) aligned(2, 0)] = (let t5999 = (((((.__thread_id_x*4) + t6530)*2) + t6525)*(t6508 + 236)) in uint8x4((((uint16x4(uint8x4((((uint16x4(f28[ramp((((.__thread_id_y*4) + ((.__thread_id_z*f28.stride.2) + (t6516 + unsharp_y.s0._::x._::xi.base.s))) + t5999), (t6508 + 236), 4)]) + uint16x4(f28[ramp(((((.__thread_id_y*4) + ((.__thread_id_z*f28.stride.2) + ((t6508 - f28._::x.min_realized.s) + unsharp_y.s0._::x._::xi.base.s))) + t5999) + 465), (t6508 + 236), 4)])) + x4((uint16)1))/x4((uint16)2)))) + uint16x4(f28[ramp(((((.__thread_id_y*4) + ((.__thread_id_z*f28.stride.2) + (unsharp_y.s0._::x._::xi.base.s - f28._::x.min_realized.s))) + t5999) + 229), (t6508 + 236), 4)])) + x4((uint16)1))/x4((uint16)2))))
                      unsharp_y[ramp((((((.__thread_id_x*4) + t6527)*2) + (((((.__thread_id_y*4) + (unsharp_y.s0._::x._::xi.base.s - t6531)) + 1)*t6513) + (.__thread_id_z*unsharp_y.stride.2))) + -244), 1, 4) aligned(2, 0)] = (let t6002 = (((((.__thread_id_x*4) + t6530)*2) + t6528)*(t6508 + 236)) in uint8x4((((uint16x4(uint8x4((((uint16x4(f28[ramp((((.__thread_id_y*4) + ((.__thread_id_z*f28.stride.2) + (t6516 + unsharp_y.s0._::x._::xi.base.s))) + t6002), (t6508 + 236), 4)]) + uint16x4(f28[ramp(((((.__thread_id_y*4) + ((.__thread_id_z*f28.stride.2) + ((t6508 - f28._::x.min_realized.s) + unsharp_y.s0._::x._::xi.base.s))) + t6002) + 465), (t6508 + 236), 4)])) + x4((uint16)1))/x4((uint16)2)))) + uint16x4(f28[ramp(((((.__thread_id_y*4) + ((.__thread_id_z*f28.stride.2) + (unsharp_y.s0._::x._::xi.base.s - f28._::x.min_realized.s))) + t6002) + 229), (t6508 + 236), 4)])) + x4((uint16)1))/x4((uint16)2))))
                      unsharp_y[ramp((((((.__thread_id_x*4) + t6527)*2) + ((((.__thread_id_y*4) + (t6521 + unsharp_y.s0._::x._::xi.base.s))*t6513) + (.__thread_id_z*unsharp_y.stride.2))) + -248), 1, 4) aligned(2, 0)] = (let t6005 = (((((.__thread_id_x*4) + t6530)*2) + t6525)*(t6508 + 236)) in uint8x4((((uint16x4(uint8x4((((uint16x4(f28[ramp((((.__thread_id_y*4) + ((.__thread_id_z*f28.stride.2) + (t6519 + unsharp_y.s0._::x._::xi.base.s))) + t6005), (t6508 + 236), 4)]) + uint16x4(f28[ramp(((((.__thread_id_y*4) + ((.__thread_id_z*f28.stride.2) + ((t6508 - f28._::x.min_realized.s) + unsharp_y.s0._::x._::xi.base.s))) + t6005) + 466), (t6508 + 236), 4)])) + x4((uint16)1))/x4((uint16)2)))) + uint16x4(f28[ramp(((((.__thread_id_y*4) + ((.__thread_id_z*f28.stride.2) + (unsharp_y.s0._::x._::xi.base.s - f28._::x.min_realized.s))) + t6005) + 230), (t6508 + 236), 4)])) + x4((uint16)1))/x4((uint16)2))))
                      unsharp_y[ramp((((((.__thread_id_x*4) + t6527)*2) + ((((.__thread_id_y*4) + (t6521 + unsharp_y.s0._::x._::xi.base.s))*t6513) + (.__thread_id_z*unsharp_y.stride.2))) + -244), 1, 4) aligned(2, 0)] = (let t6008 = (((((.__thread_id_x*4) + t6530)*2) + t6528)*(t6508 + 236)) in uint8x4((((uint16x4(uint8x4((((uint16x4(f28[ramp((((.__thread_id_y*4) + ((.__thread_id_z*f28.stride.2) + (t6519 + unsharp_y.s0._::x._::xi.base.s))) + t6008), (t6508 + 236), 4)]) + uint16x4(f28[ramp(((((.__thread_id_y*4) + ((.__thread_id_z*f28.stride.2) + ((t6508 - f28._::x.min_realized.s) + unsharp_y.s0._::x._::xi.base.s))) + t6008) + 466), (t6508 + 236), 4)])) + x4((uint16)1))/x4((uint16)2)))) + uint16x4(f28[ramp(((((.__thread_id_y*4) + ((.__thread_id_z*f28.stride.2) + (unsharp_y.s0._::x._::xi.base.s - f28._::x.min_realized.s))) + t6008) + 230), (t6508 + 236), 4)])) + x4((uint16)1))/x4((uint16)2))))
                      unsharp_y[ramp((((((.__thread_id_x*4) + t6527)*2) + (((((.__thread_id_y*4) + (unsharp_y.s0._::x._::xi.base.s - t6531)) + 3)*t6513) + (.__thread_id_z*unsharp_y.stride.2))) + -248), 1, 4) aligned(2, 0)] = (let t6011 = (((((.__thread_id_x*4) + t6530)*2) + t6525)*(t6508 + 236)) in uint8x4((((uint16x4(uint8x4((((uint16x4(f28[ramp((((.__thread_id_y*4) + ((.__thread_id_z*f28.stride.2) + (t6522 + unsharp_y.s0._::x._::xi.base.s))) + t6011), (t6508 + 236), 4)]) + uint16x4(f28[ramp(((((.__thread_id_y*4) + ((.__thread_id_z*f28.stride.2) + ((t6508 - f28._::x.min_realized.s) + unsharp_y.s0._::x._::xi.base.s))) + t6011) + 467), (t6508 + 236), 4)])) + x4((uint16)1))/x4((uint16)2)))) + uint16x4(f28[ramp(((((.__thread_id_y*4) + ((.__thread_id_z*f28.stride.2) + (unsharp_y.s0._::x._::xi.base.s - f28._::x.min_realized.s))) + t6011) + 231), (t6508 + 236), 4)])) + x4((uint16)1))/x4((uint16)2))))
                      unsharp_y[ramp((((((.__thread_id_x*4) + t6527)*2) + (((((.__thread_id_y*4) + (unsharp_y.s0._::x._::xi.base.s - t6531)) + 3)*t6513) + (.__thread_id_z*unsharp_y.stride.2))) + -244), 1, 4) aligned(2, 0)] = (let t6014 = (((((.__thread_id_x*4) + t6530)*2) + t6528)*(t6508 + 236)) in uint8x4((((uint16x4(uint8x4((((uint16x4(f28[ramp((((.__thread_id_y*4) + ((.__thread_id_z*f28.stride.2) + (t6522 + unsharp_y.s0._::x._::xi.base.s))) + t6014), (t6508 + 236), 4)]) + uint16x4(f28[ramp(((((.__thread_id_y*4) + ((.__thread_id_z*f28.stride.2) + ((t6508 - f28._::x.min_realized.s) + unsharp_y.s0._::x._::xi.base.s))) + t6014) + 467), (t6508 + 236), 4)])) + x4((uint16)1))/x4((uint16)2)))) + uint16x4(f28[ramp(((((.__thread_id_y*4) + ((.__thread_id_z*f28.stride.2) + (unsharp_y.s0._::x._::xi.base.s - f28._::x.min_realized.s))) + t6014) + 231), (t6508 + 236), 4)])) + x4((uint16)1))/x4((uint16)2))))
                    }
                  } else {
                    let unsharp_y.s0._::x._::xi.base.s = min(((unsharp_y.s0._::x._::x.__block_id_y*8) + 6), t6506)
                    let unsharp_y.s0._::y._::yi.base = min((unsharp_y.s0._::y._::y.__block_id_x*248), t6529)
                    unsharp_y[ramp(((.__thread_id_x*8) + ((((.__thread_id_y*4) + (unsharp_y.s0._::x._::xi.base.s - t6531))*t6513) + (((.__thread_id_z + 1)*unsharp_y.stride.2) + (t4837 + unsharp_y.s0._::y._::yi.base)))), 1, 4) aligned(2, 0)] = (let t6017 = (((.__thread_id_x*8) + (t6509 + unsharp_y.s0._::y._::yi.base))*(t6508 + 236)) in uint8x4((((uint16x4(uint8x4((((uint16x4(f28[ramp((((.__thread_id_y*4) + (((.__thread_id_z + 1)*f28.stride.2) + (t6510 + unsharp_y.s0._::x._::xi.base.s))) + t6017), (t6508 + 236), 4)]) + uint16x4(f28[ramp(((((.__thread_id_y*4) + (((.__thread_id_z + 1)*f28.stride.2) + ((t6508 - f28._::x.min_realized.s) + unsharp_y.s0._::x._::xi.base.s))) + t6017) + 464), (t6508 + 236), 4)])) + x4((uint16)1))/x4((uint16)2)))) + uint16x4(f28[ramp(((((.__thread_id_y*4) + (((.__thread_id_z + 1)*f28.stride.2) + (unsharp_y.s0._::x._::xi.base.s - f28._::x.min_realized.s))) + t6017) + 228), (t6508 + 236), 4)])) + x4((uint16)1))/x4((uint16)2))))
                    unsharp_y[ramp(((.__thread_id_x*8) + ((((.__thread_id_y*4) + (unsharp_y.s0._::x._::xi.base.s - t6531))*t6513) + (((.__thread_id_z + 1)*unsharp_y.stride.2) + (t4838 + unsharp_y.s0._::y._::yi.base)))), 1, 4) aligned(2, 0)] = (let t6020 = (((.__thread_id_x*8) + (t6515 + unsharp_y.s0._::y._::yi.base))*(t6508 + 236)) in uint8x4((((uint16x4(uint8x4((((uint16x4(f28[ramp((((.__thread_id_y*4) + (((.__thread_id_z + 1)*f28.stride.2) + (t6510 + unsharp_y.s0._::x._::xi.base.s))) + t6020), (t6508 + 236), 4)]) + uint16x4(f28[ramp(((((.__thread_id_y*4) + (((.__thread_id_z + 1)*f28.stride.2) + ((t6508 - f28._::x.min_realized.s) + unsharp_y.s0._::x._::xi.base.s))) + t6020) + 464), (t6508 + 236), 4)])) + x4((uint16)1))/x4((uint16)2)))) + uint16x4(f28[ramp(((((.__thread_id_y*4) + (((.__thread_id_z + 1)*f28.stride.2) + (unsharp_y.s0._::x._::xi.base.s - f28._::x.min_realized.s))) + t6020) + 228), (t6508 + 236), 4)])) + x4((uint16)1))/x4((uint16)2))))
                    unsharp_y[ramp(((.__thread_id_x*8) + (((((.__thread_id_y*4) + (unsharp_y.s0._::x._::xi.base.s - t6531)) + 1)*t6513) + (((.__thread_id_z + 1)*unsharp_y.stride.2) + (t4837 + unsharp_y.s0._::y._::yi.base)))), 1, 4) aligned(2, 0)] = (let t6023 = (((.__thread_id_x*8) + (t6509 + unsharp_y.s0._::y._::yi.base))*(t6508 + 236)) in uint8x4((((uint16x4(uint8x4((((uint16x4(f28[ramp((((.__thread_id_y*4) + (((.__thread_id_z + 1)*f28.stride.2) + (t6516 + unsharp_y.s0._::x._::xi.base.s))) + t6023), (t6508 + 236), 4)]) + uint16x4(f28[ramp(((((.__thread_id_y*4) + (((.__thread_id_z + 1)*f28.stride.2) + ((t6508 - f28._::x.min_realized.s) + unsharp_y.s0._::x._::xi.base.s))) + t6023) + 465), (t6508 + 236), 4)])) + x4((uint16)1))/x4((uint16)2)))) + uint16x4(f28[ramp(((((.__thread_id_y*4) + (((.__thread_id_z + 1)*f28.stride.2) + (unsharp_y.s0._::x._::xi.base.s - f28._::x.min_realized.s))) + t6023) + 229), (t6508 + 236), 4)])) + x4((uint16)1))/x4((uint16)2))))
                    unsharp_y[ramp(((.__thread_id_x*8) + (((((.__thread_id_y*4) + (unsharp_y.s0._::x._::xi.base.s - t6531)) + 1)*t6513) + (((.__thread_id_z + 1)*unsharp_y.stride.2) + (t4838 + unsharp_y.s0._::y._::yi.base)))), 1, 4) aligned(2, 0)] = (let t6026 = (((.__thread_id_x*8) + (t6515 + unsharp_y.s0._::y._::yi.base))*(t6508 + 236)) in uint8x4((((uint16x4(uint8x4((((uint16x4(f28[ramp((((.__thread_id_y*4) + (((.__thread_id_z + 1)*f28.stride.2) + (t6516 + unsharp_y.s0._::x._::xi.base.s))) + t6026), (t6508 + 236), 4)]) + uint16x4(f28[ramp(((((.__thread_id_y*4) + (((.__thread_id_z + 1)*f28.stride.2) + ((t6508 - f28._::x.min_realized.s) + unsharp_y.s0._::x._::xi.base.s))) + t6026) + 465), (t6508 + 236), 4)])) + x4((uint16)1))/x4((uint16)2)))) + uint16x4(f28[ramp(((((.__thread_id_y*4) + (((.__thread_id_z + 1)*f28.stride.2) + (unsharp_y.s0._::x._::xi.base.s - f28._::x.min_realized.s))) + t6026) + 229), (t6508 + 236), 4)])) + x4((uint16)1))/x4((uint16)2))))
                    unsharp_y[ramp(((.__thread_id_x*8) + ((((.__thread_id_y*4) + (t6521 + unsharp_y.s0._::x._::xi.base.s))*t6513) + (((.__thread_id_z + 1)*unsharp_y.stride.2) + (t4837 + unsharp_y.s0._::y._::yi.base)))), 1, 4) aligned(2, 0)] = (let t6029 = (((.__thread_id_x*8) + (t6509 + unsharp_y.s0._::y._::yi.base))*(t6508 + 236)) in uint8x4((((uint16x4(uint8x4((((uint16x4(f28[ramp((((.__thread_id_y*4) + (((.__thread_id_z + 1)*f28.stride.2) + (t6519 + unsharp_y.s0._::x._::xi.base.s))) + t6029), (t6508 + 236), 4)]) + uint16x4(f28[ramp(((((.__thread_id_y*4) + (((.__thread_id_z + 1)*f28.stride.2) + ((t6508 - f28._::x.min_realized.s) + unsharp_y.s0._::x._::xi.base.s))) + t6029) + 466), (t6508 + 236), 4)])) + x4((uint16)1))/x4((uint16)2)))) + uint16x4(f28[ramp(((((.__thread_id_y*4) + (((.__thread_id_z + 1)*f28.stride.2) + (unsharp_y.s0._::x._::xi.base.s - f28._::x.min_realized.s))) + t6029) + 230), (t6508 + 236), 4)])) + x4((uint16)1))/x4((uint16)2))))
                    unsharp_y[ramp(((.__thread_id_x*8) + ((((.__thread_id_y*4) + (t6521 + unsharp_y.s0._::x._::xi.base.s))*t6513) + (((.__thread_id_z + 1)*unsharp_y.stride.2) + (t4838 + unsharp_y.s0._::y._::yi.base)))), 1, 4) aligned(2, 0)] = (let t6032 = (((.__thread_id_x*8) + (t6515 + unsharp_y.s0._::y._::yi.base))*(t6508 + 236)) in uint8x4((((uint16x4(uint8x4((((uint16x4(f28[ramp((((.__thread_id_y*4) + (((.__thread_id_z + 1)*f28.stride.2) + (t6519 + unsharp_y.s0._::x._::xi.base.s))) + t6032), (t6508 + 236), 4)]) + uint16x4(f28[ramp(((((.__thread_id_y*4) + (((.__thread_id_z + 1)*f28.stride.2) + ((t6508 - f28._::x.min_realized.s) + unsharp_y.s0._::x._::xi.base.s))) + t6032) + 466), (t6508 + 236), 4)])) + x4((uint16)1))/x4((uint16)2)))) + uint16x4(f28[ramp(((((.__thread_id_y*4) + (((.__thread_id_z + 1)*f28.stride.2) + (unsharp_y.s0._::x._::xi.base.s - f28._::x.min_realized.s))) + t6032) + 230), (t6508 + 236), 4)])) + x4((uint16)1))/x4((uint16)2))))
                    unsharp_y[ramp(((.__thread_id_x*8) + (((((.__thread_id_y*4) + (unsharp_y.s0._::x._::xi.base.s - t6531)) + 3)*t6513) + (((.__thread_id_z + 1)*unsharp_y.stride.2) + (t4837 + unsharp_y.s0._::y._::yi.base)))), 1, 4) aligned(2, 0)] = (let t6035 = (((.__thread_id_x*8) + (t6509 + unsharp_y.s0._::y._::yi.base))*(t6508 + 236)) in uint8x4((((uint16x4(uint8x4((((uint16x4(f28[ramp((((.__thread_id_y*4) + (((.__thread_id_z + 1)*f28.stride.2) + (t6522 + unsharp_y.s0._::x._::xi.base.s))) + t6035), (t6508 + 236), 4)]) + uint16x4(f28[ramp(((((.__thread_id_y*4) + (((.__thread_id_z + 1)*f28.stride.2) + ((t6508 - f28._::x.min_realized.s) + unsharp_y.s0._::x._::xi.base.s))) + t6035) + 467), (t6508 + 236), 4)])) + x4((uint16)1))/x4((uint16)2)))) + uint16x4(f28[ramp(((((.__thread_id_y*4) + (((.__thread_id_z + 1)*f28.stride.2) + (unsharp_y.s0._::x._::xi.base.s - f28._::x.min_realized.s))) + t6035) + 231), (t6508 + 236), 4)])) + x4((uint16)1))/x4((uint16)2))))
                    unsharp_y[ramp(((.__thread_id_x*8) + (((((.__thread_id_y*4) + (unsharp_y.s0._::x._::xi.base.s - t6531)) + 3)*t6513) + (((.__thread_id_z + 1)*unsharp_y.stride.2) + (t4838 + unsharp_y.s0._::y._::yi.base)))), 1, 4) aligned(2, 0)] = (let t6038 = (((.__thread_id_x*8) + (t6515 + unsharp_y.s0._::y._::yi.base))*(t6508 + 236)) in uint8x4((((uint16x4(uint8x4((((uint16x4(f28[ramp((((.__thread_id_y*4) + (((.__thread_id_z + 1)*f28.stride.2) + (t6522 + unsharp_y.s0._::x._::xi.base.s))) + t6038), (t6508 + 236), 4)]) + uint16x4(f28[ramp(((((.__thread_id_y*4) + (((.__thread_id_z + 1)*f28.stride.2) + ((t6508 - f28._::x.min_realized.s) + unsharp_y.s0._::x._::xi.base.s))) + t6038) + 467), (t6508 + 236), 4)])) + x4((uint16)1))/x4((uint16)2)))) + uint16x4(f28[ramp(((((.__thread_id_y*4) + (((.__thread_id_z + 1)*f28.stride.2) + (unsharp_y.s0._::x._::xi.base.s - f28._::x.min_realized.s))) + t6038) + 231), (t6508 + 236), 4)])) + x4((uint16)1))/x4((uint16)2))))
                  }
                }
              }
            }
          }
        }
      }
      _halide_buffer_set_device_dirty(unsharp_y.buffer, (uint1)1)
    }
  }
  let mask._::y.min_realized.s = min((processed.extent.1/2), (min((processed.extent.1/2), 62) + 62))
  let mask._::y.extent_realized.s = (min(((processed.extent.1/2)*2), (max((((processed.extent.1 + -2)/124)*124), ((((processed.extent.1 + -2)/248)*248) + 124)) + 124)) - (mask._::y.min_realized.s*2))
  let mask._::x.extent_realized.s = (min(((processed.extent.0/2)*2), (max((((processed.extent.0 + -2)/4)*4), ((((processed.extent.0 + -2)/64)*64) + 60)) + 4)) - (min((processed.extent.0/2), 32)*2))
  let mask.stride.2 = ((mask._::y.extent_realized.s + 248)*(mask._::x.extent_realized.s + 64))
  allocate mask[int16 * (mask._::x.extent_realized.s + 64) * (mask._::y.extent_realized.s + 248) * 3] if (uint1)0
  let mask.buffer = _halide_buffer_init(alloca(size_of_halide_buffer_t()), make_struct((halide_dimension_t *), ((min((processed.extent.0/2), 32)*2) + -64), (mask._::x.extent_realized.s + 64), (mask._::y.extent_realized.s + 248), 0, ((mask._::y.min_realized.s*2) + -248), (mask._::y.extent_realized.s + 248), 1, 0, 0, 3, mask.stride.2, 0), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 0, 16, 3, make_struct((halide_dimension_t *), ((min((processed.extent.0/2), 32)*2) + -64), (mask._::x.extent_realized.s + 64), (mask._::y.extent_realized.s + 248), 0, ((mask._::y.min_realized.s*2) + -248), (mask._::y.extent_realized.s + 248), 1, 0, 0, 3, mask.stride.2, 0), (uint64)0)
  register_destructor("halide_device_free_as_destructor", mask.buffer)
  produce mask {
    consume unsharp_y {
      consume f28 {
        let halide_device_malloc_result$1 = halide_device_malloc(mask.buffer, halide_cuda_device_interface())
        assert((halide_device_malloc_result$1 == 0), halide_device_malloc_result$1)
        let halide_device_malloc_result$4 = halide_device_malloc(unsharp_y.buffer, halide_cuda_device_interface())
        assert((halide_device_malloc_result$4 == 0), halide_device_malloc_result$4)
        let halide_device_malloc_result$7 = halide_device_malloc(f28.buffer, halide_cuda_device_interface())
        assert((halide_device_malloc_result$7 == 0), halide_device_malloc_result$7)
        let t4861 = (65 - (min((processed.extent.0/2), 32)*2))
        let t4854 = (64 - (min((processed.extent.0/2), 32)*2))
        let t4859 = (8 - (unsharp_y._::x.min_realized.s*2))
        let t4848 = (7 - (unsharp_y._::x.min_realized.s*2))
        let t6575 = (unsharp_y._::y.extent_realized.s + unsharp_y.stride.2)
        let t6576 = (unsharp_y.stride.2*2)
        let t6577 = (t6576 + unsharp_y._::y.extent_realized.s)
        let t6578 = (f28.stride.2 - f28._::x.min_realized.s)
        let t6579 = (unsharp_y.stride.2 - unsharp_y._::y.extent_realized.s)
        let t6580 = ((f28.stride.2*2) - f28._::x.min_realized.s)
        let t6581 = (t6576 - unsharp_y._::y.extent_realized.s)
        let t6582 = (mask.stride.2*2)
        let t6583 = (processed.extent.1/2)
        let t6567 = max(t6583, 124)
        let t6537 = min(t6583, 124)
        let t6533 = ((processed.extent.1 + 246)/248)
        let t6532 = ((processed.extent.0 + 2)/4)
        let t6535 = (processed.extent.1/248)
        let t6538 = (f28._::x.extent_realized.s.s - f28._::x.min_realized.s)
        let t6543 = (253 - f28._::y.min_realized.s)
        let t6540 = (249 - f28._::y.min_realized.s)
        let t6546 = (236 - f28._::x.min_realized.s)
        let t6539 = (235 - f28._::x.min_realized.s)
        let t6572 = (5 - f28._::y.min_realized.s)
        let t6568 = (1 - f28._::y.min_realized.s)
        let t6534 = (((processed.extent.0/2)*2) + -4)
        let t6564 = (t6576 + 252)
        let t6560 = (t6576 + 248)
        let t6565 = (t6582 + 252)
        let t6561 = (t6582 + 248)
        let t6566 = (t6580 + 236)
        let t6557 = (t6580 + 235)
        let t6556 = (t6578 + 236)
        let t6547 = (t6578 + 235)
        let t6563 = (t6577 + 500)
        let t6559 = (t6577 + 496)
        let t6553 = (t6575 + 500)
        let t6549 = (t6575 + 496)
        let t6542 = (mask._::y.extent_realized.s + 248)
        gpu_block<CUDA> (mask.s0._::x._::x.__block_id_y, 0, t6532) {
          gpu_block<CUDA> (mask.s0._::y._::y.__block_id_x, 0, t6533) {
            gpu_thread<CUDA> (.__thread_id_z, 0, 2) {
              gpu_thread<CUDA> (.__thread_id_y, 0, 2) {
                gpu_thread<CUDA> (.__thread_id_x, 0, 31) {
                  let mask.s0._::x._::xi.base = min((mask.s0._::x._::x.__block_id_y*4), t6534)
                  if ((mask.s0._::y._::y.__block_id_x < t6535)) {
                    if ((.__thread_id_z < 1)) {
                      mask[ramp((((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - mask._::y.min_realized.s)*2) + (((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t4854))*t6542)) + 248), 1, 4) aligned(2, 0)] = (let t6041 = (((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t4848))*(unsharp_y._::y.extent_realized.s + 248)) in (int16x4(f28[ramp(((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*8) + t6540)*(t6538 + 236)) + ((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t6539))), (t6538 + 236), 4)]) - int16x4(uint8x4((((uint16x4(uint8x4((((uint16x4(unsharp_y[ramp(((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6537)*2) + (t6041 - unsharp_y._::y.extent_realized.s)), 1, 4) aligned(2, 0)]) + uint16x4(unsharp_y[ramp((((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6537)*2) + (t6041 + unsharp_y._::y.extent_realized.s)) + 496), 1, 4) aligned(2, 0)])) + x4((uint16)1))/x4((uint16)2)))) + uint16x4(unsharp_y[ramp((((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6537)*2) + t6041) + 248), 1, 4) aligned(2, 0)])) + x4((uint16)1))/x4((uint16)2))))))
                      mask[ramp((((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - mask._::y.min_realized.s)*2) + (((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t4854))*t6542)) + 252), 1, 4) aligned(2, 0)] = (let t6045 = (((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t4848))*(unsharp_y._::y.extent_realized.s + 248)) in (int16x4(f28[ramp(((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*8) + t6543)*(t6538 + 236)) + ((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t6539))), (t6538 + 236), 4)]) - int16x4(uint8x4((((uint16x4(uint8x4((((uint16x4(unsharp_y[ramp((((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6537)*2) + (t6045 - unsharp_y._::y.extent_realized.s)) + 4), 1, 4) aligned(2, 0)]) + uint16x4(unsharp_y[ramp((((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6537)*2) + (t6045 + unsharp_y._::y.extent_realized.s)) + 500), 1, 4) aligned(2, 0)])) + x4((uint16)1))/x4((uint16)2)))) + uint16x4(unsharp_y[ramp((((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6537)*2) + t6045) + 252), 1, 4) aligned(2, 0)])) + x4((uint16)1))/x4((uint16)2))))))
                      mask[ramp((((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - mask._::y.min_realized.s)*2) + (((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t4861))*t6542)) + 248), 1, 4) aligned(2, 0)] = (let t6049 = (((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t4859))*(unsharp_y._::y.extent_realized.s + 248)) in (int16x4(f28[ramp(((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*8) + t6540)*(t6538 + 236)) + ((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t6546))), (t6538 + 236), 4)]) - int16x4(uint8x4((((uint16x4(uint8x4((((uint16x4(unsharp_y[ramp(((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6537)*2) + (t6049 - unsharp_y._::y.extent_realized.s)), 1, 4) aligned(2, 0)]) + uint16x4(unsharp_y[ramp((((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6537)*2) + (t6049 + unsharp_y._::y.extent_realized.s)) + 496), 1, 4) aligned(2, 0)])) + x4((uint16)1))/x4((uint16)2)))) + uint16x4(unsharp_y[ramp((((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6537)*2) + t6049) + 248), 1, 4) aligned(2, 0)])) + x4((uint16)1))/x4((uint16)2))))))
                      mask[ramp((((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - mask._::y.min_realized.s)*2) + (((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t4861))*t6542)) + 252), 1, 4) aligned(2, 0)] = (let t6053 = (((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t4859))*(unsharp_y._::y.extent_realized.s + 248)) in (int16x4(f28[ramp(((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*8) + t6543)*(t6538 + 236)) + ((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t6546))), (t6538 + 236), 4)]) - int16x4(uint8x4((((uint16x4(uint8x4((((uint16x4(unsharp_y[ramp((((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6537)*2) + (t6053 - unsharp_y._::y.extent_realized.s)) + 4), 1, 4) aligned(2, 0)]) + uint16x4(unsharp_y[ramp((((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6537)*2) + (t6053 + unsharp_y._::y.extent_realized.s)) + 500), 1, 4) aligned(2, 0)])) + x4((uint16)1))/x4((uint16)2)))) + uint16x4(unsharp_y[ramp((((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6537)*2) + t6053) + 252), 1, 4) aligned(2, 0)])) + x4((uint16)1))/x4((uint16)2))))))
                      mask[ramp((((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - mask._::y.min_realized.s)*2) + ((((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t4854))*t6542) + mask.stride.2)) + 248), 1, 4) aligned(2, 0)] = (let t6057 = (((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t4848))*(unsharp_y._::y.extent_realized.s + 248)) in (int16x4(f28[ramp(((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*8) + t6540)*(t6538 + 236)) + ((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t6547))), (t6538 + 236), 4)]) - int16x4(uint8x4((((uint16x4(uint8x4((((uint16x4(unsharp_y[ramp(((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6537)*2) + (t6057 + t6579)), 1, 4) aligned(2, 0)]) + uint16x4(unsharp_y[ramp(((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6537)*2) + (t6057 + t6549)), 1, 4) aligned(2, 0)])) + x4((uint16)1))/x4((uint16)2)))) + uint16x4(unsharp_y[ramp((((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6537)*2) + (t6057 + unsharp_y.stride.2)) + 248), 1, 4) aligned(2, 0)])) + x4((uint16)1))/x4((uint16)2))))))
                      mask[ramp((((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - mask._::y.min_realized.s)*2) + ((((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t4854))*t6542) + mask.stride.2)) + 252), 1, 4) aligned(2, 0)] = (let t6061 = (((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t4848))*(unsharp_y._::y.extent_realized.s + 248)) in (int16x4(f28[ramp(((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*8) + t6543)*(t6538 + 236)) + ((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t6547))), (t6538 + 236), 4)]) - int16x4(uint8x4((((uint16x4(uint8x4((((uint16x4(unsharp_y[ramp((((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6537)*2) + (t6061 + t6579)) + 4), 1, 4) aligned(2, 0)]) + uint16x4(unsharp_y[ramp(((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6537)*2) + (t6061 + t6553)), 1, 4) aligned(2, 0)])) + x4((uint16)1))/x4((uint16)2)))) + uint16x4(unsharp_y[ramp((((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6537)*2) + (t6061 + unsharp_y.stride.2)) + 252), 1, 4) aligned(2, 0)])) + x4((uint16)1))/x4((uint16)2))))))
                      mask[ramp((((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - mask._::y.min_realized.s)*2) + ((((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t4861))*t6542) + mask.stride.2)) + 248), 1, 4) aligned(2, 0)] = (let t6065 = (((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t4859))*(unsharp_y._::y.extent_realized.s + 248)) in (int16x4(f28[ramp(((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*8) + t6540)*(t6538 + 236)) + ((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t6556))), (t6538 + 236), 4)]) - int16x4(uint8x4((((uint16x4(uint8x4((((uint16x4(unsharp_y[ramp(((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6537)*2) + (t6065 + t6579)), 1, 4) aligned(2, 0)]) + uint16x4(unsharp_y[ramp(((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6537)*2) + (t6065 + t6549)), 1, 4) aligned(2, 0)])) + x4((uint16)1))/x4((uint16)2)))) + uint16x4(unsharp_y[ramp((((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6537)*2) + (t6065 + unsharp_y.stride.2)) + 248), 1, 4) aligned(2, 0)])) + x4((uint16)1))/x4((uint16)2))))))
                      mask[ramp((((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - mask._::y.min_realized.s)*2) + ((((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t4861))*t6542) + mask.stride.2)) + 252), 1, 4) aligned(2, 0)] = (let t6069 = (((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t4859))*(unsharp_y._::y.extent_realized.s + 248)) in (int16x4(f28[ramp(((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*8) + t6543)*(t6538 + 236)) + ((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t6556))), (t6538 + 236), 4)]) - int16x4(uint8x4((((uint16x4(uint8x4((((uint16x4(unsharp_y[ramp((((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6537)*2) + (t6069 + t6579)) + 4), 1, 4) aligned(2, 0)]) + uint16x4(unsharp_y[ramp(((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6537)*2) + (t6069 + t6553)), 1, 4) aligned(2, 0)])) + x4((uint16)1))/x4((uint16)2)))) + uint16x4(unsharp_y[ramp((((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6537)*2) + (t6069 + unsharp_y.stride.2)) + 252), 1, 4) aligned(2, 0)])) + x4((uint16)1))/x4((uint16)2))))))
                    } else {
                      mask[ramp((((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - mask._::y.min_realized.s)*2) + ((((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t4854))*t6542) + mask.stride.2)) + 248), 1, 4) aligned(2, 0)] = (let t6073 = (((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t4848))*(unsharp_y._::y.extent_realized.s + 248)) in (int16x4(f28[ramp(((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*8) + t6540)*(t6538 + 236)) + ((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t6547))), (t6538 + 236), 4)]) - int16x4(uint8x4((((uint16x4(uint8x4((((uint16x4(unsharp_y[ramp(((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6537)*2) + (t6073 + t6579)), 1, 4) aligned(2, 0)]) + uint16x4(unsharp_y[ramp(((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6537)*2) + (t6073 + t6549)), 1, 4) aligned(2, 0)])) + x4((uint16)1))/x4((uint16)2)))) + uint16x4(unsharp_y[ramp((((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6537)*2) + (t6073 + unsharp_y.stride.2)) + 248), 1, 4) aligned(2, 0)])) + x4((uint16)1))/x4((uint16)2))))))
                      mask[ramp((((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - mask._::y.min_realized.s)*2) + ((((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t4854))*t6542) + mask.stride.2)) + 252), 1, 4) aligned(2, 0)] = (let t6077 = (((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t4848))*(unsharp_y._::y.extent_realized.s + 248)) in (int16x4(f28[ramp(((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*8) + t6543)*(t6538 + 236)) + ((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t6547))), (t6538 + 236), 4)]) - int16x4(uint8x4((((uint16x4(uint8x4((((uint16x4(unsharp_y[ramp((((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6537)*2) + (t6077 + t6579)) + 4), 1, 4) aligned(2, 0)]) + uint16x4(unsharp_y[ramp(((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6537)*2) + (t6077 + t6553)), 1, 4) aligned(2, 0)])) + x4((uint16)1))/x4((uint16)2)))) + uint16x4(unsharp_y[ramp((((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6537)*2) + (t6077 + unsharp_y.stride.2)) + 252), 1, 4) aligned(2, 0)])) + x4((uint16)1))/x4((uint16)2))))))
                      mask[ramp((((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - mask._::y.min_realized.s)*2) + ((((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t4861))*t6542) + mask.stride.2)) + 248), 1, 4) aligned(2, 0)] = (let t6081 = (((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t4859))*(unsharp_y._::y.extent_realized.s + 248)) in (int16x4(f28[ramp(((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*8) + t6540)*(t6538 + 236)) + ((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t6556))), (t6538 + 236), 4)]) - int16x4(uint8x4((((uint16x4(uint8x4((((uint16x4(unsharp_y[ramp(((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6537)*2) + (t6081 + t6579)), 1, 4) aligned(2, 0)]) + uint16x4(unsharp_y[ramp(((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6537)*2) + (t6081 + t6549)), 1, 4) aligned(2, 0)])) + x4((uint16)1))/x4((uint16)2)))) + uint16x4(unsharp_y[ramp((((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6537)*2) + (t6081 + unsharp_y.stride.2)) + 248), 1, 4) aligned(2, 0)])) + x4((uint16)1))/x4((uint16)2))))))
                      mask[ramp((((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - mask._::y.min_realized.s)*2) + ((((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t4861))*t6542) + mask.stride.2)) + 252), 1, 4) aligned(2, 0)] = (let t6085 = (((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t4859))*(unsharp_y._::y.extent_realized.s + 248)) in (int16x4(f28[ramp(((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*8) + t6543)*(t6538 + 236)) + ((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t6556))), (t6538 + 236), 4)]) - int16x4(uint8x4((((uint16x4(uint8x4((((uint16x4(unsharp_y[ramp((((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6537)*2) + (t6085 + t6579)) + 4), 1, 4) aligned(2, 0)]) + uint16x4(unsharp_y[ramp(((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6537)*2) + (t6085 + t6553)), 1, 4) aligned(2, 0)])) + x4((uint16)1))/x4((uint16)2)))) + uint16x4(unsharp_y[ramp((((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6537)*2) + (t6085 + unsharp_y.stride.2)) + 252), 1, 4) aligned(2, 0)])) + x4((uint16)1))/x4((uint16)2))))))
                      mask[ramp(((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - mask._::y.min_realized.s)*2) + ((((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t4854))*t6542) + t6561)), 1, 4) aligned(2, 0)] = (let t6089 = (((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t4848))*(unsharp_y._::y.extent_realized.s + 248)) in (int16x4(f28[ramp(((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*8) + t6540)*(t6538 + 236)) + ((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t6557))), (t6538 + 236), 4)]) - int16x4(uint8x4((((uint16x4(uint8x4((((uint16x4(unsharp_y[ramp(((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6537)*2) + (t6089 + t6581)), 1, 4) aligned(2, 0)]) + uint16x4(unsharp_y[ramp(((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6537)*2) + (t6089 + t6559)), 1, 4) aligned(2, 0)])) + x4((uint16)1))/x4((uint16)2)))) + uint16x4(unsharp_y[ramp(((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6537)*2) + (t6089 + t6560)), 1, 4) aligned(2, 0)])) + x4((uint16)1))/x4((uint16)2))))))
                      mask[ramp(((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - mask._::y.min_realized.s)*2) + ((((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t4854))*t6542) + t6565)), 1, 4) aligned(2, 0)] = (let t6093 = (((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t4848))*(unsharp_y._::y.extent_realized.s + 248)) in (int16x4(f28[ramp(((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*8) + t6543)*(t6538 + 236)) + ((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t6557))), (t6538 + 236), 4)]) - int16x4(uint8x4((((uint16x4(uint8x4((((uint16x4(unsharp_y[ramp((((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6537)*2) + (t6093 + t6581)) + 4), 1, 4) aligned(2, 0)]) + uint16x4(unsharp_y[ramp(((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6537)*2) + (t6093 + t6563)), 1, 4) aligned(2, 0)])) + x4((uint16)1))/x4((uint16)2)))) + uint16x4(unsharp_y[ramp(((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6537)*2) + (t6093 + t6564)), 1, 4) aligned(2, 0)])) + x4((uint16)1))/x4((uint16)2))))))
                      mask[ramp(((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - mask._::y.min_realized.s)*2) + ((((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t4861))*t6542) + t6561)), 1, 4) aligned(2, 0)] = (let t6097 = (((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t4859))*(unsharp_y._::y.extent_realized.s + 248)) in (int16x4(f28[ramp(((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*8) + t6540)*(t6538 + 236)) + ((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t6566))), (t6538 + 236), 4)]) - int16x4(uint8x4((((uint16x4(uint8x4((((uint16x4(unsharp_y[ramp(((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6537)*2) + (t6097 + t6581)), 1, 4) aligned(2, 0)]) + uint16x4(unsharp_y[ramp(((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6537)*2) + (t6097 + t6559)), 1, 4) aligned(2, 0)])) + x4((uint16)1))/x4((uint16)2)))) + uint16x4(unsharp_y[ramp(((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6537)*2) + (t6097 + t6560)), 1, 4) aligned(2, 0)])) + x4((uint16)1))/x4((uint16)2))))))
                      mask[ramp(((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - mask._::y.min_realized.s)*2) + ((((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t4861))*t6542) + t6565)), 1, 4) aligned(2, 0)] = (let t6101 = (((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t4859))*(unsharp_y._::y.extent_realized.s + 248)) in (int16x4(f28[ramp(((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*8) + t6543)*(t6538 + 236)) + ((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t6566))), (t6538 + 236), 4)]) - int16x4(uint8x4((((uint16x4(uint8x4((((uint16x4(unsharp_y[ramp((((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6537)*2) + (t6101 + t6581)) + 4), 1, 4) aligned(2, 0)]) + uint16x4(unsharp_y[ramp(((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6537)*2) + (t6101 + t6563)), 1, 4) aligned(2, 0)])) + x4((uint16)1))/x4((uint16)2)))) + uint16x4(unsharp_y[ramp(((((((mask.s0._::y._::y.__block_id_x*31) + .__thread_id_x)*4) - t6537)*2) + (t6101 + t6564)), 1, 4) aligned(2, 0)])) + x4((uint16)1))/x4((uint16)2))))))
                    }
                  } else {
                    mask[ramp(((((.__thread_id_x*4) + (t6583 - mask._::y.min_realized.s))*2) + ((min((.__thread_id_z*2), 1)*mask.stride.2) + (((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t4854))*t6542))), 1, 4) aligned(2, 0)] = (let t6105 = (((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t4848))*(unsharp_y._::y.extent_realized.s + 248)) in (int16x4(f28[ramp(((((((.__thread_id_x*4) + t6583)*2) + t6568)*(t6538 + 236)) + ((.__thread_id_y*2) + ((min((.__thread_id_z*2), 1)*f28.stride.2) + (mask.s0._::x._::xi.base + t6539)))), (t6538 + 236), 4)]) - int16x4(uint8x4((((uint16x4(uint8x4((((uint16x4(unsharp_y[ramp((((((.__thread_id_x*4) + t6567)*2) + (((min((.__thread_id_z*2), 1)*unsharp_y.stride.2) - unsharp_y._::y.extent_realized.s) + t6105)) + -496), 1, 4) aligned(2, 0)]) + uint16x4(unsharp_y[ramp(((((.__thread_id_x*4) + t6567)*2) + (((min((.__thread_id_z*2), 1)*unsharp_y.stride.2) + unsharp_y._::y.extent_realized.s) + t6105)), 1, 4) aligned(2, 0)])) + x4((uint16)1))/x4((uint16)2)))) + uint16x4(unsharp_y[ramp((((((.__thread_id_x*4) + t6567)*2) + ((min((.__thread_id_z*2), 1)*unsharp_y.stride.2) + t6105)) + -248), 1, 4) aligned(2, 0)])) + x4((uint16)1))/x4((uint16)2))))))
                    mask[ramp((((((.__thread_id_x*4) + (t6583 - mask._::y.min_realized.s))*2) + ((((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t4854))*t6542) + (min((.__thread_id_z*2), 1)*mask.stride.2))) + 4), 1, 4) aligned(2, 0)] = (let t6110 = (((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t4848))*(unsharp_y._::y.extent_realized.s + 248)) in (int16x4(f28[ramp(((((((.__thread_id_x*4) + t6583)*2) + t6572)*(t6538 + 236)) + ((.__thread_id_y*2) + ((min((.__thread_id_z*2), 1)*f28.stride.2) + (mask.s0._::x._::xi.base + t6539)))), (t6538 + 236), 4)]) - int16x4(uint8x4((((uint16x4(uint8x4((((uint16x4(unsharp_y[ramp((((((.__thread_id_x*4) + t6567)*2) + (((min((.__thread_id_z*2), 1)*unsharp_y.stride.2) - unsharp_y._::y.extent_realized.s) + t6110)) + -492), 1, 4) aligned(2, 0)]) + uint16x4(unsharp_y[ramp((((((.__thread_id_x*4) + t6567)*2) + (((min((.__thread_id_z*2), 1)*unsharp_y.stride.2) + unsharp_y._::y.extent_realized.s) + t6110)) + 4), 1, 4) aligned(2, 0)])) + x4((uint16)1))/x4((uint16)2)))) + uint16x4(unsharp_y[ramp((((((.__thread_id_x*4) + t6567)*2) + ((min((.__thread_id_z*2), 1)*unsharp_y.stride.2) + t6110)) + -244), 1, 4) aligned(2, 0)])) + x4((uint16)1))/x4((uint16)2))))))
                    mask[ramp(((((.__thread_id_x*4) + (t6583 - mask._::y.min_realized.s))*2) + ((min((.__thread_id_z*2), 1)*mask.stride.2) + (((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t4861))*t6542))), 1, 4) aligned(2, 0)] = (let t6115 = (((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t4859))*(unsharp_y._::y.extent_realized.s + 248)) in (int16x4(f28[ramp(((((((.__thread_id_x*4) + t6583)*2) + t6568)*(t6538 + 236)) + ((.__thread_id_y*2) + ((min((.__thread_id_z*2), 1)*f28.stride.2) + (mask.s0._::x._::xi.base + t6546)))), (t6538 + 236), 4)]) - int16x4(uint8x4((((uint16x4(uint8x4((((uint16x4(unsharp_y[ramp((((((.__thread_id_x*4) + t6567)*2) + (((min((.__thread_id_z*2), 1)*unsharp_y.stride.2) - unsharp_y._::y.extent_realized.s) + t6115)) + -496), 1, 4) aligned(2, 0)]) + uint16x4(unsharp_y[ramp(((((.__thread_id_x*4) + t6567)*2) + (((min((.__thread_id_z*2), 1)*unsharp_y.stride.2) + unsharp_y._::y.extent_realized.s) + t6115)), 1, 4) aligned(2, 0)])) + x4((uint16)1))/x4((uint16)2)))) + uint16x4(unsharp_y[ramp((((((.__thread_id_x*4) + t6567)*2) + ((min((.__thread_id_z*2), 1)*unsharp_y.stride.2) + t6115)) + -248), 1, 4) aligned(2, 0)])) + x4((uint16)1))/x4((uint16)2))))))
                    mask[ramp((((((.__thread_id_x*4) + (t6583 - mask._::y.min_realized.s))*2) + ((((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t4861))*t6542) + (min((.__thread_id_z*2), 1)*mask.stride.2))) + 4), 1, 4) aligned(2, 0)] = (let t6120 = (((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t4859))*(unsharp_y._::y.extent_realized.s + 248)) in (int16x4(f28[ramp(((((((.__thread_id_x*4) + t6583)*2) + t6572)*(t6538 + 236)) + ((.__thread_id_y*2) + ((min((.__thread_id_z*2), 1)*f28.stride.2) + (mask.s0._::x._::xi.base + t6546)))), (t6538 + 236), 4)]) - int16x4(uint8x4((((uint16x4(uint8x4((((uint16x4(unsharp_y[ramp((((((.__thread_id_x*4) + t6567)*2) + (((min((.__thread_id_z*2), 1)*unsharp_y.stride.2) - unsharp_y._::y.extent_realized.s) + t6120)) + -492), 1, 4) aligned(2, 0)]) + uint16x4(unsharp_y[ramp((((((.__thread_id_x*4) + t6567)*2) + (((min((.__thread_id_z*2), 1)*unsharp_y.stride.2) + unsharp_y._::y.extent_realized.s) + t6120)) + 4), 1, 4) aligned(2, 0)])) + x4((uint16)1))/x4((uint16)2)))) + uint16x4(unsharp_y[ramp((((((.__thread_id_x*4) + t6567)*2) + ((min((.__thread_id_z*2), 1)*unsharp_y.stride.2) + t6120)) + -244), 1, 4) aligned(2, 0)])) + x4((uint16)1))/x4((uint16)2))))))
                    mask[ramp(((((.__thread_id_x*4) + (t6583 - mask._::y.min_realized.s))*2) + (((min((.__thread_id_z*2), 1) + 1)*mask.stride.2) + (((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t4854))*t6542))), 1, 4) aligned(2, 0)] = (let t6125 = (((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t4848))*(unsharp_y._::y.extent_realized.s + 248)) in (int16x4(f28[ramp(((((((.__thread_id_x*4) + t6583)*2) + t6568)*(t6538 + 236)) + ((.__thread_id_y*2) + (((min((.__thread_id_z*2), 1) + 1)*f28.stride.2) + (mask.s0._::x._::xi.base + t6539)))), (t6538 + 236), 4)]) - int16x4(uint8x4((((uint16x4(uint8x4((((uint16x4(unsharp_y[ramp((((((.__thread_id_x*4) + t6567)*2) + ((((min((.__thread_id_z*2), 1) + 1)*unsharp_y.stride.2) - unsharp_y._::y.extent_realized.s) + t6125)) + -496), 1, 4) aligned(2, 0)]) + uint16x4(unsharp_y[ramp(((((.__thread_id_x*4) + t6567)*2) + ((((min((.__thread_id_z*2), 1) + 1)*unsharp_y.stride.2) + unsharp_y._::y.extent_realized.s) + t6125)), 1, 4) aligned(2, 0)])) + x4((uint16)1))/x4((uint16)2)))) + uint16x4(unsharp_y[ramp((((((.__thread_id_x*4) + t6567)*2) + (((min((.__thread_id_z*2), 1) + 1)*unsharp_y.stride.2) + t6125)) + -248), 1, 4) aligned(2, 0)])) + x4((uint16)1))/x4((uint16)2))))))
                    mask[ramp((((((.__thread_id_x*4) + (t6583 - mask._::y.min_realized.s))*2) + ((((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t4854))*t6542) + ((min((.__thread_id_z*2), 1) + 1)*mask.stride.2))) + 4), 1, 4) aligned(2, 0)] = (let t6130 = (((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t4848))*(unsharp_y._::y.extent_realized.s + 248)) in (int16x4(f28[ramp(((((((.__thread_id_x*4) + t6583)*2) + t6572)*(t6538 + 236)) + ((.__thread_id_y*2) + (((min((.__thread_id_z*2), 1) + 1)*f28.stride.2) + (mask.s0._::x._::xi.base + t6539)))), (t6538 + 236), 4)]) - int16x4(uint8x4((((uint16x4(uint8x4((((uint16x4(unsharp_y[ramp((((((.__thread_id_x*4) + t6567)*2) + ((((min((.__thread_id_z*2), 1) + 1)*unsharp_y.stride.2) - unsharp_y._::y.extent_realized.s) + t6130)) + -492), 1, 4) aligned(2, 0)]) + uint16x4(unsharp_y[ramp((((((.__thread_id_x*4) + t6567)*2) + ((((min((.__thread_id_z*2), 1) + 1)*unsharp_y.stride.2) + unsharp_y._::y.extent_realized.s) + t6130)) + 4), 1, 4) aligned(2, 0)])) + x4((uint16)1))/x4((uint16)2)))) + uint16x4(unsharp_y[ramp((((((.__thread_id_x*4) + t6567)*2) + (((min((.__thread_id_z*2), 1) + 1)*unsharp_y.stride.2) + t6130)) + -244), 1, 4) aligned(2, 0)])) + x4((uint16)1))/x4((uint16)2))))))
                    mask[ramp(((((.__thread_id_x*4) + (t6583 - mask._::y.min_realized.s))*2) + (((min((.__thread_id_z*2), 1) + 1)*mask.stride.2) + (((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t4861))*t6542))), 1, 4) aligned(2, 0)] = (let t6135 = (((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t4859))*(unsharp_y._::y.extent_realized.s + 248)) in (int16x4(f28[ramp(((((((.__thread_id_x*4) + t6583)*2) + t6568)*(t6538 + 236)) + ((.__thread_id_y*2) + (((min((.__thread_id_z*2), 1) + 1)*f28.stride.2) + (mask.s0._::x._::xi.base + t6546)))), (t6538 + 236), 4)]) - int16x4(uint8x4((((uint16x4(uint8x4((((uint16x4(unsharp_y[ramp((((((.__thread_id_x*4) + t6567)*2) + ((((min((.__thread_id_z*2), 1) + 1)*unsharp_y.stride.2) - unsharp_y._::y.extent_realized.s) + t6135)) + -496), 1, 4) aligned(2, 0)]) + uint16x4(unsharp_y[ramp(((((.__thread_id_x*4) + t6567)*2) + ((((min((.__thread_id_z*2), 1) + 1)*unsharp_y.stride.2) + unsharp_y._::y.extent_realized.s) + t6135)), 1, 4) aligned(2, 0)])) + x4((uint16)1))/x4((uint16)2)))) + uint16x4(unsharp_y[ramp((((((.__thread_id_x*4) + t6567)*2) + (((min((.__thread_id_z*2), 1) + 1)*unsharp_y.stride.2) + t6135)) + -248), 1, 4) aligned(2, 0)])) + x4((uint16)1))/x4((uint16)2))))))
                    mask[ramp((((((.__thread_id_x*4) + (t6583 - mask._::y.min_realized.s))*2) + ((((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t4861))*t6542) + ((min((.__thread_id_z*2), 1) + 1)*mask.stride.2))) + 4), 1, 4) aligned(2, 0)] = (let t6140 = (((.__thread_id_y*2) + (mask.s0._::x._::xi.base + t4859))*(unsharp_y._::y.extent_realized.s + 248)) in (int16x4(f28[ramp(((((((.__thread_id_x*4) + t6583)*2) + t6572)*(t6538 + 236)) + ((.__thread_id_y*2) + (((min((.__thread_id_z*2), 1) + 1)*f28.stride.2) + (mask.s0._::x._::xi.base + t6546)))), (t6538 + 236), 4)]) - int16x4(uint8x4((((uint16x4(uint8x4((((uint16x4(unsharp_y[ramp((((((.__thread_id_x*4) + t6567)*2) + ((((min((.__thread_id_z*2), 1) + 1)*unsharp_y.stride.2) - unsharp_y._::y.extent_realized.s) + t6140)) + -492), 1, 4) aligned(2, 0)]) + uint16x4(unsharp_y[ramp((((((.__thread_id_x*4) + t6567)*2) + ((((min((.__thread_id_z*2), 1) + 1)*unsharp_y.stride.2) + unsharp_y._::y.extent_realized.s) + t6140)) + 4), 1, 4) aligned(2, 0)])) + x4((uint16)1))/x4((uint16)2)))) + uint16x4(unsharp_y[ramp((((((.__thread_id_x*4) + t6567)*2) + (((min((.__thread_id_z*2), 1) + 1)*unsharp_y.stride.2) + t6140)) + -244), 1, 4) aligned(2, 0)])) + x4((uint16)1))/x4((uint16)2))))))
                  }
                }
              }
            }
          }
        }
        _halide_buffer_set_device_dirty(mask.buffer, (uint1)1)
        let halide_device_free_result$2 = halide_device_free(unsharp_y.buffer)
        assert((halide_device_free_result$2 == 0), halide_device_free_result$2)
        free unsharp_y
      }
    }
  }
  let sharpened._::y.min_realized.s = min((processed.extent.1/2), (min((processed.extent.1/2), 32) + 30))
  let sharpened._::y.extent_realized.s = (min(((processed.extent.1/2)*2), (max((((processed.extent.1 + -2)/64)*64), ((((processed.extent.1 + -2)/124)*124) + 60)) + 64)) - (sharpened._::y.min_realized.s*2))
  let sharpened.stride.2 = ((sharpened._::y.extent_realized.s + 124)*(processed.extent.0.required.s + 64))
  allocate sharpened[uint8 * (processed.extent.0.required.s + 64) * (sharpened._::y.extent_realized.s + 124) * 3] if (uint1)0
  let sharpened.buffer = _halide_buffer_init(alloca(size_of_halide_buffer_t()), make_struct((halide_dimension_t *), ((min((processed.extent.0/2), 32)*2) + -64), (processed.extent.0.required.s + 64), (sharpened._::y.extent_realized.s + 124), 0, ((sharpened._::y.min_realized.s*2) + -124), (sharpened._::y.extent_realized.s + 124), 1, 0, 0, 3, sharpened.stride.2, 0), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 1, 8, 3, make_struct((halide_dimension_t *), ((min((processed.extent.0/2), 32)*2) + -64), (processed.extent.0.required.s + 64), (sharpened._::y.extent_realized.s + 124), 0, ((sharpened._::y.min_realized.s*2) + -124), (sharpened._::y.extent_realized.s + 124), 1, 0, 0, 3, sharpened.stride.2, 0), (uint64)0)
  register_destructor("halide_device_free_as_destructor", sharpened.buffer)
  produce sharpened {
    consume mask {
      consume f28 {
        let halide_device_malloc_result = halide_device_malloc(sharpened.buffer, halide_cuda_device_interface())
        assert((halide_device_malloc_result == 0), halide_device_malloc_result)
        let halide_device_malloc_result$2 = halide_device_malloc(mask.buffer, halide_cuda_device_interface())
        assert((halide_device_malloc_result$2 == 0), halide_device_malloc_result$2)
        let halide_device_malloc_result$8 = halide_device_malloc(f28.buffer, halide_cuda_device_interface())
        assert((halide_device_malloc_result$8 == 0), halide_device_malloc_result$8)
        let t4915 = (252 - (mask._::y.min_realized.s*2))
        let t4907 = (248 - (mask._::y.min_realized.s*2))
        let t4917 = (128 - (sharpened._::y.min_realized.s*2))
        let t4913 = (124 - (sharpened._::y.min_realized.s*2))
        let t4908 = (64 - (min((processed.extent.0/2), 32)*2))
        let t4910 = uint8(max(min((sharpen_strength*32.000000f), 255.000000f), 0.000000f))
        let t6602 = (processed.extent.1/2)
        let t6603 = ((t6602*2) - f28._::y.min_realized.s)
        let t6604 = ((t6602 - mask._::y.min_realized.s)*2)
        let t6605 = ((t6602 - sharpened._::y.min_realized.s)*2)
        let t6585 = ((processed.extent.1 + 122)/124)
        let t6584 = ((processed.extent.0 + 62)/64)
        let t6587 = (processed.extent.1/124)
        let t6588 = (f28._::x.extent_realized.s.s - f28._::x.min_realized.s)
        let t6595 = (369 - f28._::y.min_realized.s)
        let t6594 = (365 - f28._::y.min_realized.s)
        let t6593 = (253 - f28._::y.min_realized.s)
        let t6591 = (249 - f28._::y.min_realized.s)
        let t6590 = (235 - f28._::x.min_realized.s)
        let t6586 = (((processed.extent.0/2)*2) + -64)
        let t6599 = (t6604 + 128)
        let t6596 = (t6604 + 124)
        let t6600 = (t6603 + 129)
        let t6597 = (t6603 + 125)
        let t6592 = (sharpened._::y.extent_realized.s + 124)
        let t6589 = (mask._::y.extent_realized.s + 248)
        gpu_block<CUDA> (sharpened.s0._::c.__block_id_z, 0, 3) {
          gpu_block<CUDA> (sharpened.s0._::x._::x.__block_id_y, 0, t6584) {
            gpu_block<CUDA> (sharpened.s0._::y._::y.__block_id_x, 0, t6585) {
              gpu_thread<CUDA> (.__thread_id_y, 0, 64) {
                gpu_thread<CUDA> (.__thread_id_x, 0, 16) {
                  let sharpened.s0._::x._::xi.base = min((sharpened.s0._::x._::x.__block_id_y*64), t6586)
                  if ((sharpened.s0._::y._::y.__block_id_x < t6587)) {
                    if ((.__thread_id_x < 15)) {
                      sharpened[ramp(((.__thread_id_x*8) + ((((sharpened.s0._::x._::xi.base + t4908) + .__thread_id_y)*t6592) + ((sharpened.s0._::y._::y.__block_id_x*124) + ((sharpened.s0._::c.__block_id_z*sharpened.stride.2) + t4913)))), 1, 4) aligned(2, 0)] = uint8x4(max(min((((mask[ramp(((.__thread_id_x*8) + ((((sharpened.s0._::x._::xi.base + t4908) + .__thread_id_y)*t6589) + ((sharpened.s0._::y._::y.__block_id_x*124) + ((mask.stride.2*sharpened.s0._::c.__block_id_z) + t4907)))), 1, 4) aligned(2, 0)]*x4(int16(t4910)))/x4((int16)32)) + int16x4(f28[ramp(((((.__thread_id_x*8) + ((sharpened.s0._::y._::y.__block_id_x*124) + t6591))*(t6588 + 236)) + ((((f28.stride.2*sharpened.s0._::c.__block_id_z) + t6590) + sharpened.s0._::x._::xi.base) + .__thread_id_y)), (t6588 + 236), 4)])), x4((int16)255)), x4((int16)0)))
                      sharpened[ramp(((.__thread_id_x*8) + ((((sharpened.s0._::x._::xi.base + t4908) + .__thread_id_y)*t6592) + ((sharpened.s0._::y._::y.__block_id_x*124) + ((sharpened.s0._::c.__block_id_z*sharpened.stride.2) + t4917)))), 1, 4) aligned(2, 0)] = uint8x4(max(min((((mask[ramp(((.__thread_id_x*8) + ((((sharpened.s0._::x._::xi.base + t4908) + .__thread_id_y)*t6589) + ((sharpened.s0._::y._::y.__block_id_x*124) + ((mask.stride.2*sharpened.s0._::c.__block_id_z) + t4915)))), 1, 4) aligned(2, 0)]*x4(int16(t4910)))/x4((int16)32)) + int16x4(f28[ramp(((((.__thread_id_x*8) + ((sharpened.s0._::y._::y.__block_id_x*124) + t6593))*(t6588 + 236)) + ((((f28.stride.2*sharpened.s0._::c.__block_id_z) + t6590) + sharpened.s0._::x._::xi.base) + .__thread_id_y)), (t6588 + 236), 4)])), x4((int16)255)), x4((int16)0)))
                    } else {
                      sharpened[ramp((((((sharpened.s0._::x._::xi.base + t4908) + .__thread_id_y)*t6592) + ((((sharpened.s0._::y._::y.__block_id_x*62) - sharpened._::y.min_realized.s)*2) + (sharpened.s0._::c.__block_id_z*sharpened.stride.2))) + 240), 1, 4) aligned(2, 0)] = uint8x4(max(min((((mask[ramp((((((sharpened.s0._::x._::xi.base + t4908) + .__thread_id_y)*t6589) + ((((sharpened.s0._::y._::y.__block_id_x*62) - mask._::y.min_realized.s)*2) + (mask.stride.2*sharpened.s0._::c.__block_id_z))) + 364), 1, 4) aligned(2, 0)]*x4(int16(t4910)))/x4((int16)32)) + int16x4(f28[ramp((((((sharpened.s0._::y._::y.__block_id_x*124) + t6594)*(t6588 + 236)) + (((f28.stride.2*sharpened.s0._::c.__block_id_z) + t6590) + sharpened.s0._::x._::xi.base)) + .__thread_id_y), (t6588 + 236), 4)])), x4((int16)255)), x4((int16)0)))
                      sharpened[ramp((((((sharpened.s0._::x._::xi.base + t4908) + .__thread_id_y)*t6592) + ((((sharpened.s0._::y._::y.__block_id_x*62) - sharpened._::y.min_realized.s)*2) + (sharpened.s0._::c.__block_id_z*sharpened.stride.2))) + 244), 1, 4) aligned(2, 0)] = uint8x4(max(min((((mask[ramp((((((sharpened.s0._::x._::xi.base + t4908) + .__thread_id_y)*t6589) + ((((sharpened.s0._::y._::y.__block_id_x*62) - mask._::y.min_realized.s)*2) + (mask.stride.2*sharpened.s0._::c.__block_id_z))) + 368), 1, 4) aligned(2, 0)]*x4(int16(t4910)))/x4((int16)32)) + int16x4(f28[ramp((((((sharpened.s0._::y._::y.__block_id_x*124) + t6595)*(t6588 + 236)) + (((f28.stride.2*sharpened.s0._::c.__block_id_z) + t6590) + sharpened.s0._::x._::xi.base)) + .__thread_id_y), (t6588 + 236), 4)])), x4((int16)255)), x4((int16)0)))
                    }
                  } else {
                    sharpened[ramp((min((.__thread_id_x*8), 116) + ((((sharpened.s0._::x._::xi.base + t4908) + .__thread_id_y)*t6592) + ((sharpened.s0._::c.__block_id_z*sharpened.stride.2) + t6605))), 1, 4) aligned(2, 0)] = uint8x4(max(min((((mask[ramp((min((.__thread_id_x*8), 116) + ((((sharpened.s0._::x._::xi.base + t4908) + .__thread_id_y)*t6589) + ((mask.stride.2*sharpened.s0._::c.__block_id_z) + t6596))), 1, 4) aligned(2, 0)]*x4(int16(t4910)))/x4((int16)32)) + int16x4(f28[ramp((((min((.__thread_id_x*8), 116) + t6597)*(t6588 + 236)) + ((((f28.stride.2*sharpened.s0._::c.__block_id_z) + t6590) + sharpened.s0._::x._::xi.base) + .__thread_id_y)), (t6588 + 236), 4)])), x4((int16)255)), x4((int16)0)))
                    sharpened[ramp(((min((.__thread_id_x*8), 116) + ((((sharpened.s0._::x._::xi.base + t4908) + .__thread_id_y)*t6592) + ((sharpened.s0._::c.__block_id_z*sharpened.stride.2) + t6605))) + 4), 1, 4) aligned(2, 0)] = uint8x4(max(min((((mask[ramp((min((.__thread_id_x*8), 116) + ((((sharpened.s0._::x._::xi.base + t4908) + .__thread_id_y)*t6589) + ((mask.stride.2*sharpened.s0._::c.__block_id_z) + t6599))), 1, 4) aligned(2, 0)]*x4(int16(t4910)))/x4((int16)32)) + int16x4(f28[ramp((((min((.__thread_id_x*8), 116) + t6600)*(t6588 + 236)) + ((((f28.stride.2*sharpened.s0._::c.__block_id_z) + t6590) + sharpened.s0._::x._::xi.base) + .__thread_id_y)), (t6588 + 236), 4)])), x4((int16)255)), x4((int16)0)))
                  }
                }
              }
            }
          }
        }
        let halide_device_free_result$3 = halide_device_free(f28.buffer)
        assert((halide_device_free_result$3 == 0), halide_device_free_result$3)
        free f28
        let halide_device_free_result$1 = halide_device_free(mask.buffer)
        assert((halide_device_free_result$1 == 0), halide_device_free_result$1)
        free mask
        _halide_buffer_set_device_dirty(sharpened.buffer, (uint1)1)
      }
    }
  }
  assert(((0 <= processed.min.1) && (((processed.extent.1 % 2) + processed.min.1) <= 0)), halide_error_explicit_bounds_too_small("_::y", "processed", 0, (((processed.extent.1/2)*2) + -1), processed.min.1, ((processed.extent.1 + processed.min.1) + -1)))
  assert(((0 <= processed.min.0) && (((processed.extent.0 % 2) + processed.min.0) <= 0)), halide_error_explicit_bounds_too_small("_::x", "processed", 0, (((processed.extent.0/2)*2) + -1), processed.min.0, ((processed.extent.0 + processed.min.0) + -1)))
  assert(((0 <= processed.min.2) && ((processed.extent.2 + processed.min.2) <= 3)), halide_error_explicit_bounds_too_small("_::c", "processed", 0, 2, processed.min.2, ((processed.extent.2 + processed.min.2) + -1)))
  produce processed {
    consume sharpened {
      let halide_copy_to_device_result$2 = halide_copy_to_device(processed.buffer, halide_cuda_device_interface())
      assert((halide_copy_to_device_result$2 == 0), halide_copy_to_device_result$2)
      let t4952.s = (processed.stride.2 - (processed.min.1*processed.stride.1))
      let t4953.s = ((processed.stride.2*2) - (processed.min.1*processed.stride.1))
      let t4937 = (124 - (sharpened._::y.min_realized.s*2))
      let t4941.s = (sharpened.stride.2 - (sharpened._::y.min_realized.s*2))
      let t6622 = (t4952.s - processed.min.0)
      let t6623 = (t4953.s - processed.min.0)
      let t6624 = ((processed.min.1*processed.stride.1) + processed.min.0)
      let t6625 = (processed.extent.0/2)
      let t6610 = min(t6625, 32)
      let t6606 = ((processed.extent.1 + 62)/64)
      let t6607 = ((processed.extent.0 + 62)/64)
      let t6609 = (processed.extent.0/64)
      let t6617 = (max(t6625, 32) + -32)
      let t6608 = (((processed.extent.1/2)*2) + -64)
      let t6615 = (((sharpened.stride.2 - sharpened._::y.min_realized.s)*2) + 124)
      let t6613 = (t4941.s + 124)
      let t6611 = (sharpened._::y.extent_realized.s + 124)
      gpu_block<CUDA> (processed.s0._::y._::y.__block_id_y, 0, t6606) {
        gpu_block<CUDA> (processed.s0._::x._::x.__block_id_x, 0, t6607) {
          gpu_thread<CUDA> (.__thread_id_y, 0, 64) {
            gpu_thread<CUDA> (.__thread_id_x, 0, 16) {
              let processed.s0._::y._::yi.base = min((processed.s0._::y._::y.__block_id_y*64), t6608)
              if ((processed.s0._::x._::x.__block_id_x < t6609)) {
                processed[ramp(((((processed.s0._::x._::x.__block_id_x*16) + .__thread_id_x)*4) + (((.__thread_id_y + processed.s0._::y._::yi.base)*processed.stride.1) - t6624)), 1, 4)] = sharpened[ramp(((((((((processed.s0._::x._::x.__block_id_x*16) + .__thread_id_x)*2) - t6610)*2) + 64)*t6611) + ((processed.s0._::y._::yi.base + t4937) + .__thread_id_y)), t6611, 4)]
                processed[ramp(((((processed.s0._::x._::x.__block_id_x*16) + .__thread_id_x)*4) + (((.__thread_id_y + processed.s0._::y._::yi.base)*processed.stride.1) + t6622)), 1, 4)] = sharpened[ramp(((((((((processed.s0._::x._::x.__block_id_x*16) + .__thread_id_x)*2) - t6610)*2) + 64)*t6611) + ((processed.s0._::y._::yi.base + t6613) + .__thread_id_y)), t6611, 4)]
                processed[ramp(((((processed.s0._::x._::x.__block_id_x*16) + .__thread_id_x)*4) + (((.__thread_id_y + processed.s0._::y._::yi.base)*processed.stride.1) + t6623)), 1, 4)] = sharpened[ramp(((((((((processed.s0._::x._::x.__block_id_x*16) + .__thread_id_x)*2) - t6610)*2) + 64)*t6611) + ((processed.s0._::y._::yi.base + t6615) + .__thread_id_y)), t6611, 4)]
              } else {
                processed[ramp((((((.__thread_id_x*2) + t6625)*2) + (((.__thread_id_y + processed.s0._::y._::yi.base)*processed.stride.1) - t6624)) + -64), 1, 4)] = sharpened[ramp((((((.__thread_id_x*2) + t6617)*t6611)*2) + ((processed.s0._::y._::yi.base + t4937) + .__thread_id_y)), t6611, 4)]
                processed[ramp((((((.__thread_id_x*2) + t6625)*2) + (((.__thread_id_y + processed.s0._::y._::yi.base)*processed.stride.1) + t6622)) + -64), 1, 4)] = sharpened[ramp((((((.__thread_id_x*2) + t6617)*t6611)*2) + ((processed.s0._::y._::yi.base + t6613) + .__thread_id_y)), t6611, 4)]
                processed[ramp((((((.__thread_id_x*2) + t6625)*2) + (((.__thread_id_y + processed.s0._::y._::yi.base)*processed.stride.1) + t6623)) + -64), 1, 4)] = sharpened[ramp((((((.__thread_id_x*2) + t6617)*t6611)*2) + ((processed.s0._::y._::yi.base + t6615) + .__thread_id_y)), t6611, 4)]
              }
            }
          }
        }
      }
      _halide_buffer_set_device_dirty(processed.buffer, (uint1)1)
      let halide_device_free_result = halide_device_free(sharpened.buffer)
      assert((halide_device_free_result == 0), halide_device_free_result)
      free sharpened
    }
  }
}


Skipping Hexagon offload...
Module.compile(): stmt_name ./bin/camera_pipe_classic_auto_schedule.stmt
Constructing CUDA device codegen
Target triple of initial module: x86_64--linux-gnu
Generating llvm bitcode...
Generating llvm bitcode prolog for function camera_pipe_classic_auto_schedule...
Generating llvm bitcode for function camera_pipe_classic_auto_schedule...
Generating llvm bitcode for kernel...
Generating llvm bitcode for kernel...
Generating llvm bitcode for kernel...
Generating llvm bitcode for kernel...
Generating llvm bitcode for kernel...
Generating llvm bitcode for kernel...
Generating llvm bitcode for kernel...
Generating llvm bitcode for kernel...
Generating llvm bitcode for kernel...
Generating llvm bitcode for kernel...
Generating llvm bitcode for kernel...
Generating llvm bitcode for kernel...
Generating llvm bitcode for kernel...
PTX kernel:
//
// Generated by LLVM NVPTX Back-End
//

.version 3.2
.target sm_35
.address_size 64

	// .globl	kernel_curve_s0____x____x___block_id_x // -- Begin function kernel_curve_s0____x____x___block_id_x
                                        // @kernel_curve_s0____x____x___block_id_x
.visible .entry kernel_curve_s0____x____x___block_id_x(
	.param .u32 kernel_curve_s0____x____x___block_id_x_param_0,
	.param .f32 kernel_curve_s0____x____x___block_id_x_param_1,
	.param .f32 kernel_curve_s0____x____x___block_id_x_param_2,
	.param .f32 kernel_curve_s0____x____x___block_id_x_param_3,
	.param .u32 kernel_curve_s0____x____x___block_id_x_param_4,
	.param .f32 kernel_curve_s0____x____x___block_id_x_param_5,
	.param .u32 kernel_curve_s0____x____x___block_id_x_param_6,
	.param .u64 kernel_curve_s0____x____x___block_id_x_param_7
)
{
	.reg .pred 	%p<166>;
	.reg .b16 	%rs<89>;
	.reg .f32 	%f<1521>;
	.reg .b32 	%r<380>;
	.reg .b64 	%rd<9>;

// %bb.0:                               // %entry
	ld.param.u32 	%r7, [kernel_curve_s0____x____x___block_id_x_param_6];
	ld.param.f32 	%f14, [kernel_curve_s0____x____x___block_id_x_param_5];
	ld.param.f32 	%f13, [kernel_curve_s0____x____x___block_id_x_param_3];
	ld.param.u32 	%r6, [kernel_curve_s0____x____x___block_id_x_param_0];
	ld.param.u64 	%rd2, [kernel_curve_s0____x____x___block_id_x_param_7];
	cvta.to.global.u64 	%rd1, %rd2;
	ld.param.f32 	%f1, [kernel_curve_s0____x____x___block_id_x_param_1];
	ld.param.f32 	%f5, [kernel_curve_s0____x____x___block_id_x_param_2];
	mov.u32 	%r8, %ctaid.x;
	mov.u32 	%r9, %tid.x;
	ld.param.u32 	%r10, [kernel_curve_s0____x____x___block_id_x_param_4];
	setp.lt.s32 	%p1, %r8, %r10;
	shl.b32 	%r11, %r8, 5;
	add.s32 	%r12, %r11, %r9;
	shl.b32 	%r1, %r12, 4;
	sub.s32 	%r2, %r1, %r6;
	add.s32 	%r13, %r2, 1;
	add.s32 	%r14, %r2, 2;
	add.s32 	%r15, %r2, 3;
	cvt.rn.f32.s32 	%f15, %r15;
	cvt.rn.f32.s32 	%f16, %r14;
	cvt.rn.f32.s32 	%f17, %r13;
	cvt.rn.f32.s32 	%f18, %r2;
	mul.ftz.f32 	%f19, %f1, %f18;
	mul.ftz.f32 	%f20, %f1, %f17;
	mul.ftz.f32 	%f21, %f1, %f16;
	mul.ftz.f32 	%f22, %f1, %f15;
	min.ftz.f32 	%f23, %f22, 0f3F800000;
	min.ftz.f32 	%f24, %f21, 0f3F800000;
	min.ftz.f32 	%f25, %f20, 0f3F800000;
	min.ftz.f32 	%f26, %f19, 0f3F800000;
	max.ftz.f32 	%f27, %f26, 0f00000000;
	max.ftz.f32 	%f28, %f25, 0f00000000;
	max.ftz.f32 	%f29, %f24, 0f00000000;
	max.ftz.f32 	%f30, %f23, 0f00000000;
	setp.le.ftz.f32 	%p2, %f30, 0f00000000;
	setp.le.ftz.f32 	%p3, %f29, 0f00000000;
	setp.le.ftz.f32 	%p4, %f28, 0f00000000;
	setp.le.ftz.f32 	%p5, %f27, 0f00000000;
	selp.f32 	%f31, 0f3F800000, %f27, %p5;
	selp.f32 	%f32, 0f3F800000, %f28, %p4;
	selp.f32 	%f33, 0f3F800000, %f29, %p3;
	selp.f32 	%f34, 0f3F800000, %f30, %p2;
	mov.b32 	%r16, %f34;
	mov.b32 	%r17, %f33;
	mov.b32 	%r18, %f32;
	mov.b32 	%r19, %f31;
	and.b32  	%r20, %r19, -2139095041;
	and.b32  	%r21, %r18, -2139095041;
	and.b32  	%r22, %r17, -2139095041;
	and.b32  	%r23, %r16, -2139095041;
	shr.s32 	%r24, %r23, 22;
	shr.s32 	%r25, %r22, 22;
	shr.s32 	%r26, %r21, 22;
	shr.s32 	%r27, %r20, 22;
	mov.u32 	%r28, 127;
	sub.s32 	%r29, %r28, %r27;
	sub.s32 	%r30, %r28, %r26;
	sub.s32 	%r31, %r28, %r25;
	sub.s32 	%r32, %r28, %r24;
	shl.b32 	%r33, %r32, 23;
	shl.b32 	%r34, %r31, 23;
	shl.b32 	%r35, %r30, 23;
	shl.b32 	%r36, %r29, 23;
	or.b32  	%r37, %r36, %r20;
	or.b32  	%r38, %r35, %r21;
	or.b32  	%r39, %r34, %r22;
	or.b32  	%r40, %r33, %r23;
	mov.b32 	%f35, %r40;
	mov.b32 	%f36, %r39;
	mov.b32 	%f37, %r38;
	mov.b32 	%f38, %r37;
	add.ftz.f32 	%f39, %f38, 0fBF800000;
	add.ftz.f32 	%f40, %f37, 0fBF800000;
	add.ftz.f32 	%f41, %f36, 0fBF800000;
	add.ftz.f32 	%f42, %f35, 0fBF800000;
	neg.ftz.f32 	%f43, %f42;
	fma.rn.ftz.f32 	%f44, %f35, %f42, %f43;
	neg.ftz.f32 	%f45, %f41;
	fma.rn.ftz.f32 	%f46, %f36, %f41, %f45;
	neg.ftz.f32 	%f47, %f40;
	fma.rn.ftz.f32 	%f48, %f37, %f40, %f47;
	neg.ftz.f32 	%f49, %f39;
	fma.rn.ftz.f32 	%f50, %f38, %f39, %f49;
	fma.rn.ftz.f32 	%f51, %f50, 0f3D5162F5, 0f3E19502F;
	fma.rn.ftz.f32 	%f52, %f48, 0f3D5162F5, 0f3E19502F;
	fma.rn.ftz.f32 	%f53, %f46, 0f3D5162F5, 0f3E19502F;
	fma.rn.ftz.f32 	%f54, %f44, 0f3D5162F5, 0f3E19502F;
	fma.rn.ftz.f32 	%f55, %f44, %f54, 0f3E4C9A1F;
	fma.rn.ftz.f32 	%f56, %f46, %f53, 0f3E4C9A1F;
	fma.rn.ftz.f32 	%f57, %f48, %f52, 0f3E4C9A1F;
	fma.rn.ftz.f32 	%f58, %f50, %f51, 0f3E4C9A1F;
	fma.rn.ftz.f32 	%f59, %f50, %f58, 0f3EAAAACD;
	fma.rn.ftz.f32 	%f60, %f48, %f57, 0f3EAAAACD;
	fma.rn.ftz.f32 	%f61, %f46, %f56, 0f3EAAAACD;
	fma.rn.ftz.f32 	%f62, %f44, %f55, 0f3EAAAACD;
	fma.rn.ftz.f32 	%f63, %f44, %f62, 0f3F800000;
	fma.rn.ftz.f32 	%f64, %f46, %f61, 0f3F800000;
	fma.rn.ftz.f32 	%f65, %f48, %f60, 0f3F800000;
	fma.rn.ftz.f32 	%f66, %f50, %f59, 0f3F800000;
	neg.ftz.f32 	%f67, %f66;
	fma.rn.ftz.f32 	%f68, %f38, %f66, %f67;
	neg.ftz.f32 	%f69, %f65;
	fma.rn.ftz.f32 	%f70, %f37, %f65, %f69;
	neg.ftz.f32 	%f71, %f64;
	fma.rn.ftz.f32 	%f72, %f36, %f64, %f71;
	neg.ftz.f32 	%f73, %f63;
	fma.rn.ftz.f32 	%f74, %f35, %f63, %f73;
	fma.rn.ftz.f32 	%f75, %f50, 0fBDF18A20, 0fBE2CAABC;
	fma.rn.ftz.f32 	%f76, %f48, 0fBDF18A20, 0fBE2CAABC;
	fma.rn.ftz.f32 	%f77, %f46, 0fBDF18A20, 0fBE2CAABC;
	fma.rn.ftz.f32 	%f78, %f44, 0fBDF18A20, 0fBE2CAABC;
	fma.rn.ftz.f32 	%f79, %f44, %f78, 0fBE7FE8F6;
	fma.rn.ftz.f32 	%f80, %f46, %f77, 0fBE7FE8F6;
	fma.rn.ftz.f32 	%f81, %f48, %f76, 0fBE7FE8F6;
	fma.rn.ftz.f32 	%f82, %f50, %f75, 0fBE7FE8F6;
	fma.rn.ftz.f32 	%f83, %f50, %f82, 0fBF000012;
	fma.rn.ftz.f32 	%f84, %f48, %f81, 0fBF000012;
	fma.rn.ftz.f32 	%f85, %f46, %f80, 0fBF000012;
	fma.rn.ftz.f32 	%f86, %f44, %f79, 0fBF000012;
	fma.rn.ftz.f32 	%f87, %f44, %f86, %f74;
	fma.rn.ftz.f32 	%f88, %f46, %f85, %f72;
	fma.rn.ftz.f32 	%f89, %f48, %f84, %f70;
	fma.rn.ftz.f32 	%f90, %f50, %f83, %f68;
	shr.s32 	%r41, %r16, 23;
	shr.s32 	%r42, %r17, 23;
	shr.s32 	%r43, %r18, 23;
	shr.s32 	%r44, %r19, 23;
	sub.s32 	%r45, %r44, %r29;
	sub.s32 	%r46, %r43, %r30;
	sub.s32 	%r47, %r42, %r31;
	sub.s32 	%r48, %r41, %r32;
	cvt.rn.f32.s32 	%f91, %r48;
	cvt.rn.f32.s32 	%f92, %r47;
	cvt.rn.f32.s32 	%f93, %r46;
	cvt.rn.f32.s32 	%f94, %r45;
	fma.rn.ftz.f32 	%f95, %f94, 0f3F317218, %f90;
	fma.rn.ftz.f32 	%f96, %f93, 0f3F317218, %f89;
	fma.rn.ftz.f32 	%f97, %f92, 0f3F317218, %f88;
	fma.rn.ftz.f32 	%f98, %f91, 0f3F317218, %f87;
	selp.f32 	%f99, 0fFF800000, %f98, %p2;
	selp.f32 	%f100, 0fFF800000, %f97, %p3;
	selp.f32 	%f101, 0fFF800000, %f96, %p4;
	selp.f32 	%f102, 0fFF800000, %f95, %p5;
	mul.ftz.f32 	%f103, %f5, %f102;
	mul.ftz.f32 	%f104, %f5, %f101;
	mul.ftz.f32 	%f105, %f5, %f100;
	mul.ftz.f32 	%f106, %f5, %f99;
	mul.ftz.f32 	%f107, %f106, 0f3FB8AA3B;
	mul.ftz.f32 	%f108, %f105, 0f3FB8AA3B;
	mul.ftz.f32 	%f109, %f104, 0f3FB8AA3B;
	mul.ftz.f32 	%f110, %f103, 0f3FB8AA3B;
	cvt.rmi.ftz.f32.f32 	%f111, %f110;
	cvt.rmi.ftz.f32.f32 	%f112, %f109;
	cvt.rmi.ftz.f32.f32 	%f113, %f108;
	cvt.rmi.ftz.f32.f32 	%f114, %f107;
	cvt.rzi.ftz.s32.f32 	%r49, %f112;
	cvt.rzi.ftz.s32.f32 	%r50, %f113;
	cvt.rzi.ftz.s32.f32 	%r51, %f114;
	cvt.rzi.ftz.s32.f32 	%r52, %f111;
	mul.ftz.f32 	%f115, %f111, 0fBF317200;
	mul.ftz.f32 	%f116, %f112, 0fBF317200;
	fma.rn.ftz.f32 	%f117, %f5, %f101, %f116;
	mul.ftz.f32 	%f118, %f113, 0fBF317200;
	fma.rn.ftz.f32 	%f119, %f5, %f100, %f118;
	mul.ftz.f32 	%f120, %f114, 0fBF317200;
	fma.rn.ftz.f32 	%f121, %f5, %f99, %f120;
	fma.rn.ftz.f32 	%f122, %f5, %f102, %f115;
	fma.rn.ftz.f32 	%f123, %f111, 0fB5BFBE8E, %f122;
	fma.rn.ftz.f32 	%f124, %f114, 0fB5BFBE8E, %f121;
	fma.rn.ftz.f32 	%f125, %f113, 0fB5BFBE8E, %f119;
	fma.rn.ftz.f32 	%f126, %f112, 0fB5BFBE8E, %f117;
	mul.ftz.f32 	%f127, %f126, %f126;
	mul.ftz.f32 	%f128, %f125, %f125;
	mul.ftz.f32 	%f129, %f124, %f124;
	mul.ftz.f32 	%f130, %f123, %f123;
	add.s32 	%r53, %r52, 127;
	add.s32 	%r54, %r51, 127;
	add.s32 	%r55, %r50, 127;
	add.s32 	%r56, %r49, 127;
	setp.gt.s32 	%p6, %r56, 0;
	setp.gt.s32 	%p7, %r55, 0;
	setp.gt.s32 	%p8, %r54, 0;
	setp.gt.s32 	%p9, %r53, 0;
	setp.lt.s32 	%p10, %r53, 255;
	setp.lt.s32 	%p11, %r54, 255;
	setp.lt.s32 	%p12, %r55, 255;
	setp.lt.s32 	%p13, %r56, 255;
	fma.rn.ftz.f32 	%f131, %f130, 0f39A797F3, 0f3C0B192A;
	fma.rn.ftz.f32 	%f132, %f129, 0f39A797F3, 0f3C0B192A;
	fma.rn.ftz.f32 	%f133, %f128, 0f39A797F3, 0f3C0B192A;
	fma.rn.ftz.f32 	%f134, %f127, 0f39A797F3, 0f3C0B192A;
	fma.rn.ftz.f32 	%f135, %f127, %f134, 0f3E2AAE1F;
	fma.rn.ftz.f32 	%f136, %f128, %f133, 0f3E2AAE1F;
	fma.rn.ftz.f32 	%f137, %f129, %f132, 0f3E2AAE1F;
	fma.rn.ftz.f32 	%f138, %f130, %f131, 0f3E2AAE1F;
	fma.rn.ftz.f32 	%f139, %f130, %f138, 0f3F800000;
	fma.rn.ftz.f32 	%f140, %f129, %f137, 0f3F800000;
	fma.rn.ftz.f32 	%f141, %f128, %f136, 0f3F800000;
	fma.rn.ftz.f32 	%f142, %f127, %f135, 0f3F800000;
	fma.rn.ftz.f32 	%f143, %f130, 0f3A9C2E66, 0f3D2A66BC;
	fma.rn.ftz.f32 	%f144, %f129, 0f3A9C2E66, 0f3D2A66BC;
	fma.rn.ftz.f32 	%f145, %f128, 0f3A9C2E66, 0f3D2A66BC;
	fma.rn.ftz.f32 	%f146, %f127, 0f3A9C2E66, 0f3D2A66BC;
	fma.rn.ftz.f32 	%f147, %f127, %f146, 0f3EFFFFDE;
	fma.rn.ftz.f32 	%f148, %f128, %f145, 0f3EFFFFDE;
	fma.rn.ftz.f32 	%f149, %f129, %f144, 0f3EFFFFDE;
	fma.rn.ftz.f32 	%f150, %f130, %f143, 0f3EFFFFDE;
	fma.rn.ftz.f32 	%f151, %f130, %f150, 0f3F800000;
	fma.rn.ftz.f32 	%f152, %f129, %f149, 0f3F800000;
	fma.rn.ftz.f32 	%f153, %f128, %f148, 0f3F800000;
	fma.rn.ftz.f32 	%f154, %f127, %f147, 0f3F800000;
	fma.rn.ftz.f32 	%f155, %f126, %f142, %f154;
	fma.rn.ftz.f32 	%f156, %f125, %f141, %f153;
	fma.rn.ftz.f32 	%f157, %f124, %f140, %f152;
	fma.rn.ftz.f32 	%f158, %f123, %f139, %f151;
	shl.b32 	%r57, %r53, 23;
	shl.b32 	%r58, %r54, 23;
	shl.b32 	%r59, %r55, 23;
	shl.b32 	%r60, %r56, 23;
	mov.b32 	%f159, %r60;
	mov.b32 	%f160, %r59;
	mov.b32 	%f161, %r58;
	mov.b32 	%f162, %r57;
	mul.ftz.f32 	%f163, %f158, %f162;
	mul.ftz.f32 	%f164, %f157, %f161;
	mul.ftz.f32 	%f165, %f156, %f160;
	mul.ftz.f32 	%f166, %f155, %f159;
	selp.f32 	%f167, %f166, 0f7F800000, %p13;
	selp.f32 	%f168, %f165, 0f7F800000, %p12;
	selp.f32 	%f169, %f164, 0f7F800000, %p11;
	selp.f32 	%f170, %f163, 0f7F800000, %p10;
	selp.f32 	%f9, %f170, 0f00000000, %p9;
	selp.f32 	%f12, %f169, 0f00000000, %p8;
	selp.f32 	%f11, %f168, 0f00000000, %p7;
	selp.f32 	%f10, %f167, 0f00000000, %p6;
	@%p1 bra 	LBB0_2;
	bra.uni 	LBB0_1;
LBB0_2:                                 // %false_bb
	add.s32 	%r220, %r1, 1;
	add.s32 	%r221, %r1, 2;
	add.s32 	%r222, %r1, 3;
	setp.lt.s32 	%p82, %r6, %r222;
	setp.lt.s32 	%p83, %r6, %r221;
	setp.lt.s32 	%p84, %r6, %r220;
	setp.lt.s32 	%p85, %r6, %r1;
	setp.lt.s32 	%p86, %r7, %r1;
	setp.lt.s32 	%p87, %r7, %r220;
	setp.lt.s32 	%p88, %r7, %r221;
	setp.lt.s32 	%p89, %r7, %r222;
	setp.gt.ftz.f32 	%p90, %f9, 0f3F000000;
	setp.gt.ftz.f32 	%p91, %f10, 0f3F000000;
	setp.gt.ftz.f32 	%p92, %f11, 0f3F000000;
	setp.gt.ftz.f32 	%p93, %f12, 0f3F000000;
	mov.f32 	%f846, 0f3F800000;
	sub.ftz.f32 	%f847, %f846, %f12;
	sub.ftz.f32 	%f848, %f846, %f11;
	sub.ftz.f32 	%f849, %f846, %f10;
	sub.ftz.f32 	%f850, %f846, %f9;
	neg.ftz.f32 	%f851, %f14;
	fma.rn.ftz.f32 	%f852, %f851, %f850, %f13;
	fma.rn.ftz.f32 	%f853, %f851, %f849, %f13;
	fma.rn.ftz.f32 	%f854, %f851, %f848, %f13;
	fma.rn.ftz.f32 	%f855, %f851, %f847, %f13;
	sub.ftz.f32 	%f856, %f855, 0f40000000;
	sub.ftz.f32 	%f857, %f854, 0f40000000;
	sub.ftz.f32 	%f858, %f853, 0f40000000;
	sub.ftz.f32 	%f859, %f852, 0f40000000;
	fma.rn.ftz.f32 	%f860, %f850, %f859, 0f3F800000;
	fma.rn.ftz.f32 	%f861, %f849, %f858, 0f3F800000;
	fma.rn.ftz.f32 	%f862, %f848, %f857, 0f3F800000;
	fma.rn.ftz.f32 	%f863, %f847, %f856, 0f3F800000;
	neg.ftz.f32 	%f864, %f13;
	fma.rn.ftz.f32 	%f865, %f14, %f9, %f864;
	fma.rn.ftz.f32 	%f866, %f14, %f10, %f864;
	fma.rn.ftz.f32 	%f867, %f14, %f11, %f864;
	fma.rn.ftz.f32 	%f868, %f14, %f12, %f864;
	add.ftz.f32 	%f869, %f868, 0f40000000;
	add.ftz.f32 	%f870, %f867, 0f40000000;
	add.ftz.f32 	%f871, %f866, 0f40000000;
	add.ftz.f32 	%f872, %f865, 0f40000000;
	mul.ftz.f32 	%f873, %f9, %f872;
	mul.ftz.f32 	%f874, %f10, %f871;
	mul.ftz.f32 	%f875, %f11, %f870;
	mul.ftz.f32 	%f876, %f12, %f869;
	selp.f32 	%f877, %f863, %f876, %p93;
	selp.f32 	%f878, %f862, %f875, %p92;
	selp.f32 	%f879, %f861, %f874, %p91;
	selp.f32 	%f880, %f860, %f873, %p90;
	mul.ftz.f32 	%f881, %f880, 0f437F0000;
	mul.ftz.f32 	%f882, %f879, 0f437F0000;
	mul.ftz.f32 	%f883, %f878, 0f437F0000;
	mul.ftz.f32 	%f884, %f877, 0f437F0000;
	min.ftz.f32 	%f885, %f884, 0f437E8000;
	min.ftz.f32 	%f886, %f883, 0f437E8000;
	min.ftz.f32 	%f887, %f882, 0f437E8000;
	min.ftz.f32 	%f888, %f881, 0f437E8000;
	max.ftz.f32 	%f889, %f888, 0fBF000000;
	max.ftz.f32 	%f890, %f887, 0fBF000000;
	max.ftz.f32 	%f891, %f886, 0fBF000000;
	max.ftz.f32 	%f892, %f885, 0fBF000000;
	add.ftz.f32 	%f893, %f892, 0f3F000000;
	add.ftz.f32 	%f894, %f891, 0f3F000000;
	add.ftz.f32 	%f895, %f890, 0f3F000000;
	add.ftz.f32 	%f896, %f889, 0f3F000000;
	cvt.rzi.ftz.u16.f32 	%rs41, %f896;
	cvt.rzi.ftz.u16.f32 	%rs42, %f895;
	cvt.rzi.ftz.u16.f32 	%rs43, %f894;
	cvt.rzi.ftz.u16.f32 	%rs44, %f893;
	selp.b16 	%rs45, -1, %rs44, %p89;
	selp.b16 	%rs46, -1, %rs43, %p88;
	selp.b16 	%rs47, -1, %rs42, %p87;
	selp.b16 	%rs48, -1, %rs41, %p86;
	selp.b16 	%rs49, %rs48, 0, %p85;
	selp.b16 	%rs50, %rs47, 0, %p84;
	selp.b16 	%rs51, %rs46, 0, %p83;
	selp.b16 	%rs52, %rs45, 0, %p82;
	cvt.u64.u32 	%rd5, %r1;
	add.s64 	%rd6, %rd1, %rd5;
	add.s32 	%r223, %r2, 4;
	add.s32 	%r224, %r2, 5;
	add.s32 	%r225, %r2, 6;
	add.s32 	%r226, %r2, 7;
	cvt.rn.f32.s32 	%f897, %r226;
	cvt.rn.f32.s32 	%f898, %r225;
	cvt.rn.f32.s32 	%f899, %r224;
	cvt.rn.f32.s32 	%f900, %r223;
	mul.ftz.f32 	%f901, %f1, %f900;
	mul.ftz.f32 	%f902, %f1, %f899;
	mul.ftz.f32 	%f903, %f1, %f898;
	mul.ftz.f32 	%f904, %f1, %f897;
	min.ftz.f32 	%f905, %f904, 0f3F800000;
	min.ftz.f32 	%f906, %f903, 0f3F800000;
	min.ftz.f32 	%f907, %f902, 0f3F800000;
	min.ftz.f32 	%f908, %f901, 0f3F800000;
	max.ftz.f32 	%f909, %f908, 0f00000000;
	max.ftz.f32 	%f910, %f907, 0f00000000;
	max.ftz.f32 	%f911, %f906, 0f00000000;
	max.ftz.f32 	%f912, %f905, 0f00000000;
	setp.le.ftz.f32 	%p94, %f912, 0f00000000;
	setp.le.ftz.f32 	%p95, %f911, 0f00000000;
	setp.le.ftz.f32 	%p96, %f910, 0f00000000;
	setp.le.ftz.f32 	%p97, %f909, 0f00000000;
	selp.f32 	%f913, 0f3F800000, %f909, %p97;
	selp.f32 	%f914, 0f3F800000, %f910, %p96;
	selp.f32 	%f915, 0f3F800000, %f911, %p95;
	selp.f32 	%f916, 0f3F800000, %f912, %p94;
	mov.b32 	%r227, %f916;
	mov.b32 	%r228, %f915;
	mov.b32 	%r229, %f914;
	mov.b32 	%r230, %f913;
	and.b32  	%r231, %r230, -2139095041;
	and.b32  	%r232, %r229, -2139095041;
	and.b32  	%r233, %r228, -2139095041;
	and.b32  	%r234, %r227, -2139095041;
	shr.s32 	%r235, %r234, 22;
	shr.s32 	%r236, %r233, 22;
	shr.s32 	%r237, %r232, 22;
	shr.s32 	%r238, %r231, 22;
	sub.s32 	%r240, %r28, %r238;
	sub.s32 	%r241, %r28, %r237;
	sub.s32 	%r242, %r28, %r236;
	sub.s32 	%r243, %r28, %r235;
	shl.b32 	%r244, %r243, 23;
	shl.b32 	%r245, %r242, 23;
	shl.b32 	%r246, %r241, 23;
	shl.b32 	%r247, %r240, 23;
	or.b32  	%r248, %r247, %r231;
	or.b32  	%r249, %r246, %r232;
	or.b32  	%r250, %r245, %r233;
	or.b32  	%r251, %r244, %r234;
	mov.b32 	%f917, %r251;
	mov.b32 	%f918, %r250;
	mov.b32 	%f919, %r249;
	mov.b32 	%f920, %r248;
	add.ftz.f32 	%f921, %f920, 0fBF800000;
	add.ftz.f32 	%f922, %f919, 0fBF800000;
	add.ftz.f32 	%f923, %f918, 0fBF800000;
	add.ftz.f32 	%f924, %f917, 0fBF800000;
	neg.ftz.f32 	%f925, %f924;
	fma.rn.ftz.f32 	%f926, %f917, %f924, %f925;
	neg.ftz.f32 	%f927, %f923;
	fma.rn.ftz.f32 	%f928, %f918, %f923, %f927;
	neg.ftz.f32 	%f929, %f922;
	fma.rn.ftz.f32 	%f930, %f919, %f922, %f929;
	neg.ftz.f32 	%f931, %f921;
	fma.rn.ftz.f32 	%f932, %f920, %f921, %f931;
	fma.rn.ftz.f32 	%f933, %f932, 0f3D5162F5, 0f3E19502F;
	fma.rn.ftz.f32 	%f934, %f930, 0f3D5162F5, 0f3E19502F;
	fma.rn.ftz.f32 	%f935, %f928, 0f3D5162F5, 0f3E19502F;
	fma.rn.ftz.f32 	%f936, %f926, 0f3D5162F5, 0f3E19502F;
	fma.rn.ftz.f32 	%f937, %f926, %f936, 0f3E4C9A1F;
	fma.rn.ftz.f32 	%f938, %f928, %f935, 0f3E4C9A1F;
	fma.rn.ftz.f32 	%f939, %f930, %f934, 0f3E4C9A1F;
	fma.rn.ftz.f32 	%f940, %f932, %f933, 0f3E4C9A1F;
	fma.rn.ftz.f32 	%f941, %f932, %f940, 0f3EAAAACD;
	fma.rn.ftz.f32 	%f942, %f930, %f939, 0f3EAAAACD;
	fma.rn.ftz.f32 	%f943, %f928, %f938, 0f3EAAAACD;
	fma.rn.ftz.f32 	%f944, %f926, %f937, 0f3EAAAACD;
	fma.rn.ftz.f32 	%f945, %f926, %f944, 0f3F800000;
	fma.rn.ftz.f32 	%f946, %f928, %f943, 0f3F800000;
	fma.rn.ftz.f32 	%f947, %f930, %f942, 0f3F800000;
	fma.rn.ftz.f32 	%f948, %f932, %f941, 0f3F800000;
	neg.ftz.f32 	%f949, %f948;
	fma.rn.ftz.f32 	%f950, %f920, %f948, %f949;
	neg.ftz.f32 	%f951, %f947;
	fma.rn.ftz.f32 	%f952, %f919, %f947, %f951;
	neg.ftz.f32 	%f953, %f946;
	fma.rn.ftz.f32 	%f954, %f918, %f946, %f953;
	neg.ftz.f32 	%f955, %f945;
	fma.rn.ftz.f32 	%f956, %f917, %f945, %f955;
	fma.rn.ftz.f32 	%f957, %f932, 0fBDF18A20, 0fBE2CAABC;
	fma.rn.ftz.f32 	%f958, %f930, 0fBDF18A20, 0fBE2CAABC;
	fma.rn.ftz.f32 	%f959, %f928, 0fBDF18A20, 0fBE2CAABC;
	fma.rn.ftz.f32 	%f960, %f926, 0fBDF18A20, 0fBE2CAABC;
	fma.rn.ftz.f32 	%f961, %f926, %f960, 0fBE7FE8F6;
	fma.rn.ftz.f32 	%f962, %f928, %f959, 0fBE7FE8F6;
	fma.rn.ftz.f32 	%f963, %f930, %f958, 0fBE7FE8F6;
	fma.rn.ftz.f32 	%f964, %f932, %f957, 0fBE7FE8F6;
	fma.rn.ftz.f32 	%f965, %f932, %f964, 0fBF000012;
	fma.rn.ftz.f32 	%f966, %f930, %f963, 0fBF000012;
	fma.rn.ftz.f32 	%f967, %f928, %f962, 0fBF000012;
	fma.rn.ftz.f32 	%f968, %f926, %f961, 0fBF000012;
	fma.rn.ftz.f32 	%f969, %f926, %f968, %f956;
	fma.rn.ftz.f32 	%f970, %f928, %f967, %f954;
	fma.rn.ftz.f32 	%f971, %f930, %f966, %f952;
	fma.rn.ftz.f32 	%f972, %f932, %f965, %f950;
	shr.s32 	%r252, %r227, 23;
	shr.s32 	%r253, %r228, 23;
	shr.s32 	%r254, %r229, 23;
	shr.s32 	%r255, %r230, 23;
	sub.s32 	%r256, %r255, %r240;
	sub.s32 	%r257, %r254, %r241;
	sub.s32 	%r258, %r253, %r242;
	sub.s32 	%r259, %r252, %r243;
	cvt.rn.f32.s32 	%f973, %r259;
	cvt.rn.f32.s32 	%f974, %r258;
	cvt.rn.f32.s32 	%f975, %r257;
	cvt.rn.f32.s32 	%f976, %r256;
	fma.rn.ftz.f32 	%f977, %f976, 0f3F317218, %f972;
	fma.rn.ftz.f32 	%f978, %f975, 0f3F317218, %f971;
	fma.rn.ftz.f32 	%f979, %f974, 0f3F317218, %f970;
	fma.rn.ftz.f32 	%f980, %f973, 0f3F317218, %f969;
	selp.f32 	%f981, 0fFF800000, %f980, %p94;
	selp.f32 	%f982, 0fFF800000, %f979, %p95;
	selp.f32 	%f983, 0fFF800000, %f978, %p96;
	selp.f32 	%f984, 0fFF800000, %f977, %p97;
	mul.ftz.f32 	%f985, %f5, %f984;
	mul.ftz.f32 	%f986, %f5, %f983;
	mul.ftz.f32 	%f987, %f5, %f982;
	mul.ftz.f32 	%f988, %f5, %f981;
	mul.ftz.f32 	%f989, %f988, 0f3FB8AA3B;
	mul.ftz.f32 	%f990, %f987, 0f3FB8AA3B;
	mul.ftz.f32 	%f991, %f986, 0f3FB8AA3B;
	mul.ftz.f32 	%f992, %f985, 0f3FB8AA3B;
	cvt.rmi.ftz.f32.f32 	%f993, %f992;
	cvt.rmi.ftz.f32.f32 	%f994, %f991;
	cvt.rmi.ftz.f32.f32 	%f995, %f990;
	cvt.rmi.ftz.f32.f32 	%f996, %f989;
	cvt.rzi.ftz.s32.f32 	%r260, %f995;
	cvt.rzi.ftz.s32.f32 	%r261, %f994;
	cvt.rzi.ftz.s32.f32 	%r262, %f993;
	cvt.rzi.ftz.s32.f32 	%r263, %f996;
	mul.ftz.f32 	%f997, %f994, 0fBF317200;
	mul.ftz.f32 	%f998, %f995, 0fBF317200;
	fma.rn.ftz.f32 	%f999, %f5, %f982, %f998;
	fma.rn.ftz.f32 	%f1000, %f5, %f983, %f997;
	mul.ftz.f32 	%f1001, %f993, 0fBF317200;
	fma.rn.ftz.f32 	%f1002, %f5, %f984, %f1001;
	mul.ftz.f32 	%f1003, %f996, 0fBF317200;
	fma.rn.ftz.f32 	%f1004, %f5, %f981, %f1003;
	fma.rn.ftz.f32 	%f1005, %f996, 0fB5BFBE8E, %f1004;
	fma.rn.ftz.f32 	%f1006, %f993, 0fB5BFBE8E, %f1002;
	fma.rn.ftz.f32 	%f1007, %f994, 0fB5BFBE8E, %f1000;
	fma.rn.ftz.f32 	%f1008, %f995, 0fB5BFBE8E, %f999;
	mul.ftz.f32 	%f1009, %f1008, %f1008;
	mul.ftz.f32 	%f1010, %f1007, %f1007;
	mul.ftz.f32 	%f1011, %f1006, %f1006;
	mul.ftz.f32 	%f1012, %f1005, %f1005;
	add.s32 	%r264, %r263, 127;
	add.s32 	%r265, %r262, 127;
	add.s32 	%r266, %r261, 127;
	add.s32 	%r267, %r260, 127;
	setp.gt.s32 	%p98, %r267, 0;
	setp.gt.s32 	%p99, %r266, 0;
	setp.gt.s32 	%p100, %r265, 0;
	setp.gt.s32 	%p101, %r264, 0;
	setp.lt.s32 	%p102, %r264, 255;
	setp.lt.s32 	%p103, %r265, 255;
	setp.lt.s32 	%p104, %r266, 255;
	setp.lt.s32 	%p105, %r267, 255;
	fma.rn.ftz.f32 	%f1013, %f1012, 0f39A797F3, 0f3C0B192A;
	fma.rn.ftz.f32 	%f1014, %f1011, 0f39A797F3, 0f3C0B192A;
	fma.rn.ftz.f32 	%f1015, %f1010, 0f39A797F3, 0f3C0B192A;
	fma.rn.ftz.f32 	%f1016, %f1009, 0f39A797F3, 0f3C0B192A;
	fma.rn.ftz.f32 	%f1017, %f1009, %f1016, 0f3E2AAE1F;
	fma.rn.ftz.f32 	%f1018, %f1010, %f1015, 0f3E2AAE1F;
	fma.rn.ftz.f32 	%f1019, %f1011, %f1014, 0f3E2AAE1F;
	fma.rn.ftz.f32 	%f1020, %f1012, %f1013, 0f3E2AAE1F;
	fma.rn.ftz.f32 	%f1021, %f1012, %f1020, 0f3F800000;
	fma.rn.ftz.f32 	%f1022, %f1011, %f1019, 0f3F800000;
	fma.rn.ftz.f32 	%f1023, %f1010, %f1018, 0f3F800000;
	fma.rn.ftz.f32 	%f1024, %f1009, %f1017, 0f3F800000;
	fma.rn.ftz.f32 	%f1025, %f1012, 0f3A9C2E66, 0f3D2A66BC;
	fma.rn.ftz.f32 	%f1026, %f1011, 0f3A9C2E66, 0f3D2A66BC;
	fma.rn.ftz.f32 	%f1027, %f1010, 0f3A9C2E66, 0f3D2A66BC;
	fma.rn.ftz.f32 	%f1028, %f1009, 0f3A9C2E66, 0f3D2A66BC;
	fma.rn.ftz.f32 	%f1029, %f1009, %f1028, 0f3EFFFFDE;
	fma.rn.ftz.f32 	%f1030, %f1010, %f1027, 0f3EFFFFDE;
	fma.rn.ftz.f32 	%f1031, %f1011, %f1026, 0f3EFFFFDE;
	fma.rn.ftz.f32 	%f1032, %f1012, %f1025, 0f3EFFFFDE;
	fma.rn.ftz.f32 	%f1033, %f1012, %f1032, 0f3F800000;
	fma.rn.ftz.f32 	%f1034, %f1011, %f1031, 0f3F800000;
	fma.rn.ftz.f32 	%f1035, %f1010, %f1030, 0f3F800000;
	fma.rn.ftz.f32 	%f1036, %f1009, %f1029, 0f3F800000;
	fma.rn.ftz.f32 	%f1037, %f1008, %f1024, %f1036;
	fma.rn.ftz.f32 	%f1038, %f1007, %f1023, %f1035;
	fma.rn.ftz.f32 	%f1039, %f1006, %f1022, %f1034;
	fma.rn.ftz.f32 	%f1040, %f1005, %f1021, %f1033;
	shl.b32 	%r268, %r264, 23;
	shl.b32 	%r269, %r265, 23;
	shl.b32 	%r270, %r266, 23;
	shl.b32 	%r271, %r267, 23;
	mov.b32 	%f1041, %r271;
	mov.b32 	%f1042, %r270;
	mov.b32 	%f1043, %r269;
	mov.b32 	%f1044, %r268;
	mul.ftz.f32 	%f1045, %f1040, %f1044;
	mul.ftz.f32 	%f1046, %f1039, %f1043;
	mul.ftz.f32 	%f1047, %f1038, %f1042;
	mul.ftz.f32 	%f1048, %f1037, %f1041;
	selp.f32 	%f1049, %f1048, 0f7F800000, %p105;
	selp.f32 	%f1050, %f1047, 0f7F800000, %p104;
	selp.f32 	%f1051, %f1046, 0f7F800000, %p103;
	selp.f32 	%f1052, %f1045, 0f7F800000, %p102;
	selp.f32 	%f1053, %f1052, 0f00000000, %p101;
	selp.f32 	%f1054, %f1051, 0f00000000, %p100;
	selp.f32 	%f1055, %f1050, 0f00000000, %p99;
	selp.f32 	%f1056, %f1049, 0f00000000, %p98;
	or.b32  	%r272, %r1, 4;
	add.s32 	%r273, %r272, 2;
	add.s32 	%r274, %r272, 1;
	add.s32 	%r275, %r272, 3;
	setp.lt.s32 	%p106, %r6, %r275;
	setp.lt.s32 	%p107, %r6, %r272;
	setp.lt.s32 	%p108, %r6, %r274;
	setp.lt.s32 	%p109, %r6, %r273;
	setp.lt.s32 	%p110, %r7, %r273;
	setp.lt.s32 	%p111, %r7, %r274;
	setp.lt.s32 	%p112, %r7, %r272;
	setp.lt.s32 	%p113, %r7, %r275;
	setp.gt.ftz.f32 	%p114, %f1056, 0f3F000000;
	setp.gt.ftz.f32 	%p115, %f1055, 0f3F000000;
	setp.gt.ftz.f32 	%p116, %f1054, 0f3F000000;
	setp.gt.ftz.f32 	%p117, %f1053, 0f3F000000;
	sub.ftz.f32 	%f1057, %f846, %f1053;
	sub.ftz.f32 	%f1058, %f846, %f1054;
	sub.ftz.f32 	%f1059, %f846, %f1055;
	sub.ftz.f32 	%f1060, %f846, %f1056;
	fma.rn.ftz.f32 	%f1061, %f851, %f1060, %f13;
	fma.rn.ftz.f32 	%f1062, %f851, %f1059, %f13;
	fma.rn.ftz.f32 	%f1063, %f851, %f1058, %f13;
	fma.rn.ftz.f32 	%f1064, %f851, %f1057, %f13;
	sub.ftz.f32 	%f1065, %f1064, 0f40000000;
	sub.ftz.f32 	%f1066, %f1063, 0f40000000;
	sub.ftz.f32 	%f1067, %f1062, 0f40000000;
	sub.ftz.f32 	%f1068, %f1061, 0f40000000;
	fma.rn.ftz.f32 	%f1069, %f1060, %f1068, 0f3F800000;
	fma.rn.ftz.f32 	%f1070, %f1059, %f1067, 0f3F800000;
	fma.rn.ftz.f32 	%f1071, %f1058, %f1066, 0f3F800000;
	fma.rn.ftz.f32 	%f1072, %f1057, %f1065, 0f3F800000;
	fma.rn.ftz.f32 	%f1073, %f14, %f1056, %f864;
	fma.rn.ftz.f32 	%f1074, %f14, %f1055, %f864;
	fma.rn.ftz.f32 	%f1075, %f14, %f1054, %f864;
	fma.rn.ftz.f32 	%f1076, %f14, %f1053, %f864;
	add.ftz.f32 	%f1077, %f1076, 0f40000000;
	add.ftz.f32 	%f1078, %f1075, 0f40000000;
	add.ftz.f32 	%f1079, %f1074, 0f40000000;
	add.ftz.f32 	%f1080, %f1073, 0f40000000;
	mul.ftz.f32 	%f1081, %f1056, %f1080;
	mul.ftz.f32 	%f1082, %f1055, %f1079;
	mul.ftz.f32 	%f1083, %f1054, %f1078;
	mul.ftz.f32 	%f1084, %f1053, %f1077;
	selp.f32 	%f1085, %f1072, %f1084, %p117;
	selp.f32 	%f1086, %f1071, %f1083, %p116;
	selp.f32 	%f1087, %f1070, %f1082, %p115;
	selp.f32 	%f1088, %f1069, %f1081, %p114;
	mul.ftz.f32 	%f1089, %f1088, 0f437F0000;
	mul.ftz.f32 	%f1090, %f1087, 0f437F0000;
	mul.ftz.f32 	%f1091, %f1086, 0f437F0000;
	mul.ftz.f32 	%f1092, %f1085, 0f437F0000;
	min.ftz.f32 	%f1093, %f1092, 0f437E8000;
	min.ftz.f32 	%f1094, %f1091, 0f437E8000;
	min.ftz.f32 	%f1095, %f1090, 0f437E8000;
	min.ftz.f32 	%f1096, %f1089, 0f437E8000;
	max.ftz.f32 	%f1097, %f1096, 0fBF000000;
	max.ftz.f32 	%f1098, %f1095, 0fBF000000;
	max.ftz.f32 	%f1099, %f1094, 0fBF000000;
	max.ftz.f32 	%f1100, %f1093, 0fBF000000;
	add.ftz.f32 	%f1101, %f1100, 0f3F000000;
	add.ftz.f32 	%f1102, %f1099, 0f3F000000;
	add.ftz.f32 	%f1103, %f1098, 0f3F000000;
	add.ftz.f32 	%f1104, %f1097, 0f3F000000;
	cvt.rzi.ftz.u16.f32 	%rs53, %f1104;
	cvt.rzi.ftz.u16.f32 	%rs54, %f1103;
	cvt.rzi.ftz.u16.f32 	%rs55, %f1102;
	cvt.rzi.ftz.u16.f32 	%rs56, %f1101;
	selp.b16 	%rs57, -1, %rs56, %p113;
	selp.b16 	%rs58, -1, %rs55, %p112;
	selp.b16 	%rs59, -1, %rs54, %p111;
	selp.b16 	%rs60, -1, %rs53, %p110;
	selp.b16 	%rs61, %rs60, 0, %p109;
	selp.b16 	%rs62, %rs59, 0, %p108;
	selp.b16 	%rs63, %rs58, 0, %p107;
	selp.b16 	%rs64, %rs57, 0, %p106;
	st.global.v4.u8 	[%rd6], {%rs49, %rs50, %rs51, %rs52};
	st.global.v4.u8 	[%rd6+4], {%rs63, %rs62, %rs61, %rs64};
	add.s32 	%r276, %r2, 8;
	add.s32 	%r277, %r2, 9;
	add.s32 	%r278, %r2, 10;
	add.s32 	%r279, %r2, 11;
	cvt.rn.f32.s32 	%f1105, %r279;
	cvt.rn.f32.s32 	%f1106, %r278;
	cvt.rn.f32.s32 	%f1107, %r277;
	cvt.rn.f32.s32 	%f1108, %r276;
	mul.ftz.f32 	%f1109, %f1, %f1108;
	mul.ftz.f32 	%f1110, %f1, %f1107;
	mul.ftz.f32 	%f1111, %f1, %f1106;
	mul.ftz.f32 	%f1112, %f1, %f1105;
	min.ftz.f32 	%f1113, %f1112, 0f3F800000;
	min.ftz.f32 	%f1114, %f1111, 0f3F800000;
	min.ftz.f32 	%f1115, %f1110, 0f3F800000;
	min.ftz.f32 	%f1116, %f1109, 0f3F800000;
	max.ftz.f32 	%f1117, %f1116, 0f00000000;
	max.ftz.f32 	%f1118, %f1115, 0f00000000;
	max.ftz.f32 	%f1119, %f1114, 0f00000000;
	max.ftz.f32 	%f1120, %f1113, 0f00000000;
	setp.le.ftz.f32 	%p118, %f1120, 0f00000000;
	setp.le.ftz.f32 	%p119, %f1119, 0f00000000;
	setp.le.ftz.f32 	%p120, %f1118, 0f00000000;
	setp.le.ftz.f32 	%p121, %f1117, 0f00000000;
	selp.f32 	%f1121, 0f3F800000, %f1117, %p121;
	selp.f32 	%f1122, 0f3F800000, %f1118, %p120;
	selp.f32 	%f1123, 0f3F800000, %f1119, %p119;
	selp.f32 	%f1124, 0f3F800000, %f1120, %p118;
	mov.b32 	%r280, %f1124;
	mov.b32 	%r281, %f1123;
	mov.b32 	%r282, %f1122;
	mov.b32 	%r283, %f1121;
	and.b32  	%r284, %r283, -2139095041;
	and.b32  	%r285, %r282, -2139095041;
	and.b32  	%r286, %r281, -2139095041;
	and.b32  	%r287, %r280, -2139095041;
	shr.s32 	%r288, %r287, 22;
	shr.s32 	%r289, %r286, 22;
	shr.s32 	%r290, %r285, 22;
	shr.s32 	%r291, %r284, 22;
	sub.s32 	%r292, %r28, %r291;
	sub.s32 	%r293, %r28, %r290;
	sub.s32 	%r294, %r28, %r289;
	sub.s32 	%r295, %r28, %r288;
	shl.b32 	%r296, %r295, 23;
	shl.b32 	%r297, %r294, 23;
	shl.b32 	%r298, %r293, 23;
	shl.b32 	%r299, %r292, 23;
	or.b32  	%r300, %r299, %r284;
	or.b32  	%r301, %r298, %r285;
	or.b32  	%r302, %r297, %r286;
	or.b32  	%r303, %r296, %r287;
	mov.b32 	%f1125, %r303;
	mov.b32 	%f1126, %r302;
	mov.b32 	%f1127, %r301;
	mov.b32 	%f1128, %r300;
	add.ftz.f32 	%f1129, %f1128, 0fBF800000;
	add.ftz.f32 	%f1130, %f1127, 0fBF800000;
	add.ftz.f32 	%f1131, %f1126, 0fBF800000;
	add.ftz.f32 	%f1132, %f1125, 0fBF800000;
	neg.ftz.f32 	%f1133, %f1132;
	fma.rn.ftz.f32 	%f1134, %f1125, %f1132, %f1133;
	neg.ftz.f32 	%f1135, %f1131;
	fma.rn.ftz.f32 	%f1136, %f1126, %f1131, %f1135;
	neg.ftz.f32 	%f1137, %f1130;
	fma.rn.ftz.f32 	%f1138, %f1127, %f1130, %f1137;
	neg.ftz.f32 	%f1139, %f1129;
	fma.rn.ftz.f32 	%f1140, %f1128, %f1129, %f1139;
	fma.rn.ftz.f32 	%f1141, %f1140, 0f3D5162F5, 0f3E19502F;
	fma.rn.ftz.f32 	%f1142, %f1138, 0f3D5162F5, 0f3E19502F;
	fma.rn.ftz.f32 	%f1143, %f1136, 0f3D5162F5, 0f3E19502F;
	fma.rn.ftz.f32 	%f1144, %f1134, 0f3D5162F5, 0f3E19502F;
	fma.rn.ftz.f32 	%f1145, %f1134, %f1144, 0f3E4C9A1F;
	fma.rn.ftz.f32 	%f1146, %f1136, %f1143, 0f3E4C9A1F;
	fma.rn.ftz.f32 	%f1147, %f1138, %f1142, 0f3E4C9A1F;
	fma.rn.ftz.f32 	%f1148, %f1140, %f1141, 0f3E4C9A1F;
	fma.rn.ftz.f32 	%f1149, %f1140, %f1148, 0f3EAAAACD;
	fma.rn.ftz.f32 	%f1150, %f1138, %f1147, 0f3EAAAACD;
	fma.rn.ftz.f32 	%f1151, %f1136, %f1146, 0f3EAAAACD;
	fma.rn.ftz.f32 	%f1152, %f1134, %f1145, 0f3EAAAACD;
	fma.rn.ftz.f32 	%f1153, %f1134, %f1152, 0f3F800000;
	fma.rn.ftz.f32 	%f1154, %f1136, %f1151, 0f3F800000;
	fma.rn.ftz.f32 	%f1155, %f1138, %f1150, 0f3F800000;
	fma.rn.ftz.f32 	%f1156, %f1140, %f1149, 0f3F800000;
	neg.ftz.f32 	%f1157, %f1156;
	fma.rn.ftz.f32 	%f1158, %f1128, %f1156, %f1157;
	neg.ftz.f32 	%f1159, %f1155;
	fma.rn.ftz.f32 	%f1160, %f1127, %f1155, %f1159;
	neg.ftz.f32 	%f1161, %f1154;
	fma.rn.ftz.f32 	%f1162, %f1126, %f1154, %f1161;
	neg.ftz.f32 	%f1163, %f1153;
	fma.rn.ftz.f32 	%f1164, %f1125, %f1153, %f1163;
	fma.rn.ftz.f32 	%f1165, %f1140, 0fBDF18A20, 0fBE2CAABC;
	fma.rn.ftz.f32 	%f1166, %f1138, 0fBDF18A20, 0fBE2CAABC;
	fma.rn.ftz.f32 	%f1167, %f1136, 0fBDF18A20, 0fBE2CAABC;
	fma.rn.ftz.f32 	%f1168, %f1134, 0fBDF18A20, 0fBE2CAABC;
	fma.rn.ftz.f32 	%f1169, %f1134, %f1168, 0fBE7FE8F6;
	fma.rn.ftz.f32 	%f1170, %f1136, %f1167, 0fBE7FE8F6;
	fma.rn.ftz.f32 	%f1171, %f1138, %f1166, 0fBE7FE8F6;
	fma.rn.ftz.f32 	%f1172, %f1140, %f1165, 0fBE7FE8F6;
	fma.rn.ftz.f32 	%f1173, %f1140, %f1172, 0fBF000012;
	fma.rn.ftz.f32 	%f1174, %f1138, %f1171, 0fBF000012;
	fma.rn.ftz.f32 	%f1175, %f1136, %f1170, 0fBF000012;
	fma.rn.ftz.f32 	%f1176, %f1134, %f1169, 0fBF000012;
	fma.rn.ftz.f32 	%f1177, %f1134, %f1176, %f1164;
	fma.rn.ftz.f32 	%f1178, %f1136, %f1175, %f1162;
	fma.rn.ftz.f32 	%f1179, %f1138, %f1174, %f1160;
	fma.rn.ftz.f32 	%f1180, %f1140, %f1173, %f1158;
	shr.s32 	%r304, %r280, 23;
	shr.s32 	%r305, %r281, 23;
	shr.s32 	%r306, %r282, 23;
	shr.s32 	%r307, %r283, 23;
	sub.s32 	%r308, %r307, %r292;
	sub.s32 	%r309, %r306, %r293;
	sub.s32 	%r310, %r305, %r294;
	sub.s32 	%r311, %r304, %r295;
	cvt.rn.f32.s32 	%f1181, %r311;
	cvt.rn.f32.s32 	%f1182, %r310;
	cvt.rn.f32.s32 	%f1183, %r309;
	cvt.rn.f32.s32 	%f1184, %r308;
	fma.rn.ftz.f32 	%f1185, %f1184, 0f3F317218, %f1180;
	fma.rn.ftz.f32 	%f1186, %f1183, 0f3F317218, %f1179;
	fma.rn.ftz.f32 	%f1187, %f1182, 0f3F317218, %f1178;
	fma.rn.ftz.f32 	%f1188, %f1181, 0f3F317218, %f1177;
	selp.f32 	%f1189, 0fFF800000, %f1188, %p118;
	selp.f32 	%f1190, 0fFF800000, %f1187, %p119;
	selp.f32 	%f1191, 0fFF800000, %f1186, %p120;
	selp.f32 	%f1192, 0fFF800000, %f1185, %p121;
	mul.ftz.f32 	%f1193, %f5, %f1192;
	mul.ftz.f32 	%f1194, %f5, %f1191;
	mul.ftz.f32 	%f1195, %f5, %f1190;
	mul.ftz.f32 	%f1196, %f5, %f1189;
	mul.ftz.f32 	%f1197, %f1196, 0f3FB8AA3B;
	mul.ftz.f32 	%f1198, %f1195, 0f3FB8AA3B;
	mul.ftz.f32 	%f1199, %f1194, 0f3FB8AA3B;
	mul.ftz.f32 	%f1200, %f1193, 0f3FB8AA3B;
	cvt.rmi.ftz.f32.f32 	%f1201, %f1200;
	cvt.rmi.ftz.f32.f32 	%f1202, %f1199;
	cvt.rmi.ftz.f32.f32 	%f1203, %f1198;
	cvt.rmi.ftz.f32.f32 	%f1204, %f1197;
	cvt.rzi.ftz.s32.f32 	%r312, %f1203;
	cvt.rzi.ftz.s32.f32 	%r313, %f1202;
	cvt.rzi.ftz.s32.f32 	%r314, %f1201;
	cvt.rzi.ftz.s32.f32 	%r315, %f1204;
	mul.ftz.f32 	%f1205, %f1203, 0fBF317200;
	fma.rn.ftz.f32 	%f1206, %f5, %f1190, %f1205;
	mul.ftz.f32 	%f1207, %f1202, 0fBF317200;
	fma.rn.ftz.f32 	%f1208, %f5, %f1191, %f1207;
	mul.ftz.f32 	%f1209, %f1201, 0fBF317200;
	fma.rn.ftz.f32 	%f1210, %f5, %f1192, %f1209;
	mul.ftz.f32 	%f1211, %f1204, 0fBF317200;
	fma.rn.ftz.f32 	%f1212, %f5, %f1189, %f1211;
	fma.rn.ftz.f32 	%f1213, %f1204, 0fB5BFBE8E, %f1212;
	fma.rn.ftz.f32 	%f1214, %f1201, 0fB5BFBE8E, %f1210;
	fma.rn.ftz.f32 	%f1215, %f1202, 0fB5BFBE8E, %f1208;
	fma.rn.ftz.f32 	%f1216, %f1203, 0fB5BFBE8E, %f1206;
	mul.ftz.f32 	%f1217, %f1216, %f1216;
	mul.ftz.f32 	%f1218, %f1215, %f1215;
	mul.ftz.f32 	%f1219, %f1214, %f1214;
	mul.ftz.f32 	%f1220, %f1213, %f1213;
	add.s32 	%r316, %r315, 127;
	add.s32 	%r317, %r314, 127;
	add.s32 	%r318, %r313, 127;
	add.s32 	%r319, %r312, 127;
	setp.gt.s32 	%p122, %r319, 0;
	setp.gt.s32 	%p123, %r318, 0;
	setp.gt.s32 	%p124, %r317, 0;
	setp.gt.s32 	%p125, %r316, 0;
	setp.lt.s32 	%p126, %r316, 255;
	setp.lt.s32 	%p127, %r317, 255;
	setp.lt.s32 	%p128, %r318, 255;
	setp.lt.s32 	%p129, %r319, 255;
	fma.rn.ftz.f32 	%f1221, %f1220, 0f39A797F3, 0f3C0B192A;
	fma.rn.ftz.f32 	%f1222, %f1219, 0f39A797F3, 0f3C0B192A;
	fma.rn.ftz.f32 	%f1223, %f1218, 0f39A797F3, 0f3C0B192A;
	fma.rn.ftz.f32 	%f1224, %f1217, 0f39A797F3, 0f3C0B192A;
	fma.rn.ftz.f32 	%f1225, %f1217, %f1224, 0f3E2AAE1F;
	fma.rn.ftz.f32 	%f1226, %f1218, %f1223, 0f3E2AAE1F;
	fma.rn.ftz.f32 	%f1227, %f1219, %f1222, 0f3E2AAE1F;
	fma.rn.ftz.f32 	%f1228, %f1220, %f1221, 0f3E2AAE1F;
	fma.rn.ftz.f32 	%f1229, %f1220, %f1228, 0f3F800000;
	fma.rn.ftz.f32 	%f1230, %f1219, %f1227, 0f3F800000;
	fma.rn.ftz.f32 	%f1231, %f1218, %f1226, 0f3F800000;
	fma.rn.ftz.f32 	%f1232, %f1217, %f1225, 0f3F800000;
	fma.rn.ftz.f32 	%f1233, %f1220, 0f3A9C2E66, 0f3D2A66BC;
	fma.rn.ftz.f32 	%f1234, %f1219, 0f3A9C2E66, 0f3D2A66BC;
	fma.rn.ftz.f32 	%f1235, %f1218, 0f3A9C2E66, 0f3D2A66BC;
	fma.rn.ftz.f32 	%f1236, %f1217, 0f3A9C2E66, 0f3D2A66BC;
	fma.rn.ftz.f32 	%f1237, %f1217, %f1236, 0f3EFFFFDE;
	fma.rn.ftz.f32 	%f1238, %f1218, %f1235, 0f3EFFFFDE;
	fma.rn.ftz.f32 	%f1239, %f1219, %f1234, 0f3EFFFFDE;
	fma.rn.ftz.f32 	%f1240, %f1220, %f1233, 0f3EFFFFDE;
	fma.rn.ftz.f32 	%f1241, %f1220, %f1240, 0f3F800000;
	fma.rn.ftz.f32 	%f1242, %f1219, %f1239, 0f3F800000;
	fma.rn.ftz.f32 	%f1243, %f1218, %f1238, 0f3F800000;
	fma.rn.ftz.f32 	%f1244, %f1217, %f1237, 0f3F800000;
	fma.rn.ftz.f32 	%f1245, %f1216, %f1232, %f1244;
	fma.rn.ftz.f32 	%f1246, %f1215, %f1231, %f1243;
	fma.rn.ftz.f32 	%f1247, %f1214, %f1230, %f1242;
	fma.rn.ftz.f32 	%f1248, %f1213, %f1229, %f1241;
	shl.b32 	%r320, %r316, 23;
	shl.b32 	%r321, %r317, 23;
	shl.b32 	%r322, %r318, 23;
	shl.b32 	%r323, %r319, 23;
	mov.b32 	%f1249, %r323;
	mov.b32 	%f1250, %r322;
	mov.b32 	%f1251, %r321;
	mov.b32 	%f1252, %r320;
	mul.ftz.f32 	%f1253, %f1248, %f1252;
	mul.ftz.f32 	%f1254, %f1247, %f1251;
	mul.ftz.f32 	%f1255, %f1246, %f1250;
	mul.ftz.f32 	%f1256, %f1245, %f1249;
	selp.f32 	%f1257, %f1256, 0f7F800000, %p129;
	selp.f32 	%f1258, %f1255, 0f7F800000, %p128;
	selp.f32 	%f1259, %f1254, 0f7F800000, %p127;
	selp.f32 	%f1260, %f1253, 0f7F800000, %p126;
	selp.f32 	%f1261, %f1260, 0f00000000, %p125;
	selp.f32 	%f1262, %f1259, 0f00000000, %p124;
	selp.f32 	%f1263, %f1258, 0f00000000, %p123;
	selp.f32 	%f1264, %f1257, 0f00000000, %p122;
	or.b32  	%r324, %r1, 8;
	add.s32 	%r325, %r324, 2;
	add.s32 	%r326, %r324, 1;
	add.s32 	%r327, %r324, 3;
	setp.lt.s32 	%p130, %r6, %r327;
	setp.lt.s32 	%p131, %r6, %r324;
	setp.lt.s32 	%p132, %r6, %r326;
	setp.lt.s32 	%p133, %r6, %r325;
	setp.lt.s32 	%p134, %r7, %r325;
	setp.lt.s32 	%p135, %r7, %r326;
	setp.lt.s32 	%p136, %r7, %r324;
	setp.lt.s32 	%p137, %r7, %r327;
	setp.gt.ftz.f32 	%p138, %f1264, 0f3F000000;
	setp.gt.ftz.f32 	%p139, %f1263, 0f3F000000;
	setp.gt.ftz.f32 	%p140, %f1262, 0f3F000000;
	setp.gt.ftz.f32 	%p141, %f1261, 0f3F000000;
	sub.ftz.f32 	%f1265, %f846, %f1261;
	sub.ftz.f32 	%f1266, %f846, %f1262;
	sub.ftz.f32 	%f1267, %f846, %f1263;
	sub.ftz.f32 	%f1268, %f846, %f1264;
	fma.rn.ftz.f32 	%f1269, %f851, %f1268, %f13;
	fma.rn.ftz.f32 	%f1270, %f851, %f1267, %f13;
	fma.rn.ftz.f32 	%f1271, %f851, %f1266, %f13;
	fma.rn.ftz.f32 	%f1272, %f851, %f1265, %f13;
	sub.ftz.f32 	%f1273, %f1272, 0f40000000;
	sub.ftz.f32 	%f1274, %f1271, 0f40000000;
	sub.ftz.f32 	%f1275, %f1270, 0f40000000;
	sub.ftz.f32 	%f1276, %f1269, 0f40000000;
	fma.rn.ftz.f32 	%f1277, %f1268, %f1276, 0f3F800000;
	fma.rn.ftz.f32 	%f1278, %f1267, %f1275, 0f3F800000;
	fma.rn.ftz.f32 	%f1279, %f1266, %f1274, 0f3F800000;
	fma.rn.ftz.f32 	%f1280, %f1265, %f1273, 0f3F800000;
	fma.rn.ftz.f32 	%f1281, %f14, %f1264, %f864;
	fma.rn.ftz.f32 	%f1282, %f14, %f1263, %f864;
	fma.rn.ftz.f32 	%f1283, %f14, %f1262, %f864;
	fma.rn.ftz.f32 	%f1284, %f14, %f1261, %f864;
	add.ftz.f32 	%f1285, %f1284, 0f40000000;
	add.ftz.f32 	%f1286, %f1283, 0f40000000;
	add.ftz.f32 	%f1287, %f1282, 0f40000000;
	add.ftz.f32 	%f1288, %f1281, 0f40000000;
	mul.ftz.f32 	%f1289, %f1264, %f1288;
	mul.ftz.f32 	%f1290, %f1263, %f1287;
	mul.ftz.f32 	%f1291, %f1262, %f1286;
	mul.ftz.f32 	%f1292, %f1261, %f1285;
	selp.f32 	%f1293, %f1280, %f1292, %p141;
	selp.f32 	%f1294, %f1279, %f1291, %p140;
	selp.f32 	%f1295, %f1278, %f1290, %p139;
	selp.f32 	%f1296, %f1277, %f1289, %p138;
	mul.ftz.f32 	%f1297, %f1296, 0f437F0000;
	mul.ftz.f32 	%f1298, %f1295, 0f437F0000;
	mul.ftz.f32 	%f1299, %f1294, 0f437F0000;
	mul.ftz.f32 	%f1300, %f1293, 0f437F0000;
	min.ftz.f32 	%f1301, %f1300, 0f437E8000;
	min.ftz.f32 	%f1302, %f1299, 0f437E8000;
	min.ftz.f32 	%f1303, %f1298, 0f437E8000;
	min.ftz.f32 	%f1304, %f1297, 0f437E8000;
	max.ftz.f32 	%f1305, %f1304, 0fBF000000;
	max.ftz.f32 	%f1306, %f1303, 0fBF000000;
	max.ftz.f32 	%f1307, %f1302, 0fBF000000;
	max.ftz.f32 	%f1308, %f1301, 0fBF000000;
	add.ftz.f32 	%f1309, %f1308, 0f3F000000;
	add.ftz.f32 	%f1310, %f1307, 0f3F000000;
	add.ftz.f32 	%f1311, %f1306, 0f3F000000;
	add.ftz.f32 	%f1312, %f1305, 0f3F000000;
	cvt.rzi.ftz.u16.f32 	%rs65, %f1312;
	cvt.rzi.ftz.u16.f32 	%rs66, %f1311;
	cvt.rzi.ftz.u16.f32 	%rs67, %f1310;
	cvt.rzi.ftz.u16.f32 	%rs68, %f1309;
	selp.b16 	%rs69, -1, %rs68, %p137;
	selp.b16 	%rs70, -1, %rs67, %p136;
	selp.b16 	%rs71, -1, %rs66, %p135;
	selp.b16 	%rs72, -1, %rs65, %p134;
	selp.b16 	%rs73, %rs72, 0, %p133;
	selp.b16 	%rs74, %rs71, 0, %p132;
	selp.b16 	%rs75, %rs70, 0, %p131;
	selp.b16 	%rs76, %rs69, 0, %p130;
	st.global.v4.u8 	[%rd6+8], {%rs75, %rs74, %rs73, %rs76};
	add.s32 	%r328, %r2, 12;
	add.s32 	%r329, %r2, 13;
	add.s32 	%r330, %r2, 14;
	add.s32 	%r331, %r2, 15;
	cvt.rn.f32.s32 	%f1313, %r331;
	cvt.rn.f32.s32 	%f1314, %r330;
	cvt.rn.f32.s32 	%f1315, %r329;
	cvt.rn.f32.s32 	%f1316, %r328;
	mul.ftz.f32 	%f1317, %f1, %f1316;
	mul.ftz.f32 	%f1318, %f1, %f1315;
	mul.ftz.f32 	%f1319, %f1, %f1314;
	mul.ftz.f32 	%f1320, %f1, %f1313;
	min.ftz.f32 	%f1321, %f1320, 0f3F800000;
	min.ftz.f32 	%f1322, %f1319, 0f3F800000;
	min.ftz.f32 	%f1323, %f1318, 0f3F800000;
	min.ftz.f32 	%f1324, %f1317, 0f3F800000;
	max.ftz.f32 	%f1325, %f1324, 0f00000000;
	max.ftz.f32 	%f1326, %f1323, 0f00000000;
	max.ftz.f32 	%f1327, %f1322, 0f00000000;
	max.ftz.f32 	%f1328, %f1321, 0f00000000;
	setp.le.ftz.f32 	%p142, %f1328, 0f00000000;
	setp.le.ftz.f32 	%p143, %f1327, 0f00000000;
	setp.le.ftz.f32 	%p144, %f1326, 0f00000000;
	setp.le.ftz.f32 	%p145, %f1325, 0f00000000;
	selp.f32 	%f1329, 0f3F800000, %f1325, %p145;
	selp.f32 	%f1330, 0f3F800000, %f1326, %p144;
	selp.f32 	%f1331, 0f3F800000, %f1327, %p143;
	selp.f32 	%f1332, 0f3F800000, %f1328, %p142;
	mov.b32 	%r332, %f1332;
	mov.b32 	%r333, %f1331;
	mov.b32 	%r334, %f1330;
	mov.b32 	%r335, %f1329;
	and.b32  	%r336, %r335, -2139095041;
	and.b32  	%r337, %r334, -2139095041;
	and.b32  	%r338, %r333, -2139095041;
	and.b32  	%r339, %r332, -2139095041;
	shr.s32 	%r340, %r339, 22;
	shr.s32 	%r341, %r338, 22;
	shr.s32 	%r342, %r337, 22;
	shr.s32 	%r343, %r336, 22;
	sub.s32 	%r344, %r28, %r343;
	sub.s32 	%r345, %r28, %r342;
	sub.s32 	%r346, %r28, %r341;
	sub.s32 	%r347, %r28, %r340;
	shl.b32 	%r348, %r347, 23;
	shl.b32 	%r349, %r346, 23;
	shl.b32 	%r350, %r345, 23;
	shl.b32 	%r351, %r344, 23;
	or.b32  	%r352, %r351, %r336;
	or.b32  	%r353, %r350, %r337;
	or.b32  	%r354, %r349, %r338;
	or.b32  	%r355, %r348, %r339;
	mov.b32 	%f1333, %r355;
	mov.b32 	%f1334, %r354;
	mov.b32 	%f1335, %r353;
	mov.b32 	%f1336, %r352;
	add.ftz.f32 	%f1337, %f1336, 0fBF800000;
	add.ftz.f32 	%f1338, %f1335, 0fBF800000;
	add.ftz.f32 	%f1339, %f1334, 0fBF800000;
	add.ftz.f32 	%f1340, %f1333, 0fBF800000;
	neg.ftz.f32 	%f1341, %f1340;
	fma.rn.ftz.f32 	%f1342, %f1333, %f1340, %f1341;
	neg.ftz.f32 	%f1343, %f1339;
	fma.rn.ftz.f32 	%f1344, %f1334, %f1339, %f1343;
	neg.ftz.f32 	%f1345, %f1338;
	fma.rn.ftz.f32 	%f1346, %f1335, %f1338, %f1345;
	neg.ftz.f32 	%f1347, %f1337;
	fma.rn.ftz.f32 	%f1348, %f1336, %f1337, %f1347;
	fma.rn.ftz.f32 	%f1349, %f1348, 0f3D5162F5, 0f3E19502F;
	fma.rn.ftz.f32 	%f1350, %f1346, 0f3D5162F5, 0f3E19502F;
	fma.rn.ftz.f32 	%f1351, %f1344, 0f3D5162F5, 0f3E19502F;
	fma.rn.ftz.f32 	%f1352, %f1342, 0f3D5162F5, 0f3E19502F;
	fma.rn.ftz.f32 	%f1353, %f1342, %f1352, 0f3E4C9A1F;
	fma.rn.ftz.f32 	%f1354, %f1344, %f1351, 0f3E4C9A1F;
	fma.rn.ftz.f32 	%f1355, %f1346, %f1350, 0f3E4C9A1F;
	fma.rn.ftz.f32 	%f1356, %f1348, %f1349, 0f3E4C9A1F;
	fma.rn.ftz.f32 	%f1357, %f1348, %f1356, 0f3EAAAACD;
	fma.rn.ftz.f32 	%f1358, %f1346, %f1355, 0f3EAAAACD;
	fma.rn.ftz.f32 	%f1359, %f1344, %f1354, 0f3EAAAACD;
	fma.rn.ftz.f32 	%f1360, %f1342, %f1353, 0f3EAAAACD;
	fma.rn.ftz.f32 	%f1361, %f1342, %f1360, 0f3F800000;
	fma.rn.ftz.f32 	%f1362, %f1344, %f1359, 0f3F800000;
	fma.rn.ftz.f32 	%f1363, %f1346, %f1358, 0f3F800000;
	fma.rn.ftz.f32 	%f1364, %f1348, %f1357, 0f3F800000;
	neg.ftz.f32 	%f1365, %f1364;
	fma.rn.ftz.f32 	%f1366, %f1336, %f1364, %f1365;
	neg.ftz.f32 	%f1367, %f1363;
	fma.rn.ftz.f32 	%f1368, %f1335, %f1363, %f1367;
	neg.ftz.f32 	%f1369, %f1362;
	fma.rn.ftz.f32 	%f1370, %f1334, %f1362, %f1369;
	neg.ftz.f32 	%f1371, %f1361;
	fma.rn.ftz.f32 	%f1372, %f1333, %f1361, %f1371;
	fma.rn.ftz.f32 	%f1373, %f1348, 0fBDF18A20, 0fBE2CAABC;
	fma.rn.ftz.f32 	%f1374, %f1346, 0fBDF18A20, 0fBE2CAABC;
	fma.rn.ftz.f32 	%f1375, %f1344, 0fBDF18A20, 0fBE2CAABC;
	fma.rn.ftz.f32 	%f1376, %f1342, 0fBDF18A20, 0fBE2CAABC;
	fma.rn.ftz.f32 	%f1377, %f1342, %f1376, 0fBE7FE8F6;
	fma.rn.ftz.f32 	%f1378, %f1344, %f1375, 0fBE7FE8F6;
	fma.rn.ftz.f32 	%f1379, %f1346, %f1374, 0fBE7FE8F6;
	fma.rn.ftz.f32 	%f1380, %f1348, %f1373, 0fBE7FE8F6;
	fma.rn.ftz.f32 	%f1381, %f1348, %f1380, 0fBF000012;
	fma.rn.ftz.f32 	%f1382, %f1346, %f1379, 0fBF000012;
	fma.rn.ftz.f32 	%f1383, %f1344, %f1378, 0fBF000012;
	fma.rn.ftz.f32 	%f1384, %f1342, %f1377, 0fBF000012;
	fma.rn.ftz.f32 	%f1385, %f1342, %f1384, %f1372;
	fma.rn.ftz.f32 	%f1386, %f1344, %f1383, %f1370;
	fma.rn.ftz.f32 	%f1387, %f1346, %f1382, %f1368;
	fma.rn.ftz.f32 	%f1388, %f1348, %f1381, %f1366;
	shr.s32 	%r356, %r332, 23;
	shr.s32 	%r357, %r333, 23;
	shr.s32 	%r358, %r334, 23;
	shr.s32 	%r359, %r335, 23;
	sub.s32 	%r360, %r359, %r344;
	sub.s32 	%r361, %r358, %r345;
	sub.s32 	%r362, %r357, %r346;
	sub.s32 	%r363, %r356, %r347;
	cvt.rn.f32.s32 	%f1389, %r363;
	cvt.rn.f32.s32 	%f1390, %r362;
	cvt.rn.f32.s32 	%f1391, %r361;
	cvt.rn.f32.s32 	%f1392, %r360;
	fma.rn.ftz.f32 	%f1393, %f1392, 0f3F317218, %f1388;
	fma.rn.ftz.f32 	%f1394, %f1391, 0f3F317218, %f1387;
	fma.rn.ftz.f32 	%f1395, %f1390, 0f3F317218, %f1386;
	fma.rn.ftz.f32 	%f1396, %f1389, 0f3F317218, %f1385;
	selp.f32 	%f1397, 0fFF800000, %f1396, %p142;
	selp.f32 	%f1398, 0fFF800000, %f1395, %p143;
	selp.f32 	%f1399, 0fFF800000, %f1394, %p144;
	selp.f32 	%f1400, 0fFF800000, %f1393, %p145;
	mul.ftz.f32 	%f1401, %f5, %f1400;
	mul.ftz.f32 	%f1402, %f5, %f1399;
	mul.ftz.f32 	%f1403, %f5, %f1398;
	mul.ftz.f32 	%f1404, %f5, %f1397;
	mul.ftz.f32 	%f1405, %f1404, 0f3FB8AA3B;
	mul.ftz.f32 	%f1406, %f1403, 0f3FB8AA3B;
	mul.ftz.f32 	%f1407, %f1402, 0f3FB8AA3B;
	mul.ftz.f32 	%f1408, %f1401, 0f3FB8AA3B;
	cvt.rmi.ftz.f32.f32 	%f1409, %f1408;
	cvt.rmi.ftz.f32.f32 	%f1410, %f1407;
	cvt.rmi.ftz.f32.f32 	%f1411, %f1406;
	cvt.rmi.ftz.f32.f32 	%f1412, %f1405;
	cvt.rzi.ftz.s32.f32 	%r364, %f1411;
	cvt.rzi.ftz.s32.f32 	%r365, %f1410;
	cvt.rzi.ftz.s32.f32 	%r366, %f1409;
	cvt.rzi.ftz.s32.f32 	%r367, %f1412;
	mul.ftz.f32 	%f1413, %f1411, 0fBF317200;
	fma.rn.ftz.f32 	%f1414, %f5, %f1398, %f1413;
	mul.ftz.f32 	%f1415, %f1410, 0fBF317200;
	fma.rn.ftz.f32 	%f1416, %f5, %f1399, %f1415;
	mul.ftz.f32 	%f1417, %f1409, 0fBF317200;
	fma.rn.ftz.f32 	%f1418, %f5, %f1400, %f1417;
	mul.ftz.f32 	%f1419, %f1412, 0fBF317200;
	fma.rn.ftz.f32 	%f1420, %f5, %f1397, %f1419;
	fma.rn.ftz.f32 	%f1421, %f1412, 0fB5BFBE8E, %f1420;
	fma.rn.ftz.f32 	%f1422, %f1409, 0fB5BFBE8E, %f1418;
	fma.rn.ftz.f32 	%f1423, %f1410, 0fB5BFBE8E, %f1416;
	fma.rn.ftz.f32 	%f1424, %f1411, 0fB5BFBE8E, %f1414;
	mul.ftz.f32 	%f1425, %f1424, %f1424;
	mul.ftz.f32 	%f1426, %f1423, %f1423;
	mul.ftz.f32 	%f1427, %f1422, %f1422;
	mul.ftz.f32 	%f1428, %f1421, %f1421;
	add.s32 	%r368, %r367, 127;
	add.s32 	%r369, %r366, 127;
	add.s32 	%r370, %r365, 127;
	add.s32 	%r371, %r364, 127;
	setp.gt.s32 	%p146, %r371, 0;
	setp.gt.s32 	%p147, %r370, 0;
	setp.gt.s32 	%p148, %r369, 0;
	setp.gt.s32 	%p149, %r368, 0;
	setp.lt.s32 	%p150, %r368, 255;
	setp.lt.s32 	%p151, %r369, 255;
	setp.lt.s32 	%p152, %r370, 255;
	setp.lt.s32 	%p153, %r371, 255;
	fma.rn.ftz.f32 	%f1429, %f1428, 0f39A797F3, 0f3C0B192A;
	fma.rn.ftz.f32 	%f1430, %f1427, 0f39A797F3, 0f3C0B192A;
	fma.rn.ftz.f32 	%f1431, %f1426, 0f39A797F3, 0f3C0B192A;
	fma.rn.ftz.f32 	%f1432, %f1425, 0f39A797F3, 0f3C0B192A;
	fma.rn.ftz.f32 	%f1433, %f1425, %f1432, 0f3E2AAE1F;
	fma.rn.ftz.f32 	%f1434, %f1426, %f1431, 0f3E2AAE1F;
	fma.rn.ftz.f32 	%f1435, %f1427, %f1430, 0f3E2AAE1F;
	fma.rn.ftz.f32 	%f1436, %f1428, %f1429, 0f3E2AAE1F;
	fma.rn.ftz.f32 	%f1437, %f1428, %f1436, 0f3F800000;
	fma.rn.ftz.f32 	%f1438, %f1427, %f1435, 0f3F800000;
	fma.rn.ftz.f32 	%f1439, %f1426, %f1434, 0f3F800000;
	fma.rn.ftz.f32 	%f1440, %f1425, %f1433, 0f3F800000;
	fma.rn.ftz.f32 	%f1441, %f1428, 0f3A9C2E66, 0f3D2A66BC;
	fma.rn.ftz.f32 	%f1442, %f1427, 0f3A9C2E66, 0f3D2A66BC;
	fma.rn.ftz.f32 	%f1443, %f1426, 0f3A9C2E66, 0f3D2A66BC;
	fma.rn.ftz.f32 	%f1444, %f1425, 0f3A9C2E66, 0f3D2A66BC;
	fma.rn.ftz.f32 	%f1445, %f1425, %f1444, 0f3EFFFFDE;
	fma.rn.ftz.f32 	%f1446, %f1426, %f1443, 0f3EFFFFDE;
	fma.rn.ftz.f32 	%f1447, %f1427, %f1442, 0f3EFFFFDE;
	fma.rn.ftz.f32 	%f1448, %f1428, %f1441, 0f3EFFFFDE;
	fma.rn.ftz.f32 	%f1449, %f1428, %f1448, 0f3F800000;
	fma.rn.ftz.f32 	%f1450, %f1427, %f1447, 0f3F800000;
	fma.rn.ftz.f32 	%f1451, %f1426, %f1446, 0f3F800000;
	fma.rn.ftz.f32 	%f1452, %f1425, %f1445, 0f3F800000;
	fma.rn.ftz.f32 	%f1453, %f1424, %f1440, %f1452;
	fma.rn.ftz.f32 	%f1454, %f1423, %f1439, %f1451;
	fma.rn.ftz.f32 	%f1455, %f1422, %f1438, %f1450;
	fma.rn.ftz.f32 	%f1456, %f1421, %f1437, %f1449;
	shl.b32 	%r372, %r368, 23;
	shl.b32 	%r373, %r369, 23;
	shl.b32 	%r374, %r370, 23;
	shl.b32 	%r375, %r371, 23;
	mov.b32 	%f1457, %r375;
	mov.b32 	%f1458, %r374;
	mov.b32 	%f1459, %r373;
	mov.b32 	%f1460, %r372;
	mul.ftz.f32 	%f1461, %f1456, %f1460;
	mul.ftz.f32 	%f1462, %f1455, %f1459;
	mul.ftz.f32 	%f1463, %f1454, %f1458;
	mul.ftz.f32 	%f1464, %f1453, %f1457;
	selp.f32 	%f1465, %f1464, 0f7F800000, %p153;
	selp.f32 	%f1466, %f1463, 0f7F800000, %p152;
	selp.f32 	%f1467, %f1462, 0f7F800000, %p151;
	selp.f32 	%f1468, %f1461, 0f7F800000, %p150;
	selp.f32 	%f1469, %f1468, 0f00000000, %p149;
	selp.f32 	%f1470, %f1467, 0f00000000, %p148;
	selp.f32 	%f1471, %f1466, 0f00000000, %p147;
	selp.f32 	%f1472, %f1465, 0f00000000, %p146;
	or.b32  	%r379, %r1, 12;
	add.s32 	%r376, %r379, 2;
	add.s32 	%r377, %r379, 1;
	add.s32 	%r378, %r379, 3;
	setp.lt.s32 	%p154, %r6, %r378;
	setp.lt.s32 	%p155, %r6, %r379;
	setp.lt.s32 	%p156, %r6, %r377;
	setp.lt.s32 	%p157, %r6, %r376;
	setp.lt.s32 	%p158, %r7, %r376;
	setp.lt.s32 	%p159, %r7, %r377;
	setp.lt.s32 	%p160, %r7, %r379;
	setp.lt.s32 	%p161, %r7, %r378;
	setp.gt.ftz.f32 	%p162, %f1472, 0f3F000000;
	setp.gt.ftz.f32 	%p163, %f1471, 0f3F000000;
	setp.gt.ftz.f32 	%p164, %f1470, 0f3F000000;
	setp.gt.ftz.f32 	%p165, %f1469, 0f3F000000;
	sub.ftz.f32 	%f1473, %f846, %f1469;
	sub.ftz.f32 	%f1474, %f846, %f1470;
	sub.ftz.f32 	%f1475, %f846, %f1471;
	sub.ftz.f32 	%f1476, %f846, %f1472;
	fma.rn.ftz.f32 	%f1477, %f851, %f1476, %f13;
	fma.rn.ftz.f32 	%f1478, %f851, %f1475, %f13;
	fma.rn.ftz.f32 	%f1479, %f851, %f1474, %f13;
	fma.rn.ftz.f32 	%f1480, %f851, %f1473, %f13;
	sub.ftz.f32 	%f1481, %f1480, 0f40000000;
	sub.ftz.f32 	%f1482, %f1479, 0f40000000;
	sub.ftz.f32 	%f1483, %f1478, 0f40000000;
	sub.ftz.f32 	%f1484, %f1477, 0f40000000;
	fma.rn.ftz.f32 	%f1485, %f1476, %f1484, 0f3F800000;
	fma.rn.ftz.f32 	%f1486, %f1475, %f1483, 0f3F800000;
	fma.rn.ftz.f32 	%f1487, %f1474, %f1482, 0f3F800000;
	fma.rn.ftz.f32 	%f1488, %f1473, %f1481, 0f3F800000;
	fma.rn.ftz.f32 	%f1489, %f14, %f1472, %f864;
	fma.rn.ftz.f32 	%f1490, %f14, %f1471, %f864;
	fma.rn.ftz.f32 	%f1491, %f14, %f1470, %f864;
	fma.rn.ftz.f32 	%f1492, %f14, %f1469, %f864;
	add.ftz.f32 	%f1493, %f1492, 0f40000000;
	add.ftz.f32 	%f1494, %f1491, 0f40000000;
	add.ftz.f32 	%f1495, %f1490, 0f40000000;
	add.ftz.f32 	%f1496, %f1489, 0f40000000;
	mul.ftz.f32 	%f1497, %f1472, %f1496;
	mul.ftz.f32 	%f1498, %f1471, %f1495;
	mul.ftz.f32 	%f1499, %f1470, %f1494;
	mul.ftz.f32 	%f1500, %f1469, %f1493;
	selp.f32 	%f1501, %f1488, %f1500, %p165;
	selp.f32 	%f1502, %f1487, %f1499, %p164;
	selp.f32 	%f1503, %f1486, %f1498, %p163;
	selp.f32 	%f1504, %f1485, %f1497, %p162;
	mul.ftz.f32 	%f1505, %f1504, 0f437F0000;
	mul.ftz.f32 	%f1506, %f1503, 0f437F0000;
	mul.ftz.f32 	%f1507, %f1502, 0f437F0000;
	mul.ftz.f32 	%f1508, %f1501, 0f437F0000;
	min.ftz.f32 	%f1509, %f1508, 0f437E8000;
	min.ftz.f32 	%f1510, %f1507, 0f437E8000;
	min.ftz.f32 	%f1511, %f1506, 0f437E8000;
	min.ftz.f32 	%f1512, %f1505, 0f437E8000;
	max.ftz.f32 	%f1513, %f1512, 0fBF000000;
	max.ftz.f32 	%f1514, %f1511, 0fBF000000;
	max.ftz.f32 	%f1515, %f1510, 0fBF000000;
	max.ftz.f32 	%f1516, %f1509, 0fBF000000;
	add.ftz.f32 	%f1517, %f1516, 0f3F000000;
	add.ftz.f32 	%f1518, %f1515, 0f3F000000;
	add.ftz.f32 	%f1519, %f1514, 0f3F000000;
	add.ftz.f32 	%f1520, %f1513, 0f3F000000;
	cvt.rzi.ftz.u16.f32 	%rs77, %f1520;
	cvt.rzi.ftz.u16.f32 	%rs78, %f1519;
	cvt.rzi.ftz.u16.f32 	%rs79, %f1518;
	cvt.rzi.ftz.u16.f32 	%rs80, %f1517;
	selp.b16 	%rs81, -1, %rs80, %p161;
	selp.b16 	%rs82, -1, %rs79, %p160;
	selp.b16 	%rs83, -1, %rs78, %p159;
	selp.b16 	%rs84, -1, %rs77, %p158;
	selp.b16 	%rs87, %rs84, 0, %p157;
	selp.b16 	%rs86, %rs83, 0, %p156;
	selp.b16 	%rs85, %rs82, 0, %p155;
	selp.b16 	%rs88, %rs81, 0, %p154;
	bra.uni 	LBB0_3;
LBB0_1:                                 // %true_bb
	add.s32 	%r61, %r1, 1;
	add.s32 	%r62, %r1, 2;
	add.s32 	%r63, %r1, 3;
	setp.lt.s32 	%p14, %r7, %r63;
	setp.lt.s32 	%p15, %r7, %r62;
	setp.lt.s32 	%p16, %r7, %r61;
	setp.lt.s32 	%p17, %r7, %r1;
	setp.gt.ftz.f32 	%p18, %f12, 0f3F000000;
	setp.gt.ftz.f32 	%p19, %f11, 0f3F000000;
	setp.gt.ftz.f32 	%p20, %f10, 0f3F000000;
	setp.gt.ftz.f32 	%p21, %f9, 0f3F000000;
	mov.f32 	%f171, 0f3F800000;
	sub.ftz.f32 	%f172, %f171, %f9;
	sub.ftz.f32 	%f173, %f171, %f10;
	sub.ftz.f32 	%f174, %f171, %f11;
	sub.ftz.f32 	%f175, %f171, %f12;
	neg.ftz.f32 	%f176, %f14;
	fma.rn.ftz.f32 	%f177, %f176, %f175, %f13;
	fma.rn.ftz.f32 	%f178, %f176, %f174, %f13;
	fma.rn.ftz.f32 	%f179, %f176, %f173, %f13;
	fma.rn.ftz.f32 	%f180, %f176, %f172, %f13;
	sub.ftz.f32 	%f181, %f180, 0f40000000;
	sub.ftz.f32 	%f182, %f179, 0f40000000;
	sub.ftz.f32 	%f183, %f178, 0f40000000;
	sub.ftz.f32 	%f184, %f177, 0f40000000;
	fma.rn.ftz.f32 	%f185, %f175, %f184, 0f3F800000;
	fma.rn.ftz.f32 	%f186, %f174, %f183, 0f3F800000;
	fma.rn.ftz.f32 	%f187, %f173, %f182, 0f3F800000;
	fma.rn.ftz.f32 	%f188, %f172, %f181, 0f3F800000;
	neg.ftz.f32 	%f189, %f13;
	fma.rn.ftz.f32 	%f190, %f14, %f12, %f189;
	fma.rn.ftz.f32 	%f191, %f14, %f11, %f189;
	fma.rn.ftz.f32 	%f192, %f14, %f10, %f189;
	fma.rn.ftz.f32 	%f193, %f14, %f9, %f189;
	add.ftz.f32 	%f194, %f193, 0f40000000;
	add.ftz.f32 	%f195, %f192, 0f40000000;
	add.ftz.f32 	%f196, %f191, 0f40000000;
	add.ftz.f32 	%f197, %f190, 0f40000000;
	mul.ftz.f32 	%f198, %f12, %f197;
	mul.ftz.f32 	%f199, %f11, %f196;
	mul.ftz.f32 	%f200, %f10, %f195;
	mul.ftz.f32 	%f201, %f9, %f194;
	selp.f32 	%f202, %f188, %f201, %p21;
	selp.f32 	%f203, %f187, %f200, %p20;
	selp.f32 	%f204, %f186, %f199, %p19;
	selp.f32 	%f205, %f185, %f198, %p18;
	mul.ftz.f32 	%f206, %f205, 0f437F0000;
	mul.ftz.f32 	%f207, %f204, 0f437F0000;
	mul.ftz.f32 	%f208, %f203, 0f437F0000;
	mul.ftz.f32 	%f209, %f202, 0f437F0000;
	min.ftz.f32 	%f210, %f209, 0f437E8000;
	min.ftz.f32 	%f211, %f208, 0f437E8000;
	min.ftz.f32 	%f212, %f207, 0f437E8000;
	min.ftz.f32 	%f213, %f206, 0f437E8000;
	max.ftz.f32 	%f214, %f213, 0fBF000000;
	max.ftz.f32 	%f215, %f212, 0fBF000000;
	max.ftz.f32 	%f216, %f211, 0fBF000000;
	max.ftz.f32 	%f217, %f210, 0fBF000000;
	add.ftz.f32 	%f218, %f217, 0f3F000000;
	add.ftz.f32 	%f219, %f216, 0f3F000000;
	add.ftz.f32 	%f220, %f215, 0f3F000000;
	add.ftz.f32 	%f221, %f214, 0f3F000000;
	cvt.rzi.ftz.u16.f32 	%rs13, %f221;
	cvt.rzi.ftz.u16.f32 	%rs14, %f220;
	cvt.rzi.ftz.u16.f32 	%rs15, %f219;
	cvt.rzi.ftz.u16.f32 	%rs16, %f218;
	selp.b16 	%rs17, -1, %rs16, %p17;
	selp.b16 	%rs18, -1, %rs15, %p16;
	selp.b16 	%rs19, -1, %rs14, %p15;
	selp.b16 	%rs20, -1, %rs13, %p14;
	cvt.u64.u32 	%rd3, %r1;
	add.s64 	%rd4, %rd1, %rd3;
	add.s32 	%r64, %r2, 4;
	add.s32 	%r65, %r2, 5;
	add.s32 	%r66, %r2, 6;
	add.s32 	%r67, %r2, 7;
	cvt.rn.f32.s32 	%f222, %r67;
	cvt.rn.f32.s32 	%f223, %r66;
	cvt.rn.f32.s32 	%f224, %r65;
	cvt.rn.f32.s32 	%f225, %r64;
	mul.ftz.f32 	%f226, %f1, %f225;
	mul.ftz.f32 	%f227, %f1, %f224;
	mul.ftz.f32 	%f228, %f1, %f223;
	mul.ftz.f32 	%f229, %f1, %f222;
	min.ftz.f32 	%f230, %f229, 0f3F800000;
	min.ftz.f32 	%f231, %f228, 0f3F800000;
	min.ftz.f32 	%f232, %f227, 0f3F800000;
	min.ftz.f32 	%f233, %f226, 0f3F800000;
	max.ftz.f32 	%f234, %f233, 0f00000000;
	max.ftz.f32 	%f235, %f232, 0f00000000;
	max.ftz.f32 	%f236, %f231, 0f00000000;
	max.ftz.f32 	%f237, %f230, 0f00000000;
	setp.le.ftz.f32 	%p22, %f237, 0f00000000;
	setp.le.ftz.f32 	%p23, %f236, 0f00000000;
	setp.le.ftz.f32 	%p24, %f235, 0f00000000;
	setp.le.ftz.f32 	%p25, %f234, 0f00000000;
	selp.f32 	%f238, 0f3F800000, %f234, %p25;
	selp.f32 	%f239, 0f3F800000, %f235, %p24;
	selp.f32 	%f240, 0f3F800000, %f236, %p23;
	selp.f32 	%f241, 0f3F800000, %f237, %p22;
	mov.b32 	%r68, %f241;
	mov.b32 	%r69, %f240;
	mov.b32 	%r70, %f239;
	mov.b32 	%r71, %f238;
	and.b32  	%r72, %r71, -2139095041;
	and.b32  	%r73, %r70, -2139095041;
	and.b32  	%r74, %r69, -2139095041;
	and.b32  	%r75, %r68, -2139095041;
	shr.s32 	%r76, %r75, 22;
	shr.s32 	%r77, %r74, 22;
	shr.s32 	%r78, %r73, 22;
	shr.s32 	%r79, %r72, 22;
	sub.s32 	%r81, %r28, %r79;
	sub.s32 	%r82, %r28, %r78;
	sub.s32 	%r83, %r28, %r77;
	sub.s32 	%r84, %r28, %r76;
	shl.b32 	%r85, %r84, 23;
	shl.b32 	%r86, %r83, 23;
	shl.b32 	%r87, %r82, 23;
	shl.b32 	%r88, %r81, 23;
	or.b32  	%r89, %r88, %r72;
	or.b32  	%r90, %r87, %r73;
	or.b32  	%r91, %r86, %r74;
	or.b32  	%r92, %r85, %r75;
	mov.b32 	%f242, %r92;
	mov.b32 	%f243, %r91;
	mov.b32 	%f244, %r90;
	mov.b32 	%f245, %r89;
	add.ftz.f32 	%f246, %f245, 0fBF800000;
	add.ftz.f32 	%f247, %f244, 0fBF800000;
	add.ftz.f32 	%f248, %f243, 0fBF800000;
	add.ftz.f32 	%f249, %f242, 0fBF800000;
	neg.ftz.f32 	%f250, %f249;
	fma.rn.ftz.f32 	%f251, %f242, %f249, %f250;
	neg.ftz.f32 	%f252, %f248;
	fma.rn.ftz.f32 	%f253, %f243, %f248, %f252;
	neg.ftz.f32 	%f254, %f247;
	fma.rn.ftz.f32 	%f255, %f244, %f247, %f254;
	neg.ftz.f32 	%f256, %f246;
	fma.rn.ftz.f32 	%f257, %f245, %f246, %f256;
	fma.rn.ftz.f32 	%f258, %f257, 0f3D5162F5, 0f3E19502F;
	fma.rn.ftz.f32 	%f259, %f255, 0f3D5162F5, 0f3E19502F;
	fma.rn.ftz.f32 	%f260, %f253, 0f3D5162F5, 0f3E19502F;
	fma.rn.ftz.f32 	%f261, %f251, 0f3D5162F5, 0f3E19502F;
	fma.rn.ftz.f32 	%f262, %f251, %f261, 0f3E4C9A1F;
	fma.rn.ftz.f32 	%f263, %f253, %f260, 0f3E4C9A1F;
	fma.rn.ftz.f32 	%f264, %f255, %f259, 0f3E4C9A1F;
	fma.rn.ftz.f32 	%f265, %f257, %f258, 0f3E4C9A1F;
	fma.rn.ftz.f32 	%f266, %f257, %f265, 0f3EAAAACD;
	fma.rn.ftz.f32 	%f267, %f255, %f264, 0f3EAAAACD;
	fma.rn.ftz.f32 	%f268, %f253, %f263, 0f3EAAAACD;
	fma.rn.ftz.f32 	%f269, %f251, %f262, 0f3EAAAACD;
	fma.rn.ftz.f32 	%f270, %f251, %f269, 0f3F800000;
	fma.rn.ftz.f32 	%f271, %f253, %f268, 0f3F800000;
	fma.rn.ftz.f32 	%f272, %f255, %f267, 0f3F800000;
	fma.rn.ftz.f32 	%f273, %f257, %f266, 0f3F800000;
	neg.ftz.f32 	%f274, %f273;
	fma.rn.ftz.f32 	%f275, %f245, %f273, %f274;
	neg.ftz.f32 	%f276, %f272;
	fma.rn.ftz.f32 	%f277, %f244, %f272, %f276;
	neg.ftz.f32 	%f278, %f271;
	fma.rn.ftz.f32 	%f279, %f243, %f271, %f278;
	neg.ftz.f32 	%f280, %f270;
	fma.rn.ftz.f32 	%f281, %f242, %f270, %f280;
	fma.rn.ftz.f32 	%f282, %f257, 0fBDF18A20, 0fBE2CAABC;
	fma.rn.ftz.f32 	%f283, %f255, 0fBDF18A20, 0fBE2CAABC;
	fma.rn.ftz.f32 	%f284, %f253, 0fBDF18A20, 0fBE2CAABC;
	fma.rn.ftz.f32 	%f285, %f251, 0fBDF18A20, 0fBE2CAABC;
	fma.rn.ftz.f32 	%f286, %f251, %f285, 0fBE7FE8F6;
	fma.rn.ftz.f32 	%f287, %f253, %f284, 0fBE7FE8F6;
	fma.rn.ftz.f32 	%f288, %f255, %f283, 0fBE7FE8F6;
	fma.rn.ftz.f32 	%f289, %f257, %f282, 0fBE7FE8F6;
	fma.rn.ftz.f32 	%f290, %f257, %f289, 0fBF000012;
	fma.rn.ftz.f32 	%f291, %f255, %f288, 0fBF000012;
	fma.rn.ftz.f32 	%f292, %f253, %f287, 0fBF000012;
	fma.rn.ftz.f32 	%f293, %f251, %f286, 0fBF000012;
	fma.rn.ftz.f32 	%f294, %f251, %f293, %f281;
	fma.rn.ftz.f32 	%f295, %f253, %f292, %f279;
	fma.rn.ftz.f32 	%f296, %f255, %f291, %f277;
	fma.rn.ftz.f32 	%f297, %f257, %f290, %f275;
	shr.s32 	%r93, %r68, 23;
	shr.s32 	%r94, %r69, 23;
	shr.s32 	%r95, %r70, 23;
	shr.s32 	%r96, %r71, 23;
	sub.s32 	%r97, %r96, %r81;
	sub.s32 	%r98, %r95, %r82;
	sub.s32 	%r99, %r94, %r83;
	sub.s32 	%r100, %r93, %r84;
	cvt.rn.f32.s32 	%f298, %r100;
	cvt.rn.f32.s32 	%f299, %r99;
	cvt.rn.f32.s32 	%f300, %r98;
	cvt.rn.f32.s32 	%f301, %r97;
	fma.rn.ftz.f32 	%f302, %f301, 0f3F317218, %f297;
	fma.rn.ftz.f32 	%f303, %f300, 0f3F317218, %f296;
	fma.rn.ftz.f32 	%f304, %f299, 0f3F317218, %f295;
	fma.rn.ftz.f32 	%f305, %f298, 0f3F317218, %f294;
	selp.f32 	%f306, 0fFF800000, %f305, %p22;
	selp.f32 	%f307, 0fFF800000, %f304, %p23;
	selp.f32 	%f308, 0fFF800000, %f303, %p24;
	selp.f32 	%f309, 0fFF800000, %f302, %p25;
	mul.ftz.f32 	%f310, %f5, %f309;
	mul.ftz.f32 	%f311, %f5, %f308;
	mul.ftz.f32 	%f312, %f5, %f307;
	mul.ftz.f32 	%f313, %f5, %f306;
	mul.ftz.f32 	%f314, %f313, 0f3FB8AA3B;
	mul.ftz.f32 	%f315, %f312, 0f3FB8AA3B;
	mul.ftz.f32 	%f316, %f311, 0f3FB8AA3B;
	mul.ftz.f32 	%f317, %f310, 0f3FB8AA3B;
	cvt.rmi.ftz.f32.f32 	%f318, %f317;
	cvt.rmi.ftz.f32.f32 	%f319, %f316;
	cvt.rmi.ftz.f32.f32 	%f320, %f315;
	cvt.rmi.ftz.f32.f32 	%f321, %f314;
	cvt.rzi.ftz.s32.f32 	%r101, %f321;
	cvt.rzi.ftz.s32.f32 	%r102, %f318;
	cvt.rzi.ftz.s32.f32 	%r103, %f319;
	cvt.rzi.ftz.s32.f32 	%r104, %f320;
	mul.ftz.f32 	%f322, %f319, 0fBF317200;
	mul.ftz.f32 	%f323, %f321, 0fBF317200;
	fma.rn.ftz.f32 	%f324, %f5, %f306, %f323;
	mul.ftz.f32 	%f325, %f318, 0fBF317200;
	fma.rn.ftz.f32 	%f326, %f5, %f309, %f325;
	fma.rn.ftz.f32 	%f327, %f5, %f308, %f322;
	mul.ftz.f32 	%f328, %f320, 0fBF317200;
	fma.rn.ftz.f32 	%f329, %f5, %f307, %f328;
	fma.rn.ftz.f32 	%f330, %f320, 0fB5BFBE8E, %f329;
	fma.rn.ftz.f32 	%f331, %f319, 0fB5BFBE8E, %f327;
	fma.rn.ftz.f32 	%f332, %f318, 0fB5BFBE8E, %f326;
	fma.rn.ftz.f32 	%f333, %f321, 0fB5BFBE8E, %f324;
	mul.ftz.f32 	%f334, %f333, %f333;
	mul.ftz.f32 	%f335, %f332, %f332;
	mul.ftz.f32 	%f336, %f331, %f331;
	mul.ftz.f32 	%f337, %f330, %f330;
	add.s32 	%r105, %r104, 127;
	add.s32 	%r106, %r103, 127;
	add.s32 	%r107, %r102, 127;
	add.s32 	%r108, %r101, 127;
	setp.gt.s32 	%p26, %r108, 0;
	setp.gt.s32 	%p27, %r107, 0;
	setp.gt.s32 	%p28, %r106, 0;
	setp.gt.s32 	%p29, %r105, 0;
	setp.lt.s32 	%p30, %r105, 255;
	setp.lt.s32 	%p31, %r106, 255;
	setp.lt.s32 	%p32, %r107, 255;
	setp.lt.s32 	%p33, %r108, 255;
	fma.rn.ftz.f32 	%f338, %f337, 0f39A797F3, 0f3C0B192A;
	fma.rn.ftz.f32 	%f339, %f336, 0f39A797F3, 0f3C0B192A;
	fma.rn.ftz.f32 	%f340, %f335, 0f39A797F3, 0f3C0B192A;
	fma.rn.ftz.f32 	%f341, %f334, 0f39A797F3, 0f3C0B192A;
	fma.rn.ftz.f32 	%f342, %f334, %f341, 0f3E2AAE1F;
	fma.rn.ftz.f32 	%f343, %f335, %f340, 0f3E2AAE1F;
	fma.rn.ftz.f32 	%f344, %f336, %f339, 0f3E2AAE1F;
	fma.rn.ftz.f32 	%f345, %f337, %f338, 0f3E2AAE1F;
	fma.rn.ftz.f32 	%f346, %f337, %f345, 0f3F800000;
	fma.rn.ftz.f32 	%f347, %f336, %f344, 0f3F800000;
	fma.rn.ftz.f32 	%f348, %f335, %f343, 0f3F800000;
	fma.rn.ftz.f32 	%f349, %f334, %f342, 0f3F800000;
	fma.rn.ftz.f32 	%f350, %f337, 0f3A9C2E66, 0f3D2A66BC;
	fma.rn.ftz.f32 	%f351, %f336, 0f3A9C2E66, 0f3D2A66BC;
	fma.rn.ftz.f32 	%f352, %f335, 0f3A9C2E66, 0f3D2A66BC;
	fma.rn.ftz.f32 	%f353, %f334, 0f3A9C2E66, 0f3D2A66BC;
	fma.rn.ftz.f32 	%f354, %f334, %f353, 0f3EFFFFDE;
	fma.rn.ftz.f32 	%f355, %f335, %f352, 0f3EFFFFDE;
	fma.rn.ftz.f32 	%f356, %f336, %f351, 0f3EFFFFDE;
	fma.rn.ftz.f32 	%f357, %f337, %f350, 0f3EFFFFDE;
	fma.rn.ftz.f32 	%f358, %f337, %f357, 0f3F800000;
	fma.rn.ftz.f32 	%f359, %f336, %f356, 0f3F800000;
	fma.rn.ftz.f32 	%f360, %f335, %f355, 0f3F800000;
	fma.rn.ftz.f32 	%f361, %f334, %f354, 0f3F800000;
	fma.rn.ftz.f32 	%f362, %f333, %f349, %f361;
	fma.rn.ftz.f32 	%f363, %f332, %f348, %f360;
	fma.rn.ftz.f32 	%f364, %f331, %f347, %f359;
	fma.rn.ftz.f32 	%f365, %f330, %f346, %f358;
	shl.b32 	%r109, %r105, 23;
	shl.b32 	%r110, %r106, 23;
	shl.b32 	%r111, %r107, 23;
	shl.b32 	%r112, %r108, 23;
	mov.b32 	%f366, %r112;
	mov.b32 	%f367, %r111;
	mov.b32 	%f368, %r110;
	mov.b32 	%f369, %r109;
	mul.ftz.f32 	%f370, %f365, %f369;
	mul.ftz.f32 	%f371, %f364, %f368;
	mul.ftz.f32 	%f372, %f363, %f367;
	mul.ftz.f32 	%f373, %f362, %f366;
	selp.f32 	%f374, %f373, 0f7F800000, %p33;
	selp.f32 	%f375, %f372, 0f7F800000, %p32;
	selp.f32 	%f376, %f371, 0f7F800000, %p31;
	selp.f32 	%f377, %f370, 0f7F800000, %p30;
	selp.f32 	%f378, %f377, 0f00000000, %p29;
	selp.f32 	%f379, %f376, 0f00000000, %p28;
	selp.f32 	%f380, %f375, 0f00000000, %p27;
	selp.f32 	%f381, %f374, 0f00000000, %p26;
	or.b32  	%r113, %r1, 4;
	add.s32 	%r114, %r113, 2;
	add.s32 	%r115, %r113, 1;
	add.s32 	%r116, %r113, 3;
	setp.lt.s32 	%p34, %r7, %r116;
	setp.lt.s32 	%p35, %r7, %r113;
	setp.lt.s32 	%p36, %r7, %r115;
	setp.lt.s32 	%p37, %r7, %r114;
	setp.gt.ftz.f32 	%p38, %f381, 0f3F000000;
	setp.gt.ftz.f32 	%p39, %f380, 0f3F000000;
	setp.gt.ftz.f32 	%p40, %f379, 0f3F000000;
	setp.gt.ftz.f32 	%p41, %f378, 0f3F000000;
	sub.ftz.f32 	%f382, %f171, %f378;
	sub.ftz.f32 	%f383, %f171, %f379;
	sub.ftz.f32 	%f384, %f171, %f380;
	sub.ftz.f32 	%f385, %f171, %f381;
	fma.rn.ftz.f32 	%f386, %f176, %f385, %f13;
	fma.rn.ftz.f32 	%f387, %f176, %f384, %f13;
	fma.rn.ftz.f32 	%f388, %f176, %f383, %f13;
	fma.rn.ftz.f32 	%f389, %f176, %f382, %f13;
	sub.ftz.f32 	%f390, %f389, 0f40000000;
	sub.ftz.f32 	%f391, %f388, 0f40000000;
	sub.ftz.f32 	%f392, %f387, 0f40000000;
	sub.ftz.f32 	%f393, %f386, 0f40000000;
	fma.rn.ftz.f32 	%f394, %f385, %f393, 0f3F800000;
	fma.rn.ftz.f32 	%f395, %f384, %f392, 0f3F800000;
	fma.rn.ftz.f32 	%f396, %f383, %f391, 0f3F800000;
	fma.rn.ftz.f32 	%f397, %f382, %f390, 0f3F800000;
	fma.rn.ftz.f32 	%f398, %f14, %f381, %f189;
	fma.rn.ftz.f32 	%f399, %f14, %f380, %f189;
	fma.rn.ftz.f32 	%f400, %f14, %f379, %f189;
	fma.rn.ftz.f32 	%f401, %f14, %f378, %f189;
	add.ftz.f32 	%f402, %f401, 0f40000000;
	add.ftz.f32 	%f403, %f400, 0f40000000;
	add.ftz.f32 	%f404, %f399, 0f40000000;
	add.ftz.f32 	%f405, %f398, 0f40000000;
	mul.ftz.f32 	%f406, %f381, %f405;
	mul.ftz.f32 	%f407, %f380, %f404;
	mul.ftz.f32 	%f408, %f379, %f403;
	mul.ftz.f32 	%f409, %f378, %f402;
	selp.f32 	%f410, %f397, %f409, %p41;
	selp.f32 	%f411, %f396, %f408, %p40;
	selp.f32 	%f412, %f395, %f407, %p39;
	selp.f32 	%f413, %f394, %f406, %p38;
	mul.ftz.f32 	%f414, %f413, 0f437F0000;
	mul.ftz.f32 	%f415, %f412, 0f437F0000;
	mul.ftz.f32 	%f416, %f411, 0f437F0000;
	mul.ftz.f32 	%f417, %f410, 0f437F0000;
	min.ftz.f32 	%f418, %f417, 0f437E8000;
	min.ftz.f32 	%f419, %f416, 0f437E8000;
	min.ftz.f32 	%f420, %f415, 0f437E8000;
	min.ftz.f32 	%f421, %f414, 0f437E8000;
	max.ftz.f32 	%f422, %f421, 0fBF000000;
	max.ftz.f32 	%f423, %f420, 0fBF000000;
	max.ftz.f32 	%f424, %f419, 0fBF000000;
	max.ftz.f32 	%f425, %f418, 0fBF000000;
	add.ftz.f32 	%f426, %f425, 0f3F000000;
	add.ftz.f32 	%f427, %f424, 0f3F000000;
	add.ftz.f32 	%f428, %f423, 0f3F000000;
	add.ftz.f32 	%f429, %f422, 0f3F000000;
	cvt.rzi.ftz.u16.f32 	%rs21, %f429;
	cvt.rzi.ftz.u16.f32 	%rs22, %f428;
	cvt.rzi.ftz.u16.f32 	%rs23, %f427;
	cvt.rzi.ftz.u16.f32 	%rs24, %f426;
	selp.b16 	%rs25, -1, %rs24, %p37;
	selp.b16 	%rs26, -1, %rs23, %p36;
	selp.b16 	%rs27, -1, %rs22, %p35;
	selp.b16 	%rs28, -1, %rs21, %p34;
	st.global.v4.u8 	[%rd4], {%rs17, %rs18, %rs19, %rs20};
	st.global.v4.u8 	[%rd4+4], {%rs27, %rs26, %rs25, %rs28};
	add.s32 	%r117, %r2, 8;
	add.s32 	%r118, %r2, 9;
	add.s32 	%r119, %r2, 10;
	add.s32 	%r120, %r2, 11;
	cvt.rn.f32.s32 	%f430, %r120;
	cvt.rn.f32.s32 	%f431, %r119;
	cvt.rn.f32.s32 	%f432, %r118;
	cvt.rn.f32.s32 	%f433, %r117;
	mul.ftz.f32 	%f434, %f1, %f433;
	mul.ftz.f32 	%f435, %f1, %f432;
	mul.ftz.f32 	%f436, %f1, %f431;
	mul.ftz.f32 	%f437, %f1, %f430;
	min.ftz.f32 	%f438, %f437, 0f3F800000;
	min.ftz.f32 	%f439, %f436, 0f3F800000;
	min.ftz.f32 	%f440, %f435, 0f3F800000;
	min.ftz.f32 	%f441, %f434, 0f3F800000;
	max.ftz.f32 	%f442, %f441, 0f00000000;
	max.ftz.f32 	%f443, %f440, 0f00000000;
	max.ftz.f32 	%f444, %f439, 0f00000000;
	max.ftz.f32 	%f445, %f438, 0f00000000;
	setp.le.ftz.f32 	%p42, %f445, 0f00000000;
	setp.le.ftz.f32 	%p43, %f444, 0f00000000;
	setp.le.ftz.f32 	%p44, %f443, 0f00000000;
	setp.le.ftz.f32 	%p45, %f442, 0f00000000;
	selp.f32 	%f446, 0f3F800000, %f442, %p45;
	selp.f32 	%f447, 0f3F800000, %f443, %p44;
	selp.f32 	%f448, 0f3F800000, %f444, %p43;
	selp.f32 	%f449, 0f3F800000, %f445, %p42;
	mov.b32 	%r121, %f449;
	mov.b32 	%r122, %f448;
	mov.b32 	%r123, %f447;
	mov.b32 	%r124, %f446;
	and.b32  	%r125, %r124, -2139095041;
	and.b32  	%r126, %r123, -2139095041;
	and.b32  	%r127, %r122, -2139095041;
	and.b32  	%r128, %r121, -2139095041;
	shr.s32 	%r129, %r128, 22;
	shr.s32 	%r130, %r127, 22;
	shr.s32 	%r131, %r126, 22;
	shr.s32 	%r132, %r125, 22;
	sub.s32 	%r133, %r28, %r132;
	sub.s32 	%r134, %r28, %r131;
	sub.s32 	%r135, %r28, %r130;
	sub.s32 	%r136, %r28, %r129;
	shl.b32 	%r137, %r136, 23;
	shl.b32 	%r138, %r135, 23;
	shl.b32 	%r139, %r134, 23;
	shl.b32 	%r140, %r133, 23;
	or.b32  	%r141, %r140, %r125;
	or.b32  	%r142, %r139, %r126;
	or.b32  	%r143, %r138, %r127;
	or.b32  	%r144, %r137, %r128;
	mov.b32 	%f450, %r144;
	mov.b32 	%f451, %r143;
	mov.b32 	%f452, %r142;
	mov.b32 	%f453, %r141;
	add.ftz.f32 	%f454, %f453, 0fBF800000;
	add.ftz.f32 	%f455, %f452, 0fBF800000;
	add.ftz.f32 	%f456, %f451, 0fBF800000;
	add.ftz.f32 	%f457, %f450, 0fBF800000;
	neg.ftz.f32 	%f458, %f457;
	fma.rn.ftz.f32 	%f459, %f450, %f457, %f458;
	neg.ftz.f32 	%f460, %f456;
	fma.rn.ftz.f32 	%f461, %f451, %f456, %f460;
	neg.ftz.f32 	%f462, %f455;
	fma.rn.ftz.f32 	%f463, %f452, %f455, %f462;
	neg.ftz.f32 	%f464, %f454;
	fma.rn.ftz.f32 	%f465, %f453, %f454, %f464;
	fma.rn.ftz.f32 	%f466, %f465, 0f3D5162F5, 0f3E19502F;
	fma.rn.ftz.f32 	%f467, %f463, 0f3D5162F5, 0f3E19502F;
	fma.rn.ftz.f32 	%f468, %f461, 0f3D5162F5, 0f3E19502F;
	fma.rn.ftz.f32 	%f469, %f459, 0f3D5162F5, 0f3E19502F;
	fma.rn.ftz.f32 	%f470, %f459, %f469, 0f3E4C9A1F;
	fma.rn.ftz.f32 	%f471, %f461, %f468, 0f3E4C9A1F;
	fma.rn.ftz.f32 	%f472, %f463, %f467, 0f3E4C9A1F;
	fma.rn.ftz.f32 	%f473, %f465, %f466, 0f3E4C9A1F;
	fma.rn.ftz.f32 	%f474, %f465, %f473, 0f3EAAAACD;
	fma.rn.ftz.f32 	%f475, %f463, %f472, 0f3EAAAACD;
	fma.rn.ftz.f32 	%f476, %f461, %f471, 0f3EAAAACD;
	fma.rn.ftz.f32 	%f477, %f459, %f470, 0f3EAAAACD;
	fma.rn.ftz.f32 	%f478, %f459, %f477, 0f3F800000;
	fma.rn.ftz.f32 	%f479, %f461, %f476, 0f3F800000;
	fma.rn.ftz.f32 	%f480, %f463, %f475, 0f3F800000;
	fma.rn.ftz.f32 	%f481, %f465, %f474, 0f3F800000;
	neg.ftz.f32 	%f482, %f481;
	fma.rn.ftz.f32 	%f483, %f453, %f481, %f482;
	neg.ftz.f32 	%f484, %f480;
	fma.rn.ftz.f32 	%f485, %f452, %f480, %f484;
	neg.ftz.f32 	%f486, %f479;
	fma.rn.ftz.f32 	%f487, %f451, %f479, %f486;
	neg.ftz.f32 	%f488, %f478;
	fma.rn.ftz.f32 	%f489, %f450, %f478, %f488;
	fma.rn.ftz.f32 	%f490, %f465, 0fBDF18A20, 0fBE2CAABC;
	fma.rn.ftz.f32 	%f491, %f463, 0fBDF18A20, 0fBE2CAABC;
	fma.rn.ftz.f32 	%f492, %f461, 0fBDF18A20, 0fBE2CAABC;
	fma.rn.ftz.f32 	%f493, %f459, 0fBDF18A20, 0fBE2CAABC;
	fma.rn.ftz.f32 	%f494, %f459, %f493, 0fBE7FE8F6;
	fma.rn.ftz.f32 	%f495, %f461, %f492, 0fBE7FE8F6;
	fma.rn.ftz.f32 	%f496, %f463, %f491, 0fBE7FE8F6;
	fma.rn.ftz.f32 	%f497, %f465, %f490, 0fBE7FE8F6;
	fma.rn.ftz.f32 	%f498, %f465, %f497, 0fBF000012;
	fma.rn.ftz.f32 	%f499, %f463, %f496, 0fBF000012;
	fma.rn.ftz.f32 	%f500, %f461, %f495, 0fBF000012;
	fma.rn.ftz.f32 	%f501, %f459, %f494, 0fBF000012;
	fma.rn.ftz.f32 	%f502, %f459, %f501, %f489;
	fma.rn.ftz.f32 	%f503, %f461, %f500, %f487;
	fma.rn.ftz.f32 	%f504, %f463, %f499, %f485;
	fma.rn.ftz.f32 	%f505, %f465, %f498, %f483;
	shr.s32 	%r145, %r121, 23;
	shr.s32 	%r146, %r122, 23;
	shr.s32 	%r147, %r123, 23;
	shr.s32 	%r148, %r124, 23;
	sub.s32 	%r149, %r148, %r133;
	sub.s32 	%r150, %r147, %r134;
	sub.s32 	%r151, %r146, %r135;
	sub.s32 	%r152, %r145, %r136;
	cvt.rn.f32.s32 	%f506, %r152;
	cvt.rn.f32.s32 	%f507, %r151;
	cvt.rn.f32.s32 	%f508, %r150;
	cvt.rn.f32.s32 	%f509, %r149;
	fma.rn.ftz.f32 	%f510, %f509, 0f3F317218, %f505;
	fma.rn.ftz.f32 	%f511, %f508, 0f3F317218, %f504;
	fma.rn.ftz.f32 	%f512, %f507, 0f3F317218, %f503;
	fma.rn.ftz.f32 	%f513, %f506, 0f3F317218, %f502;
	selp.f32 	%f514, 0fFF800000, %f513, %p42;
	selp.f32 	%f515, 0fFF800000, %f512, %p43;
	selp.f32 	%f516, 0fFF800000, %f511, %p44;
	selp.f32 	%f517, 0fFF800000, %f510, %p45;
	mul.ftz.f32 	%f518, %f5, %f517;
	mul.ftz.f32 	%f519, %f5, %f516;
	mul.ftz.f32 	%f520, %f5, %f515;
	mul.ftz.f32 	%f521, %f5, %f514;
	mul.ftz.f32 	%f522, %f521, 0f3FB8AA3B;
	mul.ftz.f32 	%f523, %f520, 0f3FB8AA3B;
	mul.ftz.f32 	%f524, %f519, 0f3FB8AA3B;
	mul.ftz.f32 	%f525, %f518, 0f3FB8AA3B;
	cvt.rmi.ftz.f32.f32 	%f526, %f525;
	cvt.rmi.ftz.f32.f32 	%f527, %f524;
	cvt.rmi.ftz.f32.f32 	%f528, %f523;
	cvt.rmi.ftz.f32.f32 	%f529, %f522;
	cvt.rzi.ftz.s32.f32 	%r153, %f529;
	cvt.rzi.ftz.s32.f32 	%r154, %f526;
	cvt.rzi.ftz.s32.f32 	%r155, %f527;
	cvt.rzi.ftz.s32.f32 	%r156, %f528;
	mul.ftz.f32 	%f530, %f529, 0fBF317200;
	fma.rn.ftz.f32 	%f531, %f5, %f514, %f530;
	mul.ftz.f32 	%f532, %f526, 0fBF317200;
	fma.rn.ftz.f32 	%f533, %f5, %f517, %f532;
	mul.ftz.f32 	%f534, %f527, 0fBF317200;
	fma.rn.ftz.f32 	%f535, %f5, %f516, %f534;
	mul.ftz.f32 	%f536, %f528, 0fBF317200;
	fma.rn.ftz.f32 	%f537, %f5, %f515, %f536;
	fma.rn.ftz.f32 	%f538, %f528, 0fB5BFBE8E, %f537;
	fma.rn.ftz.f32 	%f539, %f527, 0fB5BFBE8E, %f535;
	fma.rn.ftz.f32 	%f540, %f526, 0fB5BFBE8E, %f533;
	fma.rn.ftz.f32 	%f541, %f529, 0fB5BFBE8E, %f531;
	mul.ftz.f32 	%f542, %f541, %f541;
	mul.ftz.f32 	%f543, %f540, %f540;
	mul.ftz.f32 	%f544, %f539, %f539;
	mul.ftz.f32 	%f545, %f538, %f538;
	add.s32 	%r157, %r156, 127;
	add.s32 	%r158, %r155, 127;
	add.s32 	%r159, %r154, 127;
	add.s32 	%r160, %r153, 127;
	setp.gt.s32 	%p46, %r160, 0;
	setp.gt.s32 	%p47, %r159, 0;
	setp.gt.s32 	%p48, %r158, 0;
	setp.gt.s32 	%p49, %r157, 0;
	setp.lt.s32 	%p50, %r157, 255;
	setp.lt.s32 	%p51, %r158, 255;
	setp.lt.s32 	%p52, %r159, 255;
	setp.lt.s32 	%p53, %r160, 255;
	fma.rn.ftz.f32 	%f546, %f545, 0f39A797F3, 0f3C0B192A;
	fma.rn.ftz.f32 	%f547, %f544, 0f39A797F3, 0f3C0B192A;
	fma.rn.ftz.f32 	%f548, %f543, 0f39A797F3, 0f3C0B192A;
	fma.rn.ftz.f32 	%f549, %f542, 0f39A797F3, 0f3C0B192A;
	fma.rn.ftz.f32 	%f550, %f542, %f549, 0f3E2AAE1F;
	fma.rn.ftz.f32 	%f551, %f543, %f548, 0f3E2AAE1F;
	fma.rn.ftz.f32 	%f552, %f544, %f547, 0f3E2AAE1F;
	fma.rn.ftz.f32 	%f553, %f545, %f546, 0f3E2AAE1F;
	fma.rn.ftz.f32 	%f554, %f545, %f553, 0f3F800000;
	fma.rn.ftz.f32 	%f555, %f544, %f552, 0f3F800000;
	fma.rn.ftz.f32 	%f556, %f543, %f551, 0f3F800000;
	fma.rn.ftz.f32 	%f557, %f542, %f550, 0f3F800000;
	fma.rn.ftz.f32 	%f558, %f545, 0f3A9C2E66, 0f3D2A66BC;
	fma.rn.ftz.f32 	%f559, %f544, 0f3A9C2E66, 0f3D2A66BC;
	fma.rn.ftz.f32 	%f560, %f543, 0f3A9C2E66, 0f3D2A66BC;
	fma.rn.ftz.f32 	%f561, %f542, 0f3A9C2E66, 0f3D2A66BC;
	fma.rn.ftz.f32 	%f562, %f542, %f561, 0f3EFFFFDE;
	fma.rn.ftz.f32 	%f563, %f543, %f560, 0f3EFFFFDE;
	fma.rn.ftz.f32 	%f564, %f544, %f559, 0f3EFFFFDE;
	fma.rn.ftz.f32 	%f565, %f545, %f558, 0f3EFFFFDE;
	fma.rn.ftz.f32 	%f566, %f545, %f565, 0f3F800000;
	fma.rn.ftz.f32 	%f567, %f544, %f564, 0f3F800000;
	fma.rn.ftz.f32 	%f568, %f543, %f563, 0f3F800000;
	fma.rn.ftz.f32 	%f569, %f542, %f562, 0f3F800000;
	fma.rn.ftz.f32 	%f570, %f541, %f557, %f569;
	fma.rn.ftz.f32 	%f571, %f540, %f556, %f568;
	fma.rn.ftz.f32 	%f572, %f539, %f555, %f567;
	fma.rn.ftz.f32 	%f573, %f538, %f554, %f566;
	shl.b32 	%r161, %r157, 23;
	shl.b32 	%r162, %r158, 23;
	shl.b32 	%r163, %r159, 23;
	shl.b32 	%r164, %r160, 23;
	mov.b32 	%f574, %r164;
	mov.b32 	%f575, %r163;
	mov.b32 	%f576, %r162;
	mov.b32 	%f577, %r161;
	mul.ftz.f32 	%f578, %f573, %f577;
	mul.ftz.f32 	%f579, %f572, %f576;
	mul.ftz.f32 	%f580, %f571, %f575;
	mul.ftz.f32 	%f581, %f570, %f574;
	selp.f32 	%f582, %f581, 0f7F800000, %p53;
	selp.f32 	%f583, %f580, 0f7F800000, %p52;
	selp.f32 	%f584, %f579, 0f7F800000, %p51;
	selp.f32 	%f585, %f578, 0f7F800000, %p50;
	selp.f32 	%f586, %f585, 0f00000000, %p49;
	selp.f32 	%f587, %f584, 0f00000000, %p48;
	selp.f32 	%f588, %f583, 0f00000000, %p47;
	selp.f32 	%f589, %f582, 0f00000000, %p46;
	or.b32  	%r165, %r1, 8;
	add.s32 	%r166, %r165, 2;
	add.s32 	%r167, %r165, 1;
	add.s32 	%r168, %r165, 3;
	setp.lt.s32 	%p54, %r7, %r168;
	setp.lt.s32 	%p55, %r7, %r165;
	setp.lt.s32 	%p56, %r7, %r167;
	setp.lt.s32 	%p57, %r7, %r166;
	setp.gt.ftz.f32 	%p58, %f589, 0f3F000000;
	setp.gt.ftz.f32 	%p59, %f588, 0f3F000000;
	setp.gt.ftz.f32 	%p60, %f587, 0f3F000000;
	setp.gt.ftz.f32 	%p61, %f586, 0f3F000000;
	sub.ftz.f32 	%f590, %f171, %f586;
	sub.ftz.f32 	%f591, %f171, %f587;
	sub.ftz.f32 	%f592, %f171, %f588;
	sub.ftz.f32 	%f593, %f171, %f589;
	fma.rn.ftz.f32 	%f594, %f176, %f593, %f13;
	fma.rn.ftz.f32 	%f595, %f176, %f592, %f13;
	fma.rn.ftz.f32 	%f596, %f176, %f591, %f13;
	fma.rn.ftz.f32 	%f597, %f176, %f590, %f13;
	sub.ftz.f32 	%f598, %f597, 0f40000000;
	sub.ftz.f32 	%f599, %f596, 0f40000000;
	sub.ftz.f32 	%f600, %f595, 0f40000000;
	sub.ftz.f32 	%f601, %f594, 0f40000000;
	fma.rn.ftz.f32 	%f602, %f593, %f601, 0f3F800000;
	fma.rn.ftz.f32 	%f603, %f592, %f600, 0f3F800000;
	fma.rn.ftz.f32 	%f604, %f591, %f599, 0f3F800000;
	fma.rn.ftz.f32 	%f605, %f590, %f598, 0f3F800000;
	fma.rn.ftz.f32 	%f606, %f14, %f589, %f189;
	fma.rn.ftz.f32 	%f607, %f14, %f588, %f189;
	fma.rn.ftz.f32 	%f608, %f14, %f587, %f189;
	fma.rn.ftz.f32 	%f609, %f14, %f586, %f189;
	add.ftz.f32 	%f610, %f609, 0f40000000;
	add.ftz.f32 	%f611, %f608, 0f40000000;
	add.ftz.f32 	%f612, %f607, 0f40000000;
	add.ftz.f32 	%f613, %f606, 0f40000000;
	mul.ftz.f32 	%f614, %f589, %f613;
	mul.ftz.f32 	%f615, %f588, %f612;
	mul.ftz.f32 	%f616, %f587, %f611;
	mul.ftz.f32 	%f617, %f586, %f610;
	selp.f32 	%f618, %f605, %f617, %p61;
	selp.f32 	%f619, %f604, %f616, %p60;
	selp.f32 	%f620, %f603, %f615, %p59;
	selp.f32 	%f621, %f602, %f614, %p58;
	mul.ftz.f32 	%f622, %f621, 0f437F0000;
	mul.ftz.f32 	%f623, %f620, 0f437F0000;
	mul.ftz.f32 	%f624, %f619, 0f437F0000;
	mul.ftz.f32 	%f625, %f618, 0f437F0000;
	min.ftz.f32 	%f626, %f625, 0f437E8000;
	min.ftz.f32 	%f627, %f624, 0f437E8000;
	min.ftz.f32 	%f628, %f623, 0f437E8000;
	min.ftz.f32 	%f629, %f622, 0f437E8000;
	max.ftz.f32 	%f630, %f629, 0fBF000000;
	max.ftz.f32 	%f631, %f628, 0fBF000000;
	max.ftz.f32 	%f632, %f627, 0fBF000000;
	max.ftz.f32 	%f633, %f626, 0fBF000000;
	add.ftz.f32 	%f634, %f633, 0f3F000000;
	add.ftz.f32 	%f635, %f632, 0f3F000000;
	add.ftz.f32 	%f636, %f631, 0f3F000000;
	add.ftz.f32 	%f637, %f630, 0f3F000000;
	cvt.rzi.ftz.u16.f32 	%rs29, %f637;
	cvt.rzi.ftz.u16.f32 	%rs30, %f636;
	cvt.rzi.ftz.u16.f32 	%rs31, %f635;
	cvt.rzi.ftz.u16.f32 	%rs32, %f634;
	selp.b16 	%rs33, -1, %rs32, %p57;
	selp.b16 	%rs34, -1, %rs31, %p56;
	selp.b16 	%rs35, -1, %rs30, %p55;
	selp.b16 	%rs36, -1, %rs29, %p54;
	st.global.v4.u8 	[%rd4+8], {%rs35, %rs34, %rs33, %rs36};
	add.s32 	%r169, %r2, 12;
	add.s32 	%r170, %r2, 13;
	add.s32 	%r171, %r2, 14;
	add.s32 	%r172, %r2, 15;
	cvt.rn.f32.s32 	%f638, %r172;
	cvt.rn.f32.s32 	%f639, %r171;
	cvt.rn.f32.s32 	%f640, %r170;
	cvt.rn.f32.s32 	%f641, %r169;
	mul.ftz.f32 	%f642, %f1, %f641;
	mul.ftz.f32 	%f643, %f1, %f640;
	mul.ftz.f32 	%f644, %f1, %f639;
	mul.ftz.f32 	%f645, %f1, %f638;
	min.ftz.f32 	%f646, %f645, 0f3F800000;
	min.ftz.f32 	%f647, %f644, 0f3F800000;
	min.ftz.f32 	%f648, %f643, 0f3F800000;
	min.ftz.f32 	%f649, %f642, 0f3F800000;
	max.ftz.f32 	%f650, %f649, 0f00000000;
	max.ftz.f32 	%f651, %f648, 0f00000000;
	max.ftz.f32 	%f652, %f647, 0f00000000;
	max.ftz.f32 	%f653, %f646, 0f00000000;
	setp.le.ftz.f32 	%p62, %f653, 0f00000000;
	setp.le.ftz.f32 	%p63, %f652, 0f00000000;
	setp.le.ftz.f32 	%p64, %f651, 0f00000000;
	setp.le.ftz.f32 	%p65, %f650, 0f00000000;
	selp.f32 	%f654, 0f3F800000, %f650, %p65;
	selp.f32 	%f655, 0f3F800000, %f651, %p64;
	selp.f32 	%f656, 0f3F800000, %f652, %p63;
	selp.f32 	%f657, 0f3F800000, %f653, %p62;
	mov.b32 	%r173, %f657;
	mov.b32 	%r174, %f656;
	mov.b32 	%r175, %f655;
	mov.b32 	%r176, %f654;
	and.b32  	%r177, %r176, -2139095041;
	and.b32  	%r178, %r175, -2139095041;
	and.b32  	%r179, %r174, -2139095041;
	and.b32  	%r180, %r173, -2139095041;
	shr.s32 	%r181, %r180, 22;
	shr.s32 	%r182, %r179, 22;
	shr.s32 	%r183, %r178, 22;
	shr.s32 	%r184, %r177, 22;
	sub.s32 	%r185, %r28, %r184;
	sub.s32 	%r186, %r28, %r183;
	sub.s32 	%r187, %r28, %r182;
	sub.s32 	%r188, %r28, %r181;
	shl.b32 	%r189, %r188, 23;
	shl.b32 	%r190, %r187, 23;
	shl.b32 	%r191, %r186, 23;
	shl.b32 	%r192, %r185, 23;
	or.b32  	%r193, %r192, %r177;
	or.b32  	%r194, %r191, %r178;
	or.b32  	%r195, %r190, %r179;
	or.b32  	%r196, %r189, %r180;
	mov.b32 	%f658, %r196;
	mov.b32 	%f659, %r195;
	mov.b32 	%f660, %r194;
	mov.b32 	%f661, %r193;
	add.ftz.f32 	%f662, %f661, 0fBF800000;
	add.ftz.f32 	%f663, %f660, 0fBF800000;
	add.ftz.f32 	%f664, %f659, 0fBF800000;
	add.ftz.f32 	%f665, %f658, 0fBF800000;
	neg.ftz.f32 	%f666, %f665;
	fma.rn.ftz.f32 	%f667, %f658, %f665, %f666;
	neg.ftz.f32 	%f668, %f664;
	fma.rn.ftz.f32 	%f669, %f659, %f664, %f668;
	neg.ftz.f32 	%f670, %f663;
	fma.rn.ftz.f32 	%f671, %f660, %f663, %f670;
	neg.ftz.f32 	%f672, %f662;
	fma.rn.ftz.f32 	%f673, %f661, %f662, %f672;
	fma.rn.ftz.f32 	%f674, %f673, 0f3D5162F5, 0f3E19502F;
	fma.rn.ftz.f32 	%f675, %f671, 0f3D5162F5, 0f3E19502F;
	fma.rn.ftz.f32 	%f676, %f669, 0f3D5162F5, 0f3E19502F;
	fma.rn.ftz.f32 	%f677, %f667, 0f3D5162F5, 0f3E19502F;
	fma.rn.ftz.f32 	%f678, %f667, %f677, 0f3E4C9A1F;
	fma.rn.ftz.f32 	%f679, %f669, %f676, 0f3E4C9A1F;
	fma.rn.ftz.f32 	%f680, %f671, %f675, 0f3E4C9A1F;
	fma.rn.ftz.f32 	%f681, %f673, %f674, 0f3E4C9A1F;
	fma.rn.ftz.f32 	%f682, %f673, %f681, 0f3EAAAACD;
	fma.rn.ftz.f32 	%f683, %f671, %f680, 0f3EAAAACD;
	fma.rn.ftz.f32 	%f684, %f669, %f679, 0f3EAAAACD;
	fma.rn.ftz.f32 	%f685, %f667, %f678, 0f3EAAAACD;
	fma.rn.ftz.f32 	%f686, %f667, %f685, 0f3F800000;
	fma.rn.ftz.f32 	%f687, %f669, %f684, 0f3F800000;
	fma.rn.ftz.f32 	%f688, %f671, %f683, 0f3F800000;
	fma.rn.ftz.f32 	%f689, %f673, %f682, 0f3F800000;
	neg.ftz.f32 	%f690, %f689;
	fma.rn.ftz.f32 	%f691, %f661, %f689, %f690;
	neg.ftz.f32 	%f692, %f688;
	fma.rn.ftz.f32 	%f693, %f660, %f688, %f692;
	neg.ftz.f32 	%f694, %f687;
	fma.rn.ftz.f32 	%f695, %f659, %f687, %f694;
	neg.ftz.f32 	%f696, %f686;
	fma.rn.ftz.f32 	%f697, %f658, %f686, %f696;
	fma.rn.ftz.f32 	%f698, %f673, 0fBDF18A20, 0fBE2CAABC;
	fma.rn.ftz.f32 	%f699, %f671, 0fBDF18A20, 0fBE2CAABC;
	fma.rn.ftz.f32 	%f700, %f669, 0fBDF18A20, 0fBE2CAABC;
	fma.rn.ftz.f32 	%f701, %f667, 0fBDF18A20, 0fBE2CAABC;
	fma.rn.ftz.f32 	%f702, %f667, %f701, 0fBE7FE8F6;
	fma.rn.ftz.f32 	%f703, %f669, %f700, 0fBE7FE8F6;
	fma.rn.ftz.f32 	%f704, %f671, %f699, 0fBE7FE8F6;
	fma.rn.ftz.f32 	%f705, %f673, %f698, 0fBE7FE8F6;
	fma.rn.ftz.f32 	%f706, %f673, %f705, 0fBF000012;
	fma.rn.ftz.f32 	%f707, %f671, %f704, 0fBF000012;
	fma.rn.ftz.f32 	%f708, %f669, %f703, 0fBF000012;
	fma.rn.ftz.f32 	%f709, %f667, %f702, 0fBF000012;
	fma.rn.ftz.f32 	%f710, %f667, %f709, %f697;
	fma.rn.ftz.f32 	%f711, %f669, %f708, %f695;
	fma.rn.ftz.f32 	%f712, %f671, %f707, %f693;
	fma.rn.ftz.f32 	%f713, %f673, %f706, %f691;
	shr.s32 	%r197, %r173, 23;
	shr.s32 	%r198, %r174, 23;
	shr.s32 	%r199, %r175, 23;
	shr.s32 	%r200, %r176, 23;
	sub.s32 	%r201, %r200, %r185;
	sub.s32 	%r202, %r199, %r186;
	sub.s32 	%r203, %r198, %r187;
	sub.s32 	%r204, %r197, %r188;
	cvt.rn.f32.s32 	%f714, %r204;
	cvt.rn.f32.s32 	%f715, %r203;
	cvt.rn.f32.s32 	%f716, %r202;
	cvt.rn.f32.s32 	%f717, %r201;
	fma.rn.ftz.f32 	%f718, %f717, 0f3F317218, %f713;
	fma.rn.ftz.f32 	%f719, %f716, 0f3F317218, %f712;
	fma.rn.ftz.f32 	%f720, %f715, 0f3F317218, %f711;
	fma.rn.ftz.f32 	%f721, %f714, 0f3F317218, %f710;
	selp.f32 	%f722, 0fFF800000, %f721, %p62;
	selp.f32 	%f723, 0fFF800000, %f720, %p63;
	selp.f32 	%f724, 0fFF800000, %f719, %p64;
	selp.f32 	%f725, 0fFF800000, %f718, %p65;
	mul.ftz.f32 	%f726, %f5, %f725;
	mul.ftz.f32 	%f727, %f5, %f724;
	mul.ftz.f32 	%f728, %f5, %f723;
	mul.ftz.f32 	%f729, %f5, %f722;
	mul.ftz.f32 	%f730, %f729, 0f3FB8AA3B;
	mul.ftz.f32 	%f731, %f728, 0f3FB8AA3B;
	mul.ftz.f32 	%f732, %f727, 0f3FB8AA3B;
	mul.ftz.f32 	%f733, %f726, 0f3FB8AA3B;
	cvt.rmi.ftz.f32.f32 	%f734, %f733;
	cvt.rmi.ftz.f32.f32 	%f735, %f732;
	cvt.rmi.ftz.f32.f32 	%f736, %f731;
	cvt.rmi.ftz.f32.f32 	%f737, %f730;
	cvt.rzi.ftz.s32.f32 	%r205, %f737;
	cvt.rzi.ftz.s32.f32 	%r206, %f734;
	cvt.rzi.ftz.s32.f32 	%r207, %f735;
	cvt.rzi.ftz.s32.f32 	%r208, %f736;
	mul.ftz.f32 	%f738, %f737, 0fBF317200;
	fma.rn.ftz.f32 	%f739, %f5, %f722, %f738;
	mul.ftz.f32 	%f740, %f734, 0fBF317200;
	fma.rn.ftz.f32 	%f741, %f5, %f725, %f740;
	mul.ftz.f32 	%f742, %f735, 0fBF317200;
	fma.rn.ftz.f32 	%f743, %f5, %f724, %f742;
	mul.ftz.f32 	%f744, %f736, 0fBF317200;
	fma.rn.ftz.f32 	%f745, %f5, %f723, %f744;
	fma.rn.ftz.f32 	%f746, %f736, 0fB5BFBE8E, %f745;
	fma.rn.ftz.f32 	%f747, %f735, 0fB5BFBE8E, %f743;
	fma.rn.ftz.f32 	%f748, %f734, 0fB5BFBE8E, %f741;
	fma.rn.ftz.f32 	%f749, %f737, 0fB5BFBE8E, %f739;
	mul.ftz.f32 	%f750, %f749, %f749;
	mul.ftz.f32 	%f751, %f748, %f748;
	mul.ftz.f32 	%f752, %f747, %f747;
	mul.ftz.f32 	%f753, %f746, %f746;
	add.s32 	%r209, %r208, 127;
	add.s32 	%r210, %r207, 127;
	add.s32 	%r211, %r206, 127;
	add.s32 	%r212, %r205, 127;
	setp.gt.s32 	%p66, %r212, 0;
	setp.gt.s32 	%p67, %r211, 0;
	setp.gt.s32 	%p68, %r210, 0;
	setp.gt.s32 	%p69, %r209, 0;
	setp.lt.s32 	%p70, %r209, 255;
	setp.lt.s32 	%p71, %r210, 255;
	setp.lt.s32 	%p72, %r211, 255;
	setp.lt.s32 	%p73, %r212, 255;
	fma.rn.ftz.f32 	%f754, %f753, 0f39A797F3, 0f3C0B192A;
	fma.rn.ftz.f32 	%f755, %f752, 0f39A797F3, 0f3C0B192A;
	fma.rn.ftz.f32 	%f756, %f751, 0f39A797F3, 0f3C0B192A;
	fma.rn.ftz.f32 	%f757, %f750, 0f39A797F3, 0f3C0B192A;
	fma.rn.ftz.f32 	%f758, %f750, %f757, 0f3E2AAE1F;
	fma.rn.ftz.f32 	%f759, %f751, %f756, 0f3E2AAE1F;
	fma.rn.ftz.f32 	%f760, %f752, %f755, 0f3E2AAE1F;
	fma.rn.ftz.f32 	%f761, %f753, %f754, 0f3E2AAE1F;
	fma.rn.ftz.f32 	%f762, %f753, %f761, 0f3F800000;
	fma.rn.ftz.f32 	%f763, %f752, %f760, 0f3F800000;
	fma.rn.ftz.f32 	%f764, %f751, %f759, 0f3F800000;
	fma.rn.ftz.f32 	%f765, %f750, %f758, 0f3F800000;
	fma.rn.ftz.f32 	%f766, %f753, 0f3A9C2E66, 0f3D2A66BC;
	fma.rn.ftz.f32 	%f767, %f752, 0f3A9C2E66, 0f3D2A66BC;
	fma.rn.ftz.f32 	%f768, %f751, 0f3A9C2E66, 0f3D2A66BC;
	fma.rn.ftz.f32 	%f769, %f750, 0f3A9C2E66, 0f3D2A66BC;
	fma.rn.ftz.f32 	%f770, %f750, %f769, 0f3EFFFFDE;
	fma.rn.ftz.f32 	%f771, %f751, %f768, 0f3EFFFFDE;
	fma.rn.ftz.f32 	%f772, %f752, %f767, 0f3EFFFFDE;
	fma.rn.ftz.f32 	%f773, %f753, %f766, 0f3EFFFFDE;
	fma.rn.ftz.f32 	%f774, %f753, %f773, 0f3F800000;
	fma.rn.ftz.f32 	%f775, %f752, %f772, 0f3F800000;
	fma.rn.ftz.f32 	%f776, %f751, %f771, 0f3F800000;
	fma.rn.ftz.f32 	%f777, %f750, %f770, 0f3F800000;
	fma.rn.ftz.f32 	%f778, %f749, %f765, %f777;
	fma.rn.ftz.f32 	%f779, %f748, %f764, %f776;
	fma.rn.ftz.f32 	%f780, %f747, %f763, %f775;
	fma.rn.ftz.f32 	%f781, %f746, %f762, %f774;
	shl.b32 	%r213, %r209, 23;
	shl.b32 	%r214, %r210, 23;
	shl.b32 	%r215, %r211, 23;
	shl.b32 	%r216, %r212, 23;
	mov.b32 	%f782, %r216;
	mov.b32 	%f783, %r215;
	mov.b32 	%f784, %r214;
	mov.b32 	%f785, %r213;
	mul.ftz.f32 	%f786, %f781, %f785;
	mul.ftz.f32 	%f787, %f780, %f784;
	mul.ftz.f32 	%f788, %f779, %f783;
	mul.ftz.f32 	%f789, %f778, %f782;
	selp.f32 	%f790, %f789, 0f7F800000, %p73;
	selp.f32 	%f791, %f788, 0f7F800000, %p72;
	selp.f32 	%f792, %f787, 0f7F800000, %p71;
	selp.f32 	%f793, %f786, 0f7F800000, %p70;
	selp.f32 	%f794, %f793, 0f00000000, %p69;
	selp.f32 	%f795, %f792, 0f00000000, %p68;
	selp.f32 	%f796, %f791, 0f00000000, %p67;
	selp.f32 	%f797, %f790, 0f00000000, %p66;
	or.b32  	%r379, %r1, 12;
	add.s32 	%r217, %r379, 2;
	add.s32 	%r218, %r379, 1;
	add.s32 	%r219, %r379, 3;
	setp.lt.s32 	%p74, %r7, %r219;
	setp.lt.s32 	%p75, %r7, %r379;
	setp.lt.s32 	%p76, %r7, %r218;
	setp.lt.s32 	%p77, %r7, %r217;
	setp.gt.ftz.f32 	%p78, %f797, 0f3F000000;
	setp.gt.ftz.f32 	%p79, %f796, 0f3F000000;
	setp.gt.ftz.f32 	%p80, %f795, 0f3F000000;
	setp.gt.ftz.f32 	%p81, %f794, 0f3F000000;
	sub.ftz.f32 	%f798, %f171, %f794;
	sub.ftz.f32 	%f799, %f171, %f795;
	sub.ftz.f32 	%f800, %f171, %f796;
	sub.ftz.f32 	%f801, %f171, %f797;
	fma.rn.ftz.f32 	%f802, %f176, %f801, %f13;
	fma.rn.ftz.f32 	%f803, %f176, %f800, %f13;
	fma.rn.ftz.f32 	%f804, %f176, %f799, %f13;
	fma.rn.ftz.f32 	%f805, %f176, %f798, %f13;
	sub.ftz.f32 	%f806, %f805, 0f40000000;
	sub.ftz.f32 	%f807, %f804, 0f40000000;
	sub.ftz.f32 	%f808, %f803, 0f40000000;
	sub.ftz.f32 	%f809, %f802, 0f40000000;
	fma.rn.ftz.f32 	%f810, %f801, %f809, 0f3F800000;
	fma.rn.ftz.f32 	%f811, %f800, %f808, 0f3F800000;
	fma.rn.ftz.f32 	%f812, %f799, %f807, 0f3F800000;
	fma.rn.ftz.f32 	%f813, %f798, %f806, 0f3F800000;
	fma.rn.ftz.f32 	%f814, %f14, %f797, %f189;
	fma.rn.ftz.f32 	%f815, %f14, %f796, %f189;
	fma.rn.ftz.f32 	%f816, %f14, %f795, %f189;
	fma.rn.ftz.f32 	%f817, %f14, %f794, %f189;
	add.ftz.f32 	%f818, %f817, 0f40000000;
	add.ftz.f32 	%f819, %f816, 0f40000000;
	add.ftz.f32 	%f820, %f815, 0f40000000;
	add.ftz.f32 	%f821, %f814, 0f40000000;
	mul.ftz.f32 	%f822, %f797, %f821;
	mul.ftz.f32 	%f823, %f796, %f820;
	mul.ftz.f32 	%f824, %f795, %f819;
	mul.ftz.f32 	%f825, %f794, %f818;
	selp.f32 	%f826, %f813, %f825, %p81;
	selp.f32 	%f827, %f812, %f824, %p80;
	selp.f32 	%f828, %f811, %f823, %p79;
	selp.f32 	%f829, %f810, %f822, %p78;
	mul.ftz.f32 	%f830, %f829, 0f437F0000;
	mul.ftz.f32 	%f831, %f828, 0f437F0000;
	mul.ftz.f32 	%f832, %f827, 0f437F0000;
	mul.ftz.f32 	%f833, %f826, 0f437F0000;
	min.ftz.f32 	%f834, %f833, 0f437E8000;
	min.ftz.f32 	%f835, %f832, 0f437E8000;
	min.ftz.f32 	%f836, %f831, 0f437E8000;
	min.ftz.f32 	%f837, %f830, 0f437E8000;
	max.ftz.f32 	%f838, %f837, 0fBF000000;
	max.ftz.f32 	%f839, %f836, 0fBF000000;
	max.ftz.f32 	%f840, %f835, 0fBF000000;
	max.ftz.f32 	%f841, %f834, 0fBF000000;
	add.ftz.f32 	%f842, %f841, 0f3F000000;
	add.ftz.f32 	%f843, %f840, 0f3F000000;
	add.ftz.f32 	%f844, %f839, 0f3F000000;
	add.ftz.f32 	%f845, %f838, 0f3F000000;
	cvt.rzi.ftz.u16.f32 	%rs37, %f845;
	cvt.rzi.ftz.u16.f32 	%rs38, %f844;
	cvt.rzi.ftz.u16.f32 	%rs39, %f843;
	cvt.rzi.ftz.u16.f32 	%rs40, %f842;
	selp.b16 	%rs87, -1, %rs40, %p77;
	selp.b16 	%rs86, -1, %rs39, %p76;
	selp.b16 	%rs85, -1, %rs38, %p75;
	selp.b16 	%rs88, -1, %rs37, %p74;
LBB0_3:                                 // %after_bb
	cvt.u64.u32 	%rd7, %r379;
	add.s64 	%rd8, %rd1, %rd7;
	st.global.v4.u8 	[%rd8], {%rs85, %rs86, %rs87, %rs88};
	ret;
                                        // -- End function
}
	// .globl	kernel_f0_s0____x____x___block_id_y // -- Begin function kernel_f0_s0____x____x___block_id_y
.visible .entry kernel_f0_s0____x____x___block_id_y(
	.param .u32 kernel_f0_s0____x____x___block_id_y_param_0,
	.param .u32 kernel_f0_s0____x____x___block_id_y_param_1,
	.param .u32 kernel_f0_s0____x____x___block_id_y_param_2,
	.param .u32 kernel_f0_s0____x____x___block_id_y_param_3,
	.param .u32 kernel_f0_s0____x____x___block_id_y_param_4,
	.param .u32 kernel_f0_s0____x____x___block_id_y_param_5,
	.param .u32 kernel_f0_s0____x____x___block_id_y_param_6,
	.param .u32 kernel_f0_s0____x____x___block_id_y_param_7,
	.param .u32 kernel_f0_s0____x____x___block_id_y_param_8,
	.param .u32 kernel_f0_s0____x____x___block_id_y_param_9,
	.param .u32 kernel_f0_s0____x____x___block_id_y_param_10,
	.param .u32 kernel_f0_s0____x____x___block_id_y_param_11,
	.param .u32 kernel_f0_s0____x____x___block_id_y_param_12,
	.param .u32 kernel_f0_s0____x____x___block_id_y_param_13,
	.param .u32 kernel_f0_s0____x____x___block_id_y_param_14,
	.param .u32 kernel_f0_s0____x____x___block_id_y_param_15,
	.param .u32 kernel_f0_s0____x____x___block_id_y_param_16,
	.param .u32 kernel_f0_s0____x____x___block_id_y_param_17,
	.param .u32 kernel_f0_s0____x____x___block_id_y_param_18,
	.param .u64 kernel_f0_s0____x____x___block_id_y_param_19,
	.param .u64 kernel_f0_s0____x____x___block_id_y_param_20
)                                       // @kernel_f0_s0____x____x___block_id_y
{
	.reg .pred 	%p<3>;
	.reg .b16 	%rs<29>;
	.reg .b32 	%r<82>;
	.reg .b64 	%rd<64>;

// %bb.0:                               // %entry
	ld.param.u32 	%r23, [kernel_f0_s0____x____x___block_id_y_param_16];
	ld.param.u32 	%r19, [kernel_f0_s0____x____x___block_id_y_param_10];
	ld.param.u32 	%r18, [kernel_f0_s0____x____x___block_id_y_param_9];
	ld.param.u32 	%r9, [kernel_f0_s0____x____x___block_id_y_param_0];
	ld.param.u64 	%rd7, [kernel_f0_s0____x____x___block_id_y_param_20];
	cvta.to.global.u64 	%rd1, %rd7;
	ld.param.u64 	%rd8, [kernel_f0_s0____x____x___block_id_y_param_19];
	cvta.to.global.u64 	%rd2, %rd8;
	mov.u32 	%r26, %ctaid.y;
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %tid.y;
	mov.u32 	%r3, %tid.x;
	shl.b32 	%r27, %r26, 4;
	or.b32  	%r28, %r27, 4;
	ld.param.u32 	%r29, [kernel_f0_s0____x____x___block_id_y_param_12];
	min.s32 	%r4, %r28, %r29;
	ld.param.u32 	%r30, [kernel_f0_s0____x____x___block_id_y_param_11];
	setp.ge.s32 	%p1, %r1, %r30;
	@%p1 bra 	LBB1_3;
// %bb.1:                               // %true_bb
	setp.lt.u32 	%p2, %r3, 15;
	@%p2 bra 	LBB1_2;
	bra.uni 	LBB1_5;
LBB1_2:                                 // %true_bb1
	ld.param.u32 	%r24, [kernel_f0_s0____x____x___block_id_y_param_17];
	ld.param.u32 	%r22, [kernel_f0_s0____x____x___block_id_y_param_15];
	ld.param.u32 	%r21, [kernel_f0_s0____x____x___block_id_y_param_14];
	ld.param.u32 	%r20, [kernel_f0_s0____x____x___block_id_y_param_13];
	shl.b32 	%r62, %r3, 3;
	mad.lo.s32 	%r63, %r1, 124, %r62;
	add.s32 	%r64, %r63, -6;
	add.s32 	%r65, %r4, %r2;
	add.s32 	%r66, %r65, %r19;
	mad.lo.s32 	%r67, %r64, %r9, %r66;
	mul.wide.s32 	%rd43, %r67, 2;
	add.s64 	%rd44, %rd1, %rd43;
	ld.global.nc.u16 	%rs21, [%rd44];
	mul.wide.s32 	%rd45, %r9, 2;
	add.s64 	%rd46, %rd44, %rd45;
	ld.global.nc.u16 	%rs22, [%rd46];
	add.s32 	%r68, %r65, %r23;
	mul.lo.s32 	%r69, %r68, %r18;
	add.s32 	%r70, %r63, %r24;
	add.s32 	%r71, %r70, %r69;
	mul.wide.s32 	%rd47, %r71, 2;
	add.s64 	%rd48, %rd2, %rd47;
	st.global.v2.u16 	[%rd48], {%rs21, %rs22};
	shl.b32 	%r72, %r9, 1;
	add.s32 	%r73, %r67, %r72;
	mul.wide.s32 	%rd49, %r73, 2;
	add.s64 	%rd50, %rd1, %rd49;
	ld.global.nc.u16 	%rs23, [%rd50];
	add.s64 	%rd51, %rd50, %rd45;
	ld.global.nc.u16 	%rs24, [%rd51];
	add.s32 	%r74, %r63, %r22;
	add.s32 	%r75, %r74, %r69;
	mul.wide.s32 	%rd52, %r75, 2;
	add.s64 	%rd53, %rd2, %rd52;
	st.global.v2.u16 	[%rd53], {%rs23, %rs24};
	add.s32 	%r76, %r73, %r72;
	mul.wide.s32 	%rd54, %r76, 2;
	add.s64 	%rd55, %rd1, %rd54;
	ld.global.nc.u16 	%rs25, [%rd55];
	add.s64 	%rd56, %rd55, %rd45;
	ld.global.nc.u16 	%rs26, [%rd56];
	add.s32 	%r77, %r63, %r21;
	add.s32 	%r78, %r77, %r69;
	mul.wide.s32 	%rd57, %r78, 2;
	add.s64 	%rd58, %rd2, %rd57;
	st.global.v2.u16 	[%rd58], {%rs25, %rs26};
	mad.lo.s32 	%r79, %r63, %r9, %r66;
	mul.wide.s32 	%rd59, %r79, 2;
	add.s64 	%rd60, %rd1, %rd59;
	ld.global.nc.u16 	%rs27, [%rd60];
	add.s64 	%rd61, %rd60, %rd45;
	ld.global.nc.u16 	%rs28, [%rd61];
	add.s32 	%r80, %r63, %r20;
	add.s32 	%r81, %r80, %r69;
	bra.uni 	LBB1_4;
LBB1_3:                                 // %false_bb
	ld.param.u32 	%r17, [kernel_f0_s0____x____x___block_id_y_param_8];
	ld.param.u32 	%r16, [kernel_f0_s0____x____x___block_id_y_param_7];
	ld.param.u32 	%r15, [kernel_f0_s0____x____x___block_id_y_param_6];
	ld.param.u32 	%r14, [kernel_f0_s0____x____x___block_id_y_param_5];
	ld.param.u32 	%r13, [kernel_f0_s0____x____x___block_id_y_param_4];
	ld.param.u32 	%r12, [kernel_f0_s0____x____x___block_id_y_param_3];
	ld.param.u32 	%r11, [kernel_f0_s0____x____x___block_id_y_param_2];
	ld.param.u32 	%r10, [kernel_f0_s0____x____x___block_id_y_param_1];
	shl.b32 	%r31, %r3, 3;
	min.u32 	%r32, %r31, 116;
	add.s32 	%r33, %r32, %r17;
	add.s32 	%r34, %r4, %r2;
	add.s32 	%r35, %r34, %r19;
	mad.lo.s32 	%r36, %r33, %r9, %r35;
	mul.wide.s32 	%rd9, %r36, 2;
	add.s64 	%rd10, %rd1, %rd9;
	ld.global.nc.u16 	%rs9, [%rd10];
	mul.wide.s32 	%rd11, %r9, 2;
	add.s64 	%rd12, %rd10, %rd11;
	ld.global.nc.u16 	%rs10, [%rd12];
	add.s32 	%r37, %r34, %r23;
	mad.lo.s32 	%r38, %r37, %r18, %r32;
	add.s32 	%r39, %r38, %r16;
	mul.wide.s32 	%rd13, %r39, 2;
	add.s64 	%rd14, %rd2, %rd13;
	st.global.v2.u16 	[%rd14], {%rs9, %rs10};
	add.s32 	%r40, %r32, %r15;
	mad.lo.s32 	%r41, %r40, %r9, %r35;
	mul.wide.s32 	%rd15, %r41, 2;
	add.s64 	%rd16, %rd1, %rd15;
	ld.global.nc.u16 	%rs11, [%rd16];
	add.s64 	%rd17, %rd16, %rd11;
	ld.global.nc.u16 	%rs12, [%rd17];
	add.s32 	%r42, %r38, %r14;
	mul.wide.s32 	%rd18, %r42, 2;
	add.s64 	%rd19, %rd2, %rd18;
	st.global.v2.u16 	[%rd19], {%rs11, %rs12};
	add.s32 	%r43, %r32, %r13;
	mad.lo.s32 	%r44, %r43, %r9, %r35;
	mul.wide.s32 	%rd20, %r44, 2;
	add.s64 	%rd21, %rd1, %rd20;
	ld.global.nc.u16 	%rs13, [%rd21];
	add.s64 	%rd22, %rd21, %rd11;
	ld.global.nc.u16 	%rs14, [%rd22];
	add.s32 	%r45, %r38, %r12;
	mul.wide.s32 	%rd23, %r45, 2;
	add.s64 	%rd24, %rd2, %rd23;
	st.global.v2.u16 	[%rd24], {%rs13, %rs14};
	add.s32 	%r46, %r32, %r11;
	mad.lo.s32 	%r47, %r46, %r9, %r35;
	mul.wide.s32 	%rd25, %r47, 2;
	add.s64 	%rd26, %rd1, %rd25;
	ld.global.nc.u16 	%rs27, [%rd26];
	add.s64 	%rd27, %rd26, %rd11;
	ld.global.nc.u16 	%rs28, [%rd27];
	add.s32 	%r81, %r38, %r10;
	bra.uni 	LBB1_4;
LBB1_5:                                 // %false_bb2
	ld.param.u32 	%r25, [kernel_f0_s0____x____x___block_id_y_param_18];
	mad.lo.s32 	%r48, %r1, 124, 110;
	add.s32 	%r49, %r4, %r19;
	add.s32 	%r50, %r49, %r2;
	mad.lo.s32 	%r51, %r48, %r9, %r50;
	mul.wide.s32 	%rd28, %r51, 2;
	add.s64 	%rd29, %rd1, %rd28;
	ld.global.nc.u16 	%rs15, [%rd29];
	mul.wide.s32 	%rd30, %r9, 2;
	add.s64 	%rd31, %rd29, %rd30;
	ld.global.nc.u16 	%rs16, [%rd31];
	add.s32 	%r52, %r4, %r2;
	add.s32 	%r53, %r52, %r23;
	mul.lo.s32 	%r54, %r1, 62;
	sub.s32 	%r55, %r54, %r25;
	shl.b32 	%r56, %r55, 1;
	mad.lo.s32 	%r57, %r53, %r18, %r56;
	mul.wide.s32 	%rd32, %r57, 2;
	add.s64 	%rd33, %rd2, %rd32;
	st.global.v2.u16 	[%rd33+1204], {%rs15, %rs16};
	shl.b32 	%r58, %r9, 1;
	add.s32 	%r59, %r51, %r58;
	mul.wide.s32 	%rd34, %r59, 2;
	add.s64 	%rd35, %rd1, %rd34;
	ld.global.nc.u16 	%rs17, [%rd35];
	add.s64 	%rd36, %rd35, %rd30;
	ld.global.nc.u16 	%rs18, [%rd36];
	st.global.v2.u16 	[%rd33+1208], {%rs17, %rs18};
	add.s32 	%r60, %r59, %r58;
	mul.wide.s32 	%rd37, %r60, 2;
	add.s64 	%rd38, %rd1, %rd37;
	ld.global.nc.u16 	%rs19, [%rd38];
	add.s64 	%rd39, %rd38, %rd30;
	ld.global.nc.u16 	%rs20, [%rd39];
	st.global.v2.u16 	[%rd33+1212], {%rs19, %rs20};
	add.s32 	%r61, %r60, %r58;
	mul.wide.s32 	%rd40, %r61, 2;
	add.s64 	%rd41, %rd1, %rd40;
	ld.global.nc.u16 	%rs27, [%rd41];
	add.s64 	%rd42, %rd41, %rd30;
	ld.global.nc.u16 	%rs28, [%rd42];
	add.s32 	%r81, %r57, 608;
LBB1_4:                                 // %after_bb
	mul.wide.s32 	%rd62, %r81, 2;
	add.s64 	%rd63, %rd2, %rd62;
	st.global.v2.u16 	[%rd63], {%rs27, %rs28};
	ret;
                                        // -- End function
}
	// .globl	kernel_f1_s0____x____x___block_id_y // -- Begin function kernel_f1_s0____x____x___block_id_y
.visible .entry kernel_f1_s0____x____x___block_id_y(
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_0,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_1,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_2,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_3,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_4,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_5,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_6,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_7,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_8,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_9,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_10,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_11,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_12,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_13,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_14,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_15,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_16,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_17,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_18,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_19,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_20,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_21,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_22,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_23,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_24,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_25,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_26,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_27,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_28,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_29,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_30,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_31,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_32,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_33,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_34,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_35,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_36,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_37,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_38,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_39,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_40,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_41,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_42,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_43,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_44,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_45,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_46,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_47,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_48,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_49,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_50,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_51,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_52,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_53,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_54,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_55,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_56,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_57,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_58,
	.param .u32 kernel_f1_s0____x____x___block_id_y_param_59,
	.param .u64 kernel_f1_s0____x____x___block_id_y_param_60,
	.param .u64 kernel_f1_s0____x____x___block_id_y_param_61
)                                       // @kernel_f1_s0____x____x___block_id_y
{
	.reg .pred 	%p<3>;
	.reg .b16 	%rs<797>;
	.reg .b32 	%r<265>;
	.reg .b64 	%rd<229>;

// %bb.0:                               // %entry
	ld.param.u32 	%r65, [kernel_f1_s0____x____x___block_id_y_param_55];
	ld.param.u32 	%r64, [kernel_f1_s0____x____x___block_id_y_param_52];
	ld.param.u32 	%r62, [kernel_f1_s0____x____x___block_id_y_param_50];
	ld.param.u32 	%r61, [kernel_f1_s0____x____x___block_id_y_param_49];
	ld.param.u32 	%r43, [kernel_f1_s0____x____x___block_id_y_param_31];
	ld.param.u32 	%r16, [kernel_f1_s0____x____x___block_id_y_param_4];
	ld.param.u64 	%rd7, [kernel_f1_s0____x____x___block_id_y_param_61];
	cvta.to.global.u64 	%rd1, %rd7;
	ld.param.u64 	%rd8, [kernel_f1_s0____x____x___block_id_y_param_60];
	cvta.to.global.u64 	%rd2, %rd8;
	mov.u32 	%r70, %ctaid.y;
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %tid.y;
	mov.u32 	%r3, %tid.x;
	shl.b32 	%r71, %r70, 6;
	or.b32  	%r72, %r71, 56;
	ld.param.u32 	%r73, [kernel_f1_s0____x____x___block_id_y_param_54];
	min.s32 	%r4, %r72, %r73;
	ld.param.u32 	%r74, [kernel_f1_s0____x____x___block_id_y_param_53];
	setp.ge.s32 	%p1, %r1, %r74;
	@%p1 bra 	LBB2_3;
// %bb.1:                               // %true_bb
	ld.param.u32 	%r27, [kernel_f1_s0____x____x___block_id_y_param_15];
	setp.lt.u32 	%p2, %r3, 30;
	add.s32 	%r5, %r43, 498;
	shl.b32 	%r126, %r2, 1;
	add.s32 	%r6, %r4, %r126;
	add.s32 	%r127, %r6, %r64;
	mul.lo.s32 	%r7, %r127, %r5;
	@%p2 bra 	LBB2_2;
	bra.uni 	LBB2_5;
LBB2_2:                                 // %true_bb1
	ld.param.u32 	%r69, [kernel_f1_s0____x____x___block_id_y_param_59];
	ld.param.u32 	%r68, [kernel_f1_s0____x____x___block_id_y_param_58];
	ld.param.u32 	%r67, [kernel_f1_s0____x____x___block_id_y_param_57];
	ld.param.u32 	%r66, [kernel_f1_s0____x____x___block_id_y_param_56];
	ld.param.u32 	%r63, [kernel_f1_s0____x____x___block_id_y_param_51];
	ld.param.u32 	%r60, [kernel_f1_s0____x____x___block_id_y_param_48];
	ld.param.u32 	%r59, [kernel_f1_s0____x____x___block_id_y_param_47];
	ld.param.u32 	%r58, [kernel_f1_s0____x____x___block_id_y_param_46];
	ld.param.u32 	%r57, [kernel_f1_s0____x____x___block_id_y_param_45];
	ld.param.u32 	%r56, [kernel_f1_s0____x____x___block_id_y_param_44];
	ld.param.u32 	%r55, [kernel_f1_s0____x____x___block_id_y_param_43];
	ld.param.u32 	%r54, [kernel_f1_s0____x____x___block_id_y_param_42];
	ld.param.u32 	%r53, [kernel_f1_s0____x____x___block_id_y_param_41];
	ld.param.u32 	%r52, [kernel_f1_s0____x____x___block_id_y_param_40];
	ld.param.u32 	%r51, [kernel_f1_s0____x____x___block_id_y_param_39];
	ld.param.u32 	%r50, [kernel_f1_s0____x____x___block_id_y_param_38];
	ld.param.u32 	%r49, [kernel_f1_s0____x____x___block_id_y_param_37];
	ld.param.u32 	%r48, [kernel_f1_s0____x____x___block_id_y_param_36];
	ld.param.u32 	%r47, [kernel_f1_s0____x____x___block_id_y_param_35];
	ld.param.u32 	%r46, [kernel_f1_s0____x____x___block_id_y_param_34];
	ld.param.u32 	%r45, [kernel_f1_s0____x____x___block_id_y_param_33];
	ld.param.u32 	%r44, [kernel_f1_s0____x____x___block_id_y_param_32];
	ld.param.u32 	%r42, [kernel_f1_s0____x____x___block_id_y_param_30];
	ld.param.u32 	%r15, [kernel_f1_s0____x____x___block_id_y_param_3];
	ld.param.u32 	%r14, [kernel_f1_s0____x____x___block_id_y_param_2];
	ld.param.u32 	%r13, [kernel_f1_s0____x____x___block_id_y_param_1];
	shl.b32 	%r173, %r3, 4;
	mul.lo.s32 	%r174, %r1, 494;
	add.s32 	%r175, %r174, %r44;
	add.s32 	%r176, %r7, %r173;
	add.s32 	%r177, %r176, %r175;
	mul.wide.s32 	%rd121, %r177, 2;
	add.s64 	%rd122, %rd2, %rd121;
	ld.global.nc.v2.u16 	{%rs533, %rs534}, [%rd122];
	add.s32 	%r178, %r174, %r45;
	add.s32 	%r179, %r176, %r178;
	mul.wide.s32 	%rd123, %r179, 2;
	add.s64 	%rd124, %rd2, %rd123;
	ld.global.nc.v2.u16 	{%rs535, %rs536}, [%rd124];
	sub.s32 	%r180, %r43, %r27;
	mad.lo.s32 	%r181, %r1, 247, %r180;
	shl.b32 	%r182, %r181, 1;
	add.s32 	%r183, %r176, %r182;
	mul.wide.s32 	%rd125, %r183, 2;
	add.s64 	%rd126, %rd2, %rd125;
	ld.global.nc.v2.u16 	{%rs537, %rs538}, [%rd126+2968];
	add.s32 	%r184, %r174, %r46;
	add.s32 	%r185, %r176, %r184;
	mul.wide.s32 	%rd127, %r185, 2;
	add.s64 	%rd128, %rd2, %rd127;
	ld.global.nc.v2.u16 	{%rs539, %rs540}, [%rd128];
	add.s32 	%r186, %r174, %r47;
	add.s32 	%r187, %r176, %r186;
	mul.wide.s32 	%rd129, %r187, 2;
	add.s64 	%rd130, %rd2, %rd129;
	ld.global.nc.v2.u16 	{%rs541, %rs542}, [%rd130];
	max.s16 	%rs543, %rs539, %rs541;
	max.s16 	%rs544, %rs540, %rs542;
	max.s16 	%rs545, %rs538, %rs544;
	max.s16 	%rs546, %rs537, %rs543;
	max.s16 	%rs547, %rs535, %rs546;
	max.s16 	%rs548, %rs536, %rs545;
	min.s16 	%rs549, %rs534, %rs548;
	min.s16 	%rs550, %rs533, %rs547;
	max.s16 	%rs551, %rs550, 0;
	max.s16 	%rs552, %rs549, 0;
	add.s32 	%r188, %r6, %r62;
	add.s32 	%r189, %r174, %r63;
	mad.lo.s32 	%r190, %r188, %r61, %r173;
	add.s32 	%r191, %r190, %r189;
	mul.wide.s32 	%rd131, %r191, 2;
	add.s64 	%rd132, %rd1, %rd131;
	st.global.u16 	[%rd132+2], %rs552;
	st.global.u16 	[%rd132], %rs551;
	add.s32 	%r192, %r174, %r48;
	add.s32 	%r193, %r176, %r192;
	mul.wide.s32 	%rd133, %r193, 2;
	add.s64 	%rd134, %rd2, %rd133;
	ld.global.nc.v2.u16 	{%rs553, %rs554}, [%rd134];
	ld.global.nc.v2.u16 	{%rs555, %rs556}, [%rd126+2972];
	add.s32 	%r194, %r174, %r49;
	add.s32 	%r195, %r176, %r194;
	mul.wide.s32 	%rd135, %r195, 2;
	add.s64 	%rd136, %rd2, %rd135;
	ld.global.nc.v2.u16 	{%rs557, %rs558}, [%rd136];
	max.s16 	%rs559, %rs533, %rs557;
	max.s16 	%rs560, %rs534, %rs558;
	max.s16 	%rs561, %rs556, %rs560;
	max.s16 	%rs562, %rs555, %rs559;
	max.s16 	%rs563, %rs553, %rs562;
	max.s16 	%rs564, %rs554, %rs561;
	min.s16 	%rs565, %rs542, %rs564;
	min.s16 	%rs566, %rs541, %rs563;
	max.s16 	%rs567, %rs566, 0;
	max.s16 	%rs568, %rs565, 0;
	add.s32 	%r196, %r174, %r60;
	add.s32 	%r197, %r190, %r196;
	mul.wide.s32 	%rd137, %r197, 2;
	add.s64 	%rd138, %rd1, %rd137;
	st.global.u16 	[%rd138+2], %rs568;
	st.global.u16 	[%rd138], %rs567;
	add.s32 	%r198, %r174, %r50;
	add.s32 	%r199, %r176, %r198;
	mul.wide.s32 	%rd139, %r199, 2;
	add.s64 	%rd140, %rd2, %rd139;
	ld.global.nc.v2.u16 	{%rs569, %rs570}, [%rd140];
	ld.global.nc.v2.u16 	{%rs571, %rs572}, [%rd126+2976];
	add.s32 	%r200, %r174, %r51;
	add.s32 	%r201, %r176, %r200;
	mul.wide.s32 	%rd141, %r201, 2;
	add.s64 	%rd142, %rd2, %rd141;
	ld.global.nc.v2.u16 	{%rs573, %rs574}, [%rd142];
	max.s16 	%rs575, %rs541, %rs573;
	max.s16 	%rs576, %rs542, %rs574;
	max.s16 	%rs577, %rs572, %rs576;
	max.s16 	%rs578, %rs571, %rs575;
	max.s16 	%rs579, %rs569, %rs578;
	max.s16 	%rs580, %rs570, %rs577;
	min.s16 	%rs581, %rs558, %rs580;
	min.s16 	%rs582, %rs557, %rs579;
	max.s16 	%rs583, %rs582, 0;
	max.s16 	%rs584, %rs581, 0;
	add.s32 	%r202, %r174, %r59;
	add.s32 	%r203, %r190, %r202;
	mul.wide.s32 	%rd143, %r203, 2;
	add.s64 	%rd144, %rd1, %rd143;
	st.global.u16 	[%rd144+2], %rs584;
	st.global.u16 	[%rd144], %rs583;
	add.s32 	%r204, %r174, %r52;
	add.s32 	%r205, %r176, %r204;
	mul.wide.s32 	%rd145, %r205, 2;
	add.s64 	%rd146, %rd2, %rd145;
	ld.global.nc.v2.u16 	{%rs585, %rs586}, [%rd146];
	ld.global.nc.v2.u16 	{%rs587, %rs588}, [%rd126+2980];
	add.s32 	%r206, %r174, %r53;
	add.s32 	%r207, %r176, %r206;
	mul.wide.s32 	%rd147, %r207, 2;
	add.s64 	%rd148, %rd2, %rd147;
	ld.global.nc.v2.u16 	{%rs589, %rs590}, [%rd148];
	max.s16 	%rs591, %rs557, %rs589;
	max.s16 	%rs592, %rs558, %rs590;
	max.s16 	%rs593, %rs588, %rs592;
	max.s16 	%rs594, %rs587, %rs591;
	max.s16 	%rs595, %rs585, %rs594;
	max.s16 	%rs596, %rs586, %rs593;
	min.s16 	%rs597, %rs574, %rs596;
	min.s16 	%rs598, %rs573, %rs595;
	max.s16 	%rs599, %rs598, 0;
	max.s16 	%rs600, %rs597, 0;
	add.s32 	%r208, %r174, %r42;
	add.s32 	%r209, %r190, %r208;
	mul.wide.s32 	%rd149, %r209, 2;
	add.s64 	%rd150, %rd1, %rd149;
	st.global.u16 	[%rd150+2], %rs600;
	st.global.u16 	[%rd150], %rs599;
	add.s32 	%r210, %r174, %r54;
	add.s32 	%r211, %r176, %r210;
	mul.wide.s32 	%rd151, %r211, 2;
	add.s64 	%rd152, %rd2, %rd151;
	ld.global.nc.v2.u16 	{%rs601, %rs602}, [%rd152];
	ld.global.nc.v2.u16 	{%rs603, %rs604}, [%rd126+2984];
	add.s32 	%r212, %r174, %r55;
	add.s32 	%r213, %r176, %r212;
	mul.wide.s32 	%rd153, %r213, 2;
	add.s64 	%rd154, %rd2, %rd153;
	ld.global.nc.v2.u16 	{%rs605, %rs606}, [%rd154];
	max.s16 	%rs607, %rs573, %rs605;
	max.s16 	%rs608, %rs574, %rs606;
	max.s16 	%rs609, %rs604, %rs608;
	max.s16 	%rs610, %rs603, %rs607;
	max.s16 	%rs611, %rs601, %rs610;
	max.s16 	%rs612, %rs602, %rs609;
	min.s16 	%rs613, %rs590, %rs612;
	min.s16 	%rs614, %rs589, %rs611;
	max.s16 	%rs615, %rs614, 0;
	max.s16 	%rs616, %rs613, 0;
	add.s32 	%r214, %r174, %r58;
	add.s32 	%r215, %r190, %r214;
	mul.wide.s32 	%rd155, %r215, 2;
	add.s64 	%rd156, %rd1, %rd155;
	st.global.u16 	[%rd156+2], %rs616;
	st.global.u16 	[%rd156], %rs615;
	add.s32 	%r216, %r174, %r56;
	add.s32 	%r217, %r176, %r216;
	mul.wide.s32 	%rd157, %r217, 2;
	add.s64 	%rd158, %rd2, %rd157;
	ld.global.nc.v2.u16 	{%rs617, %rs618}, [%rd158];
	ld.global.nc.v2.u16 	{%rs619, %rs620}, [%rd126+2988];
	add.s32 	%r218, %r174, %r69;
	add.s32 	%r219, %r176, %r218;
	mul.wide.s32 	%rd159, %r219, 2;
	add.s64 	%rd160, %rd2, %rd159;
	ld.global.nc.v2.u16 	{%rs621, %rs622}, [%rd160];
	max.s16 	%rs623, %rs589, %rs621;
	max.s16 	%rs624, %rs590, %rs622;
	max.s16 	%rs625, %rs620, %rs624;
	max.s16 	%rs626, %rs619, %rs623;
	max.s16 	%rs627, %rs617, %rs626;
	max.s16 	%rs628, %rs618, %rs625;
	min.s16 	%rs629, %rs606, %rs628;
	min.s16 	%rs630, %rs605, %rs627;
	max.s16 	%rs631, %rs630, 0;
	max.s16 	%rs632, %rs629, 0;
	add.s32 	%r220, %r174, %r13;
	add.s32 	%r221, %r190, %r220;
	mul.wide.s32 	%rd161, %r221, 2;
	add.s64 	%rd162, %rd1, %rd161;
	st.global.u16 	[%rd162+2], %rs632;
	st.global.u16 	[%rd162], %rs631;
	add.s32 	%r222, %r174, %r57;
	add.s32 	%r223, %r176, %r222;
	mul.wide.s32 	%rd163, %r223, 2;
	add.s64 	%rd164, %rd2, %rd163;
	ld.global.nc.v2.u16 	{%rs633, %rs634}, [%rd164];
	ld.global.nc.v2.u16 	{%rs635, %rs636}, [%rd126+2992];
	add.s32 	%r224, %r174, %r68;
	add.s32 	%r225, %r176, %r224;
	mul.wide.s32 	%rd165, %r225, 2;
	add.s64 	%rd166, %rd2, %rd165;
	ld.global.nc.v2.u16 	{%rs637, %rs638}, [%rd166];
	max.s16 	%rs639, %rs605, %rs637;
	max.s16 	%rs640, %rs606, %rs638;
	max.s16 	%rs641, %rs636, %rs640;
	max.s16 	%rs642, %rs635, %rs639;
	max.s16 	%rs643, %rs633, %rs642;
	max.s16 	%rs644, %rs634, %rs641;
	min.s16 	%rs645, %rs622, %rs644;
	min.s16 	%rs646, %rs621, %rs643;
	max.s16 	%rs647, %rs646, 0;
	max.s16 	%rs648, %rs645, 0;
	add.s32 	%r226, %r174, %r14;
	add.s32 	%r227, %r190, %r226;
	mul.wide.s32 	%rd167, %r227, 2;
	add.s64 	%rd168, %rd1, %rd167;
	st.global.u16 	[%rd168+2], %rs648;
	st.global.u16 	[%rd168], %rs647;
	add.s32 	%r228, %r174, %r67;
	add.s32 	%r229, %r176, %r228;
	mul.wide.s32 	%rd169, %r229, 2;
	add.s64 	%rd170, %rd2, %rd169;
	ld.global.nc.v2.u16 	{%rs649, %rs650}, [%rd170];
	ld.global.nc.v2.u16 	{%rs651, %rs652}, [%rd126+2996];
	add.s32 	%r230, %r174, %r66;
	add.s32 	%r231, %r176, %r230;
	mul.wide.s32 	%rd171, %r231, 2;
	add.s64 	%rd172, %rd2, %rd171;
	ld.global.nc.v2.u16 	{%rs653, %rs654}, [%rd172];
	max.s16 	%rs655, %rs621, %rs653;
	max.s16 	%rs656, %rs622, %rs654;
	max.s16 	%rs657, %rs652, %rs656;
	max.s16 	%rs658, %rs651, %rs655;
	max.s16 	%rs659, %rs649, %rs658;
	max.s16 	%rs660, %rs650, %rs657;
	min.s16 	%rs661, %rs638, %rs660;
	min.s16 	%rs662, %rs637, %rs659;
	max.s16 	%rs663, %rs662, 0;
	max.s16 	%rs664, %rs661, 0;
	add.s32 	%r232, %r174, %r15;
	add.s32 	%r233, %r190, %r232;
	mul.wide.s32 	%rd173, %r233, 2;
	add.s64 	%rd174, %rd1, %rd173;
	st.global.u16 	[%rd174+2], %rs664;
	st.global.u16 	[%rd174], %rs663;
	add.s32 	%r234, %r6, %r65;
	mad.lo.s32 	%r235, %r234, %r5, %r173;
	add.s32 	%r236, %r235, %r175;
	mul.wide.s32 	%rd175, %r236, 2;
	add.s64 	%rd176, %rd2, %rd175;
	ld.global.nc.v2.u16 	{%rs665, %rs666}, [%rd176];
	add.s32 	%r237, %r235, %r178;
	mul.wide.s32 	%rd177, %r237, 2;
	add.s64 	%rd178, %rd2, %rd177;
	ld.global.nc.v2.u16 	{%rs667, %rs668}, [%rd178];
	add.s32 	%r238, %r235, %r182;
	mul.wide.s32 	%rd179, %r238, 2;
	add.s64 	%rd180, %rd2, %rd179;
	ld.global.nc.v2.u16 	{%rs669, %rs670}, [%rd180+2968];
	add.s32 	%r239, %r235, %r184;
	mul.wide.s32 	%rd181, %r239, 2;
	add.s64 	%rd182, %rd2, %rd181;
	ld.global.nc.v2.u16 	{%rs671, %rs672}, [%rd182];
	add.s32 	%r240, %r235, %r186;
	mul.wide.s32 	%rd183, %r240, 2;
	add.s64 	%rd184, %rd2, %rd183;
	ld.global.nc.v2.u16 	{%rs673, %rs674}, [%rd184];
	max.s16 	%rs675, %rs671, %rs673;
	max.s16 	%rs676, %rs672, %rs674;
	max.s16 	%rs677, %rs670, %rs676;
	max.s16 	%rs678, %rs669, %rs675;
	max.s16 	%rs679, %rs667, %rs678;
	max.s16 	%rs680, %rs668, %rs677;
	min.s16 	%rs681, %rs666, %rs680;
	min.s16 	%rs682, %rs665, %rs679;
	max.s16 	%rs683, %rs682, 0;
	max.s16 	%rs684, %rs681, 0;
	add.s32 	%r241, %r6, %r16;
	mad.lo.s32 	%r242, %r241, %r61, %r173;
	add.s32 	%r243, %r242, %r189;
	mul.wide.s32 	%rd185, %r243, 2;
	add.s64 	%rd186, %rd1, %rd185;
	st.global.u16 	[%rd186+2], %rs684;
	st.global.u16 	[%rd186], %rs683;
	add.s32 	%r244, %r235, %r192;
	mul.wide.s32 	%rd187, %r244, 2;
	add.s64 	%rd188, %rd2, %rd187;
	ld.global.nc.v2.u16 	{%rs685, %rs686}, [%rd188];
	ld.global.nc.v2.u16 	{%rs687, %rs688}, [%rd180+2972];
	add.s32 	%r245, %r235, %r194;
	mul.wide.s32 	%rd189, %r245, 2;
	add.s64 	%rd190, %rd2, %rd189;
	ld.global.nc.v2.u16 	{%rs689, %rs690}, [%rd190];
	max.s16 	%rs691, %rs665, %rs689;
	max.s16 	%rs692, %rs666, %rs690;
	max.s16 	%rs693, %rs688, %rs692;
	max.s16 	%rs694, %rs687, %rs691;
	max.s16 	%rs695, %rs685, %rs694;
	max.s16 	%rs696, %rs686, %rs693;
	min.s16 	%rs697, %rs674, %rs696;
	min.s16 	%rs698, %rs673, %rs695;
	max.s16 	%rs699, %rs698, 0;
	max.s16 	%rs700, %rs697, 0;
	add.s32 	%r246, %r242, %r196;
	mul.wide.s32 	%rd191, %r246, 2;
	add.s64 	%rd192, %rd1, %rd191;
	st.global.u16 	[%rd192+2], %rs700;
	st.global.u16 	[%rd192], %rs699;
	add.s32 	%r247, %r235, %r198;
	mul.wide.s32 	%rd193, %r247, 2;
	add.s64 	%rd194, %rd2, %rd193;
	ld.global.nc.v2.u16 	{%rs701, %rs702}, [%rd194];
	ld.global.nc.v2.u16 	{%rs703, %rs704}, [%rd180+2976];
	add.s32 	%r248, %r235, %r200;
	mul.wide.s32 	%rd195, %r248, 2;
	add.s64 	%rd196, %rd2, %rd195;
	ld.global.nc.v2.u16 	{%rs705, %rs706}, [%rd196];
	max.s16 	%rs707, %rs673, %rs705;
	max.s16 	%rs708, %rs674, %rs706;
	max.s16 	%rs709, %rs704, %rs708;
	max.s16 	%rs710, %rs703, %rs707;
	max.s16 	%rs711, %rs701, %rs710;
	max.s16 	%rs712, %rs702, %rs709;
	min.s16 	%rs713, %rs690, %rs712;
	min.s16 	%rs714, %rs689, %rs711;
	max.s16 	%rs715, %rs714, 0;
	max.s16 	%rs716, %rs713, 0;
	add.s32 	%r249, %r242, %r202;
	mul.wide.s32 	%rd197, %r249, 2;
	add.s64 	%rd198, %rd1, %rd197;
	st.global.u16 	[%rd198+2], %rs716;
	st.global.u16 	[%rd198], %rs715;
	add.s32 	%r250, %r235, %r204;
	mul.wide.s32 	%rd199, %r250, 2;
	add.s64 	%rd200, %rd2, %rd199;
	ld.global.nc.v2.u16 	{%rs717, %rs718}, [%rd200];
	ld.global.nc.v2.u16 	{%rs719, %rs720}, [%rd180+2980];
	add.s32 	%r251, %r235, %r206;
	mul.wide.s32 	%rd201, %r251, 2;
	add.s64 	%rd202, %rd2, %rd201;
	ld.global.nc.v2.u16 	{%rs721, %rs722}, [%rd202];
	max.s16 	%rs723, %rs689, %rs721;
	max.s16 	%rs724, %rs690, %rs722;
	max.s16 	%rs725, %rs720, %rs724;
	max.s16 	%rs726, %rs719, %rs723;
	max.s16 	%rs727, %rs717, %rs726;
	max.s16 	%rs728, %rs718, %rs725;
	min.s16 	%rs729, %rs706, %rs728;
	min.s16 	%rs730, %rs705, %rs727;
	max.s16 	%rs731, %rs730, 0;
	max.s16 	%rs732, %rs729, 0;
	add.s32 	%r252, %r242, %r208;
	mul.wide.s32 	%rd203, %r252, 2;
	add.s64 	%rd204, %rd1, %rd203;
	st.global.u16 	[%rd204+2], %rs732;
	st.global.u16 	[%rd204], %rs731;
	add.s32 	%r253, %r235, %r210;
	mul.wide.s32 	%rd205, %r253, 2;
	add.s64 	%rd206, %rd2, %rd205;
	ld.global.nc.v2.u16 	{%rs733, %rs734}, [%rd206];
	ld.global.nc.v2.u16 	{%rs735, %rs736}, [%rd180+2984];
	add.s32 	%r254, %r235, %r212;
	mul.wide.s32 	%rd207, %r254, 2;
	add.s64 	%rd208, %rd2, %rd207;
	ld.global.nc.v2.u16 	{%rs737, %rs738}, [%rd208];
	max.s16 	%rs739, %rs705, %rs737;
	max.s16 	%rs740, %rs706, %rs738;
	max.s16 	%rs741, %rs736, %rs740;
	max.s16 	%rs742, %rs735, %rs739;
	max.s16 	%rs743, %rs733, %rs742;
	max.s16 	%rs744, %rs734, %rs741;
	min.s16 	%rs745, %rs722, %rs744;
	min.s16 	%rs746, %rs721, %rs743;
	max.s16 	%rs747, %rs746, 0;
	max.s16 	%rs748, %rs745, 0;
	add.s32 	%r255, %r242, %r214;
	mul.wide.s32 	%rd209, %r255, 2;
	add.s64 	%rd210, %rd1, %rd209;
	st.global.u16 	[%rd210+2], %rs748;
	st.global.u16 	[%rd210], %rs747;
	add.s32 	%r256, %r235, %r216;
	mul.wide.s32 	%rd211, %r256, 2;
	add.s64 	%rd212, %rd2, %rd211;
	ld.global.nc.v2.u16 	{%rs749, %rs750}, [%rd212];
	ld.global.nc.v2.u16 	{%rs751, %rs752}, [%rd180+2988];
	add.s32 	%r257, %r235, %r218;
	mul.wide.s32 	%rd213, %r257, 2;
	add.s64 	%rd214, %rd2, %rd213;
	ld.global.nc.v2.u16 	{%rs753, %rs754}, [%rd214];
	max.s16 	%rs755, %rs721, %rs753;
	max.s16 	%rs756, %rs722, %rs754;
	max.s16 	%rs757, %rs752, %rs756;
	max.s16 	%rs758, %rs751, %rs755;
	max.s16 	%rs759, %rs749, %rs758;
	max.s16 	%rs760, %rs750, %rs757;
	min.s16 	%rs761, %rs738, %rs760;
	min.s16 	%rs762, %rs737, %rs759;
	max.s16 	%rs763, %rs762, 0;
	max.s16 	%rs764, %rs761, 0;
	add.s32 	%r258, %r242, %r220;
	mul.wide.s32 	%rd215, %r258, 2;
	add.s64 	%rd216, %rd1, %rd215;
	st.global.u16 	[%rd216+2], %rs764;
	st.global.u16 	[%rd216], %rs763;
	add.s32 	%r259, %r235, %r222;
	mul.wide.s32 	%rd217, %r259, 2;
	add.s64 	%rd218, %rd2, %rd217;
	ld.global.nc.v2.u16 	{%rs765, %rs766}, [%rd218];
	ld.global.nc.v2.u16 	{%rs767, %rs768}, [%rd180+2992];
	add.s32 	%r260, %r235, %r224;
	mul.wide.s32 	%rd219, %r260, 2;
	add.s64 	%rd220, %rd2, %rd219;
	ld.global.nc.v2.u16 	{%rs769, %rs770}, [%rd220];
	max.s16 	%rs771, %rs737, %rs769;
	max.s16 	%rs772, %rs738, %rs770;
	max.s16 	%rs773, %rs768, %rs772;
	max.s16 	%rs774, %rs767, %rs771;
	max.s16 	%rs775, %rs765, %rs774;
	max.s16 	%rs776, %rs766, %rs773;
	min.s16 	%rs777, %rs754, %rs776;
	min.s16 	%rs778, %rs753, %rs775;
	max.s16 	%rs779, %rs778, 0;
	max.s16 	%rs780, %rs777, 0;
	add.s32 	%r261, %r242, %r226;
	mul.wide.s32 	%rd221, %r261, 2;
	add.s64 	%rd222, %rd1, %rd221;
	st.global.u16 	[%rd222+2], %rs780;
	st.global.u16 	[%rd222], %rs779;
	add.s32 	%r262, %r235, %r228;
	mul.wide.s32 	%rd223, %r262, 2;
	add.s64 	%rd224, %rd2, %rd223;
	ld.global.nc.v2.u16 	{%rs781, %rs782}, [%rd224];
	ld.global.nc.v2.u16 	{%rs783, %rs784}, [%rd180+2996];
	add.s32 	%r263, %r235, %r230;
	mul.wide.s32 	%rd225, %r263, 2;
	add.s64 	%rd226, %rd2, %rd225;
	ld.global.nc.v2.u16 	{%rs785, %rs786}, [%rd226];
	max.s16 	%rs787, %rs754, %rs786;
	max.s16 	%rs788, %rs753, %rs785;
	max.s16 	%rs789, %rs783, %rs788;
	max.s16 	%rs790, %rs784, %rs787;
	max.s16 	%rs791, %rs782, %rs790;
	max.s16 	%rs792, %rs781, %rs789;
	min.s16 	%rs793, %rs769, %rs792;
	min.s16 	%rs794, %rs770, %rs791;
	max.s16 	%rs796, %rs794, 0;
	max.s16 	%rs795, %rs793, 0;
	add.s32 	%r264, %r242, %r232;
	bra.uni 	LBB2_4;
LBB2_3:                                 // %false_bb
	ld.param.u32 	%r41, [kernel_f1_s0____x____x___block_id_y_param_29];
	ld.param.u32 	%r40, [kernel_f1_s0____x____x___block_id_y_param_28];
	ld.param.u32 	%r39, [kernel_f1_s0____x____x___block_id_y_param_27];
	ld.param.u32 	%r38, [kernel_f1_s0____x____x___block_id_y_param_26];
	ld.param.u32 	%r37, [kernel_f1_s0____x____x___block_id_y_param_25];
	ld.param.u32 	%r36, [kernel_f1_s0____x____x___block_id_y_param_24];
	ld.param.u32 	%r35, [kernel_f1_s0____x____x___block_id_y_param_23];
	ld.param.u32 	%r34, [kernel_f1_s0____x____x___block_id_y_param_22];
	ld.param.u32 	%r33, [kernel_f1_s0____x____x___block_id_y_param_21];
	ld.param.u32 	%r32, [kernel_f1_s0____x____x___block_id_y_param_20];
	ld.param.u32 	%r31, [kernel_f1_s0____x____x___block_id_y_param_19];
	ld.param.u32 	%r30, [kernel_f1_s0____x____x___block_id_y_param_18];
	ld.param.u32 	%r29, [kernel_f1_s0____x____x___block_id_y_param_17];
	ld.param.u32 	%r28, [kernel_f1_s0____x____x___block_id_y_param_16];
	ld.param.u32 	%r26, [kernel_f1_s0____x____x___block_id_y_param_14];
	ld.param.u32 	%r25, [kernel_f1_s0____x____x___block_id_y_param_13];
	ld.param.u32 	%r12, [kernel_f1_s0____x____x___block_id_y_param_0];
	add.s32 	%r75, %r43, 498;
	shl.b32 	%r76, %r2, 1;
	add.s32 	%r77, %r4, %r76;
	add.s32 	%r78, %r77, %r64;
	shl.b32 	%r79, %r3, 4;
	min.u32 	%r80, %r79, 478;
	shl.b32 	%r81, %r25, 1;
	mad.lo.s32 	%r82, %r78, %r75, %r80;
	add.s32 	%r83, %r82, %r81;
	mul.wide.s32 	%rd9, %r83, 2;
	add.s64 	%rd10, %rd2, %rd9;
	ld.global.nc.v2.u16 	{%rs9, %rs10}, [%rd10+4];
	sub.s32 	%r84, %r25, %r43;
	shl.b32 	%r85, %r84, 1;
	add.s32 	%r86, %r82, %r85;
	mul.wide.s32 	%rd11, %r86, 2;
	add.s64 	%rd12, %rd2, %rd11;
	ld.global.nc.v2.u16 	{%rs11, %rs12}, [%rd12+-1988];
	add.s32 	%r87, %r82, %r26;
	mul.wide.s32 	%rd13, %r87, 2;
	add.s64 	%rd14, %rd2, %rd13;
	ld.global.nc.v2.u16 	{%rs13, %rs14}, [%rd14];
	ld.global.nc.v2.u16 	{%rs15, %rs16}, [%rd10];
	ld.global.nc.v2.u16 	{%rs17, %rs18}, [%rd10+8];
	max.s16 	%rs19, %rs15, %rs17;
	max.s16 	%rs20, %rs16, %rs18;
	max.s16 	%rs21, %rs14, %rs20;
	max.s16 	%rs22, %rs13, %rs19;
	max.s16 	%rs23, %rs11, %rs22;
	max.s16 	%rs24, %rs12, %rs21;
	min.s16 	%rs25, %rs10, %rs24;
	min.s16 	%rs26, %rs9, %rs23;
	max.s16 	%rs27, %rs26, 0;
	max.s16 	%rs28, %rs25, 0;
	add.s32 	%r88, %r77, %r62;
	mad.lo.s32 	%r89, %r88, %r61, %r80;
	add.s32 	%r90, %r89, %r12;
	mul.wide.s32 	%rd15, %r90, 2;
	add.s64 	%rd16, %rd1, %rd15;
	st.global.u16 	[%rd16+2], %rs28;
	st.global.u16 	[%rd16], %rs27;
	ld.global.nc.v2.u16 	{%rs29, %rs30}, [%rd12+-1984];
	add.s32 	%r91, %r82, %r28;
	mul.wide.s32 	%rd17, %r91, 2;
	add.s64 	%rd18, %rd2, %rd17;
	ld.global.nc.v2.u16 	{%rs31, %rs32}, [%rd18];
	ld.global.nc.v2.u16 	{%rs33, %rs34}, [%rd10+12];
	max.s16 	%rs35, %rs9, %rs33;
	max.s16 	%rs36, %rs10, %rs34;
	max.s16 	%rs37, %rs32, %rs36;
	max.s16 	%rs38, %rs31, %rs35;
	max.s16 	%rs39, %rs29, %rs38;
	max.s16 	%rs40, %rs30, %rs37;
	min.s16 	%rs41, %rs18, %rs40;
	min.s16 	%rs42, %rs17, %rs39;
	max.s16 	%rs43, %rs42, 0;
	max.s16 	%rs44, %rs41, 0;
	add.s32 	%r92, %r89, %r29;
	mul.wide.s32 	%rd19, %r92, 2;
	add.s64 	%rd20, %rd1, %rd19;
	st.global.u16 	[%rd20+2], %rs44;
	st.global.u16 	[%rd20], %rs43;
	ld.global.nc.v2.u16 	{%rs45, %rs46}, [%rd12+-1980];
	add.s32 	%r93, %r82, %r30;
	mul.wide.s32 	%rd21, %r93, 2;
	add.s64 	%rd22, %rd2, %rd21;
	ld.global.nc.v2.u16 	{%rs47, %rs48}, [%rd22];
	ld.global.nc.v2.u16 	{%rs49, %rs50}, [%rd10+16];
	max.s16 	%rs51, %rs17, %rs49;
	max.s16 	%rs52, %rs18, %rs50;
	max.s16 	%rs53, %rs48, %rs52;
	max.s16 	%rs54, %rs47, %rs51;
	max.s16 	%rs55, %rs45, %rs54;
	max.s16 	%rs56, %rs46, %rs53;
	min.s16 	%rs57, %rs34, %rs56;
	min.s16 	%rs58, %rs33, %rs55;
	max.s16 	%rs59, %rs58, 0;
	max.s16 	%rs60, %rs57, 0;
	add.s32 	%r94, %r89, %r31;
	mul.wide.s32 	%rd23, %r94, 2;
	add.s64 	%rd24, %rd1, %rd23;
	st.global.u16 	[%rd24+2], %rs60;
	st.global.u16 	[%rd24], %rs59;
	ld.global.nc.v2.u16 	{%rs61, %rs62}, [%rd12+-1976];
	add.s32 	%r95, %r82, %r32;
	mul.wide.s32 	%rd25, %r95, 2;
	add.s64 	%rd26, %rd2, %rd25;
	ld.global.nc.v2.u16 	{%rs63, %rs64}, [%rd26];
	ld.global.nc.v2.u16 	{%rs65, %rs66}, [%rd10+20];
	max.s16 	%rs67, %rs33, %rs65;
	max.s16 	%rs68, %rs34, %rs66;
	max.s16 	%rs69, %rs64, %rs68;
	max.s16 	%rs70, %rs63, %rs67;
	max.s16 	%rs71, %rs61, %rs70;
	max.s16 	%rs72, %rs62, %rs69;
	min.s16 	%rs73, %rs50, %rs72;
	min.s16 	%rs74, %rs49, %rs71;
	max.s16 	%rs75, %rs74, 0;
	max.s16 	%rs76, %rs73, 0;
	add.s32 	%r96, %r89, %r33;
	mul.wide.s32 	%rd27, %r96, 2;
	add.s64 	%rd28, %rd1, %rd27;
	st.global.u16 	[%rd28+2], %rs76;
	st.global.u16 	[%rd28], %rs75;
	ld.global.nc.v2.u16 	{%rs77, %rs78}, [%rd12+-1972];
	add.s32 	%r97, %r82, %r34;
	mul.wide.s32 	%rd29, %r97, 2;
	add.s64 	%rd30, %rd2, %rd29;
	ld.global.nc.v2.u16 	{%rs79, %rs80}, [%rd30];
	ld.global.nc.v2.u16 	{%rs81, %rs82}, [%rd10+24];
	max.s16 	%rs83, %rs49, %rs81;
	max.s16 	%rs84, %rs50, %rs82;
	max.s16 	%rs85, %rs80, %rs84;
	max.s16 	%rs86, %rs79, %rs83;
	max.s16 	%rs87, %rs77, %rs86;
	max.s16 	%rs88, %rs78, %rs85;
	min.s16 	%rs89, %rs66, %rs88;
	min.s16 	%rs90, %rs65, %rs87;
	max.s16 	%rs91, %rs90, 0;
	max.s16 	%rs92, %rs89, 0;
	add.s32 	%r98, %r89, %r35;
	mul.wide.s32 	%rd31, %r98, 2;
	add.s64 	%rd32, %rd1, %rd31;
	st.global.u16 	[%rd32+2], %rs92;
	st.global.u16 	[%rd32], %rs91;
	ld.global.nc.v2.u16 	{%rs93, %rs94}, [%rd12+-1968];
	add.s32 	%r99, %r82, %r36;
	mul.wide.s32 	%rd33, %r99, 2;
	add.s64 	%rd34, %rd2, %rd33;
	ld.global.nc.v2.u16 	{%rs95, %rs96}, [%rd34];
	ld.global.nc.v2.u16 	{%rs97, %rs98}, [%rd10+28];
	max.s16 	%rs99, %rs65, %rs97;
	max.s16 	%rs100, %rs66, %rs98;
	max.s16 	%rs101, %rs96, %rs100;
	max.s16 	%rs102, %rs95, %rs99;
	max.s16 	%rs103, %rs93, %rs102;
	max.s16 	%rs104, %rs94, %rs101;
	min.s16 	%rs105, %rs82, %rs104;
	min.s16 	%rs106, %rs81, %rs103;
	max.s16 	%rs107, %rs106, 0;
	max.s16 	%rs108, %rs105, 0;
	add.s32 	%r100, %r89, %r37;
	mul.wide.s32 	%rd35, %r100, 2;
	add.s64 	%rd36, %rd1, %rd35;
	st.global.u16 	[%rd36+2], %rs108;
	st.global.u16 	[%rd36], %rs107;
	ld.global.nc.v2.u16 	{%rs109, %rs110}, [%rd12+-1964];
	add.s32 	%r101, %r82, %r38;
	mul.wide.s32 	%rd37, %r101, 2;
	add.s64 	%rd38, %rd2, %rd37;
	ld.global.nc.v2.u16 	{%rs111, %rs112}, [%rd38];
	ld.global.nc.v2.u16 	{%rs113, %rs114}, [%rd10+32];
	max.s16 	%rs115, %rs81, %rs113;
	max.s16 	%rs116, %rs82, %rs114;
	max.s16 	%rs117, %rs112, %rs116;
	max.s16 	%rs118, %rs111, %rs115;
	max.s16 	%rs119, %rs109, %rs118;
	max.s16 	%rs120, %rs110, %rs117;
	min.s16 	%rs121, %rs98, %rs120;
	min.s16 	%rs122, %rs97, %rs119;
	max.s16 	%rs123, %rs122, 0;
	max.s16 	%rs124, %rs121, 0;
	add.s32 	%r102, %r89, %r39;
	mul.wide.s32 	%rd39, %r102, 2;
	add.s64 	%rd40, %rd1, %rd39;
	st.global.u16 	[%rd40+2], %rs124;
	st.global.u16 	[%rd40], %rs123;
	ld.global.nc.v2.u16 	{%rs125, %rs126}, [%rd12+-1960];
	add.s32 	%r103, %r82, %r40;
	mul.wide.s32 	%rd41, %r103, 2;
	add.s64 	%rd42, %rd2, %rd41;
	ld.global.nc.v2.u16 	{%rs127, %rs128}, [%rd42];
	ld.global.nc.v2.u16 	{%rs129, %rs130}, [%rd10+36];
	max.s16 	%rs131, %rs97, %rs129;
	max.s16 	%rs132, %rs98, %rs130;
	max.s16 	%rs133, %rs128, %rs132;
	max.s16 	%rs134, %rs127, %rs131;
	max.s16 	%rs135, %rs125, %rs134;
	max.s16 	%rs136, %rs126, %rs133;
	min.s16 	%rs137, %rs114, %rs136;
	min.s16 	%rs138, %rs113, %rs135;
	max.s16 	%rs139, %rs138, 0;
	max.s16 	%rs140, %rs137, 0;
	add.s32 	%r104, %r89, %r41;
	mul.wide.s32 	%rd43, %r104, 2;
	add.s64 	%rd44, %rd1, %rd43;
	st.global.u16 	[%rd44+2], %rs140;
	st.global.u16 	[%rd44], %rs139;
	add.s32 	%r105, %r77, %r65;
	mad.lo.s32 	%r106, %r105, %r75, %r80;
	add.s32 	%r107, %r106, %r81;
	mul.wide.s32 	%rd45, %r107, 2;
	add.s64 	%rd46, %rd2, %rd45;
	ld.global.nc.v2.u16 	{%rs141, %rs142}, [%rd46+4];
	add.s32 	%r108, %r106, %r85;
	mul.wide.s32 	%rd47, %r108, 2;
	add.s64 	%rd48, %rd2, %rd47;
	ld.global.nc.v2.u16 	{%rs143, %rs144}, [%rd48+-1988];
	add.s32 	%r109, %r106, %r26;
	mul.wide.s32 	%rd49, %r109, 2;
	add.s64 	%rd50, %rd2, %rd49;
	ld.global.nc.v2.u16 	{%rs145, %rs146}, [%rd50];
	ld.global.nc.v2.u16 	{%rs147, %rs148}, [%rd46];
	ld.global.nc.v2.u16 	{%rs149, %rs150}, [%rd46+8];
	max.s16 	%rs151, %rs147, %rs149;
	max.s16 	%rs152, %rs148, %rs150;
	max.s16 	%rs153, %rs146, %rs152;
	max.s16 	%rs154, %rs145, %rs151;
	max.s16 	%rs155, %rs143, %rs154;
	max.s16 	%rs156, %rs144, %rs153;
	min.s16 	%rs157, %rs142, %rs156;
	min.s16 	%rs158, %rs141, %rs155;
	max.s16 	%rs159, %rs158, 0;
	max.s16 	%rs160, %rs157, 0;
	add.s32 	%r110, %r77, %r16;
	mad.lo.s32 	%r111, %r110, %r61, %r80;
	add.s32 	%r112, %r111, %r12;
	mul.wide.s32 	%rd51, %r112, 2;
	add.s64 	%rd52, %rd1, %rd51;
	st.global.u16 	[%rd52+2], %rs160;
	st.global.u16 	[%rd52], %rs159;
	ld.global.nc.v2.u16 	{%rs161, %rs162}, [%rd48+-1984];
	add.s32 	%r113, %r106, %r28;
	mul.wide.s32 	%rd53, %r113, 2;
	add.s64 	%rd54, %rd2, %rd53;
	ld.global.nc.v2.u16 	{%rs163, %rs164}, [%rd54];
	ld.global.nc.v2.u16 	{%rs165, %rs166}, [%rd46+12];
	max.s16 	%rs167, %rs141, %rs165;
	max.s16 	%rs168, %rs142, %rs166;
	max.s16 	%rs169, %rs164, %rs168;
	max.s16 	%rs170, %rs163, %rs167;
	max.s16 	%rs171, %rs161, %rs170;
	max.s16 	%rs172, %rs162, %rs169;
	min.s16 	%rs173, %rs150, %rs172;
	min.s16 	%rs174, %rs149, %rs171;
	max.s16 	%rs175, %rs174, 0;
	max.s16 	%rs176, %rs173, 0;
	add.s32 	%r114, %r111, %r29;
	mul.wide.s32 	%rd55, %r114, 2;
	add.s64 	%rd56, %rd1, %rd55;
	st.global.u16 	[%rd56+2], %rs176;
	st.global.u16 	[%rd56], %rs175;
	ld.global.nc.v2.u16 	{%rs177, %rs178}, [%rd48+-1980];
	add.s32 	%r115, %r106, %r30;
	mul.wide.s32 	%rd57, %r115, 2;
	add.s64 	%rd58, %rd2, %rd57;
	ld.global.nc.v2.u16 	{%rs179, %rs180}, [%rd58];
	ld.global.nc.v2.u16 	{%rs181, %rs182}, [%rd46+16];
	max.s16 	%rs183, %rs149, %rs181;
	max.s16 	%rs184, %rs150, %rs182;
	max.s16 	%rs185, %rs180, %rs184;
	max.s16 	%rs186, %rs179, %rs183;
	max.s16 	%rs187, %rs177, %rs186;
	max.s16 	%rs188, %rs178, %rs185;
	min.s16 	%rs189, %rs166, %rs188;
	min.s16 	%rs190, %rs165, %rs187;
	max.s16 	%rs191, %rs190, 0;
	max.s16 	%rs192, %rs189, 0;
	add.s32 	%r116, %r111, %r31;
	mul.wide.s32 	%rd59, %r116, 2;
	add.s64 	%rd60, %rd1, %rd59;
	st.global.u16 	[%rd60+2], %rs192;
	st.global.u16 	[%rd60], %rs191;
	ld.global.nc.v2.u16 	{%rs193, %rs194}, [%rd48+-1976];
	add.s32 	%r117, %r106, %r32;
	mul.wide.s32 	%rd61, %r117, 2;
	add.s64 	%rd62, %rd2, %rd61;
	ld.global.nc.v2.u16 	{%rs195, %rs196}, [%rd62];
	ld.global.nc.v2.u16 	{%rs197, %rs198}, [%rd46+20];
	max.s16 	%rs199, %rs165, %rs197;
	max.s16 	%rs200, %rs166, %rs198;
	max.s16 	%rs201, %rs196, %rs200;
	max.s16 	%rs202, %rs195, %rs199;
	max.s16 	%rs203, %rs193, %rs202;
	max.s16 	%rs204, %rs194, %rs201;
	min.s16 	%rs205, %rs182, %rs204;
	min.s16 	%rs206, %rs181, %rs203;
	max.s16 	%rs207, %rs206, 0;
	max.s16 	%rs208, %rs205, 0;
	add.s32 	%r118, %r111, %r33;
	mul.wide.s32 	%rd63, %r118, 2;
	add.s64 	%rd64, %rd1, %rd63;
	st.global.u16 	[%rd64+2], %rs208;
	st.global.u16 	[%rd64], %rs207;
	ld.global.nc.v2.u16 	{%rs209, %rs210}, [%rd48+-1972];
	add.s32 	%r119, %r106, %r34;
	mul.wide.s32 	%rd65, %r119, 2;
	add.s64 	%rd66, %rd2, %rd65;
	ld.global.nc.v2.u16 	{%rs211, %rs212}, [%rd66];
	ld.global.nc.v2.u16 	{%rs213, %rs214}, [%rd46+24];
	max.s16 	%rs215, %rs181, %rs213;
	max.s16 	%rs216, %rs182, %rs214;
	max.s16 	%rs217, %rs212, %rs216;
	max.s16 	%rs218, %rs211, %rs215;
	max.s16 	%rs219, %rs209, %rs218;
	max.s16 	%rs220, %rs210, %rs217;
	min.s16 	%rs221, %rs198, %rs220;
	min.s16 	%rs222, %rs197, %rs219;
	max.s16 	%rs223, %rs222, 0;
	max.s16 	%rs224, %rs221, 0;
	add.s32 	%r120, %r111, %r35;
	mul.wide.s32 	%rd67, %r120, 2;
	add.s64 	%rd68, %rd1, %rd67;
	st.global.u16 	[%rd68+2], %rs224;
	st.global.u16 	[%rd68], %rs223;
	ld.global.nc.v2.u16 	{%rs225, %rs226}, [%rd48+-1968];
	add.s32 	%r121, %r106, %r36;
	mul.wide.s32 	%rd69, %r121, 2;
	add.s64 	%rd70, %rd2, %rd69;
	ld.global.nc.v2.u16 	{%rs227, %rs228}, [%rd70];
	ld.global.nc.v2.u16 	{%rs229, %rs230}, [%rd46+28];
	max.s16 	%rs231, %rs197, %rs229;
	max.s16 	%rs232, %rs198, %rs230;
	max.s16 	%rs233, %rs228, %rs232;
	max.s16 	%rs234, %rs227, %rs231;
	max.s16 	%rs235, %rs225, %rs234;
	max.s16 	%rs236, %rs226, %rs233;
	min.s16 	%rs237, %rs214, %rs236;
	min.s16 	%rs238, %rs213, %rs235;
	max.s16 	%rs239, %rs238, 0;
	max.s16 	%rs240, %rs237, 0;
	add.s32 	%r122, %r111, %r37;
	mul.wide.s32 	%rd71, %r122, 2;
	add.s64 	%rd72, %rd1, %rd71;
	st.global.u16 	[%rd72+2], %rs240;
	st.global.u16 	[%rd72], %rs239;
	ld.global.nc.v2.u16 	{%rs241, %rs242}, [%rd48+-1964];
	add.s32 	%r123, %r106, %r38;
	mul.wide.s32 	%rd73, %r123, 2;
	add.s64 	%rd74, %rd2, %rd73;
	ld.global.nc.v2.u16 	{%rs243, %rs244}, [%rd74];
	ld.global.nc.v2.u16 	{%rs245, %rs246}, [%rd46+32];
	max.s16 	%rs247, %rs213, %rs245;
	max.s16 	%rs248, %rs214, %rs246;
	max.s16 	%rs249, %rs244, %rs248;
	max.s16 	%rs250, %rs243, %rs247;
	max.s16 	%rs251, %rs241, %rs250;
	max.s16 	%rs252, %rs242, %rs249;
	min.s16 	%rs253, %rs230, %rs252;
	min.s16 	%rs254, %rs229, %rs251;
	max.s16 	%rs255, %rs254, 0;
	max.s16 	%rs256, %rs253, 0;
	add.s32 	%r124, %r111, %r39;
	mul.wide.s32 	%rd75, %r124, 2;
	add.s64 	%rd76, %rd1, %rd75;
	st.global.u16 	[%rd76+2], %rs256;
	st.global.u16 	[%rd76], %rs255;
	ld.global.nc.v2.u16 	{%rs257, %rs258}, [%rd48+-1960];
	add.s32 	%r125, %r106, %r40;
	mul.wide.s32 	%rd77, %r125, 2;
	add.s64 	%rd78, %rd2, %rd77;
	ld.global.nc.v2.u16 	{%rs259, %rs260}, [%rd78];
	ld.global.nc.v2.u16 	{%rs261, %rs262}, [%rd46+36];
	max.s16 	%rs263, %rs230, %rs262;
	max.s16 	%rs264, %rs229, %rs261;
	max.s16 	%rs265, %rs259, %rs264;
	max.s16 	%rs266, %rs260, %rs263;
	max.s16 	%rs267, %rs258, %rs266;
	max.s16 	%rs268, %rs257, %rs265;
	min.s16 	%rs269, %rs245, %rs268;
	min.s16 	%rs270, %rs246, %rs267;
	max.s16 	%rs796, %rs270, 0;
	max.s16 	%rs795, %rs269, 0;
	add.s32 	%r264, %r111, %r41;
	bra.uni 	LBB2_4;
LBB2_5:                                 // %false_bb2
	ld.param.u32 	%r24, [kernel_f1_s0____x____x___block_id_y_param_12];
	ld.param.u32 	%r23, [kernel_f1_s0____x____x___block_id_y_param_11];
	ld.param.u32 	%r22, [kernel_f1_s0____x____x___block_id_y_param_10];
	ld.param.u32 	%r21, [kernel_f1_s0____x____x___block_id_y_param_9];
	ld.param.u32 	%r20, [kernel_f1_s0____x____x___block_id_y_param_8];
	ld.param.u32 	%r19, [kernel_f1_s0____x____x___block_id_y_param_7];
	ld.param.u32 	%r18, [kernel_f1_s0____x____x___block_id_y_param_6];
	ld.param.u32 	%r17, [kernel_f1_s0____x____x___block_id_y_param_5];
	mul.lo.s32 	%r128, %r1, 247;
	sub.s32 	%r129, %r128, %r27;
	shl.b32 	%r130, %r129, 1;
	add.s32 	%r131, %r7, %r130;
	mul.wide.s32 	%rd79, %r131, 2;
	add.s64 	%rd80, %rd2, %rd79;
	ld.global.nc.v2.u16 	{%rs271, %rs272}, [%rd80+1932];
	add.s32 	%r132, %r43, %r27;
	sub.s32 	%r133, %r128, %r132;
	shl.b32 	%r134, %r133, 1;
	add.s32 	%r135, %r7, %r134;
	mul.wide.s32 	%rd81, %r135, 2;
	add.s64 	%rd82, %rd2, %rd81;
	ld.global.nc.v2.u16 	{%rs273, %rs274}, [%rd82+-60];
	sub.s32 	%r136, %r43, %r27;
	add.s32 	%r137, %r136, %r128;
	shl.b32 	%r138, %r137, 1;
	add.s32 	%r139, %r7, %r138;
	mul.wide.s32 	%rd83, %r139, 2;
	add.s64 	%rd84, %rd2, %rd83;
	ld.global.nc.v2.u16 	{%rs275, %rs276}, [%rd84+3924];
	ld.global.nc.v2.u16 	{%rs277, %rs278}, [%rd80+1928];
	ld.global.nc.v2.u16 	{%rs279, %rs280}, [%rd80+1936];
	max.s16 	%rs281, %rs277, %rs279;
	max.s16 	%rs282, %rs278, %rs280;
	max.s16 	%rs283, %rs276, %rs282;
	max.s16 	%rs284, %rs275, %rs281;
	max.s16 	%rs285, %rs273, %rs284;
	max.s16 	%rs286, %rs274, %rs283;
	min.s16 	%rs287, %rs272, %rs286;
	min.s16 	%rs288, %rs271, %rs285;
	max.s16 	%rs289, %rs288, 0;
	max.s16 	%rs290, %rs287, 0;
	add.s32 	%r140, %r6, %r62;
	mul.lo.s32 	%r141, %r140, %r61;
	mul.lo.s32 	%r142, %r1, 494;
	add.s32 	%r143, %r142, %r17;
	add.s32 	%r144, %r141, %r143;
	mul.wide.s32 	%rd85, %r144, 2;
	add.s64 	%rd86, %rd1, %rd85;
	st.global.u16 	[%rd86+2], %rs290;
	st.global.u16 	[%rd86], %rs289;
	ld.global.nc.v2.u16 	{%rs291, %rs292}, [%rd82+-56];
	ld.global.nc.v2.u16 	{%rs293, %rs294}, [%rd84+3928];
	ld.global.nc.v2.u16 	{%rs295, %rs296}, [%rd80+1940];
	max.s16 	%rs297, %rs271, %rs295;
	max.s16 	%rs298, %rs272, %rs296;
	max.s16 	%rs299, %rs294, %rs298;
	max.s16 	%rs300, %rs293, %rs297;
	max.s16 	%rs301, %rs291, %rs300;
	max.s16 	%rs302, %rs292, %rs299;
	min.s16 	%rs303, %rs280, %rs302;
	min.s16 	%rs304, %rs279, %rs301;
	max.s16 	%rs305, %rs304, 0;
	max.s16 	%rs306, %rs303, 0;
	add.s32 	%r145, %r142, %r18;
	add.s32 	%r146, %r141, %r145;
	mul.wide.s32 	%rd87, %r146, 2;
	add.s64 	%rd88, %rd1, %rd87;
	st.global.u16 	[%rd88+2], %rs306;
	st.global.u16 	[%rd88], %rs305;
	ld.global.nc.v2.u16 	{%rs307, %rs308}, [%rd82+-52];
	ld.global.nc.v2.u16 	{%rs309, %rs310}, [%rd84+3932];
	ld.global.nc.v2.u16 	{%rs311, %rs312}, [%rd80+1944];
	max.s16 	%rs313, %rs279, %rs311;
	max.s16 	%rs314, %rs280, %rs312;
	max.s16 	%rs315, %rs310, %rs314;
	max.s16 	%rs316, %rs309, %rs313;
	max.s16 	%rs317, %rs307, %rs316;
	max.s16 	%rs318, %rs308, %rs315;
	min.s16 	%rs319, %rs296, %rs318;
	min.s16 	%rs320, %rs295, %rs317;
	max.s16 	%rs321, %rs320, 0;
	max.s16 	%rs322, %rs319, 0;
	add.s32 	%r147, %r142, %r19;
	add.s32 	%r148, %r141, %r147;
	mul.wide.s32 	%rd89, %r148, 2;
	add.s64 	%rd90, %rd1, %rd89;
	st.global.u16 	[%rd90+2], %rs322;
	st.global.u16 	[%rd90], %rs321;
	ld.global.nc.v2.u16 	{%rs323, %rs324}, [%rd82+-48];
	ld.global.nc.v2.u16 	{%rs325, %rs326}, [%rd84+3936];
	ld.global.nc.v2.u16 	{%rs327, %rs328}, [%rd80+1948];
	max.s16 	%rs329, %rs295, %rs327;
	max.s16 	%rs330, %rs296, %rs328;
	max.s16 	%rs331, %rs326, %rs330;
	max.s16 	%rs332, %rs325, %rs329;
	max.s16 	%rs333, %rs323, %rs332;
	max.s16 	%rs334, %rs324, %rs331;
	min.s16 	%rs335, %rs312, %rs334;
	min.s16 	%rs336, %rs311, %rs333;
	max.s16 	%rs337, %rs336, 0;
	max.s16 	%rs338, %rs335, 0;
	add.s32 	%r149, %r142, %r20;
	add.s32 	%r150, %r141, %r149;
	mul.wide.s32 	%rd91, %r150, 2;
	add.s64 	%rd92, %rd1, %rd91;
	st.global.u16 	[%rd92+2], %rs338;
	st.global.u16 	[%rd92], %rs337;
	ld.global.nc.v2.u16 	{%rs339, %rs340}, [%rd82+-44];
	ld.global.nc.v2.u16 	{%rs341, %rs342}, [%rd84+3940];
	ld.global.nc.v2.u16 	{%rs343, %rs344}, [%rd80+1952];
	max.s16 	%rs345, %rs311, %rs343;
	max.s16 	%rs346, %rs312, %rs344;
	max.s16 	%rs347, %rs342, %rs346;
	max.s16 	%rs348, %rs341, %rs345;
	max.s16 	%rs349, %rs339, %rs348;
	max.s16 	%rs350, %rs340, %rs347;
	min.s16 	%rs351, %rs328, %rs350;
	min.s16 	%rs352, %rs327, %rs349;
	max.s16 	%rs353, %rs352, 0;
	max.s16 	%rs354, %rs351, 0;
	add.s32 	%r151, %r142, %r21;
	add.s32 	%r152, %r141, %r151;
	mul.wide.s32 	%rd93, %r152, 2;
	add.s64 	%rd94, %rd1, %rd93;
	st.global.u16 	[%rd94+2], %rs354;
	st.global.u16 	[%rd94], %rs353;
	ld.global.nc.v2.u16 	{%rs355, %rs356}, [%rd82+-40];
	ld.global.nc.v2.u16 	{%rs357, %rs358}, [%rd84+3944];
	ld.global.nc.v2.u16 	{%rs359, %rs360}, [%rd80+1956];
	max.s16 	%rs361, %rs327, %rs359;
	max.s16 	%rs362, %rs328, %rs360;
	max.s16 	%rs363, %rs358, %rs362;
	max.s16 	%rs364, %rs357, %rs361;
	max.s16 	%rs365, %rs355, %rs364;
	max.s16 	%rs366, %rs356, %rs363;
	min.s16 	%rs367, %rs344, %rs366;
	min.s16 	%rs368, %rs343, %rs365;
	max.s16 	%rs369, %rs368, 0;
	max.s16 	%rs370, %rs367, 0;
	add.s32 	%r153, %r142, %r22;
	add.s32 	%r154, %r141, %r153;
	mul.wide.s32 	%rd95, %r154, 2;
	add.s64 	%rd96, %rd1, %rd95;
	st.global.u16 	[%rd96+2], %rs370;
	st.global.u16 	[%rd96], %rs369;
	ld.global.nc.v2.u16 	{%rs371, %rs372}, [%rd82+-36];
	ld.global.nc.v2.u16 	{%rs373, %rs374}, [%rd84+3948];
	ld.global.nc.v2.u16 	{%rs375, %rs376}, [%rd80+1960];
	max.s16 	%rs377, %rs343, %rs375;
	max.s16 	%rs378, %rs344, %rs376;
	max.s16 	%rs379, %rs374, %rs378;
	max.s16 	%rs380, %rs373, %rs377;
	max.s16 	%rs381, %rs371, %rs380;
	max.s16 	%rs382, %rs372, %rs379;
	min.s16 	%rs383, %rs360, %rs382;
	min.s16 	%rs384, %rs359, %rs381;
	max.s16 	%rs385, %rs384, 0;
	max.s16 	%rs386, %rs383, 0;
	add.s32 	%r155, %r142, %r23;
	add.s32 	%r156, %r141, %r155;
	mul.wide.s32 	%rd97, %r156, 2;
	add.s64 	%rd98, %rd1, %rd97;
	st.global.u16 	[%rd98+2], %rs386;
	st.global.u16 	[%rd98], %rs385;
	ld.global.nc.v2.u16 	{%rs387, %rs388}, [%rd82+-32];
	ld.global.nc.v2.u16 	{%rs389, %rs390}, [%rd84+3952];
	ld.global.nc.v2.u16 	{%rs391, %rs392}, [%rd80+1964];
	max.s16 	%rs393, %rs359, %rs391;
	max.s16 	%rs394, %rs360, %rs392;
	max.s16 	%rs395, %rs390, %rs394;
	max.s16 	%rs396, %rs389, %rs393;
	max.s16 	%rs397, %rs387, %rs396;
	max.s16 	%rs398, %rs388, %rs395;
	min.s16 	%rs399, %rs376, %rs398;
	min.s16 	%rs400, %rs375, %rs397;
	max.s16 	%rs401, %rs400, 0;
	max.s16 	%rs402, %rs399, 0;
	add.s32 	%r157, %r142, %r24;
	add.s32 	%r158, %r141, %r157;
	mul.wide.s32 	%rd99, %r158, 2;
	add.s64 	%rd100, %rd1, %rd99;
	st.global.u16 	[%rd100+2], %rs402;
	st.global.u16 	[%rd100], %rs401;
	add.s32 	%r159, %r6, %r65;
	mul.lo.s32 	%r160, %r159, %r5;
	add.s32 	%r161, %r160, %r130;
	mul.wide.s32 	%rd101, %r161, 2;
	add.s64 	%rd102, %rd2, %rd101;
	ld.global.nc.v2.u16 	{%rs403, %rs404}, [%rd102+1932];
	add.s32 	%r162, %r160, %r134;
	mul.wide.s32 	%rd103, %r162, 2;
	add.s64 	%rd104, %rd2, %rd103;
	ld.global.nc.v2.u16 	{%rs405, %rs406}, [%rd104+-60];
	add.s32 	%r163, %r160, %r138;
	mul.wide.s32 	%rd105, %r163, 2;
	add.s64 	%rd106, %rd2, %rd105;
	ld.global.nc.v2.u16 	{%rs407, %rs408}, [%rd106+3924];
	ld.global.nc.v2.u16 	{%rs409, %rs410}, [%rd102+1928];
	ld.global.nc.v2.u16 	{%rs411, %rs412}, [%rd102+1936];
	max.s16 	%rs413, %rs409, %rs411;
	max.s16 	%rs414, %rs410, %rs412;
	max.s16 	%rs415, %rs408, %rs414;
	max.s16 	%rs416, %rs407, %rs413;
	max.s16 	%rs417, %rs405, %rs416;
	max.s16 	%rs418, %rs406, %rs415;
	min.s16 	%rs419, %rs404, %rs418;
	min.s16 	%rs420, %rs403, %rs417;
	max.s16 	%rs421, %rs420, 0;
	max.s16 	%rs422, %rs419, 0;
	add.s32 	%r164, %r6, %r16;
	mul.lo.s32 	%r165, %r164, %r61;
	add.s32 	%r166, %r165, %r143;
	mul.wide.s32 	%rd107, %r166, 2;
	add.s64 	%rd108, %rd1, %rd107;
	st.global.u16 	[%rd108+2], %rs422;
	st.global.u16 	[%rd108], %rs421;
	ld.global.nc.v2.u16 	{%rs423, %rs424}, [%rd104+-56];
	ld.global.nc.v2.u16 	{%rs425, %rs426}, [%rd106+3928];
	ld.global.nc.v2.u16 	{%rs427, %rs428}, [%rd102+1940];
	max.s16 	%rs429, %rs403, %rs427;
	max.s16 	%rs430, %rs404, %rs428;
	max.s16 	%rs431, %rs426, %rs430;
	max.s16 	%rs432, %rs425, %rs429;
	max.s16 	%rs433, %rs423, %rs432;
	max.s16 	%rs434, %rs424, %rs431;
	min.s16 	%rs435, %rs412, %rs434;
	min.s16 	%rs436, %rs411, %rs433;
	max.s16 	%rs437, %rs436, 0;
	max.s16 	%rs438, %rs435, 0;
	add.s32 	%r167, %r165, %r145;
	mul.wide.s32 	%rd109, %r167, 2;
	add.s64 	%rd110, %rd1, %rd109;
	st.global.u16 	[%rd110+2], %rs438;
	st.global.u16 	[%rd110], %rs437;
	ld.global.nc.v2.u16 	{%rs439, %rs440}, [%rd104+-52];
	ld.global.nc.v2.u16 	{%rs441, %rs442}, [%rd106+3932];
	ld.global.nc.v2.u16 	{%rs443, %rs444}, [%rd102+1944];
	max.s16 	%rs445, %rs411, %rs443;
	max.s16 	%rs446, %rs412, %rs444;
	max.s16 	%rs447, %rs442, %rs446;
	max.s16 	%rs448, %rs441, %rs445;
	max.s16 	%rs449, %rs439, %rs448;
	max.s16 	%rs450, %rs440, %rs447;
	min.s16 	%rs451, %rs428, %rs450;
	min.s16 	%rs452, %rs427, %rs449;
	max.s16 	%rs453, %rs452, 0;
	max.s16 	%rs454, %rs451, 0;
	add.s32 	%r168, %r165, %r147;
	mul.wide.s32 	%rd111, %r168, 2;
	add.s64 	%rd112, %rd1, %rd111;
	st.global.u16 	[%rd112+2], %rs454;
	st.global.u16 	[%rd112], %rs453;
	ld.global.nc.v2.u16 	{%rs455, %rs456}, [%rd104+-48];
	ld.global.nc.v2.u16 	{%rs457, %rs458}, [%rd106+3936];
	ld.global.nc.v2.u16 	{%rs459, %rs460}, [%rd102+1948];
	max.s16 	%rs461, %rs427, %rs459;
	max.s16 	%rs462, %rs428, %rs460;
	max.s16 	%rs463, %rs458, %rs462;
	max.s16 	%rs464, %rs457, %rs461;
	max.s16 	%rs465, %rs455, %rs464;
	max.s16 	%rs466, %rs456, %rs463;
	min.s16 	%rs467, %rs444, %rs466;
	min.s16 	%rs468, %rs443, %rs465;
	max.s16 	%rs469, %rs468, 0;
	max.s16 	%rs470, %rs467, 0;
	add.s32 	%r169, %r165, %r149;
	mul.wide.s32 	%rd113, %r169, 2;
	add.s64 	%rd114, %rd1, %rd113;
	st.global.u16 	[%rd114+2], %rs470;
	st.global.u16 	[%rd114], %rs469;
	ld.global.nc.v2.u16 	{%rs471, %rs472}, [%rd104+-44];
	ld.global.nc.v2.u16 	{%rs473, %rs474}, [%rd106+3940];
	ld.global.nc.v2.u16 	{%rs475, %rs476}, [%rd102+1952];
	max.s16 	%rs477, %rs443, %rs475;
	max.s16 	%rs478, %rs444, %rs476;
	max.s16 	%rs479, %rs474, %rs478;
	max.s16 	%rs480, %rs473, %rs477;
	max.s16 	%rs481, %rs471, %rs480;
	max.s16 	%rs482, %rs472, %rs479;
	min.s16 	%rs483, %rs460, %rs482;
	min.s16 	%rs484, %rs459, %rs481;
	max.s16 	%rs485, %rs484, 0;
	max.s16 	%rs486, %rs483, 0;
	add.s32 	%r170, %r165, %r151;
	mul.wide.s32 	%rd115, %r170, 2;
	add.s64 	%rd116, %rd1, %rd115;
	st.global.u16 	[%rd116+2], %rs486;
	st.global.u16 	[%rd116], %rs485;
	ld.global.nc.v2.u16 	{%rs487, %rs488}, [%rd104+-40];
	ld.global.nc.v2.u16 	{%rs489, %rs490}, [%rd106+3944];
	ld.global.nc.v2.u16 	{%rs491, %rs492}, [%rd102+1956];
	max.s16 	%rs493, %rs459, %rs491;
	max.s16 	%rs494, %rs460, %rs492;
	max.s16 	%rs495, %rs490, %rs494;
	max.s16 	%rs496, %rs489, %rs493;
	max.s16 	%rs497, %rs487, %rs496;
	max.s16 	%rs498, %rs488, %rs495;
	min.s16 	%rs499, %rs476, %rs498;
	min.s16 	%rs500, %rs475, %rs497;
	max.s16 	%rs501, %rs500, 0;
	max.s16 	%rs502, %rs499, 0;
	add.s32 	%r171, %r165, %r153;
	mul.wide.s32 	%rd117, %r171, 2;
	add.s64 	%rd118, %rd1, %rd117;
	st.global.u16 	[%rd118+2], %rs502;
	st.global.u16 	[%rd118], %rs501;
	ld.global.nc.v2.u16 	{%rs503, %rs504}, [%rd104+-36];
	ld.global.nc.v2.u16 	{%rs505, %rs506}, [%rd106+3948];
	ld.global.nc.v2.u16 	{%rs507, %rs508}, [%rd102+1960];
	max.s16 	%rs509, %rs475, %rs507;
	max.s16 	%rs510, %rs476, %rs508;
	max.s16 	%rs511, %rs506, %rs510;
	max.s16 	%rs512, %rs505, %rs509;
	max.s16 	%rs513, %rs503, %rs512;
	max.s16 	%rs514, %rs504, %rs511;
	min.s16 	%rs515, %rs492, %rs514;
	min.s16 	%rs516, %rs491, %rs513;
	max.s16 	%rs517, %rs516, 0;
	max.s16 	%rs518, %rs515, 0;
	add.s32 	%r172, %r165, %r155;
	mul.wide.s32 	%rd119, %r172, 2;
	add.s64 	%rd120, %rd1, %rd119;
	st.global.u16 	[%rd120+2], %rs518;
	st.global.u16 	[%rd120], %rs517;
	ld.global.nc.v2.u16 	{%rs519, %rs520}, [%rd104+-32];
	ld.global.nc.v2.u16 	{%rs521, %rs522}, [%rd106+3952];
	ld.global.nc.v2.u16 	{%rs523, %rs524}, [%rd102+1964];
	max.s16 	%rs525, %rs492, %rs524;
	max.s16 	%rs526, %rs491, %rs523;
	max.s16 	%rs527, %rs521, %rs526;
	max.s16 	%rs528, %rs522, %rs525;
	max.s16 	%rs529, %rs520, %rs528;
	max.s16 	%rs530, %rs519, %rs527;
	min.s16 	%rs531, %rs507, %rs530;
	min.s16 	%rs532, %rs508, %rs529;
	max.s16 	%rs796, %rs532, 0;
	max.s16 	%rs795, %rs531, 0;
	add.s32 	%r264, %r165, %r157;
LBB2_4:                                 // %after_bb
	mul.wide.s32 	%rd227, %r264, 2;
	add.s64 	%rd228, %rd1, %rd227;
	st.global.u16 	[%rd228+2], %rs796;
	st.global.u16 	[%rd228], %rs795;
	ret;
                                        // -- End function
}
	// .globl	kernel_f2_s0____x____x___block_id_y // -- Begin function kernel_f2_s0____x____x___block_id_y
.visible .entry kernel_f2_s0____x____x___block_id_y(
	.param .u32 kernel_f2_s0____x____x___block_id_y_param_0,
	.param .u32 kernel_f2_s0____x____x___block_id_y_param_1,
	.param .u32 kernel_f2_s0____x____x___block_id_y_param_2,
	.param .u32 kernel_f2_s0____x____x___block_id_y_param_3,
	.param .u32 kernel_f2_s0____x____x___block_id_y_param_4,
	.param .u32 kernel_f2_s0____x____x___block_id_y_param_5,
	.param .u32 kernel_f2_s0____x____x___block_id_y_param_6,
	.param .u32 kernel_f2_s0____x____x___block_id_y_param_7,
	.param .u32 kernel_f2_s0____x____x___block_id_y_param_8,
	.param .u32 kernel_f2_s0____x____x___block_id_y_param_9,
	.param .u32 kernel_f2_s0____x____x___block_id_y_param_10,
	.param .u32 kernel_f2_s0____x____x___block_id_y_param_11,
	.param .u32 kernel_f2_s0____x____x___block_id_y_param_12,
	.param .u32 kernel_f2_s0____x____x___block_id_y_param_13,
	.param .u32 kernel_f2_s0____x____x___block_id_y_param_14,
	.param .u32 kernel_f2_s0____x____x___block_id_y_param_15,
	.param .u32 kernel_f2_s0____x____x___block_id_y_param_16,
	.param .u32 kernel_f2_s0____x____x___block_id_y_param_17,
	.param .u32 kernel_f2_s0____x____x___block_id_y_param_18,
	.param .u32 kernel_f2_s0____x____x___block_id_y_param_19,
	.param .u32 kernel_f2_s0____x____x___block_id_y_param_20,
	.param .u32 kernel_f2_s0____x____x___block_id_y_param_21,
	.param .u32 kernel_f2_s0____x____x___block_id_y_param_22,
	.param .u32 kernel_f2_s0____x____x___block_id_y_param_23,
	.param .u32 kernel_f2_s0____x____x___block_id_y_param_24,
	.param .u32 kernel_f2_s0____x____x___block_id_y_param_25,
	.param .u32 kernel_f2_s0____x____x___block_id_y_param_26,
	.param .u32 kernel_f2_s0____x____x___block_id_y_param_27,
	.param .u32 kernel_f2_s0____x____x___block_id_y_param_28,
	.param .u32 kernel_f2_s0____x____x___block_id_y_param_29,
	.param .u32 kernel_f2_s0____x____x___block_id_y_param_30,
	.param .u32 kernel_f2_s0____x____x___block_id_y_param_31,
	.param .u32 kernel_f2_s0____x____x___block_id_y_param_32,
	.param .u32 kernel_f2_s0____x____x___block_id_y_param_33,
	.param .u32 kernel_f2_s0____x____x___block_id_y_param_34,
	.param .u32 kernel_f2_s0____x____x___block_id_y_param_35,
	.param .u32 kernel_f2_s0____x____x___block_id_y_param_36,
	.param .u32 kernel_f2_s0____x____x___block_id_y_param_37,
	.param .u32 kernel_f2_s0____x____x___block_id_y_param_38,
	.param .u32 kernel_f2_s0____x____x___block_id_y_param_39,
	.param .u64 kernel_f2_s0____x____x___block_id_y_param_40,
	.param .u64 kernel_f2_s0____x____x___block_id_y_param_41
)                                       // @kernel_f2_s0____x____x___block_id_y
{
	.reg .pred 	%p<3>;
	.reg .b16 	%rs<53>;
	.reg .b32 	%r<172>;
	.reg .b64 	%rd<101>;

// %bb.0:                               // %entry
	ld.param.u32 	%r52, [kernel_f2_s0____x____x___block_id_y_param_39];
	ld.param.u32 	%r51, [kernel_f2_s0____x____x___block_id_y_param_38];
	ld.param.u32 	%r50, [kernel_f2_s0____x____x___block_id_y_param_37];
	ld.param.u32 	%r49, [kernel_f2_s0____x____x___block_id_y_param_36];
	ld.param.u32 	%r48, [kernel_f2_s0____x____x___block_id_y_param_35];
	ld.param.u32 	%r47, [kernel_f2_s0____x____x___block_id_y_param_34];
	ld.param.u32 	%r46, [kernel_f2_s0____x____x___block_id_y_param_33];
	ld.param.u32 	%r45, [kernel_f2_s0____x____x___block_id_y_param_32];
	ld.param.u32 	%r44, [kernel_f2_s0____x____x___block_id_y_param_31];
	ld.param.u32 	%r43, [kernel_f2_s0____x____x___block_id_y_param_30];
	ld.param.u32 	%r42, [kernel_f2_s0____x____x___block_id_y_param_29];
	ld.param.u32 	%r41, [kernel_f2_s0____x____x___block_id_y_param_28];
	ld.param.u32 	%r40, [kernel_f2_s0____x____x___block_id_y_param_27];
	ld.param.u32 	%r39, [kernel_f2_s0____x____x___block_id_y_param_26];
	ld.param.u32 	%r37, [kernel_f2_s0____x____x___block_id_y_param_24];
	ld.param.u32 	%r36, [kernel_f2_s0____x____x___block_id_y_param_23];
	ld.param.u32 	%r35, [kernel_f2_s0____x____x___block_id_y_param_21];
	ld.param.u32 	%r34, [kernel_f2_s0____x____x___block_id_y_param_20];
	ld.param.u32 	%r16, [kernel_f2_s0____x____x___block_id_y_param_1];
	ld.param.u64 	%rd7, [kernel_f2_s0____x____x___block_id_y_param_41];
	cvta.to.global.u64 	%rd1, %rd7;
	ld.param.u64 	%rd8, [kernel_f2_s0____x____x___block_id_y_param_40];
	cvta.to.global.u64 	%rd2, %rd8;
	mov.u32 	%r53, %ctaid.y;
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %tid.y;
	mov.u32 	%r3, %tid.x;
	mad.lo.s32 	%r54, %r53, 62, 59;
	ld.param.u32 	%r55, [kernel_f2_s0____x____x___block_id_y_param_10];
	min.s32 	%r4, %r54, %r55;
	ld.param.u32 	%r56, [kernel_f2_s0____x____x___block_id_y_param_22];
	setp.ge.s32 	%p1, %r1, %r56;
	@%p1 bra 	LBB3_3;
// %bb.1:                               // %true_bb
	ld.param.u32 	%r38, [kernel_f2_s0____x____x___block_id_y_param_25];
	setp.lt.u32 	%p2, %r2, 7;
	mad.lo.s32 	%r5, %r1, 31, %r3;
	shl.b32 	%r6, %r5, 2;
	@%p2 bra 	LBB3_2;
	bra.uni 	LBB3_5;
LBB3_2:                                 // %true_bb1
	shl.b32 	%r132, %r2, 3;
	add.s32 	%r133, %r4, %r132;
	shl.b32 	%r134, %r133, 1;
	add.s32 	%r135, %r134, %r37;
	add.s32 	%r136, %r36, 985;
	sub.s32 	%r137, %r36, %r35;
	add.s32 	%r138, %r6, %r137;
	mad.lo.s32 	%r139, %r135, %r136, %r138;
	mul.wide.s32 	%rd69, %r139, 2;
	add.s64 	%rd70, %rd2, %rd69;
	ld.global.nc.u16 	%rs37, [%rd70+3934];
	ld.global.nc.u16 	%rs38, [%rd70+3938];
	shl.b32 	%r140, %r5, 1;
	add.s32 	%r141, %r133, %r39;
	add.s32 	%r171, %r140, %r38;
	mad.lo.s32 	%r142, %r141, %r40, %r171;
	mul.wide.s32 	%rd71, %r142, 2;
	add.s64 	%rd72, %rd1, %rd71;
	st.global.u16 	[%rd72+2], %rs38;
	st.global.u16 	[%rd72], %rs37;
	add.s32 	%r143, %r134, %r41;
	mad.lo.s32 	%r144, %r143, %r136, %r138;
	mul.wide.s32 	%rd73, %r144, 2;
	add.s64 	%rd74, %rd2, %rd73;
	ld.global.nc.u16 	%rs39, [%rd74+3934];
	ld.global.nc.u16 	%rs40, [%rd74+3938];
	add.s32 	%r145, %r133, %r42;
	mad.lo.s32 	%r146, %r145, %r40, %r171;
	mul.wide.s32 	%rd75, %r146, 2;
	add.s64 	%rd76, %rd1, %rd75;
	st.global.u16 	[%rd76+2], %rs40;
	st.global.u16 	[%rd76], %rs39;
	add.s32 	%r147, %r134, %r43;
	mad.lo.s32 	%r148, %r147, %r136, %r138;
	mul.wide.s32 	%rd77, %r148, 2;
	add.s64 	%rd78, %rd2, %rd77;
	ld.global.nc.u16 	%rs41, [%rd78+3934];
	ld.global.nc.u16 	%rs42, [%rd78+3938];
	add.s32 	%r149, %r133, %r44;
	mad.lo.s32 	%r150, %r149, %r40, %r171;
	mul.wide.s32 	%rd79, %r150, 2;
	add.s64 	%rd80, %rd1, %rd79;
	st.global.u16 	[%rd80+2], %rs42;
	st.global.u16 	[%rd80], %rs41;
	add.s32 	%r151, %r134, %r45;
	mad.lo.s32 	%r152, %r151, %r136, %r138;
	mul.wide.s32 	%rd81, %r152, 2;
	add.s64 	%rd82, %rd2, %rd81;
	ld.global.nc.u16 	%rs43, [%rd82+3934];
	ld.global.nc.u16 	%rs44, [%rd82+3938];
	add.s32 	%r153, %r133, %r46;
	mad.lo.s32 	%r154, %r153, %r40, %r171;
	mul.wide.s32 	%rd83, %r154, 2;
	add.s64 	%rd84, %rd1, %rd83;
	st.global.u16 	[%rd84+2], %rs44;
	st.global.u16 	[%rd84], %rs43;
	add.s32 	%r155, %r134, %r47;
	mad.lo.s32 	%r156, %r155, %r136, %r138;
	mul.wide.s32 	%rd85, %r156, 2;
	add.s64 	%rd86, %rd2, %rd85;
	ld.global.nc.u16 	%rs45, [%rd86+3934];
	ld.global.nc.u16 	%rs46, [%rd86+3938];
	add.s32 	%r157, %r133, %r48;
	mad.lo.s32 	%r158, %r157, %r40, %r171;
	mul.wide.s32 	%rd87, %r158, 2;
	add.s64 	%rd88, %rd1, %rd87;
	st.global.u16 	[%rd88+2], %rs46;
	st.global.u16 	[%rd88], %rs45;
	add.s32 	%r159, %r134, %r49;
	mad.lo.s32 	%r160, %r159, %r136, %r138;
	mul.wide.s32 	%rd89, %r160, 2;
	add.s64 	%rd90, %rd2, %rd89;
	ld.global.nc.u16 	%rs47, [%rd90+3934];
	ld.global.nc.u16 	%rs48, [%rd90+3938];
	add.s32 	%r161, %r133, %r50;
	mad.lo.s32 	%r162, %r161, %r40, %r171;
	mul.wide.s32 	%rd91, %r162, 2;
	add.s64 	%rd92, %rd1, %rd91;
	st.global.u16 	[%rd92+2], %rs48;
	st.global.u16 	[%rd92], %rs47;
	add.s32 	%r163, %r134, %r51;
	mad.lo.s32 	%r164, %r163, %r136, %r138;
	mul.wide.s32 	%rd93, %r164, 2;
	add.s64 	%rd94, %rd2, %rd93;
	ld.global.nc.u16 	%rs49, [%rd94+3934];
	ld.global.nc.u16 	%rs50, [%rd94+3938];
	add.s32 	%r165, %r133, %r34;
	mad.lo.s32 	%r166, %r165, %r40, %r171;
	mul.wide.s32 	%rd95, %r166, 2;
	add.s64 	%rd96, %rd1, %rd95;
	st.global.u16 	[%rd96+2], %rs50;
	st.global.u16 	[%rd96], %rs49;
	add.s32 	%r167, %r134, %r52;
	mad.lo.s32 	%r168, %r167, %r136, %r138;
	mul.wide.s32 	%rd97, %r168, 2;
	add.s64 	%rd98, %rd2, %rd97;
	ld.global.nc.u16 	%rs51, [%rd98+3934];
	ld.global.nc.u16 	%rs52, [%rd98+3938];
	add.s32 	%r170, %r133, %r16;
	bra.uni 	LBB3_4;
LBB3_3:                                 // %false_bb
	ld.param.u32 	%r33, [kernel_f2_s0____x____x___block_id_y_param_19];
	ld.param.u32 	%r32, [kernel_f2_s0____x____x___block_id_y_param_18];
	shl.b32 	%r57, %r3, 1;
	add.s32 	%r58, %r57, %r33;
	shl.b32 	%r59, %r58, 1;
	shl.b32 	%r60, %r2, 3;
	min.u32 	%r61, %r60, 54;
	add.s32 	%r62, %r61, %r4;
	shl.b32 	%r63, %r62, 1;
	add.s32 	%r64, %r63, %r37;
	add.s32 	%r65, %r36, 985;
	sub.s32 	%r66, %r36, %r35;
	add.s32 	%r67, %r59, %r66;
	mad.lo.s32 	%r68, %r64, %r65, %r67;
	mul.wide.s32 	%rd9, %r68, 2;
	add.s64 	%rd10, %rd2, %rd9;
	ld.global.nc.u16 	%rs9, [%rd10+3698];
	ld.global.nc.u16 	%rs10, [%rd10+3702];
	add.s32 	%r69, %r62, %r39;
	add.s32 	%r171, %r57, %r32;
	mad.lo.s32 	%r70, %r69, %r40, %r171;
	mul.wide.s32 	%rd11, %r70, 2;
	add.s64 	%rd12, %rd1, %rd11;
	st.global.u16 	[%rd12+2], %rs10;
	st.global.u16 	[%rd12], %rs9;
	add.s32 	%r71, %r63, %r41;
	mad.lo.s32 	%r72, %r71, %r65, %r67;
	mul.wide.s32 	%rd13, %r72, 2;
	add.s64 	%rd14, %rd2, %rd13;
	ld.global.nc.u16 	%rs11, [%rd14+3698];
	ld.global.nc.u16 	%rs12, [%rd14+3702];
	add.s32 	%r73, %r62, %r42;
	mad.lo.s32 	%r74, %r73, %r40, %r171;
	mul.wide.s32 	%rd15, %r74, 2;
	add.s64 	%rd16, %rd1, %rd15;
	st.global.u16 	[%rd16+2], %rs12;
	st.global.u16 	[%rd16], %rs11;
	add.s32 	%r75, %r63, %r43;
	mad.lo.s32 	%r76, %r75, %r65, %r67;
	mul.wide.s32 	%rd17, %r76, 2;
	add.s64 	%rd18, %rd2, %rd17;
	ld.global.nc.u16 	%rs13, [%rd18+3698];
	ld.global.nc.u16 	%rs14, [%rd18+3702];
	add.s32 	%r77, %r62, %r44;
	mad.lo.s32 	%r78, %r77, %r40, %r171;
	mul.wide.s32 	%rd19, %r78, 2;
	add.s64 	%rd20, %rd1, %rd19;
	st.global.u16 	[%rd20+2], %rs14;
	st.global.u16 	[%rd20], %rs13;
	add.s32 	%r79, %r63, %r45;
	mad.lo.s32 	%r80, %r79, %r65, %r67;
	mul.wide.s32 	%rd21, %r80, 2;
	add.s64 	%rd22, %rd2, %rd21;
	ld.global.nc.u16 	%rs15, [%rd22+3698];
	ld.global.nc.u16 	%rs16, [%rd22+3702];
	add.s32 	%r81, %r62, %r46;
	mad.lo.s32 	%r82, %r81, %r40, %r171;
	mul.wide.s32 	%rd23, %r82, 2;
	add.s64 	%rd24, %rd1, %rd23;
	st.global.u16 	[%rd24+2], %rs16;
	st.global.u16 	[%rd24], %rs15;
	add.s32 	%r83, %r63, %r47;
	mad.lo.s32 	%r84, %r83, %r65, %r67;
	mul.wide.s32 	%rd25, %r84, 2;
	add.s64 	%rd26, %rd2, %rd25;
	ld.global.nc.u16 	%rs17, [%rd26+3698];
	ld.global.nc.u16 	%rs18, [%rd26+3702];
	add.s32 	%r85, %r62, %r48;
	mad.lo.s32 	%r86, %r85, %r40, %r171;
	mul.wide.s32 	%rd27, %r86, 2;
	add.s64 	%rd28, %rd1, %rd27;
	st.global.u16 	[%rd28+2], %rs18;
	st.global.u16 	[%rd28], %rs17;
	add.s32 	%r87, %r63, %r49;
	mad.lo.s32 	%r88, %r87, %r65, %r67;
	mul.wide.s32 	%rd29, %r88, 2;
	add.s64 	%rd30, %rd2, %rd29;
	ld.global.nc.u16 	%rs19, [%rd30+3698];
	ld.global.nc.u16 	%rs20, [%rd30+3702];
	add.s32 	%r89, %r62, %r50;
	mad.lo.s32 	%r90, %r89, %r40, %r171;
	mul.wide.s32 	%rd31, %r90, 2;
	add.s64 	%rd32, %rd1, %rd31;
	st.global.u16 	[%rd32+2], %rs20;
	st.global.u16 	[%rd32], %rs19;
	add.s32 	%r91, %r63, %r51;
	mad.lo.s32 	%r92, %r91, %r65, %r67;
	mul.wide.s32 	%rd33, %r92, 2;
	add.s64 	%rd34, %rd2, %rd33;
	ld.global.nc.u16 	%rs21, [%rd34+3698];
	ld.global.nc.u16 	%rs22, [%rd34+3702];
	add.s32 	%r93, %r62, %r34;
	mad.lo.s32 	%r94, %r93, %r40, %r171;
	mul.wide.s32 	%rd35, %r94, 2;
	add.s64 	%rd36, %rd1, %rd35;
	st.global.u16 	[%rd36+2], %rs22;
	st.global.u16 	[%rd36], %rs21;
	add.s32 	%r95, %r63, %r52;
	mad.lo.s32 	%r96, %r95, %r65, %r67;
	mul.wide.s32 	%rd37, %r96, 2;
	add.s64 	%rd38, %rd2, %rd37;
	ld.global.nc.u16 	%rs51, [%rd38+3698];
	ld.global.nc.u16 	%rs52, [%rd38+3702];
	add.s32 	%r170, %r62, %r16;
	bra.uni 	LBB3_4;
LBB3_5:                                 // %false_bb2
	ld.param.u32 	%r31, [kernel_f2_s0____x____x___block_id_y_param_17];
	ld.param.u32 	%r30, [kernel_f2_s0____x____x___block_id_y_param_16];
	ld.param.u32 	%r29, [kernel_f2_s0____x____x___block_id_y_param_15];
	ld.param.u32 	%r28, [kernel_f2_s0____x____x___block_id_y_param_14];
	ld.param.u32 	%r27, [kernel_f2_s0____x____x___block_id_y_param_13];
	ld.param.u32 	%r26, [kernel_f2_s0____x____x___block_id_y_param_12];
	ld.param.u32 	%r25, [kernel_f2_s0____x____x___block_id_y_param_11];
	ld.param.u32 	%r24, [kernel_f2_s0____x____x___block_id_y_param_9];
	ld.param.u32 	%r23, [kernel_f2_s0____x____x___block_id_y_param_8];
	ld.param.u32 	%r22, [kernel_f2_s0____x____x___block_id_y_param_7];
	ld.param.u32 	%r21, [kernel_f2_s0____x____x___block_id_y_param_6];
	ld.param.u32 	%r20, [kernel_f2_s0____x____x___block_id_y_param_5];
	ld.param.u32 	%r19, [kernel_f2_s0____x____x___block_id_y_param_4];
	ld.param.u32 	%r18, [kernel_f2_s0____x____x___block_id_y_param_3];
	ld.param.u32 	%r17, [kernel_f2_s0____x____x___block_id_y_param_2];
	ld.param.u32 	%r15, [kernel_f2_s0____x____x___block_id_y_param_0];
	shl.b32 	%r97, %r4, 1;
	add.s32 	%r98, %r97, %r17;
	add.s32 	%r99, %r36, 985;
	sub.s32 	%r100, %r36, %r35;
	add.s32 	%r101, %r6, %r100;
	mad.lo.s32 	%r102, %r98, %r99, %r101;
	mul.wide.s32 	%rd39, %r102, 2;
	add.s64 	%rd40, %rd2, %rd39;
	ld.global.nc.u16 	%rs23, [%rd40+3934];
	ld.global.nc.u16 	%rs24, [%rd40+3938];
	shl.b32 	%r103, %r5, 1;
	add.s32 	%r104, %r4, %r18;
	add.s32 	%r171, %r103, %r38;
	mad.lo.s32 	%r105, %r104, %r40, %r171;
	mul.wide.s32 	%rd41, %r105, 2;
	add.s64 	%rd42, %rd1, %rd41;
	st.global.u16 	[%rd42+2], %rs24;
	st.global.u16 	[%rd42], %rs23;
	add.s32 	%r106, %r97, %r19;
	mad.lo.s32 	%r107, %r106, %r99, %r101;
	mul.wide.s32 	%rd43, %r107, 2;
	add.s64 	%rd44, %rd2, %rd43;
	ld.global.nc.u16 	%rs25, [%rd44+3934];
	ld.global.nc.u16 	%rs26, [%rd44+3938];
	add.s32 	%r108, %r4, %r20;
	mad.lo.s32 	%r109, %r108, %r40, %r171;
	mul.wide.s32 	%rd45, %r109, 2;
	add.s64 	%rd46, %rd1, %rd45;
	st.global.u16 	[%rd46+2], %rs26;
	st.global.u16 	[%rd46], %rs25;
	add.s32 	%r110, %r97, %r21;
	mad.lo.s32 	%r111, %r110, %r99, %r101;
	mul.wide.s32 	%rd47, %r111, 2;
	add.s64 	%rd48, %rd2, %rd47;
	ld.global.nc.u16 	%rs27, [%rd48+3934];
	ld.global.nc.u16 	%rs28, [%rd48+3938];
	add.s32 	%r112, %r4, %r22;
	mad.lo.s32 	%r113, %r112, %r40, %r171;
	mul.wide.s32 	%rd49, %r113, 2;
	add.s64 	%rd50, %rd1, %rd49;
	st.global.u16 	[%rd50+2], %rs28;
	st.global.u16 	[%rd50], %rs27;
	add.s32 	%r114, %r97, %r23;
	mad.lo.s32 	%r115, %r114, %r99, %r101;
	mul.wide.s32 	%rd51, %r115, 2;
	add.s64 	%rd52, %rd2, %rd51;
	ld.global.nc.u16 	%rs29, [%rd52+3934];
	ld.global.nc.u16 	%rs30, [%rd52+3938];
	add.s32 	%r116, %r4, %r24;
	mad.lo.s32 	%r117, %r116, %r40, %r171;
	mul.wide.s32 	%rd53, %r117, 2;
	add.s64 	%rd54, %rd1, %rd53;
	st.global.u16 	[%rd54+2], %rs30;
	st.global.u16 	[%rd54], %rs29;
	add.s32 	%r118, %r97, %r15;
	mad.lo.s32 	%r119, %r118, %r99, %r101;
	mul.wide.s32 	%rd55, %r119, 2;
	add.s64 	%rd56, %rd2, %rd55;
	ld.global.nc.u16 	%rs31, [%rd56+3934];
	ld.global.nc.u16 	%rs32, [%rd56+3938];
	add.s32 	%r120, %r4, %r25;
	mad.lo.s32 	%r121, %r120, %r40, %r171;
	mul.wide.s32 	%rd57, %r121, 2;
	add.s64 	%rd58, %rd1, %rd57;
	st.global.u16 	[%rd58+2], %rs32;
	st.global.u16 	[%rd58], %rs31;
	add.s32 	%r122, %r97, %r26;
	mad.lo.s32 	%r123, %r122, %r99, %r101;
	mul.wide.s32 	%rd59, %r123, 2;
	add.s64 	%rd60, %rd2, %rd59;
	ld.global.nc.u16 	%rs33, [%rd60+3934];
	ld.global.nc.u16 	%rs34, [%rd60+3938];
	add.s32 	%r124, %r4, %r27;
	mad.lo.s32 	%r125, %r124, %r40, %r171;
	mul.wide.s32 	%rd61, %r125, 2;
	add.s64 	%rd62, %rd1, %rd61;
	st.global.u16 	[%rd62+2], %rs34;
	st.global.u16 	[%rd62], %rs33;
	add.s32 	%r126, %r97, %r28;
	mad.lo.s32 	%r127, %r126, %r99, %r101;
	mul.wide.s32 	%rd63, %r127, 2;
	add.s64 	%rd64, %rd2, %rd63;
	ld.global.nc.u16 	%rs35, [%rd64+3934];
	ld.global.nc.u16 	%rs36, [%rd64+3938];
	add.s32 	%r128, %r4, %r29;
	mad.lo.s32 	%r129, %r128, %r40, %r171;
	mul.wide.s32 	%rd65, %r129, 2;
	add.s64 	%rd66, %rd1, %rd65;
	st.global.u16 	[%rd66+2], %rs36;
	st.global.u16 	[%rd66], %rs35;
	add.s32 	%r130, %r97, %r30;
	mad.lo.s32 	%r131, %r130, %r99, %r101;
	mul.wide.s32 	%rd67, %r131, 2;
	add.s64 	%rd68, %rd2, %rd67;
	ld.global.nc.u16 	%rs51, [%rd68+3934];
	ld.global.nc.u16 	%rs52, [%rd68+3938];
	add.s32 	%r170, %r4, %r31;
LBB3_4:                                 // %after_bb
	mad.lo.s32 	%r169, %r170, %r40, %r171;
	mul.wide.s32 	%rd99, %r169, 2;
	add.s64 	%rd100, %rd1, %rd99;
	st.global.u16 	[%rd100+2], %rs52;
	st.global.u16 	[%rd100], %rs51;
	ret;
                                        // -- End function
}
	// .globl	kernel_f4_s0____x____x___block_id_y // -- Begin function kernel_f4_s0____x____x___block_id_y
.visible .entry kernel_f4_s0____x____x___block_id_y(
	.param .u32 kernel_f4_s0____x____x___block_id_y_param_0,
	.param .u32 kernel_f4_s0____x____x___block_id_y_param_1,
	.param .u32 kernel_f4_s0____x____x___block_id_y_param_2,
	.param .u32 kernel_f4_s0____x____x___block_id_y_param_3,
	.param .u32 kernel_f4_s0____x____x___block_id_y_param_4,
	.param .u32 kernel_f4_s0____x____x___block_id_y_param_5,
	.param .u32 kernel_f4_s0____x____x___block_id_y_param_6,
	.param .u32 kernel_f4_s0____x____x___block_id_y_param_7,
	.param .u32 kernel_f4_s0____x____x___block_id_y_param_8,
	.param .u32 kernel_f4_s0____x____x___block_id_y_param_9,
	.param .u32 kernel_f4_s0____x____x___block_id_y_param_10,
	.param .u32 kernel_f4_s0____x____x___block_id_y_param_11,
	.param .u32 kernel_f4_s0____x____x___block_id_y_param_12,
	.param .u32 kernel_f4_s0____x____x___block_id_y_param_13,
	.param .u32 kernel_f4_s0____x____x___block_id_y_param_14,
	.param .u32 kernel_f4_s0____x____x___block_id_y_param_15,
	.param .u32 kernel_f4_s0____x____x___block_id_y_param_16,
	.param .u32 kernel_f4_s0____x____x___block_id_y_param_17,
	.param .u32 kernel_f4_s0____x____x___block_id_y_param_18,
	.param .u32 kernel_f4_s0____x____x___block_id_y_param_19,
	.param .u32 kernel_f4_s0____x____x___block_id_y_param_20,
	.param .u32 kernel_f4_s0____x____x___block_id_y_param_21,
	.param .u32 kernel_f4_s0____x____x___block_id_y_param_22,
	.param .u32 kernel_f4_s0____x____x___block_id_y_param_23,
	.param .u64 kernel_f4_s0____x____x___block_id_y_param_24,
	.param .u64 kernel_f4_s0____x____x___block_id_y_param_25
)                                       // @kernel_f4_s0____x____x___block_id_y
{
	.reg .pred 	%p<3>;
	.reg .b16 	%rs<29>;
	.reg .b32 	%r<109>;
	.reg .b64 	%rd<53>;

// %bb.0:                               // %entry
	ld.param.u32 	%r36, [kernel_f4_s0____x____x___block_id_y_param_23];
	ld.param.u32 	%r35, [kernel_f4_s0____x____x___block_id_y_param_22];
	ld.param.u32 	%r34, [kernel_f4_s0____x____x___block_id_y_param_21];
	ld.param.u32 	%r33, [kernel_f4_s0____x____x___block_id_y_param_20];
	ld.param.u32 	%r28, [kernel_f4_s0____x____x___block_id_y_param_13];
	ld.param.u32 	%r27, [kernel_f4_s0____x____x___block_id_y_param_12];
	ld.param.u32 	%r25, [kernel_f4_s0____x____x___block_id_y_param_10];
	ld.param.u32 	%r24, [kernel_f4_s0____x____x___block_id_y_param_9];
	ld.param.u32 	%r23, [kernel_f4_s0____x____x___block_id_y_param_8];
	ld.param.u32 	%r22, [kernel_f4_s0____x____x___block_id_y_param_7];
	ld.param.u32 	%r15, [kernel_f4_s0____x____x___block_id_y_param_0];
	ld.param.u64 	%rd7, [kernel_f4_s0____x____x___block_id_y_param_25];
	cvta.to.global.u64 	%rd1, %rd7;
	ld.param.u64 	%rd8, [kernel_f4_s0____x____x___block_id_y_param_24];
	cvta.to.global.u64 	%rd2, %rd8;
	mov.u32 	%r37, %ctaid.y;
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %tid.y;
	mov.u32 	%r3, %tid.x;
	mad.lo.s32 	%r38, %r37, 217, 213;
	ld.param.u32 	%r39, [kernel_f4_s0____x____x___block_id_y_param_15];
	min.s32 	%r4, %r38, %r39;
	ld.param.u32 	%r40, [kernel_f4_s0____x____x___block_id_y_param_14];
	setp.ge.s32 	%p1, %r1, %r40;
	@%p1 bra 	LBB4_3;
// %bb.1:                               // %true_bb
	ld.param.u32 	%r26, [kernel_f4_s0____x____x___block_id_y_param_11];
	setp.lt.u32 	%p2, %r2, 54;
	shl.b32 	%r65, %r1, 4;
	add.s32 	%r5, %r3, %r65;
	shl.b32 	%r6, %r5, 2;
	@%p2 bra 	LBB4_2;
	bra.uni 	LBB4_5;
LBB4_2:                                 // %true_bb1
	shl.b32 	%r85, %r2, 2;
	add.s32 	%r86, %r4, %r85;
	shl.b32 	%r87, %r86, 1;
	add.s32 	%r88, %r87, %r27;
	add.s32 	%r89, %r28, 985;
	sub.s32 	%r90, %r28, %r36;
	add.s32 	%r91, %r6, %r90;
	mad.lo.s32 	%r92, %r88, %r89, %r91;
	mul.wide.s32 	%rd37, %r92, 2;
	add.s64 	%rd38, %rd2, %rd37;
	ld.global.nc.u16 	%rs21, [%rd38+3932];
	ld.global.nc.u16 	%rs22, [%rd38+3936];
	shl.b32 	%r93, %r5, 1;
	add.s32 	%r94, %r86, %r15;
	add.s32 	%r108, %r93, %r26;
	mad.lo.s32 	%r95, %r94, %r25, %r108;
	mul.wide.s32 	%rd39, %r95, 2;
	add.s64 	%rd40, %rd1, %rd39;
	st.global.u16 	[%rd40+2], %rs22;
	st.global.u16 	[%rd40], %rs21;
	add.s32 	%r96, %r87, %r24;
	mad.lo.s32 	%r97, %r96, %r89, %r91;
	mul.wide.s32 	%rd41, %r97, 2;
	add.s64 	%rd42, %rd2, %rd41;
	ld.global.nc.u16 	%rs23, [%rd42+3932];
	ld.global.nc.u16 	%rs24, [%rd42+3936];
	add.s32 	%r98, %r86, %r35;
	mad.lo.s32 	%r99, %r98, %r25, %r108;
	mul.wide.s32 	%rd43, %r99, 2;
	add.s64 	%rd44, %rd1, %rd43;
	st.global.u16 	[%rd44+2], %rs24;
	st.global.u16 	[%rd44], %rs23;
	add.s32 	%r100, %r87, %r23;
	mad.lo.s32 	%r101, %r100, %r89, %r91;
	mul.wide.s32 	%rd45, %r101, 2;
	add.s64 	%rd46, %rd2, %rd45;
	ld.global.nc.u16 	%rs25, [%rd46+3932];
	ld.global.nc.u16 	%rs26, [%rd46+3936];
	add.s32 	%r102, %r86, %r34;
	mad.lo.s32 	%r103, %r102, %r25, %r108;
	mul.wide.s32 	%rd47, %r103, 2;
	add.s64 	%rd48, %rd1, %rd47;
	st.global.u16 	[%rd48+2], %rs26;
	st.global.u16 	[%rd48], %rs25;
	add.s32 	%r104, %r87, %r22;
	mad.lo.s32 	%r105, %r104, %r89, %r91;
	mul.wide.s32 	%rd49, %r105, 2;
	add.s64 	%rd50, %rd2, %rd49;
	ld.global.nc.u16 	%rs27, [%rd50+3932];
	ld.global.nc.u16 	%rs28, [%rd50+3936];
	add.s32 	%r107, %r86, %r33;
	bra.uni 	LBB4_4;
LBB4_3:                                 // %false_bb
	ld.param.u32 	%r17, [kernel_f4_s0____x____x___block_id_y_param_2];
	ld.param.u32 	%r16, [kernel_f4_s0____x____x___block_id_y_param_1];
	shl.b32 	%r41, %r3, 1;
	add.s32 	%r42, %r41, %r16;
	shl.b32 	%r43, %r42, 1;
	shl.b32 	%r44, %r2, 2;
	min.u32 	%r45, %r44, 213;
	add.s32 	%r46, %r45, %r4;
	shl.b32 	%r47, %r46, 1;
	add.s32 	%r48, %r47, %r27;
	add.s32 	%r49, %r28, 985;
	sub.s32 	%r50, %r28, %r36;
	add.s32 	%r51, %r43, %r50;
	mad.lo.s32 	%r52, %r48, %r49, %r51;
	mul.wide.s32 	%rd9, %r52, 2;
	add.s64 	%rd10, %rd2, %rd9;
	ld.global.nc.u16 	%rs9, [%rd10+3820];
	ld.global.nc.u16 	%rs10, [%rd10+3824];
	add.s32 	%r53, %r46, %r15;
	add.s32 	%r108, %r41, %r17;
	mad.lo.s32 	%r54, %r53, %r25, %r108;
	mul.wide.s32 	%rd11, %r54, 2;
	add.s64 	%rd12, %rd1, %rd11;
	st.global.u16 	[%rd12+2], %rs10;
	st.global.u16 	[%rd12], %rs9;
	add.s32 	%r55, %r47, %r24;
	mad.lo.s32 	%r56, %r55, %r49, %r51;
	mul.wide.s32 	%rd13, %r56, 2;
	add.s64 	%rd14, %rd2, %rd13;
	ld.global.nc.u16 	%rs11, [%rd14+3820];
	ld.global.nc.u16 	%rs12, [%rd14+3824];
	add.s32 	%r57, %r46, %r35;
	mad.lo.s32 	%r58, %r57, %r25, %r108;
	mul.wide.s32 	%rd15, %r58, 2;
	add.s64 	%rd16, %rd1, %rd15;
	st.global.u16 	[%rd16+2], %rs12;
	st.global.u16 	[%rd16], %rs11;
	add.s32 	%r59, %r47, %r23;
	mad.lo.s32 	%r60, %r59, %r49, %r51;
	mul.wide.s32 	%rd17, %r60, 2;
	add.s64 	%rd18, %rd2, %rd17;
	ld.global.nc.u16 	%rs13, [%rd18+3820];
	ld.global.nc.u16 	%rs14, [%rd18+3824];
	add.s32 	%r61, %r46, %r34;
	mad.lo.s32 	%r62, %r61, %r25, %r108;
	mul.wide.s32 	%rd19, %r62, 2;
	add.s64 	%rd20, %rd1, %rd19;
	st.global.u16 	[%rd20+2], %rs14;
	st.global.u16 	[%rd20], %rs13;
	add.s32 	%r63, %r47, %r22;
	mad.lo.s32 	%r64, %r63, %r49, %r51;
	mul.wide.s32 	%rd21, %r64, 2;
	add.s64 	%rd22, %rd2, %rd21;
	ld.global.nc.u16 	%rs27, [%rd22+3820];
	ld.global.nc.u16 	%rs28, [%rd22+3824];
	add.s32 	%r107, %r46, %r33;
	bra.uni 	LBB4_4;
LBB4_5:                                 // %false_bb2
	ld.param.u32 	%r32, [kernel_f4_s0____x____x___block_id_y_param_19];
	ld.param.u32 	%r31, [kernel_f4_s0____x____x___block_id_y_param_18];
	ld.param.u32 	%r30, [kernel_f4_s0____x____x___block_id_y_param_17];
	ld.param.u32 	%r29, [kernel_f4_s0____x____x___block_id_y_param_16];
	ld.param.u32 	%r21, [kernel_f4_s0____x____x___block_id_y_param_6];
	ld.param.u32 	%r20, [kernel_f4_s0____x____x___block_id_y_param_5];
	ld.param.u32 	%r19, [kernel_f4_s0____x____x___block_id_y_param_4];
	ld.param.u32 	%r18, [kernel_f4_s0____x____x___block_id_y_param_3];
	shl.b32 	%r66, %r4, 1;
	add.s32 	%r67, %r66, %r21;
	add.s32 	%r68, %r28, 985;
	sub.s32 	%r69, %r28, %r36;
	add.s32 	%r70, %r6, %r69;
	mad.lo.s32 	%r71, %r67, %r68, %r70;
	mul.wide.s32 	%rd23, %r71, 2;
	add.s64 	%rd24, %rd2, %rd23;
	ld.global.nc.u16 	%rs15, [%rd24+3932];
	ld.global.nc.u16 	%rs16, [%rd24+3936];
	shl.b32 	%r72, %r5, 1;
	add.s32 	%r73, %r4, %r32;
	add.s32 	%r108, %r72, %r26;
	mad.lo.s32 	%r74, %r73, %r25, %r108;
	mul.wide.s32 	%rd25, %r74, 2;
	add.s64 	%rd26, %rd1, %rd25;
	st.global.u16 	[%rd26+2], %rs16;
	st.global.u16 	[%rd26], %rs15;
	add.s32 	%r75, %r66, %r20;
	mad.lo.s32 	%r76, %r75, %r68, %r70;
	mul.wide.s32 	%rd27, %r76, 2;
	add.s64 	%rd28, %rd2, %rd27;
	ld.global.nc.u16 	%rs17, [%rd28+3932];
	ld.global.nc.u16 	%rs18, [%rd28+3936];
	add.s32 	%r77, %r4, %r31;
	mad.lo.s32 	%r78, %r77, %r25, %r108;
	mul.wide.s32 	%rd29, %r78, 2;
	add.s64 	%rd30, %rd1, %rd29;
	st.global.u16 	[%rd30+2], %rs18;
	st.global.u16 	[%rd30], %rs17;
	add.s32 	%r79, %r66, %r19;
	mad.lo.s32 	%r80, %r79, %r68, %r70;
	mul.wide.s32 	%rd31, %r80, 2;
	add.s64 	%rd32, %rd2, %rd31;
	ld.global.nc.u16 	%rs19, [%rd32+3932];
	ld.global.nc.u16 	%rs20, [%rd32+3936];
	add.s32 	%r81, %r4, %r30;
	mad.lo.s32 	%r82, %r81, %r25, %r108;
	mul.wide.s32 	%rd33, %r82, 2;
	add.s64 	%rd34, %rd1, %rd33;
	st.global.u16 	[%rd34+2], %rs20;
	st.global.u16 	[%rd34], %rs19;
	add.s32 	%r83, %r66, %r18;
	mad.lo.s32 	%r84, %r83, %r68, %r70;
	mul.wide.s32 	%rd35, %r84, 2;
	add.s64 	%rd36, %rd2, %rd35;
	ld.global.nc.u16 	%rs27, [%rd36+3932];
	ld.global.nc.u16 	%rs28, [%rd36+3936];
	add.s32 	%r107, %r4, %r29;
LBB4_4:                                 // %after_bb
	mad.lo.s32 	%r106, %r107, %r25, %r108;
	mul.wide.s32 	%rd51, %r106, 2;
	add.s64 	%rd52, %rd1, %rd51;
	st.global.u16 	[%rd52+2], %rs28;
	st.global.u16 	[%rd52], %rs27;
	ret;
                                        // -- End function
}
	// .globl	kernel_f3_s0____y____y___block_id_y // -- Begin function kernel_f3_s0____y____y___block_id_y
.visible .entry kernel_f3_s0____y____y___block_id_y(
	.param .u32 kernel_f3_s0____y____y___block_id_y_param_0,
	.param .u32 kernel_f3_s0____y____y___block_id_y_param_1,
	.param .u32 kernel_f3_s0____y____y___block_id_y_param_2,
	.param .u32 kernel_f3_s0____y____y___block_id_y_param_3,
	.param .u32 kernel_f3_s0____y____y___block_id_y_param_4,
	.param .u32 kernel_f3_s0____y____y___block_id_y_param_5,
	.param .u32 kernel_f3_s0____y____y___block_id_y_param_6,
	.param .u32 kernel_f3_s0____y____y___block_id_y_param_7,
	.param .u32 kernel_f3_s0____y____y___block_id_y_param_8,
	.param .u64 kernel_f3_s0____y____y___block_id_y_param_9,
	.param .u64 kernel_f3_s0____y____y___block_id_y_param_10
)                                       // @kernel_f3_s0____y____y___block_id_y
{
	.reg .pred 	%p<6>;
	.reg .b16 	%rs<49>;
	.reg .b32 	%r<301>;
	.reg .b64 	%rd<114>;

// %bb.0:                               // %entry
	ld.param.u32 	%r56, [kernel_f3_s0____y____y___block_id_y_param_8];
	ld.param.u32 	%r55, [kernel_f3_s0____y____y___block_id_y_param_7];
	ld.param.u32 	%r54, [kernel_f3_s0____y____y___block_id_y_param_6];
	ld.param.u32 	%r53, [kernel_f3_s0____y____y___block_id_y_param_5];
	ld.param.u32 	%r51, [kernel_f3_s0____y____y___block_id_y_param_3];
	ld.param.u32 	%r50, [kernel_f3_s0____y____y___block_id_y_param_2];
	ld.param.u32 	%r49, [kernel_f3_s0____y____y___block_id_y_param_1];
	ld.param.u32 	%r48, [kernel_f3_s0____y____y___block_id_y_param_0];
	ld.param.u64 	%rd3, [kernel_f3_s0____y____y___block_id_y_param_10];
	cvta.to.global.u64 	%rd1, %rd3;
	ld.param.u64 	%rd4, [kernel_f3_s0____y____y___block_id_y_param_9];
	cvta.to.global.u64 	%rd2, %rd4;
	mov.u32 	%r57, %ctaid.y;
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %tid.y;
	mov.u32 	%r3, %tid.x;
	mul.lo.s32 	%r4, %r57, 494;
	setp.gt.u32 	%p1, %r2, 60;
	@%p1 bra 	LBB5_6;
// %bb.1:                               // %true_bb
	setp.lt.u32 	%p3, %r3, 13;
	shl.b32 	%r5, %r2, 3;
	@%p3 bra 	LBB5_2;
	bra.uni 	LBB5_4;
LBB5_2:                                 // %true_bb1
	shl.b32 	%r211, %r3, 4;
	shl.b32 	%r16, %r56, 1;
	shl.b32 	%r212, %r3, 5;
	or.b32  	%r213, %r212, 26;
	sub.s32 	%r214, %r213, %r48;
	not.b32 	%r215, %r54;
	mul.lo.s32 	%r216, %r1, 218;
	mov.u32 	%r217, -215;
	sub.s32 	%r218, %r217, %r216;
	max.s32 	%r219, %r215, %r218;
	shl.b32 	%r220, %r219, 1;
	sub.s32 	%r221, %r214, %r220;
	add.s32 	%r222, %r56, 985;
	shl.b32 	%r223, %r2, 4;
	mad.lo.s32 	%r224, %r221, %r222, %r223;
	add.s32 	%r225, %r224, -2;
	sub.s32 	%r226, %r225, %r49;
	not.b32 	%r227, %r53;
	mov.u32 	%r228, -491;
	sub.s32 	%r229, %r228, %r4;
	max.s32 	%r230, %r227, %r229;
	shl.b32 	%r231, %r230, 1;
	sub.s32 	%r17, %r226, %r231;
	or.b32  	%r232, %r212, 22;
	sub.s32 	%r233, %r232, %r48;
	sub.s32 	%r234, %r233, %r220;
	mad.lo.s32 	%r235, %r234, %r222, %r223;
	add.s32 	%r236, %r235, -2;
	sub.s32 	%r237, %r236, %r49;
	sub.s32 	%r18, %r237, %r231;
	or.b32  	%r238, %r212, 18;
	sub.s32 	%r239, %r238, %r48;
	sub.s32 	%r240, %r239, %r220;
	mad.lo.s32 	%r241, %r240, %r222, %r223;
	add.s32 	%r242, %r241, -2;
	sub.s32 	%r243, %r242, %r49;
	sub.s32 	%r19, %r243, %r231;
	or.b32  	%r244, %r212, 14;
	sub.s32 	%r245, %r244, %r48;
	sub.s32 	%r246, %r245, %r220;
	mad.lo.s32 	%r247, %r246, %r222, %r223;
	add.s32 	%r248, %r247, -2;
	sub.s32 	%r249, %r248, %r49;
	sub.s32 	%r20, %r249, %r231;
	or.b32  	%r250, %r212, 10;
	sub.s32 	%r251, %r250, %r48;
	sub.s32 	%r252, %r251, %r220;
	mad.lo.s32 	%r253, %r252, %r222, %r223;
	add.s32 	%r254, %r253, -2;
	sub.s32 	%r255, %r254, %r49;
	sub.s32 	%r21, %r255, %r231;
	or.b32  	%r256, %r212, 6;
	sub.s32 	%r257, %r256, %r48;
	sub.s32 	%r258, %r257, %r220;
	mad.lo.s32 	%r259, %r258, %r222, %r223;
	add.s32 	%r260, %r259, -2;
	sub.s32 	%r261, %r260, %r49;
	sub.s32 	%r22, %r261, %r231;
	or.b32  	%r262, %r212, 2;
	sub.s32 	%r263, %r262, %r48;
	sub.s32 	%r264, %r263, %r220;
	mad.lo.s32 	%r265, %r264, %r222, %r223;
	add.s32 	%r266, %r265, -2;
	sub.s32 	%r267, %r266, %r49;
	sub.s32 	%r23, %r267, %r231;
	add.s32 	%r268, %r212, -2;
	sub.s32 	%r269, %r268, %r48;
	sub.s32 	%r270, %r269, %r220;
	mad.lo.s32 	%r271, %r270, %r222, %r223;
	add.s32 	%r272, %r271, -2;
	sub.s32 	%r273, %r272, %r49;
	sub.s32 	%r24, %r273, %r231;
	add.s32 	%r274, %r5, -1;
	sub.s32 	%r275, %r274, %r50;
	sub.s32 	%r276, %r275, %r230;
	mad.lo.s32 	%r277, %r55, %r276, %r51;
	add.s32 	%r278, %r277, %r211;
	add.s32 	%r279, %r278, 13;
	sub.s32 	%r295, %r279, %r219;
	mov.u32 	%r296, 0;
	mul.wide.s32 	%rd75, %r16, 2;
LBB5_3:                                 // %"for f3.s0._::y._::yi._::yii"
                                        // =>This Inner Loop Header: Depth=1
	add.s32 	%r280, %r24, %r296;
	mul.wide.s32 	%rd73, %r280, 2;
	add.s64 	%rd74, %rd2, %rd73;
	ld.global.nc.u16 	%rs33, [%rd74];
	add.s64 	%rd76, %rd74, %rd75;
	ld.global.nc.u16 	%rs34, [%rd76+3940];
	add.s32 	%r281, %r295, -14;
	mul.wide.s32 	%rd77, %r281, 2;
	add.s64 	%rd78, %rd1, %rd77;
	st.global.u16 	[%rd78+2], %rs34;
	st.global.u16 	[%rd78], %rs33;
	add.s32 	%r282, %r23, %r296;
	mul.wide.s32 	%rd79, %r282, 2;
	add.s64 	%rd80, %rd2, %rd79;
	ld.global.nc.u16 	%rs35, [%rd80];
	add.s64 	%rd81, %rd80, %rd75;
	ld.global.nc.u16 	%rs36, [%rd81+3940];
	add.s32 	%r283, %r295, -12;
	mul.wide.s32 	%rd82, %r283, 2;
	add.s64 	%rd83, %rd1, %rd82;
	st.global.u16 	[%rd83+2], %rs36;
	st.global.u16 	[%rd83], %rs35;
	add.s32 	%r284, %r22, %r296;
	mul.wide.s32 	%rd84, %r284, 2;
	add.s64 	%rd85, %rd2, %rd84;
	ld.global.nc.u16 	%rs37, [%rd85];
	add.s64 	%rd86, %rd85, %rd75;
	ld.global.nc.u16 	%rs38, [%rd86+3940];
	add.s32 	%r285, %r295, -10;
	mul.wide.s32 	%rd87, %r285, 2;
	add.s64 	%rd88, %rd1, %rd87;
	st.global.u16 	[%rd88+2], %rs38;
	st.global.u16 	[%rd88], %rs37;
	add.s32 	%r286, %r21, %r296;
	mul.wide.s32 	%rd89, %r286, 2;
	add.s64 	%rd90, %rd2, %rd89;
	ld.global.nc.u16 	%rs39, [%rd90];
	add.s64 	%rd91, %rd90, %rd75;
	ld.global.nc.u16 	%rs40, [%rd91+3940];
	add.s32 	%r287, %r295, -8;
	mul.wide.s32 	%rd92, %r287, 2;
	add.s64 	%rd93, %rd1, %rd92;
	st.global.u16 	[%rd93+2], %rs40;
	st.global.u16 	[%rd93], %rs39;
	add.s32 	%r288, %r20, %r296;
	mul.wide.s32 	%rd94, %r288, 2;
	add.s64 	%rd95, %rd2, %rd94;
	ld.global.nc.u16 	%rs41, [%rd95];
	add.s64 	%rd96, %rd95, %rd75;
	ld.global.nc.u16 	%rs42, [%rd96+3940];
	add.s32 	%r289, %r295, -6;
	mul.wide.s32 	%rd97, %r289, 2;
	add.s64 	%rd98, %rd1, %rd97;
	st.global.u16 	[%rd98+2], %rs42;
	st.global.u16 	[%rd98], %rs41;
	add.s32 	%r290, %r19, %r296;
	mul.wide.s32 	%rd99, %r290, 2;
	add.s64 	%rd100, %rd2, %rd99;
	ld.global.nc.u16 	%rs43, [%rd100];
	add.s64 	%rd101, %rd100, %rd75;
	ld.global.nc.u16 	%rs44, [%rd101+3940];
	add.s32 	%r291, %r295, -4;
	mul.wide.s32 	%rd102, %r291, 2;
	add.s64 	%rd103, %rd1, %rd102;
	st.global.u16 	[%rd103+2], %rs44;
	st.global.u16 	[%rd103], %rs43;
	add.s32 	%r292, %r18, %r296;
	mul.wide.s32 	%rd104, %r292, 2;
	add.s64 	%rd105, %rd2, %rd104;
	ld.global.nc.u16 	%rs45, [%rd105];
	add.s64 	%rd106, %rd105, %rd75;
	ld.global.nc.u16 	%rs46, [%rd106+3940];
	add.s32 	%r293, %r295, -2;
	mul.wide.s32 	%rd107, %r293, 2;
	add.s64 	%rd108, %rd1, %rd107;
	st.global.u16 	[%rd108+2], %rs46;
	st.global.u16 	[%rd108], %rs45;
	add.s32 	%r294, %r17, %r296;
	mul.wide.s32 	%rd109, %r294, 2;
	add.s64 	%rd110, %rd2, %rd109;
	ld.global.nc.u16 	%rs47, [%rd110];
	add.s64 	%rd111, %rd110, %rd75;
	ld.global.nc.u16 	%rs48, [%rd111+3940];
	mul.wide.s32 	%rd112, %r295, 2;
	add.s64 	%rd113, %rd1, %rd112;
	st.global.u16 	[%rd113+2], %rs48;
	st.global.u16 	[%rd113], %rs47;
	add.s32 	%r296, %r296, 2;
	add.s32 	%r295, %r295, %r55;
	setp.eq.s32 	%p5, %r296, 16;
	@%p5 bra 	LBB5_8;
	bra.uni 	LBB5_3;
LBB5_6:                                 // %false_bb
	shl.b32 	%r59, %r3, 4;
	shl.b32 	%r6, %r56, 1;
	mov.u32 	%r60, 24;
	sub.s32 	%r61, %r60, %r48;
	not.b32 	%r62, %r54;
	mul.lo.s32 	%r63, %r1, 218;
	mov.u32 	%r64, -215;
	sub.s32 	%r65, %r64, %r63;
	max.s32 	%r66, %r62, %r65;
	not.b32 	%r67, %r59;
	max.u32 	%r68, %r67, -203;
	add.s32 	%r69, %r66, %r68;
	shl.b32 	%r70, %r69, 1;
	sub.s32 	%r71, %r61, %r70;
	add.s32 	%r72, %r56, 985;
	mad.lo.s32 	%r73, %r71, %r72, 970;
	sub.s32 	%r74, %r73, %r49;
	not.b32 	%r75, %r53;
	mov.u32 	%r76, -491;
	sub.s32 	%r77, %r76, %r4;
	max.s32 	%r78, %r75, %r77;
	shl.b32 	%r79, %r78, 1;
	sub.s32 	%r7, %r74, %r79;
	mov.u32 	%r80, 20;
	sub.s32 	%r81, %r80, %r48;
	sub.s32 	%r82, %r81, %r70;
	mad.lo.s32 	%r83, %r82, %r72, 970;
	sub.s32 	%r84, %r83, %r49;
	sub.s32 	%r8, %r84, %r79;
	mov.u32 	%r85, 16;
	sub.s32 	%r86, %r85, %r48;
	sub.s32 	%r87, %r86, %r70;
	mad.lo.s32 	%r88, %r87, %r72, 970;
	sub.s32 	%r89, %r88, %r49;
	sub.s32 	%r9, %r89, %r79;
	mov.u32 	%r90, 12;
	sub.s32 	%r91, %r90, %r48;
	sub.s32 	%r92, %r91, %r70;
	mad.lo.s32 	%r93, %r92, %r72, 970;
	sub.s32 	%r94, %r93, %r49;
	sub.s32 	%r10, %r94, %r79;
	mov.u32 	%r95, 8;
	sub.s32 	%r96, %r95, %r48;
	sub.s32 	%r97, %r96, %r70;
	mad.lo.s32 	%r98, %r97, %r72, 970;
	sub.s32 	%r99, %r98, %r49;
	sub.s32 	%r11, %r99, %r79;
	mov.u32 	%r100, 4;
	sub.s32 	%r101, %r100, %r48;
	sub.s32 	%r102, %r101, %r70;
	mad.lo.s32 	%r103, %r102, %r72, 970;
	sub.s32 	%r104, %r103, %r49;
	sub.s32 	%r12, %r104, %r79;
	neg.s32 	%r105, %r48;
	sub.s32 	%r106, %r105, %r70;
	mad.lo.s32 	%r107, %r106, %r72, 970;
	sub.s32 	%r108, %r107, %r49;
	sub.s32 	%r13, %r108, %r79;
	mov.u32 	%r109, -4;
	sub.s32 	%r110, %r109, %r48;
	sub.s32 	%r111, %r110, %r70;
	mad.lo.s32 	%r112, %r111, %r72, 970;
	sub.s32 	%r113, %r112, %r49;
	sub.s32 	%r14, %r113, %r79;
	mov.u32 	%r114, 485;
	sub.s32 	%r115, %r114, %r50;
	sub.s32 	%r116, %r115, %r78;
	mad.lo.s32 	%r117, %r55, %r116, %r51;
	add.s32 	%r118, %r117, -2;
	sub.s32 	%r119, %r118, %r66;
	sub.s32 	%r299, %r119, %r68;
	mov.u32 	%r300, 0;
	mul.wide.s32 	%rd7, %r6, 2;
LBB5_7:                                 // %"for f3.s0._::y._::yi._::yii12"
                                        // =>This Inner Loop Header: Depth=1
	add.s32 	%r120, %r14, %r300;
	mul.wide.s32 	%rd5, %r120, 2;
	add.s64 	%rd6, %rd2, %rd5;
	ld.global.nc.u16 	%rs1, [%rd6];
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.nc.u16 	%rs2, [%rd8+3940];
	mul.wide.s32 	%rd9, %r299, 2;
	add.s64 	%rd10, %rd1, %rd9;
	st.global.u16 	[%rd10+2], %rs2;
	st.global.u16 	[%rd10], %rs1;
	add.s32 	%r121, %r13, %r300;
	mul.wide.s32 	%rd11, %r121, 2;
	add.s64 	%rd12, %rd2, %rd11;
	ld.global.nc.u16 	%rs3, [%rd12];
	add.s64 	%rd13, %rd12, %rd7;
	ld.global.nc.u16 	%rs4, [%rd13+3940];
	st.global.u16 	[%rd10+6], %rs4;
	st.global.u16 	[%rd10+4], %rs3;
	add.s32 	%r122, %r12, %r300;
	mul.wide.s32 	%rd14, %r122, 2;
	add.s64 	%rd15, %rd2, %rd14;
	ld.global.nc.u16 	%rs5, [%rd15];
	add.s64 	%rd16, %rd15, %rd7;
	ld.global.nc.u16 	%rs6, [%rd16+3940];
	st.global.u16 	[%rd10+10], %rs6;
	st.global.u16 	[%rd10+8], %rs5;
	add.s32 	%r123, %r11, %r300;
	mul.wide.s32 	%rd17, %r123, 2;
	add.s64 	%rd18, %rd2, %rd17;
	ld.global.nc.u16 	%rs7, [%rd18];
	add.s64 	%rd19, %rd18, %rd7;
	ld.global.nc.u16 	%rs8, [%rd19+3940];
	st.global.u16 	[%rd10+14], %rs8;
	st.global.u16 	[%rd10+12], %rs7;
	add.s32 	%r124, %r10, %r300;
	mul.wide.s32 	%rd20, %r124, 2;
	add.s64 	%rd21, %rd2, %rd20;
	ld.global.nc.u16 	%rs9, [%rd21];
	add.s64 	%rd22, %rd21, %rd7;
	ld.global.nc.u16 	%rs10, [%rd22+3940];
	st.global.u16 	[%rd10+18], %rs10;
	st.global.u16 	[%rd10+16], %rs9;
	add.s32 	%r125, %r9, %r300;
	mul.wide.s32 	%rd23, %r125, 2;
	add.s64 	%rd24, %rd2, %rd23;
	ld.global.nc.u16 	%rs11, [%rd24];
	add.s64 	%rd25, %rd24, %rd7;
	ld.global.nc.u16 	%rs12, [%rd25+3940];
	st.global.u16 	[%rd10+22], %rs12;
	st.global.u16 	[%rd10+20], %rs11;
	add.s32 	%r126, %r8, %r300;
	mul.wide.s32 	%rd26, %r126, 2;
	add.s64 	%rd27, %rd2, %rd26;
	ld.global.nc.u16 	%rs13, [%rd27];
	add.s64 	%rd28, %rd27, %rd7;
	ld.global.nc.u16 	%rs14, [%rd28+3940];
	st.global.u16 	[%rd10+26], %rs14;
	st.global.u16 	[%rd10+24], %rs13;
	add.s32 	%r127, %r7, %r300;
	mul.wide.s32 	%rd29, %r127, 2;
	add.s64 	%rd30, %rd2, %rd29;
	ld.global.nc.u16 	%rs15, [%rd30];
	add.s64 	%rd31, %rd30, %rd7;
	ld.global.nc.u16 	%rs16, [%rd31+3940];
	st.global.u16 	[%rd10+30], %rs16;
	st.global.u16 	[%rd10+28], %rs15;
	add.s32 	%r300, %r300, 2;
	add.s32 	%r299, %r299, %r55;
	setp.eq.s32 	%p2, %r300, 16;
	@%p2 bra 	LBB5_8;
	bra.uni 	LBB5_7;
LBB5_4:                                 // %false_bb2
	ld.param.u32 	%r52, [kernel_f3_s0____y____y___block_id_y_param_4];
	shl.b32 	%r26, %r56, 1;
	mov.u32 	%r129, 430;
	sub.s32 	%r130, %r129, %r48;
	not.b32 	%r131, %r54;
	mul.lo.s32 	%r132, %r1, 218;
	mov.u32 	%r133, -215;
	sub.s32 	%r134, %r133, %r132;
	max.s32 	%r135, %r131, %r134;
	shl.b32 	%r136, %r135, 1;
	sub.s32 	%r137, %r130, %r136;
	add.s32 	%r138, %r56, 985;
	shl.b32 	%r139, %r2, 4;
	mad.lo.s32 	%r140, %r137, %r138, %r139;
	add.s32 	%r141, %r140, -2;
	sub.s32 	%r142, %r141, %r49;
	not.b32 	%r143, %r53;
	mov.u32 	%r144, -491;
	sub.s32 	%r145, %r144, %r4;
	max.s32 	%r146, %r143, %r145;
	shl.b32 	%r147, %r146, 1;
	sub.s32 	%r27, %r142, %r147;
	mov.u32 	%r148, 426;
	sub.s32 	%r149, %r148, %r48;
	sub.s32 	%r150, %r149, %r136;
	mad.lo.s32 	%r151, %r150, %r138, %r139;
	add.s32 	%r152, %r151, -2;
	sub.s32 	%r153, %r152, %r49;
	sub.s32 	%r28, %r153, %r147;
	mov.u32 	%r154, 422;
	sub.s32 	%r155, %r154, %r48;
	sub.s32 	%r156, %r155, %r136;
	mad.lo.s32 	%r157, %r156, %r138, %r139;
	add.s32 	%r158, %r157, -2;
	sub.s32 	%r159, %r158, %r49;
	sub.s32 	%r29, %r159, %r147;
	mov.u32 	%r160, 418;
	sub.s32 	%r161, %r160, %r48;
	sub.s32 	%r162, %r161, %r136;
	mad.lo.s32 	%r163, %r162, %r138, %r139;
	add.s32 	%r164, %r163, -2;
	sub.s32 	%r165, %r164, %r49;
	sub.s32 	%r30, %r165, %r147;
	mov.u32 	%r166, 414;
	sub.s32 	%r167, %r166, %r48;
	sub.s32 	%r168, %r167, %r136;
	mad.lo.s32 	%r169, %r168, %r138, %r139;
	add.s32 	%r170, %r169, -2;
	sub.s32 	%r171, %r170, %r49;
	sub.s32 	%r31, %r171, %r147;
	mov.u32 	%r172, 410;
	sub.s32 	%r173, %r172, %r48;
	sub.s32 	%r174, %r173, %r136;
	mad.lo.s32 	%r175, %r174, %r138, %r139;
	add.s32 	%r176, %r175, -2;
	sub.s32 	%r177, %r176, %r49;
	sub.s32 	%r32, %r177, %r147;
	mov.u32 	%r178, 406;
	sub.s32 	%r179, %r178, %r48;
	sub.s32 	%r180, %r179, %r136;
	mad.lo.s32 	%r181, %r180, %r138, %r139;
	add.s32 	%r182, %r181, -2;
	sub.s32 	%r183, %r182, %r49;
	sub.s32 	%r33, %r183, %r147;
	mov.u32 	%r184, 402;
	sub.s32 	%r185, %r184, %r48;
	sub.s32 	%r186, %r185, %r136;
	mad.lo.s32 	%r187, %r186, %r138, %r139;
	add.s32 	%r188, %r187, -2;
	sub.s32 	%r189, %r188, %r49;
	sub.s32 	%r34, %r189, %r147;
	add.s32 	%r190, %r5, -1;
	sub.s32 	%r191, %r190, %r50;
	sub.s32 	%r192, %r191, %r146;
	mad.lo.s32 	%r193, %r55, %r192, %r52;
	add.s32 	%r194, %r193, 13;
	sub.s32 	%r297, %r194, %r135;
	mov.u32 	%r298, 0;
	mul.wide.s32 	%rd34, %r26, 2;
LBB5_5:                                 // %"for f3.s0._::y._::yi._::yii5"
                                        // =>This Inner Loop Header: Depth=1
	add.s32 	%r195, %r34, %r298;
	mul.wide.s32 	%rd32, %r195, 2;
	add.s64 	%rd33, %rd2, %rd32;
	ld.global.nc.u16 	%rs17, [%rd33];
	add.s64 	%rd35, %rd33, %rd34;
	ld.global.nc.u16 	%rs18, [%rd35+3940];
	add.s32 	%r196, %r297, -14;
	mul.wide.s32 	%rd36, %r196, 2;
	add.s64 	%rd37, %rd1, %rd36;
	st.global.u16 	[%rd37+2], %rs18;
	st.global.u16 	[%rd37], %rs17;
	add.s32 	%r197, %r33, %r298;
	mul.wide.s32 	%rd38, %r197, 2;
	add.s64 	%rd39, %rd2, %rd38;
	ld.global.nc.u16 	%rs19, [%rd39];
	add.s64 	%rd40, %rd39, %rd34;
	ld.global.nc.u16 	%rs20, [%rd40+3940];
	add.s32 	%r198, %r297, -12;
	mul.wide.s32 	%rd41, %r198, 2;
	add.s64 	%rd42, %rd1, %rd41;
	st.global.u16 	[%rd42+2], %rs20;
	st.global.u16 	[%rd42], %rs19;
	add.s32 	%r199, %r32, %r298;
	mul.wide.s32 	%rd43, %r199, 2;
	add.s64 	%rd44, %rd2, %rd43;
	ld.global.nc.u16 	%rs21, [%rd44];
	add.s64 	%rd45, %rd44, %rd34;
	ld.global.nc.u16 	%rs22, [%rd45+3940];
	add.s32 	%r200, %r297, -10;
	mul.wide.s32 	%rd46, %r200, 2;
	add.s64 	%rd47, %rd1, %rd46;
	st.global.u16 	[%rd47+2], %rs22;
	st.global.u16 	[%rd47], %rs21;
	add.s32 	%r201, %r31, %r298;
	mul.wide.s32 	%rd48, %r201, 2;
	add.s64 	%rd49, %rd2, %rd48;
	ld.global.nc.u16 	%rs23, [%rd49];
	add.s64 	%rd50, %rd49, %rd34;
	ld.global.nc.u16 	%rs24, [%rd50+3940];
	add.s32 	%r202, %r297, -8;
	mul.wide.s32 	%rd51, %r202, 2;
	add.s64 	%rd52, %rd1, %rd51;
	st.global.u16 	[%rd52+2], %rs24;
	st.global.u16 	[%rd52], %rs23;
	add.s32 	%r203, %r30, %r298;
	mul.wide.s32 	%rd53, %r203, 2;
	add.s64 	%rd54, %rd2, %rd53;
	ld.global.nc.u16 	%rs25, [%rd54];
	add.s64 	%rd55, %rd54, %rd34;
	ld.global.nc.u16 	%rs26, [%rd55+3940];
	add.s32 	%r204, %r297, -6;
	mul.wide.s32 	%rd56, %r204, 2;
	add.s64 	%rd57, %rd1, %rd56;
	st.global.u16 	[%rd57+2], %rs26;
	st.global.u16 	[%rd57], %rs25;
	add.s32 	%r205, %r29, %r298;
	mul.wide.s32 	%rd58, %r205, 2;
	add.s64 	%rd59, %rd2, %rd58;
	ld.global.nc.u16 	%rs27, [%rd59];
	add.s64 	%rd60, %rd59, %rd34;
	ld.global.nc.u16 	%rs28, [%rd60+3940];
	add.s32 	%r206, %r297, -4;
	mul.wide.s32 	%rd61, %r206, 2;
	add.s64 	%rd62, %rd1, %rd61;
	st.global.u16 	[%rd62+2], %rs28;
	st.global.u16 	[%rd62], %rs27;
	add.s32 	%r207, %r28, %r298;
	mul.wide.s32 	%rd63, %r207, 2;
	add.s64 	%rd64, %rd2, %rd63;
	ld.global.nc.u16 	%rs29, [%rd64];
	add.s64 	%rd65, %rd64, %rd34;
	ld.global.nc.u16 	%rs30, [%rd65+3940];
	add.s32 	%r208, %r297, -2;
	mul.wide.s32 	%rd66, %r208, 2;
	add.s64 	%rd67, %rd1, %rd66;
	st.global.u16 	[%rd67+2], %rs30;
	st.global.u16 	[%rd67], %rs29;
	add.s32 	%r209, %r27, %r298;
	mul.wide.s32 	%rd68, %r209, 2;
	add.s64 	%rd69, %rd2, %rd68;
	ld.global.nc.u16 	%rs31, [%rd69];
	add.s64 	%rd70, %rd69, %rd34;
	ld.global.nc.u16 	%rs32, [%rd70+3940];
	mul.wide.s32 	%rd71, %r297, 2;
	add.s64 	%rd72, %rd1, %rd71;
	st.global.u16 	[%rd72+2], %rs32;
	st.global.u16 	[%rd72], %rs31;
	add.s32 	%r298, %r298, 2;
	add.s32 	%r297, %r297, %r55;
	setp.eq.s32 	%p4, %r298, 16;
	@%p4 bra 	LBB5_8;
	bra.uni 	LBB5_5;
LBB5_8:                                 // %after_bb
	ret;
                                        // -- End function
}
	// .globl	kernel_f7_s0____x____x___block_id_y // -- Begin function kernel_f7_s0____x____x___block_id_y
.visible .entry kernel_f7_s0____x____x___block_id_y(
	.param .u32 kernel_f7_s0____x____x___block_id_y_param_0,
	.param .u32 kernel_f7_s0____x____x___block_id_y_param_1,
	.param .u32 kernel_f7_s0____x____x___block_id_y_param_2,
	.param .u32 kernel_f7_s0____x____x___block_id_y_param_3,
	.param .u32 kernel_f7_s0____x____x___block_id_y_param_4,
	.param .u32 kernel_f7_s0____x____x___block_id_y_param_5,
	.param .u32 kernel_f7_s0____x____x___block_id_y_param_6,
	.param .u32 kernel_f7_s0____x____x___block_id_y_param_7,
	.param .u32 kernel_f7_s0____x____x___block_id_y_param_8,
	.param .u32 kernel_f7_s0____x____x___block_id_y_param_9,
	.param .u32 kernel_f7_s0____x____x___block_id_y_param_10,
	.param .u64 kernel_f7_s0____x____x___block_id_y_param_11,
	.param .u64 kernel_f7_s0____x____x___block_id_y_param_12,
	.param .u64 kernel_f7_s0____x____x___block_id_y_param_13
)                                       // @kernel_f7_s0____x____x___block_id_y
{
	.reg .pred 	%p<27>;
	.reg .b16 	%rs<58>;
	.reg .b32 	%r<221>;
	.reg .b64 	%rd<51>;

// %bb.0:                               // %entry
	ld.param.u32 	%r62, [kernel_f7_s0____x____x___block_id_y_param_10];
	ld.param.u32 	%r61, [kernel_f7_s0____x____x___block_id_y_param_9];
	ld.param.u32 	%r60, [kernel_f7_s0____x____x___block_id_y_param_8];
	ld.param.u32 	%r59, [kernel_f7_s0____x____x___block_id_y_param_7];
	ld.param.u32 	%r58, [kernel_f7_s0____x____x___block_id_y_param_6];
	ld.param.u32 	%r57, [kernel_f7_s0____x____x___block_id_y_param_5];
	ld.param.u32 	%r56, [kernel_f7_s0____x____x___block_id_y_param_4];
	ld.param.u32 	%r55, [kernel_f7_s0____x____x___block_id_y_param_3];
	ld.param.u32 	%r54, [kernel_f7_s0____x____x___block_id_y_param_2];
	ld.param.u32 	%r53, [kernel_f7_s0____x____x___block_id_y_param_1];
	ld.param.u32 	%r52, [kernel_f7_s0____x____x___block_id_y_param_0];
	ld.param.u64 	%rd15, [kernel_f7_s0____x____x___block_id_y_param_13];
	cvta.to.global.u64 	%rd1, %rd15;
	ld.param.u64 	%rd16, [kernel_f7_s0____x____x___block_id_y_param_12];
	cvta.to.global.u64 	%rd2, %rd16;
	ld.param.u64 	%rd17, [kernel_f7_s0____x____x___block_id_y_param_11];
	cvta.to.global.u64 	%rd3, %rd17;
	mov.u32 	%r63, %ctaid.y;
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %tid.y;
	mov.u32 	%r3, %tid.x;
	mul.lo.s32 	%r4, %r63, 433;
	setp.gt.u32 	%p1, %r2, 53;
	@%p1 bra 	LBB6_10;
// %bb.1:                               // %true_bb
	setp.lt.u32 	%p10, %r3, 15;
	shl.b32 	%r5, %r2, 3;
	@%p10 bra 	LBB6_2;
	bra.uni 	LBB6_6;
LBB6_2:                                 // %true_bb1
	cvt.s64.s32 	%rd5, %r62;
	add.s32 	%r159, %r5, -1;
	sub.s32 	%r160, %r159, %r58;
	not.b32 	%r161, %r55;
	mov.u32 	%r162, -431;
	sub.s32 	%r163, %r162, %r4;
	max.s32 	%r164, %r161, %r163;
	sub.s32 	%r165, %r160, %r164;
	shl.b32 	%r166, %r3, 4;
	mad.lo.s32 	%r167, %r61, %r165, %r166;
	add.s32 	%r168, %r167, -1;
	sub.s32 	%r169, %r168, %r54;
	not.b32 	%r170, %r56;
	mul.lo.s32 	%r171, %r1, 248;
	mov.u32 	%r172, -246;
	sub.s32 	%r173, %r172, %r171;
	max.s32 	%r174, %r170, %r173;
	sub.s32 	%r206, %r169, %r174;
	sub.s32 	%r175, %r159, %r59;
	sub.s32 	%r176, %r175, %r164;
	mad.lo.s32 	%r177, %r60, %r176, %r166;
	add.s32 	%r178, %r177, -1;
	sub.s32 	%r179, %r178, %r53;
	sub.s32 	%r205, %r179, %r174;
	add.s32 	%r180, %r166, 245;
	sub.s32 	%r181, %r180, %r52;
	sub.s32 	%r182, %r181, %r174;
	mad.lo.s32 	%r183, %r62, %r182, %r5;
	add.s32 	%r184, %r183, -1;
	sub.s32 	%r185, %r184, %r57;
	sub.s32 	%r204, %r185, %r164;
	shl.b32 	%r13, %r62, 1;
	mov.u32 	%r207, 0;
	mov.u64 	%rd38, 0;
	shl.b64 	%rd44, %rd5, 1;
LBB6_3:                                 // %"for f7.s0._::x._::xi._::xii"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB6_4 Depth 2
	mul.wide.s32 	%rd39, %r206, 2;
	add.s64 	%rd8, %rd1, %rd39;
	mul.wide.s32 	%rd40, %r205, 2;
	add.s64 	%rd9, %rd2, %rd40;
	mov.u32 	%r208, %r204;
	mov.u64 	%rd49, %rd38;
LBB6_4:                                 // %"for f7.s0._::y._::yi._::yii._::yii"
                                        //   Parent Loop BB6_3 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mul.wide.s32 	%rd41, %r208, 2;
	add.s64 	%rd42, %rd3, %rd41;
	add.s64 	%rd43, %rd42, 2;
	ld.global.nc.u16 	%rs39, [%rd42+2];
	add.s64 	%rd45, %rd43, %rd44;
	ld.global.nc.u16 	%rs40, [%rd45];
	ld.global.nc.u16 	%rs41, [%rd42];
	add.s64 	%rd46, %rd42, %rd44;
	ld.global.nc.u16 	%rs42, [%rd46];
	add.s64 	%rd47, %rd9, %rd49;
	ld.global.nc.u16 	%rs43, [%rd47+2];
	ld.global.nc.u16 	%rs44, [%rd47];
	ld.global.nc.u16 	%rs45, [%rd47+4];
	setp.lt.s16 	%p19, %rs39, %rs41;
	setp.lt.s16 	%p20, %rs40, %rs42;
	sub.s16 	%rs46, %rs41, %rs39;
	sub.s16 	%rs47, %rs42, %rs40;
	sub.s16 	%rs48, %rs39, %rs41;
	sub.s16 	%rs49, %rs40, %rs42;
	selp.b16 	%rs50, %rs47, %rs49, %p20;
	selp.b16 	%rs51, %rs46, %rs48, %p19;
	setp.lt.s16 	%p21, %rs44, %rs43;
	setp.lt.s16 	%p22, %rs43, %rs45;
	sub.s16 	%rs52, %rs43, %rs44;
	sub.s16 	%rs53, %rs45, %rs43;
	sub.s16 	%rs54, %rs44, %rs43;
	sub.s16 	%rs55, %rs43, %rs45;
	selp.b16 	%rs56, %rs53, %rs55, %p22;
	selp.b16 	%rs57, %rs52, %rs54, %p21;
	setp.lt.u16 	%p23, %rs51, %rs57;
	setp.lt.u16 	%p24, %rs50, %rs56;
	cvt.s32.s16 	%r186, %rs40;
	cvt.s32.s16 	%r187, %rs39;
	cvt.s32.s16 	%r188, %rs42;
	cvt.s32.s16 	%r189, %rs41;
	add.s32 	%r190, %r189, %r187;
	add.s32 	%r191, %r188, %r186;
	cvt.s32.s16 	%r192, %rs44;
	cvt.s32.s16 	%r193, %rs43;
	cvt.s32.s16 	%r194, %rs45;
	add.s32 	%r195, %r193, %r192;
	add.s32 	%r196, %r194, %r193;
	selp.b32 	%r197, %r191, %r196, %p24;
	selp.b32 	%r198, %r190, %r195, %p23;
	add.s32 	%r199, %r198, 1;
	add.s32 	%r200, %r197, 1;
	shr.u32 	%r201, %r200, 1;
	shr.u32 	%r202, %r199, 1;
	add.s64 	%rd48, %rd8, %rd49;
	st.global.u16 	[%rd48], %r202;
	st.global.u16 	[%rd48+2], %r201;
	add.s64 	%rd49, %rd49, 4;
	add.s32 	%r208, %r208, %r13;
	cvt.u32.u64 	%r203, %rd49;
	setp.ne.s32 	%p25, %r203, 32;
	@%p25 bra 	LBB6_4;
// %bb.5:                               // %"end for f7.s0._::y._::yi._::yii._::yii"
                                        //   in Loop: Header=BB6_3 Depth=1
	add.s32 	%r207, %r207, 1;
	add.s32 	%r206, %r206, %r61;
	add.s32 	%r205, %r205, %r60;
	add.s32 	%r204, %r204, 1;
	setp.eq.s32 	%p26, %r207, 8;
	@%p26 bra 	LBB6_14;
	bra.uni 	LBB6_3;
LBB6_10:                                // %false_bb
	shl.b32 	%r65, %r3, 4;
	cvt.s64.s32 	%rd4, %r62;
	mov.u32 	%r66, 424;
	sub.s32 	%r67, %r66, %r58;
	not.b32 	%r68, %r55;
	mov.u32 	%r69, -431;
	sub.s32 	%r70, %r69, %r4;
	max.s32 	%r71, %r68, %r70;
	sub.s32 	%r72, %r67, %r71;
	mad.lo.s32 	%r73, %r61, %r72, -2;
	sub.s32 	%r74, %r73, %r54;
	not.b32 	%r75, %r56;
	mul.lo.s32 	%r76, %r1, 248;
	mov.u32 	%r77, -246;
	sub.s32 	%r78, %r77, %r76;
	max.s32 	%r79, %r75, %r78;
	sub.s32 	%r80, %r74, %r79;
	not.b32 	%r81, %r65;
	max.u32 	%r82, %r81, -233;
	sub.s32 	%r217, %r80, %r82;
	sub.s32 	%r83, %r66, %r59;
	sub.s32 	%r84, %r83, %r71;
	mad.lo.s32 	%r85, %r60, %r84, -2;
	sub.s32 	%r86, %r85, %r53;
	sub.s32 	%r87, %r86, %r79;
	sub.s32 	%r216, %r87, %r82;
	mov.u32 	%r88, 244;
	sub.s32 	%r89, %r88, %r52;
	sub.s32 	%r90, %r89, %r79;
	sub.s32 	%r91, %r90, %r82;
	mad.lo.s32 	%r92, %r62, %r91, -1;
	sub.s32 	%r93, %r92, %r57;
	sub.s32 	%r215, %r93, %r71;
	shl.b32 	%r9, %r62, 1;
	mov.u32 	%r64, 0;
	shl.b64 	%rd21, %rd4, 1;
	mov.u32 	%r218, %r64;
LBB6_11:                                // %"for f7.s0._::x._::xi._::xii12"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB6_12 Depth 2
	mov.u32 	%r219, %r215;
	mov.u32 	%r220, %r64;
LBB6_12:                                // %"for f7.s0._::y._::yi._::yii._::yii15"
                                        //   Parent Loop BB6_11 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mul.wide.s32 	%rd18, %r219, 2;
	add.s64 	%rd19, %rd3, %rd18;
	add.s64 	%rd20, %rd19, 852;
	ld.global.nc.u16 	%rs1, [%rd19+852];
	add.s64 	%rd22, %rd20, %rd21;
	ld.global.nc.u16 	%rs2, [%rd22];
	add.s64 	%rd23, %rd19, 850;
	ld.global.nc.u16 	%rs3, [%rd19+850];
	add.s64 	%rd24, %rd23, %rd21;
	ld.global.nc.u16 	%rs4, [%rd24];
	add.s32 	%r95, %r216, %r220;
	mul.wide.s32 	%rd25, %r95, 2;
	add.s64 	%rd26, %rd2, %rd25;
	ld.global.nc.u16 	%rs5, [%rd26+2];
	ld.global.nc.u16 	%rs6, [%rd26];
	ld.global.nc.u16 	%rs7, [%rd26+4];
	setp.lt.s16 	%p2, %rs1, %rs3;
	setp.lt.s16 	%p3, %rs2, %rs4;
	sub.s16 	%rs8, %rs3, %rs1;
	sub.s16 	%rs9, %rs4, %rs2;
	sub.s16 	%rs10, %rs1, %rs3;
	sub.s16 	%rs11, %rs2, %rs4;
	selp.b16 	%rs12, %rs9, %rs11, %p3;
	selp.b16 	%rs13, %rs8, %rs10, %p2;
	setp.lt.s16 	%p4, %rs6, %rs5;
	setp.lt.s16 	%p5, %rs5, %rs7;
	sub.s16 	%rs14, %rs5, %rs6;
	sub.s16 	%rs15, %rs7, %rs5;
	sub.s16 	%rs16, %rs6, %rs5;
	sub.s16 	%rs17, %rs5, %rs7;
	selp.b16 	%rs18, %rs15, %rs17, %p5;
	selp.b16 	%rs19, %rs14, %rs16, %p4;
	setp.lt.u16 	%p6, %rs13, %rs19;
	setp.lt.u16 	%p7, %rs12, %rs18;
	cvt.s32.s16 	%r96, %rs2;
	cvt.s32.s16 	%r97, %rs1;
	cvt.s32.s16 	%r98, %rs4;
	cvt.s32.s16 	%r99, %rs3;
	add.s32 	%r100, %r99, %r97;
	add.s32 	%r101, %r98, %r96;
	cvt.s32.s16 	%r102, %rs6;
	cvt.s32.s16 	%r103, %rs5;
	cvt.s32.s16 	%r104, %rs7;
	add.s32 	%r105, %r103, %r102;
	add.s32 	%r106, %r104, %r103;
	selp.b32 	%r107, %r101, %r106, %p7;
	selp.b32 	%r108, %r100, %r105, %p6;
	add.s32 	%r109, %r108, 1;
	add.s32 	%r110, %r107, 1;
	shr.u32 	%r111, %r110, 1;
	shr.u32 	%r112, %r109, 1;
	add.s32 	%r113, %r217, %r220;
	mul.wide.s32 	%rd27, %r113, 2;
	add.s64 	%rd28, %rd1, %rd27;
	st.global.u16 	[%rd28], %r112;
	st.global.u16 	[%rd28+2], %r111;
	add.s32 	%r220, %r220, 2;
	add.s32 	%r219, %r219, %r9;
	setp.ne.s32 	%p8, %r220, 16;
	@%p8 bra 	LBB6_12;
// %bb.13:                              // %"end for f7.s0._::y._::yi._::yii._::yii16"
                                        //   in Loop: Header=BB6_11 Depth=1
	add.s32 	%r218, %r218, 1;
	add.s32 	%r217, %r217, %r61;
	add.s32 	%r216, %r216, %r60;
	add.s32 	%r215, %r215, 1;
	setp.eq.s32 	%p9, %r218, 8;
	@%p9 bra 	LBB6_14;
	bra.uni 	LBB6_11;
LBB6_6:                                 // %false_bb2
	cvt.s64.s32 	%rd6, %r62;
	add.s32 	%r115, %r5, -1;
	sub.s32 	%r116, %r115, %r58;
	not.b32 	%r117, %r55;
	mov.u32 	%r118, -431;
	sub.s32 	%r119, %r118, %r4;
	max.s32 	%r120, %r117, %r119;
	sub.s32 	%r121, %r116, %r120;
	mad.lo.s32 	%r122, %r61, %r121, 231;
	sub.s32 	%r123, %r122, %r54;
	not.b32 	%r124, %r56;
	mul.lo.s32 	%r125, %r1, 248;
	mov.u32 	%r126, -246;
	sub.s32 	%r127, %r126, %r125;
	max.s32 	%r128, %r124, %r127;
	sub.s32 	%r211, %r123, %r128;
	add.s64 	%rd7, %rd2, 466;
	sub.s32 	%r129, %r115, %r59;
	sub.s32 	%r130, %r129, %r120;
	mad.lo.s32 	%r131, %r60, %r130, -1;
	sub.s32 	%r132, %r131, %r53;
	sub.s32 	%r210, %r132, %r128;
	mov.u32 	%r133, 477;
	sub.s32 	%r134, %r133, %r52;
	sub.s32 	%r135, %r134, %r128;
	mad.lo.s32 	%r136, %r62, %r135, %r5;
	add.s32 	%r137, %r136, -1;
	sub.s32 	%r138, %r137, %r57;
	sub.s32 	%r209, %r138, %r120;
	shl.b32 	%r17, %r62, 1;
	mov.u32 	%r114, 0;
	shl.b64 	%rd33, %rd6, 1;
	mov.u32 	%r212, %r114;
LBB6_7:                                 // %"for f7.s0._::x._::xi._::xii5"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB6_8 Depth 2
	mul.wide.s32 	%rd29, %r210, 2;
	add.s64 	%rd50, %rd7, %rd29;
	mov.u32 	%r213, %r209;
	mov.u32 	%r214, %r114;
LBB6_8:                                 // %"for f7.s0._::y._::yi._::yii._::yii8"
                                        //   Parent Loop BB6_7 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mul.wide.s32 	%rd30, %r213, 2;
	add.s64 	%rd31, %rd3, %rd30;
	add.s64 	%rd32, %rd31, 2;
	ld.global.nc.u16 	%rs20, [%rd31+2];
	add.s64 	%rd34, %rd32, %rd33;
	ld.global.nc.u16 	%rs21, [%rd34];
	ld.global.nc.u16 	%rs22, [%rd31];
	add.s64 	%rd35, %rd31, %rd33;
	ld.global.nc.u16 	%rs23, [%rd35];
	ld.global.nc.u16 	%rs24, [%rd50+-2];
	ld.global.nc.u16 	%rs25, [%rd50+2];
	ld.global.nc.u16 	%rs26, [%rd50];
	setp.lt.s16 	%p11, %rs20, %rs22;
	setp.lt.s16 	%p12, %rs21, %rs23;
	sub.s16 	%rs27, %rs22, %rs20;
	sub.s16 	%rs28, %rs23, %rs21;
	sub.s16 	%rs29, %rs20, %rs22;
	sub.s16 	%rs30, %rs21, %rs23;
	selp.b16 	%rs31, %rs28, %rs30, %p12;
	selp.b16 	%rs32, %rs27, %rs29, %p11;
	setp.lt.s16 	%p13, %rs24, %rs26;
	setp.lt.s16 	%p14, %rs26, %rs25;
	sub.s16 	%rs33, %rs26, %rs24;
	sub.s16 	%rs34, %rs25, %rs26;
	sub.s16 	%rs35, %rs24, %rs26;
	sub.s16 	%rs36, %rs26, %rs25;
	selp.b16 	%rs37, %rs34, %rs36, %p14;
	selp.b16 	%rs38, %rs33, %rs35, %p13;
	setp.lt.u16 	%p15, %rs32, %rs38;
	setp.lt.u16 	%p16, %rs31, %rs37;
	cvt.s32.s16 	%r140, %rs21;
	cvt.s32.s16 	%r141, %rs20;
	cvt.s32.s16 	%r142, %rs23;
	cvt.s32.s16 	%r143, %rs22;
	add.s32 	%r144, %r143, %r141;
	add.s32 	%r145, %r142, %r140;
	cvt.s32.s16 	%r146, %rs24;
	cvt.s32.s16 	%r147, %rs25;
	cvt.s32.s16 	%r148, %rs26;
	add.s32 	%r149, %r148, %r146;
	add.s32 	%r150, %r147, %r148;
	selp.b32 	%r151, %r145, %r150, %p16;
	selp.b32 	%r152, %r144, %r149, %p15;
	add.s32 	%r153, %r152, 1;
	add.s32 	%r154, %r151, 1;
	shr.u32 	%r155, %r154, 1;
	shr.u32 	%r156, %r153, 1;
	add.s32 	%r157, %r211, %r214;
	mul.wide.s32 	%rd36, %r157, 2;
	add.s64 	%rd37, %rd1, %rd36;
	st.global.u16 	[%rd37], %r156;
	st.global.u16 	[%rd37+2], %r155;
	add.s32 	%r214, %r214, 2;
	add.s64 	%rd50, %rd50, 4;
	add.s32 	%r213, %r213, %r17;
	setp.ne.s32 	%p17, %r214, 16;
	@%p17 bra 	LBB6_8;
// %bb.9:                               // %"end for f7.s0._::y._::yi._::yii._::yii9"
                                        //   in Loop: Header=BB6_7 Depth=1
	add.s32 	%r212, %r212, 1;
	add.s32 	%r211, %r211, %r61;
	add.s32 	%r210, %r210, %r60;
	add.s32 	%r209, %r209, 1;
	setp.eq.s32 	%p18, %r212, 8;
	@%p18 bra 	LBB6_14;
	bra.uni 	LBB6_7;
LBB6_14:                                // %after_bb
	ret;
                                        // -- End function
}
	// .globl	kernel_f27_s0____x____x___block_id_y // -- Begin function kernel_f27_s0____x____x___block_id_y
.visible .entry kernel_f27_s0____x____x___block_id_y(
	.param .u32 kernel_f27_s0____x____x___block_id_y_param_0,
	.param .u32 kernel_f27_s0____x____x___block_id_y_param_1,
	.param .u32 kernel_f27_s0____x____x___block_id_y_param_2,
	.param .u32 kernel_f27_s0____x____x___block_id_y_param_3,
	.param .u32 kernel_f27_s0____x____x___block_id_y_param_4,
	.param .u32 kernel_f27_s0____x____x___block_id_y_param_5,
	.param .u32 kernel_f27_s0____x____x___block_id_y_param_6,
	.param .u32 kernel_f27_s0____x____x___block_id_y_param_7,
	.param .u32 kernel_f27_s0____x____x___block_id_y_param_8,
	.param .u32 kernel_f27_s0____x____x___block_id_y_param_9,
	.param .u32 kernel_f27_s0____x____x___block_id_y_param_10,
	.param .u32 kernel_f27_s0____x____x___block_id_y_param_11,
	.param .u32 kernel_f27_s0____x____x___block_id_y_param_12,
	.param .u32 kernel_f27_s0____x____x___block_id_y_param_13,
	.param .u32 kernel_f27_s0____x____x___block_id_y_param_14,
	.param .u32 kernel_f27_s0____x____x___block_id_y_param_15,
	.param .u32 kernel_f27_s0____x____x___block_id_y_param_16,
	.param .u32 kernel_f27_s0____x____x___block_id_y_param_17,
	.param .u32 kernel_f27_s0____x____x___block_id_y_param_18,
	.param .u32 kernel_f27_s0____x____x___block_id_y_param_19,
	.param .u32 kernel_f27_s0____x____x___block_id_y_param_20,
	.param .u32 kernel_f27_s0____x____x___block_id_y_param_21,
	.param .u32 kernel_f27_s0____x____x___block_id_y_param_22,
	.param .u32 kernel_f27_s0____x____x___block_id_y_param_23,
	.param .u32 kernel_f27_s0____x____x___block_id_y_param_24,
	.param .u32 kernel_f27_s0____x____x___block_id_y_param_25,
	.param .u32 kernel_f27_s0____x____x___block_id_y_param_26,
	.param .u32 kernel_f27_s0____x____x___block_id_y_param_27,
	.param .u32 kernel_f27_s0____x____x___block_id_y_param_28,
	.param .u32 kernel_f27_s0____x____x___block_id_y_param_29,
	.param .u32 kernel_f27_s0____x____x___block_id_y_param_30,
	.param .u32 kernel_f27_s0____x____x___block_id_y_param_31,
	.param .u32 kernel_f27_s0____x____x___block_id_y_param_32,
	.param .u32 kernel_f27_s0____x____x___block_id_y_param_33,
	.param .u32 kernel_f27_s0____x____x___block_id_y_param_34,
	.param .u32 kernel_f27_s0____x____x___block_id_y_param_35,
	.param .u32 kernel_f27_s0____x____x___block_id_y_param_36,
	.param .u32 kernel_f27_s0____x____x___block_id_y_param_37,
	.param .u32 kernel_f27_s0____x____x___block_id_y_param_38,
	.param .u32 kernel_f27_s0____x____x___block_id_y_param_39,
	.param .u64 kernel_f27_s0____x____x___block_id_y_param_40,
	.param .u64 kernel_f27_s0____x____x___block_id_y_param_41,
	.param .u64 kernel_f27_s0____x____x___block_id_y_param_42,
	.param .u64 kernel_f27_s0____x____x___block_id_y_param_43,
	.param .u64 kernel_f27_s0____x____x___block_id_y_param_44,
	.param .u64 kernel_f27_s0____x____x___block_id_y_param_45,
	.param .u64 kernel_f27_s0____x____x___block_id_y_param_46
)                                       // @kernel_f27_s0____x____x___block_id_y
{
	.reg .pred 	%p<135>;
	.reg .b16 	%rs<667>;
	.reg .b32 	%r<1297>;
	.reg .b64 	%rd<312>;

// %bb.0:                               // %entry
	ld.param.u32 	%r347, [kernel_f27_s0____x____x___block_id_y_param_39];
	ld.param.u32 	%r346, [kernel_f27_s0____x____x___block_id_y_param_38];
	ld.param.u32 	%r345, [kernel_f27_s0____x____x___block_id_y_param_37];
	ld.param.u32 	%r344, [kernel_f27_s0____x____x___block_id_y_param_36];
	ld.param.u32 	%r343, [kernel_f27_s0____x____x___block_id_y_param_35];
	ld.param.u32 	%r342, [kernel_f27_s0____x____x___block_id_y_param_34];
	ld.param.u32 	%r340, [kernel_f27_s0____x____x___block_id_y_param_32];
	ld.param.u32 	%r339, [kernel_f27_s0____x____x___block_id_y_param_31];
	ld.param.u32 	%r338, [kernel_f27_s0____x____x___block_id_y_param_30];
	ld.param.u32 	%r337, [kernel_f27_s0____x____x___block_id_y_param_29];
	ld.param.u32 	%r332, [kernel_f27_s0____x____x___block_id_y_param_24];
	ld.param.u32 	%r331, [kernel_f27_s0____x____x___block_id_y_param_23];
	ld.param.u32 	%r330, [kernel_f27_s0____x____x___block_id_y_param_22];
	ld.param.u32 	%r329, [kernel_f27_s0____x____x___block_id_y_param_21];
	ld.param.u32 	%r328, [kernel_f27_s0____x____x___block_id_y_param_20];
	ld.param.u32 	%r327, [kernel_f27_s0____x____x___block_id_y_param_19];
	ld.param.u32 	%r321, [kernel_f27_s0____x____x___block_id_y_param_13];
	ld.param.u32 	%r320, [kernel_f27_s0____x____x___block_id_y_param_12];
	ld.param.u32 	%r319, [kernel_f27_s0____x____x___block_id_y_param_11];
	ld.param.u32 	%r318, [kernel_f27_s0____x____x___block_id_y_param_10];
	ld.param.u32 	%r316, [kernel_f27_s0____x____x___block_id_y_param_8];
	ld.param.u32 	%r314, [kernel_f27_s0____x____x___block_id_y_param_6];
	ld.param.u32 	%r312, [kernel_f27_s0____x____x___block_id_y_param_4];
	ld.param.u32 	%r311, [kernel_f27_s0____x____x___block_id_y_param_3];
	ld.param.u32 	%r310, [kernel_f27_s0____x____x___block_id_y_param_2];
	ld.param.u32 	%r309, [kernel_f27_s0____x____x___block_id_y_param_1];
	ld.param.u64 	%rd11, [kernel_f27_s0____x____x___block_id_y_param_46];
	cvta.to.global.u64 	%rd1, %rd11;
	ld.param.u64 	%rd12, [kernel_f27_s0____x____x___block_id_y_param_45];
	cvta.to.global.u64 	%rd2, %rd12;
	ld.param.u64 	%rd13, [kernel_f27_s0____x____x___block_id_y_param_44];
	cvta.to.global.u64 	%rd3, %rd13;
	ld.param.u64 	%rd14, [kernel_f27_s0____x____x___block_id_y_param_43];
	cvta.to.global.u64 	%rd4, %rd14;
	ld.param.u64 	%rd15, [kernel_f27_s0____x____x___block_id_y_param_42];
	cvta.to.global.u64 	%rd5, %rd15;
	ld.param.u64 	%rd16, [kernel_f27_s0____x____x___block_id_y_param_41];
	cvta.to.global.u64 	%rd6, %rd16;
	ld.param.u64 	%rd17, [kernel_f27_s0____x____x___block_id_y_param_40];
	cvta.to.global.u64 	%rd7, %rd17;
	mov.u32 	%r348, %ctaid.y;
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %tid.y;
	mov.u32 	%r3, %tid.x;
	mul.lo.s32 	%r4, %r348, 433;
	add.s32 	%r349, %r4, 431;
	min.s32 	%r5, %r349, %r327;
	setp.gt.u32 	%p1, %r2, 53;
	@%p1 bra 	LBB7_14;
// %bb.1:                               // %true_bb
	ld.param.u32 	%r341, [kernel_f27_s0____x____x___block_id_y_param_33];
	ld.param.u32 	%r334, [kernel_f27_s0____x____x___block_id_y_param_26];
	ld.param.u32 	%r333, [kernel_f27_s0____x____x___block_id_y_param_25];
	ld.param.u32 	%r317, [kernel_f27_s0____x____x___block_id_y_param_9];
	ld.param.u32 	%r315, [kernel_f27_s0____x____x___block_id_y_param_7];
	ld.param.u32 	%r313, [kernel_f27_s0____x____x___block_id_y_param_5];
	ld.param.u32 	%r308, [kernel_f27_s0____x____x___block_id_y_param_0];
	setp.lt.u32 	%p46, %r3, 15;
	mul.lo.s32 	%r6, %r1, 248;
	add.s32 	%r666, %r6, 246;
	min.s32 	%r7, %r666, %r337;
	@%p46 bra 	LBB7_2;
	bra.uni 	LBB7_8;
LBB7_2:                                 // %true_bb1
	shl.b32 	%r975, %r2, 3;
	shl.b32 	%r47, %r2, 2;
	sub.s32 	%r48, %r47, %r338;
	shl.b32 	%r976, %r316, 1;
	sub.s32 	%r49, %r976, %r318;
	sub.s32 	%r50, %r311, %r332;
	mov.u32 	%r977, 985;
	sub.s32 	%r51, %r977, %r318;
	mov.u32 	%r978, 983;
	sub.s32 	%r52, %r978, %r318;
	mov.u32 	%r979, 247;
	sub.s32 	%r53, %r979, %r332;
	mov.u32 	%r980, 246;
	sub.s32 	%r54, %r980, %r332;
	add.s32 	%r55, %r316, 985;
	add.s32 	%r56, %r311, 248;
	add.s32 	%r981, %r7, 1;
	add.s32 	%r982, %r7, 2;
	and.b32  	%r58, %r982, 1;
	and.b32  	%r57, %r981, 1;
	ld.global.nc.u16 	%rs445, [%rd5+4];
	cvt.s32.s16 	%r63, %rs445;
	ld.global.nc.u16 	%rs446, [%rd5+2];
	cvt.s32.s16 	%r65, %rs446;
	ld.global.nc.u16 	%rs447, [%rd5];
	cvt.s32.s16 	%r67, %rs447;
	ld.global.nc.u16 	%rs448, [%rd5+6];
	cvt.s32.s16 	%r69, %rs448;
	ld.global.nc.u16 	%rs449, [%rd5+12];
	cvt.s32.s16 	%r71, %rs449;
	ld.global.nc.u16 	%rs450, [%rd5+10];
	cvt.s32.s16 	%r73, %rs450;
	ld.global.nc.u16 	%rs451, [%rd5+8];
	cvt.s32.s16 	%r75, %rs451;
	ld.global.nc.u16 	%rs452, [%rd5+14];
	cvt.s32.s16 	%r77, %rs452;
	ld.global.nc.u16 	%rs453, [%rd5+20];
	cvt.s32.s16 	%r79, %rs453;
	ld.global.nc.u16 	%rs454, [%rd5+18];
	cvt.s32.s16 	%r81, %rs454;
	ld.global.nc.u16 	%rs455, [%rd5+16];
	cvt.s32.s16 	%r83, %rs455;
	ld.global.nc.u16 	%rs456, [%rd5+22];
	cvt.s32.s16 	%r85, %rs456;
	add.s32 	%r983, %r975, -1;
	sub.s32 	%r984, %r983, %r330;
	not.b32 	%r985, %r327;
	mov.u32 	%r986, -432;
	sub.s32 	%r987, %r986, %r4;
	max.s32 	%r988, %r985, %r987;
	sub.s32 	%r989, %r984, %r988;
	shl.b32 	%r990, %r3, 4;
	mad.lo.s32 	%r991, %r346, %r989, %r990;
	add.s32 	%r992, %r991, -1;
	sub.s32 	%r993, %r992, %r347;
	not.b32 	%r994, %r337;
	mov.u32 	%r995, -247;
	sub.s32 	%r996, %r995, %r6;
	max.s32 	%r997, %r994, %r996;
	sub.s32 	%r1282, %r993, %r997;
	add.s32 	%r998, %r990, -248;
	sub.s32 	%r88, %r998, %r997;
	mov.u32 	%r974, 0;
	setp.eq.s32 	%p94, %r58, 0;
	setp.eq.s32 	%p95, %r57, 0;
	mov.u32 	%r1283, %r974;
LBB7_3:                                 // %"for f27.s0._::c"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB7_4 Depth 2
                                        //       Child Loop BB7_5 Depth 3
	mov.u32 	%r1284, %r1282;
	mov.u32 	%r1285, %r974;
LBB7_4:                                 // %"for f27.s0._::x._::xi._::xii"
                                        //   Parent Loop BB7_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB7_5 Depth 3
	mul.wide.s32 	%rd214, %r1284, 2;
	add.s64 	%rd311, %rd4, %rd214;
	add.s32 	%r1001, %r1285, %r5;
	and.b32  	%r135, %r1001, 1;
	shr.s32 	%r1002, %r1001, 1;
	add.s32 	%r1003, %r1002, %r48;
	add.s32 	%r136, %r1003, 216;
	add.s32 	%r1004, %r1002, %r47;
	add.s32 	%r1005, %r1004, %r333;
	mul.lo.s32 	%r1006, %r1005, %r343;
	add.s32 	%r138, %r1006, %r342;
	add.s32 	%r1007, %r1004, %r341;
	mul.lo.s32 	%r1008, %r1007, %r340;
	add.s32 	%r140, %r1008, %r328;
	add.s32 	%r142, %r1008, %r339;
	add.s32 	%r144, %r1008, %r309;
	add.s32 	%r146, %r1008, %r310;
	add.s32 	%r1009, %r1004, %r334;
	mul.lo.s32 	%r1010, %r1009, %r56;
	add.s32 	%r148, %r1010, %r312;
	add.s32 	%r150, %r53, %r1010;
	add.s32 	%r152, %r1003, %r313;
	add.s32 	%r154, %r1010, %r314;
	add.s32 	%r156, %r54, %r1010;
	add.s32 	%r158, %r1003, %r315;
	shl.b32 	%r1011, %r1004, 1;
	sub.s32 	%r1012, %r1011, %r329;
	mul.lo.s32 	%r1013, %r1012, %r55;
	add.s32 	%r160, %r51, %r1013;
	add.s32 	%r162, %r52, %r1013;
	add.s32 	%r1014, %r1013, %r49;
	add.s32 	%r164, %r1014, 2953;
	add.s32 	%r166, %r1014, 2955;
	add.s32 	%r1015, %r1010, %r50;
	add.s32 	%r168, %r1015, 495;
	add.s32 	%r170, %r1003, %r317;
	add.s32 	%r172, %r1003, 217;
	add.s32 	%r174, %r1015, 494;
	add.s32 	%r176, %r1003, %r308;
	add.s32 	%r178, %r1006, %r319;
	add.s32 	%r180, %r1006, %r320;
	add.s32 	%r182, %r1006, %r321;
	mov.u32 	%r1286, %r974;
LBB7_5:                                 // %"for f27.s0._::y._::yi._::yii._::yii"
                                        //   Parent Loop BB7_3 Depth=1
                                        //     Parent Loop BB7_4 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	setp.eq.s32 	%p91, %r135, 0;
	setp.eq.s32 	%p92, %r1283, 0;
	setp.eq.s32 	%p93, %r1283, 1;
	add.s32 	%r1016, %r88, %r1286;
	add.s32 	%r1017, %r1016, 1;
	shr.s32 	%r1018, %r1016, 1;
	shr.s32 	%r1019, %r1017, 1;
	add.s32 	%r1020, %r1019, %r345;
	add.s32 	%r1021, %r1018, %r345;
	mul.lo.s32 	%r1022, %r1021, %r344;
	mul.lo.s32 	%r1023, %r1020, %r344;
	add.s32 	%r1024, %r1023, %r136;
	add.s32 	%r1025, %r1022, %r136;
	mul.wide.s32 	%rd215, %r1025, 2;
	add.s64 	%rd216, %rd3, %rd215;
	ld.global.nc.u16 	%rs457, [%rd216];
	mul.wide.s32 	%rd217, %r1024, 2;
	add.s64 	%rd218, %rd3, %rd217;
	ld.global.nc.u16 	%rs458, [%rd218];
	add.s32 	%r1026, %r1019, %r138;
	add.s32 	%r1027, %r1018, %r138;
	mul.wide.s32 	%rd219, %r1027, 2;
	add.s64 	%rd220, %rd1, %rd219;
	ld.global.nc.u16 	%rs459, [%rd220];
	mul.wide.s32 	%rd221, %r1026, 2;
	add.s64 	%rd222, %rd1, %rd221;
	ld.global.nc.u16 	%rs460, [%rd222];
	add.s32 	%r1028, %r1019, %r140;
	add.s32 	%r1029, %r1018, %r140;
	mul.wide.s32 	%rd223, %r1029, 2;
	add.s64 	%rd224, %rd6, %rd223;
	ld.global.nc.u16 	%rs461, [%rd224];
	mul.wide.s32 	%rd225, %r1028, 2;
	add.s64 	%rd226, %rd6, %rd225;
	ld.global.nc.u16 	%rs462, [%rd226];
	add.s32 	%r1030, %r1019, %r142;
	add.s32 	%r1031, %r1018, %r142;
	mul.wide.s32 	%rd227, %r1031, 2;
	add.s64 	%rd228, %rd6, %rd227;
	ld.global.nc.u16 	%rs463, [%rd228];
	mul.wide.s32 	%rd229, %r1030, 2;
	add.s64 	%rd230, %rd6, %rd229;
	ld.global.nc.u16 	%rs464, [%rd230];
	add.s32 	%r1032, %r1019, %r144;
	add.s32 	%r1033, %r1018, %r144;
	mul.wide.s32 	%rd231, %r1033, 2;
	add.s64 	%rd232, %rd6, %rd231;
	ld.global.nc.u16 	%rs465, [%rd232];
	mul.wide.s32 	%rd233, %r1032, 2;
	add.s64 	%rd234, %rd6, %rd233;
	ld.global.nc.u16 	%rs466, [%rd234];
	add.s32 	%r1034, %r1019, %r146;
	add.s32 	%r1035, %r1018, %r146;
	mul.wide.s32 	%rd235, %r1035, 2;
	add.s64 	%rd236, %rd6, %rd235;
	ld.global.nc.u16 	%rs467, [%rd236];
	mul.wide.s32 	%rd237, %r1034, 2;
	add.s64 	%rd238, %rd6, %rd237;
	ld.global.nc.u16 	%rs468, [%rd238];
	add.s32 	%r1036, %r1019, %r148;
	add.s32 	%r1037, %r1018, %r148;
	mul.wide.s32 	%rd239, %r1037, 2;
	add.s64 	%rd240, %rd2, %rd239;
	ld.global.nc.u16 	%rs469, [%rd240];
	mul.wide.s32 	%rd241, %r1036, 2;
	add.s64 	%rd242, %rd2, %rd241;
	ld.global.nc.u16 	%rs470, [%rd242];
	add.s32 	%r1038, %r1019, %r150;
	add.s32 	%r1039, %r1018, %r150;
	mul.wide.s32 	%rd243, %r1039, 2;
	add.s64 	%rd244, %rd2, %rd243;
	ld.global.nc.u16 	%rs471, [%rd244];
	mul.wide.s32 	%rd245, %r1038, 2;
	add.s64 	%rd246, %rd2, %rd245;
	ld.global.nc.u16 	%rs472, [%rd246];
	add.s32 	%r1040, %r1023, %r152;
	add.s32 	%r1041, %r1022, %r152;
	mul.wide.s32 	%rd247, %r1041, 2;
	add.s64 	%rd248, %rd3, %rd247;
	ld.global.nc.u16 	%rs473, [%rd248];
	mul.wide.s32 	%rd249, %r1040, 2;
	add.s64 	%rd250, %rd3, %rd249;
	ld.global.nc.u16 	%rs474, [%rd250];
	setp.lt.s16 	%p96, %rs470, %rs472;
	setp.lt.s16 	%p97, %rs469, %rs471;
	sub.s16 	%rs475, %rs472, %rs470;
	sub.s16 	%rs476, %rs471, %rs469;
	sub.s16 	%rs477, %rs470, %rs472;
	sub.s16 	%rs478, %rs469, %rs471;
	selp.b16 	%rs479, %rs476, %rs478, %p97;
	selp.b16 	%rs480, %rs475, %rs477, %p96;
	setp.lt.s16 	%p98, %rs474, %rs458;
	setp.lt.s16 	%p99, %rs473, %rs457;
	sub.s16 	%rs481, %rs458, %rs474;
	sub.s16 	%rs482, %rs457, %rs473;
	sub.s16 	%rs483, %rs474, %rs458;
	sub.s16 	%rs484, %rs473, %rs457;
	selp.b16 	%rs485, %rs482, %rs484, %p99;
	selp.b16 	%rs486, %rs481, %rs483, %p98;
	setp.lt.u16 	%p100, %rs480, %rs486;
	setp.lt.u16 	%p101, %rs479, %rs485;
	cvt.s32.s16 	%r1042, %rs469;
	cvt.s32.s16 	%r1043, %rs470;
	cvt.s32.s16 	%r1044, %rs471;
	cvt.s32.s16 	%r1045, %rs472;
	add.s32 	%r1046, %r1045, %r1043;
	add.s32 	%r1047, %r1044, %r1042;
	cvt.s32.s16 	%r1048, %rs473;
	cvt.s32.s16 	%r1049, %rs474;
	cvt.s32.s16 	%r1050, %rs457;
	cvt.s32.s16 	%r1051, %rs458;
	add.s32 	%r1052, %r1049, %r1051;
	add.s32 	%r1053, %r1048, %r1050;
	selp.b32 	%r1054, %r1047, %r1053, %p101;
	selp.b32 	%r1055, %r1046, %r1052, %p100;
	add.s32 	%r1056, %r1055, 1;
	add.s32 	%r1057, %r1054, 1;
	shr.u32 	%r1058, %r1057, 1;
	shr.u32 	%r1059, %r1056, 1;
	cvt.u16.u32 	%rs487, %r1059;
	cvt.u16.u32 	%rs488, %r1058;
	add.s32 	%r1060, %r1019, %r154;
	add.s32 	%r1061, %r1018, %r154;
	mul.wide.s32 	%rd251, %r1061, 2;
	add.s64 	%rd252, %rd2, %rd251;
	ld.global.nc.u16 	%rs489, [%rd252];
	mul.wide.s32 	%rd253, %r1060, 2;
	add.s64 	%rd254, %rd2, %rd253;
	ld.global.nc.u16 	%rs490, [%rd254];
	add.s32 	%r1062, %r1019, %r156;
	add.s32 	%r1063, %r1018, %r156;
	mul.wide.s32 	%rd255, %r1063, 2;
	add.s64 	%rd256, %rd2, %rd255;
	ld.global.nc.u16 	%rs491, [%rd256];
	mul.wide.s32 	%rd257, %r1062, 2;
	add.s64 	%rd258, %rd2, %rd257;
	ld.global.nc.u16 	%rs492, [%rd258];
	add.s32 	%r1064, %r1023, %r158;
	add.s32 	%r1065, %r1022, %r158;
	mul.wide.s32 	%rd259, %r1065, 2;
	add.s64 	%rd260, %rd3, %rd259;
	ld.global.nc.u16 	%rs493, [%rd260];
	mul.wide.s32 	%rd261, %r1064, 2;
	add.s64 	%rd262, %rd3, %rd261;
	ld.global.nc.u16 	%rs494, [%rd262];
	and.b32  	%r1066, %r1016, -2;
	and.b32  	%r1067, %r1017, -2;
	add.s32 	%r1068, %r1067, %r160;
	add.s32 	%r1069, %r1066, %r160;
	mul.wide.s32 	%rd263, %r1069, 2;
	add.s64 	%rd264, %rd7, %rd263;
	ld.global.nc.u16 	%rs495, [%rd264];
	mul.wide.s32 	%rd265, %r1068, 2;
	add.s64 	%rd266, %rd7, %rd265;
	ld.global.nc.u16 	%rs496, [%rd266];
	add.s32 	%r1070, %r1067, %r162;
	add.s32 	%r1071, %r1066, %r162;
	mul.wide.s32 	%rd267, %r1071, 2;
	add.s64 	%rd268, %rd7, %rd267;
	ld.global.nc.u16 	%rs497, [%rd268];
	mul.wide.s32 	%rd269, %r1070, 2;
	add.s64 	%rd270, %rd7, %rd269;
	ld.global.nc.u16 	%rs498, [%rd270];
	add.s32 	%r1072, %r1067, %r164;
	add.s32 	%r1073, %r1066, %r164;
	mul.wide.s32 	%rd271, %r1073, 2;
	add.s64 	%rd272, %rd7, %rd271;
	ld.global.nc.u16 	%rs499, [%rd272];
	mul.wide.s32 	%rd273, %r1072, 2;
	add.s64 	%rd274, %rd7, %rd273;
	ld.global.nc.u16 	%rs500, [%rd274];
	add.s32 	%r1074, %r1067, %r166;
	add.s32 	%r1075, %r1066, %r166;
	mul.wide.s32 	%rd275, %r1075, 2;
	add.s64 	%rd276, %rd7, %rd275;
	ld.global.nc.u16 	%rs501, [%rd276];
	mul.wide.s32 	%rd277, %r1074, 2;
	add.s64 	%rd278, %rd7, %rd277;
	ld.global.nc.u16 	%rs502, [%rd278];
	add.s32 	%r1076, %r1019, %r168;
	add.s32 	%r1077, %r1018, %r168;
	mul.wide.s32 	%rd279, %r1077, 2;
	add.s64 	%rd280, %rd2, %rd279;
	ld.global.nc.u16 	%rs503, [%rd280];
	mul.wide.s32 	%rd281, %r1076, 2;
	add.s64 	%rd282, %rd2, %rd281;
	ld.global.nc.u16 	%rs504, [%rd282];
	add.s32 	%r1078, %r1023, %r170;
	add.s32 	%r1079, %r1022, %r170;
	mul.wide.s32 	%rd283, %r1079, 2;
	add.s64 	%rd284, %rd3, %rd283;
	ld.global.nc.u16 	%rs505, [%rd284];
	mul.wide.s32 	%rd285, %r1078, 2;
	add.s64 	%rd286, %rd3, %rd285;
	ld.global.nc.u16 	%rs506, [%rd286];
	add.s32 	%r1080, %r1023, %r172;
	add.s32 	%r1081, %r1022, %r172;
	mul.wide.s32 	%rd287, %r1081, 2;
	add.s64 	%rd288, %rd3, %rd287;
	ld.global.nc.u16 	%rs507, [%rd288];
	mul.wide.s32 	%rd289, %r1080, 2;
	add.s64 	%rd290, %rd3, %rd289;
	ld.global.nc.u16 	%rs508, [%rd290];
	add.s32 	%r1082, %r1019, %r174;
	add.s32 	%r1083, %r1018, %r174;
	mul.wide.s32 	%rd291, %r1083, 2;
	add.s64 	%rd292, %rd2, %rd291;
	ld.global.nc.u16 	%rs509, [%rd292];
	mul.wide.s32 	%rd293, %r1082, 2;
	add.s64 	%rd294, %rd2, %rd293;
	ld.global.nc.u16 	%rs510, [%rd294];
	add.s32 	%r1084, %r1023, %r176;
	add.s32 	%r1085, %r1022, %r176;
	mul.wide.s32 	%rd295, %r1085, 2;
	add.s64 	%rd296, %rd3, %rd295;
	ld.global.nc.u16 	%rs511, [%rd296];
	mul.wide.s32 	%rd297, %r1084, 2;
	add.s64 	%rd298, %rd3, %rd297;
	ld.global.nc.u16 	%rs512, [%rd298];
	add.s32 	%r1086, %r1019, %r178;
	add.s32 	%r1087, %r1018, %r178;
	mul.wide.s32 	%rd299, %r1087, 2;
	add.s64 	%rd300, %rd1, %rd299;
	ld.global.nc.u16 	%rs513, [%rd300];
	cvt.s32.s16 	%r1088, %rs513;
	mul.wide.s32 	%rd301, %r1086, 2;
	add.s64 	%rd302, %rd1, %rd301;
	ld.global.nc.u16 	%rs514, [%rd302];
	cvt.s32.s16 	%r1089, %rs514;
	add.s32 	%r1090, %r1019, %r180;
	add.s32 	%r1091, %r1018, %r180;
	mul.wide.s32 	%rd303, %r1091, 2;
	add.s64 	%rd304, %rd1, %rd303;
	ld.global.nc.u16 	%rs515, [%rd304];
	cvt.s32.s16 	%r1092, %rs515;
	mul.wide.s32 	%rd305, %r1090, 2;
	add.s64 	%rd306, %rd1, %rd305;
	ld.global.nc.u16 	%rs516, [%rd306];
	cvt.s32.s16 	%r1093, %rs516;
	setp.lt.s16 	%p102, %rs490, %rs492;
	setp.lt.s16 	%p103, %rs489, %rs491;
	sub.s16 	%rs517, %rs492, %rs490;
	sub.s16 	%rs518, %rs491, %rs489;
	sub.s16 	%rs519, %rs490, %rs492;
	sub.s16 	%rs520, %rs489, %rs491;
	selp.b16 	%rs521, %rs518, %rs520, %p103;
	selp.b16 	%rs522, %rs517, %rs519, %p102;
	setp.lt.s16 	%p104, %rs458, %rs494;
	setp.lt.s16 	%p105, %rs457, %rs493;
	sub.s16 	%rs523, %rs494, %rs458;
	sub.s16 	%rs524, %rs493, %rs457;
	sub.s16 	%rs525, %rs458, %rs494;
	sub.s16 	%rs526, %rs457, %rs493;
	selp.b16 	%rs527, %rs524, %rs526, %p105;
	selp.b16 	%rs528, %rs523, %rs525, %p104;
	setp.lt.u16 	%p106, %rs522, %rs528;
	setp.lt.u16 	%p107, %rs521, %rs527;
	cvt.s32.s16 	%r1094, %rs489;
	cvt.s32.s16 	%r1095, %rs490;
	cvt.s32.s16 	%r1096, %rs491;
	cvt.s32.s16 	%r1097, %rs492;
	add.s32 	%r1098, %r1097, %r1095;
	add.s32 	%r1099, %r1096, %r1094;
	cvt.s32.s16 	%r1100, %rs493;
	cvt.s32.s16 	%r1101, %rs494;
	add.s32 	%r1102, %r1101, %r1051;
	add.s32 	%r1103, %r1100, %r1050;
	selp.b32 	%r1104, %r1099, %r1103, %p107;
	selp.b32 	%r1105, %r1098, %r1102, %p106;
	setp.lt.s16 	%p108, %rs472, %rs504;
	setp.lt.s16 	%p109, %rs471, %rs503;
	sub.s16 	%rs529, %rs504, %rs472;
	sub.s16 	%rs530, %rs503, %rs471;
	sub.s16 	%rs531, %rs472, %rs504;
	sub.s16 	%rs532, %rs471, %rs503;
	selp.b16 	%rs533, %rs530, %rs532, %p109;
	selp.b16 	%rs534, %rs529, %rs531, %p108;
	setp.lt.s16 	%p110, %rs506, %rs508;
	setp.lt.s16 	%p111, %rs505, %rs507;
	sub.s16 	%rs535, %rs508, %rs506;
	sub.s16 	%rs536, %rs507, %rs505;
	sub.s16 	%rs537, %rs506, %rs508;
	sub.s16 	%rs538, %rs505, %rs507;
	selp.b16 	%rs539, %rs536, %rs538, %p111;
	selp.b16 	%rs540, %rs535, %rs537, %p110;
	setp.lt.u16 	%p112, %rs534, %rs540;
	setp.lt.u16 	%p113, %rs533, %rs539;
	cvt.s32.s16 	%r1106, %rs503;
	cvt.s32.s16 	%r1107, %rs504;
	add.s32 	%r1108, %r1107, %r1045;
	add.s32 	%r1109, %r1106, %r1044;
	cvt.s32.s16 	%r1110, %rs505;
	cvt.s32.s16 	%r1111, %rs506;
	cvt.s32.s16 	%r1112, %rs507;
	cvt.s32.s16 	%r1113, %rs508;
	add.s32 	%r1114, %r1113, %r1111;
	add.s32 	%r1115, %r1112, %r1110;
	selp.b32 	%r1116, %r1109, %r1115, %p113;
	selp.b32 	%r1117, %r1108, %r1114, %p112;
	cvt.s32.s16 	%r1118, %rs460;
	cvt.s32.s16 	%r1119, %rs459;
	add.s32 	%r1120, %r1119, 1;
	add.s32 	%r1121, %r1118, 1;
	add.s32 	%r1122, %r1121, %r1089;
	add.s32 	%r1123, %r1120, %r1088;
	shr.u32 	%r1124, %r1123, 1;
	shr.u32 	%r1125, %r1122, 1;
	cvt.u16.u32 	%rs541, %r1125;
	cvt.u16.u32 	%rs542, %r1124;
	cvt.s32.s16 	%r1126, %rs464;
	cvt.s32.s16 	%r1127, %rs463;
	cvt.s32.s16 	%r1128, %rs461;
	cvt.s32.s16 	%r1129, %rs462;
	add.s32 	%r1130, %r1129, 1;
	add.s32 	%r1131, %r1128, 1;
	add.s32 	%r1132, %r1131, %r1127;
	add.s32 	%r1133, %r1130, %r1126;
	shr.u32 	%r1134, %r1133, 1;
	shr.u32 	%r1135, %r1132, 1;
	cvt.u16.u32 	%rs543, %r1135;
	cvt.u16.u32 	%rs544, %r1134;
	add.s16 	%rs545, %rs458, %rs544;
	add.s16 	%rs546, %rs457, %rs543;
	sub.s16 	%rs547, %rs546, %rs542;
	sub.s16 	%rs548, %rs545, %rs541;
	selp.b16 	%rs549, %rs548, %rs462, %p91;
	selp.b16 	%rs550, %rs547, %rs461, %p91;
	setp.lt.s16 	%p114, %rs462, %rs466;
	setp.lt.s16 	%p115, %rs461, %rs465;
	sub.s16 	%rs551, %rs466, %rs462;
	sub.s16 	%rs552, %rs465, %rs461;
	sub.s16 	%rs553, %rs462, %rs466;
	sub.s16 	%rs554, %rs461, %rs465;
	selp.b16 	%rs555, %rs552, %rs554, %p115;
	selp.b16 	%rs556, %rs551, %rs553, %p114;
	setp.lt.s16 	%p116, %rs464, %rs468;
	setp.lt.s16 	%p117, %rs463, %rs467;
	sub.s16 	%rs557, %rs468, %rs464;
	sub.s16 	%rs558, %rs467, %rs463;
	sub.s16 	%rs559, %rs464, %rs468;
	sub.s16 	%rs560, %rs463, %rs467;
	selp.b16 	%rs561, %rs558, %rs560, %p117;
	selp.b16 	%rs562, %rs557, %rs559, %p116;
	setp.lt.u16 	%p118, %rs556, %rs562;
	setp.lt.u16 	%p119, %rs555, %rs561;
	add.s32 	%r1136, %r1019, %r182;
	add.s32 	%r1137, %r1018, %r182;
	mul.wide.s32 	%rd307, %r1137, 2;
	add.s64 	%rd308, %rd1, %rd307;
	ld.global.nc.u16 	%rs563, [%rd308];
	cvt.s32.s16 	%r1138, %rs563;
	mul.wide.s32 	%rd309, %r1136, 2;
	add.s64 	%rd310, %rd1, %rd309;
	ld.global.nc.u16 	%rs564, [%rd310];
	cvt.s32.s16 	%r1139, %rs564;
	add.s32 	%r1140, %r1120, %r1138;
	add.s32 	%r1141, %r1121, %r1139;
	shr.u32 	%r1142, %r1141, 1;
	shr.u32 	%r1143, %r1140, 1;
	cvt.u16.u32 	%rs565, %r1143;
	cvt.u16.u32 	%rs566, %r1142;
	cvt.s32.s16 	%r1144, %rs465;
	cvt.s32.s16 	%r1145, %rs466;
	add.s32 	%r1146, %r1130, %r1145;
	add.s32 	%r1147, %r1131, %r1144;
	shr.u32 	%r1148, %r1147, 1;
	shr.u32 	%r1149, %r1146, 1;
	cvt.u16.u32 	%rs567, %r1149;
	cvt.u16.u32 	%rs568, %r1148;
	add.s16 	%rs569, %rs488, %rs568;
	add.s16 	%rs570, %rs487, %rs567;
	sub.s16 	%rs571, %rs570, %rs566;
	sub.s16 	%rs572, %rs569, %rs565;
	add.s32 	%r1150, %r1089, %r1093;
	add.s32 	%r1151, %r1088, %r1092;
	add.s32 	%r1152, %r1151, 1;
	add.s32 	%r1153, %r1150, 1;
	shr.u32 	%r1154, %r1153, 1;
	shr.u32 	%r1155, %r1152, 1;
	cvt.u16.u32 	%rs573, %r1155;
	cvt.u16.u32 	%rs574, %r1154;
	cvt.s32.s16 	%r1156, %rs468;
	cvt.s32.s16 	%r1157, %rs467;
	add.s32 	%r1158, %r1127, %r1157;
	add.s32 	%r1159, %r1126, %r1156;
	add.s32 	%r1160, %r1159, 1;
	add.s32 	%r1161, %r1158, 1;
	shr.u32 	%r1162, %r1161, 1;
	shr.u32 	%r1163, %r1160, 1;
	cvt.u16.u32 	%rs575, %r1163;
	cvt.u16.u32 	%rs576, %r1162;
	add.s16 	%rs577, %rs488, %rs576;
	add.s16 	%rs578, %rs487, %rs575;
	sub.s16 	%rs579, %rs578, %rs574;
	sub.s16 	%rs580, %rs577, %rs573;
	selp.b16 	%rs581, %rs572, %rs580, %p119;
	selp.b16 	%rs582, %rs571, %rs579, %p118;
	add.s32 	%r1164, %r1121, %r1093;
	add.s32 	%r1165, %r1120, %r1092;
	shr.u32 	%r1166, %r1165, 1;
	shr.u32 	%r1167, %r1164, 1;
	cvt.u16.u32 	%rs583, %r1167;
	cvt.u16.u32 	%rs584, %r1166;
	add.s32 	%r1168, %r1131, %r1157;
	add.s32 	%r1169, %r1130, %r1156;
	shr.u32 	%r1170, %r1169, 1;
	shr.u32 	%r1171, %r1168, 1;
	cvt.u16.u32 	%rs585, %r1171;
	cvt.u16.u32 	%rs586, %r1170;
	add.s16 	%rs587, %rs472, %rs586;
	add.s16 	%rs588, %rs471, %rs585;
	sub.s16 	%rs589, %rs588, %rs584;
	sub.s16 	%rs590, %rs587, %rs583;
	selp.b16 	%rs591, %rs582, %rs590, %p91;
	selp.b16 	%rs592, %rs581, %rs589, %p91;
	selp.b16 	%rs593, %rs550, %rs592, %p95;
	selp.b16 	%rs594, %rs549, %rs591, %p94;
	selp.b16 	%rs595, %rs457, %rs459, %p91;
	selp.b16 	%rs596, %rs458, %rs460, %p91;
	selp.b16 	%rs597, %rs488, %rs471, %p91;
	selp.b16 	%rs598, %rs487, %rs472, %p91;
	selp.b16 	%rs599, %rs596, %rs598, %p94;
	selp.b16 	%rs600, %rs595, %rs597, %p95;
	cvt.s32.s16 	%r1172, %r1058;
	cvt.s32.s16 	%r1173, %r1059;
	shl.b32 	%r1174, %r1105, 15;
	shl.b32 	%r1175, %r1104, 15;
	add.s32 	%r1176, %r1175, 32768;
	add.s32 	%r1177, %r1174, 32768;
	shr.s32 	%r1178, %r1177, 16;
	shr.s32 	%r1179, %r1176, 16;
	add.s32 	%r1180, %r1173, 1;
	add.s32 	%r1181, %r1172, 1;
	add.s32 	%r1182, %r1181, %r1179;
	add.s32 	%r1183, %r1180, %r1178;
	shr.u32 	%r1184, %r1183, 1;
	shr.u32 	%r1185, %r1182, 1;
	cvt.u16.u32 	%rs601, %r1185;
	cvt.u16.u32 	%rs602, %r1184;
	cvt.s32.s16 	%r1186, %rs496;
	cvt.s32.s16 	%r1187, %rs495;
	cvt.s32.s16 	%r1188, %rs497;
	cvt.s32.s16 	%r1189, %rs498;
	add.s32 	%r1190, %r1187, 1;
	add.s32 	%r1191, %r1186, 1;
	add.s32 	%r1192, %r1191, %r1189;
	add.s32 	%r1193, %r1190, %r1188;
	shr.u32 	%r1194, %r1193, 1;
	shr.u32 	%r1195, %r1192, 1;
	cvt.u16.u32 	%rs603, %r1195;
	cvt.u16.u32 	%rs604, %r1194;
	add.s16 	%rs605, %rs457, %rs604;
	add.s16 	%rs606, %rs458, %rs603;
	sub.s16 	%rs607, %rs606, %rs602;
	sub.s16 	%rs608, %rs605, %rs601;
	setp.lt.s16 	%p120, %rs495, %rs499;
	setp.lt.s16 	%p121, %rs496, %rs500;
	sub.s16 	%rs609, %rs499, %rs495;
	sub.s16 	%rs610, %rs500, %rs496;
	sub.s16 	%rs611, %rs495, %rs499;
	sub.s16 	%rs612, %rs496, %rs500;
	selp.b16 	%rs613, %rs610, %rs612, %p121;
	selp.b16 	%rs614, %rs609, %rs611, %p120;
	setp.lt.s16 	%p122, %rs501, %rs497;
	setp.lt.s16 	%p123, %rs502, %rs498;
	sub.s16 	%rs615, %rs497, %rs501;
	sub.s16 	%rs616, %rs498, %rs502;
	sub.s16 	%rs617, %rs501, %rs497;
	sub.s16 	%rs618, %rs502, %rs498;
	selp.b16 	%rs619, %rs616, %rs618, %p123;
	selp.b16 	%rs620, %rs615, %rs617, %p122;
	setp.lt.u16 	%p124, %rs614, %rs620;
	setp.lt.u16 	%p125, %rs613, %rs619;
	setp.lt.s16 	%p126, %rs491, %rs509;
	setp.lt.s16 	%p127, %rs492, %rs510;
	sub.s16 	%rs621, %rs509, %rs491;
	sub.s16 	%rs622, %rs510, %rs492;
	sub.s16 	%rs623, %rs491, %rs509;
	sub.s16 	%rs624, %rs492, %rs510;
	selp.b16 	%rs625, %rs622, %rs624, %p127;
	selp.b16 	%rs626, %rs621, %rs623, %p126;
	setp.lt.s16 	%p128, %rs507, %rs511;
	setp.lt.s16 	%p129, %rs508, %rs512;
	sub.s16 	%rs627, %rs511, %rs507;
	sub.s16 	%rs628, %rs512, %rs508;
	sub.s16 	%rs629, %rs507, %rs511;
	sub.s16 	%rs630, %rs508, %rs512;
	selp.b16 	%rs631, %rs628, %rs630, %p129;
	selp.b16 	%rs632, %rs627, %rs629, %p128;
	setp.lt.u16 	%p130, %rs626, %rs632;
	setp.lt.u16 	%p131, %rs625, %rs631;
	cvt.s32.s16 	%r1196, %rs510;
	cvt.s32.s16 	%r1197, %rs509;
	add.s32 	%r1198, %r1197, %r1096;
	add.s32 	%r1199, %r1196, %r1097;
	cvt.s32.s16 	%r1200, %rs512;
	cvt.s32.s16 	%r1201, %rs511;
	add.s32 	%r1202, %r1201, %r1112;
	add.s32 	%r1203, %r1200, %r1113;
	selp.b32 	%r1204, %r1199, %r1203, %p131;
	selp.b32 	%r1205, %r1198, %r1202, %p130;
	shl.b32 	%r1206, %r1205, 15;
	shl.b32 	%r1207, %r1204, 15;
	add.s32 	%r1208, %r1207, 32768;
	add.s32 	%r1209, %r1206, 32768;
	shr.s32 	%r1210, %r1209, 16;
	shr.s32 	%r1211, %r1208, 16;
	add.s32 	%r1212, %r1180, %r1211;
	add.s32 	%r1213, %r1181, %r1210;
	shr.u32 	%r1214, %r1213, 1;
	shr.u32 	%r1215, %r1212, 1;
	cvt.u16.u32 	%rs633, %r1215;
	cvt.u16.u32 	%rs634, %r1214;
	cvt.s32.s16 	%r1216, %rs500;
	cvt.s32.s16 	%r1217, %rs499;
	add.s32 	%r1218, %r1190, %r1217;
	add.s32 	%r1219, %r1191, %r1216;
	shr.u32 	%r1220, %r1219, 1;
	shr.u32 	%r1221, %r1218, 1;
	cvt.u16.u32 	%rs635, %r1221;
	cvt.u16.u32 	%rs636, %r1220;
	add.s16 	%rs637, %rs460, %rs636;
	add.s16 	%rs638, %rs459, %rs635;
	sub.s16 	%rs639, %rs638, %rs634;
	sub.s16 	%rs640, %rs637, %rs633;
	shl.b32 	%r1222, %r1117, 15;
	shl.b32 	%r1223, %r1116, 15;
	add.s32 	%r1224, %r1223, 32768;
	add.s32 	%r1225, %r1222, 32768;
	shr.s32 	%r1226, %r1225, 16;
	shr.s32 	%r1227, %r1224, 16;
	add.s32 	%r1228, %r1179, %r1227;
	add.s32 	%r1229, %r1178, %r1226;
	add.s32 	%r1230, %r1229, 1;
	add.s32 	%r1231, %r1228, 1;
	shr.u32 	%r1232, %r1231, 1;
	shr.u32 	%r1233, %r1230, 1;
	cvt.u16.u32 	%rs641, %r1233;
	cvt.u16.u32 	%rs642, %r1232;
	cvt.s32.s16 	%r1234, %rs501;
	cvt.s32.s16 	%r1235, %rs502;
	add.s32 	%r1236, %r1189, %r1235;
	add.s32 	%r1237, %r1188, %r1234;
	add.s32 	%r1238, %r1237, 1;
	add.s32 	%r1239, %r1236, 1;
	shr.u32 	%r1240, %r1239, 1;
	shr.u32 	%r1241, %r1238, 1;
	cvt.u16.u32 	%rs643, %r1241;
	cvt.u16.u32 	%rs644, %r1240;
	add.s16 	%rs645, %rs460, %rs644;
	add.s16 	%rs646, %rs459, %rs643;
	sub.s16 	%rs647, %rs646, %rs642;
	sub.s16 	%rs648, %rs645, %rs641;
	selp.b16 	%rs649, %rs640, %rs648, %p125;
	selp.b16 	%rs650, %rs639, %rs647, %p124;
	selp.b16 	%rs651, %rs608, %rs650, %p91;
	selp.b16 	%rs652, %rs607, %rs649, %p91;
	add.s32 	%r1242, %r1181, %r1227;
	add.s32 	%r1243, %r1180, %r1226;
	shr.u32 	%r1244, %r1243, 1;
	shr.u32 	%r1245, %r1242, 1;
	cvt.u16.u32 	%rs653, %r1245;
	cvt.u16.u32 	%rs654, %r1244;
	add.s32 	%r1246, %r1191, %r1235;
	add.s32 	%r1247, %r1190, %r1234;
	shr.u32 	%r1248, %r1247, 1;
	shr.u32 	%r1249, %r1246, 1;
	cvt.u16.u32 	%rs655, %r1249;
	cvt.u16.u32 	%rs656, %r1248;
	add.s16 	%rs657, %rs471, %rs656;
	add.s16 	%rs658, %rs472, %rs655;
	sub.s16 	%rs659, %rs658, %rs654;
	sub.s16 	%rs660, %rs657, %rs653;
	selp.b16 	%rs661, %rs495, %rs660, %p91;
	selp.b16 	%rs662, %rs496, %rs659, %p91;
	selp.b16 	%rs663, %rs652, %rs662, %p94;
	selp.b16 	%rs664, %rs651, %rs661, %p95;
	cvt.s32.s16 	%r1250, %rs664;
	cvt.s32.s16 	%r1251, %rs663;
	cvt.s32.s16 	%r1252, %rs600;
	cvt.s32.s16 	%r1253, %rs599;
	cvt.s32.s16 	%r1254, %rs594;
	cvt.s32.s16 	%r1255, %rs593;
	mad.lo.s32 	%r1256, %r65, %r1253, %r69;
	mad.lo.s32 	%r1257, %r65, %r1252, %r69;
	mad.lo.s32 	%r1258, %r67, %r1255, %r1257;
	mad.lo.s32 	%r1259, %r67, %r1254, %r1256;
	mad.lo.s32 	%r1260, %r63, %r1251, %r1259;
	mad.lo.s32 	%r1261, %r63, %r1250, %r1258;
	mad.lo.s32 	%r1262, %r73, %r1252, %r77;
	mad.lo.s32 	%r1263, %r73, %r1253, %r77;
	mad.lo.s32 	%r1264, %r75, %r1254, %r1263;
	mad.lo.s32 	%r1265, %r75, %r1255, %r1262;
	mad.lo.s32 	%r1266, %r71, %r1250, %r1265;
	mad.lo.s32 	%r1267, %r71, %r1251, %r1264;
	mul.lo.s32 	%r1268, %r79, %r1251;
	mul.lo.s32 	%r1269, %r79, %r1250;
	mad.lo.s32 	%r1270, %r81, %r1252, %r1269;
	mad.lo.s32 	%r1271, %r81, %r1253, %r1268;
	add.s32 	%r1272, %r1271, %r85;
	add.s32 	%r1273, %r1270, %r85;
	mad.lo.s32 	%r1274, %r83, %r1255, %r1273;
	mad.lo.s32 	%r1275, %r83, %r1254, %r1272;
	selp.b32 	%r1276, %r1267, %r1275, %p93;
	selp.b32 	%r1277, %r1266, %r1274, %p93;
	selp.b32 	%r1278, %r1261, %r1277, %p92;
	selp.b32 	%r1279, %r1260, %r1276, %p92;
	shr.u32 	%r1280, %r1279, 8;
	shr.u32 	%r1281, %r1278, 8;
	cvt.u16.u32 	%rs665, %r1281;
	cvt.u16.u32 	%rs666, %r1280;
	st.global.v2.u16 	[%rd311], {%rs665, %rs666};
	add.s64 	%rd311, %rd311, 4;
	add.s32 	%r1286, %r1286, 2;
	setp.ne.s32 	%p132, %r1286, 16;
	@%p132 bra 	LBB7_5;
// %bb.6:                               // %"end for f27.s0._::y._::yi._::yii._::yii"
                                        //   in Loop: Header=BB7_4 Depth=2
	add.s32 	%r1285, %r1285, 1;
	add.s32 	%r1284, %r1284, %r346;
	setp.eq.s32 	%p133, %r1285, 8;
	@%p133 bra 	LBB7_7;
	bra.uni 	LBB7_4;
LBB7_7:                                 // %"end for f27.s0._::x._::xi._::xii"
                                        //   in Loop: Header=BB7_3 Depth=1
	add.s32 	%r1283, %r1283, 1;
	add.s32 	%r1282, %r1282, %r331;
	setp.eq.s32 	%p134, %r1283, 3;
	@%p134 bra 	LBB7_20;
	bra.uni 	LBB7_3;
LBB7_14:                                // %false_bb
	ld.param.u32 	%r336, [kernel_f27_s0____x____x___block_id_y_param_28];
	ld.param.u32 	%r335, [kernel_f27_s0____x____x___block_id_y_param_27];
	ld.param.u32 	%r326, [kernel_f27_s0____x____x___block_id_y_param_18];
	ld.param.u32 	%r325, [kernel_f27_s0____x____x___block_id_y_param_17];
	ld.param.u32 	%r324, [kernel_f27_s0____x____x___block_id_y_param_16];
	ld.param.u32 	%r323, [kernel_f27_s0____x____x___block_id_y_param_15];
	ld.param.u32 	%r322, [kernel_f27_s0____x____x___block_id_y_param_14];
	mul.lo.s32 	%r351, %r1, 248;
	add.s32 	%r352, %r351, 246;
	min.s32 	%r353, %r352, %r337;
	shl.b32 	%r354, %r3, 4;
	shl.b32 	%r355, %r316, 1;
	sub.s32 	%r8, %r355, %r318;
	sub.s32 	%r9, %r311, %r332;
	mov.u32 	%r356, 985;
	sub.s32 	%r10, %r356, %r318;
	mov.u32 	%r357, 983;
	sub.s32 	%r11, %r357, %r318;
	mov.u32 	%r358, 432;
	sub.s32 	%r12, %r358, %r329;
	mov.u32 	%r359, 247;
	sub.s32 	%r13, %r359, %r332;
	mov.u32 	%r360, 246;
	sub.s32 	%r14, %r360, %r332;
	add.s32 	%r15, %r316, 985;
	add.s32 	%r16, %r311, 248;
	ld.global.nc.u16 	%rs1, [%rd5+4];
	cvt.s32.s16 	%r21, %rs1;
	ld.global.nc.u16 	%rs2, [%rd5+2];
	cvt.s32.s16 	%r23, %rs2;
	ld.global.nc.u16 	%rs3, [%rd5];
	cvt.s32.s16 	%r25, %rs3;
	ld.global.nc.u16 	%rs4, [%rd5+6];
	cvt.s32.s16 	%r27, %rs4;
	ld.global.nc.u16 	%rs5, [%rd5+12];
	cvt.s32.s16 	%r29, %rs5;
	ld.global.nc.u16 	%rs6, [%rd5+10];
	cvt.s32.s16 	%r31, %rs6;
	ld.global.nc.u16 	%rs7, [%rd5+8];
	cvt.s32.s16 	%r33, %rs7;
	ld.global.nc.u16 	%rs8, [%rd5+14];
	cvt.s32.s16 	%r35, %rs8;
	ld.global.nc.u16 	%rs9, [%rd5+20];
	cvt.s32.s16 	%r37, %rs9;
	ld.global.nc.u16 	%rs10, [%rd5+18];
	cvt.s32.s16 	%r39, %rs10;
	ld.global.nc.u16 	%rs11, [%rd5+16];
	cvt.s32.s16 	%r41, %rs11;
	ld.global.nc.u16 	%rs12, [%rd5+22];
	cvt.s32.s16 	%r43, %rs12;
	mov.u32 	%r361, 424;
	sub.s32 	%r362, %r361, %r330;
	not.b32 	%r363, %r327;
	mov.u32 	%r364, -432;
	sub.s32 	%r365, %r364, %r4;
	max.s32 	%r366, %r363, %r365;
	sub.s32 	%r367, %r362, %r366;
	mad.lo.s32 	%r368, %r346, %r367, -2;
	sub.s32 	%r369, %r368, %r347;
	not.b32 	%r370, %r337;
	mov.u32 	%r371, -247;
	sub.s32 	%r372, %r371, %r351;
	max.s32 	%r373, %r370, %r372;
	sub.s32 	%r374, %r369, %r373;
	not.b32 	%r375, %r354;
	max.u32 	%r376, %r375, -233;
	sub.s32 	%r1292, %r374, %r376;
	add.s32 	%r377, %r353, 1;
	sub.s32 	%r46, %r377, %r376;
	mov.u32 	%r350, 0;
	mov.u32 	%r1293, %r350;
LBB7_15:                                // %"for f27.s0._::c15"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB7_16 Depth 2
                                        //       Child Loop BB7_17 Depth 3
	mov.u32 	%r1294, %r1292;
	mov.u32 	%r1295, %r350;
LBB7_16:                                // %"for f27.s0._::x._::xi._::xii18"
                                        //   Parent Loop BB7_15 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB7_17 Depth 3
	add.s32 	%r380, %r1295, %r5;
	and.b32  	%r253, %r380, 1;
	add.s32 	%r381, %r380, -7;
	shr.s32 	%r382, %r381, 1;
	sub.s32 	%r383, %r382, %r338;
	add.s32 	%r254, %r383, 432;
	add.s32 	%r384, %r382, %r335;
	mul.lo.s32 	%r385, %r384, %r343;
	add.s32 	%r256, %r385, %r342;
	add.s32 	%r386, %r382, %r322;
	mul.lo.s32 	%r387, %r386, %r340;
	add.s32 	%r258, %r387, %r328;
	add.s32 	%r260, %r387, %r339;
	add.s32 	%r262, %r387, %r309;
	add.s32 	%r264, %r387, %r310;
	add.s32 	%r388, %r382, %r336;
	mul.lo.s32 	%r389, %r388, %r16;
	add.s32 	%r266, %r389, %r312;
	add.s32 	%r268, %r13, %r389;
	add.s32 	%r270, %r383, %r323;
	add.s32 	%r272, %r389, %r314;
	add.s32 	%r274, %r14, %r389;
	add.s32 	%r276, %r383, %r324;
	and.b32  	%r390, %r381, -2;
	add.s32 	%r391, %r12, %r390;
	mul.lo.s32 	%r392, %r391, %r15;
	add.s32 	%r278, %r10, %r392;
	add.s32 	%r280, %r11, %r392;
	add.s32 	%r393, %r392, %r8;
	add.s32 	%r282, %r393, 2953;
	add.s32 	%r284, %r393, 2955;
	add.s32 	%r394, %r389, %r9;
	add.s32 	%r286, %r394, 495;
	add.s32 	%r288, %r383, %r325;
	add.s32 	%r290, %r383, 433;
	add.s32 	%r292, %r394, 494;
	add.s32 	%r294, %r383, %r326;
	add.s32 	%r296, %r385, %r319;
	add.s32 	%r298, %r385, %r320;
	add.s32 	%r300, %r385, %r321;
	mov.u32 	%r1296, %r350;
LBB7_17:                                // %"for f27.s0._::y._::yi._::yii._::yii21"
                                        //   Parent Loop BB7_15 Depth=1
                                        //     Parent Loop BB7_16 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	setp.ne.s32 	%p2, %r253, 0;
	setp.eq.s32 	%p3, %r1293, 0;
	setp.eq.s32 	%p4, %r1293, 1;
	add.s32 	%r395, %r46, %r1296;
	add.s32 	%r396, %r395, -1;
	and.b32  	%r397, %r395, 1;
	and.b32  	%r398, %r396, 1;
	setp.eq.s32 	%p5, %r398, 0;
	setp.eq.s32 	%p6, %r397, 0;
	add.s32 	%r399, %r395, -249;
	add.s32 	%r400, %r395, -248;
	shr.s32 	%r401, %r399, 1;
	shr.s32 	%r402, %r400, 1;
	add.s32 	%r403, %r402, %r345;
	add.s32 	%r404, %r401, %r345;
	mul.lo.s32 	%r405, %r404, %r344;
	mul.lo.s32 	%r406, %r403, %r344;
	add.s32 	%r407, %r406, %r254;
	add.s32 	%r408, %r405, %r254;
	mul.wide.s32 	%rd18, %r408, 2;
	add.s64 	%rd19, %rd3, %rd18;
	ld.global.nc.u16 	%rs13, [%rd19];
	mul.wide.s32 	%rd20, %r407, 2;
	add.s64 	%rd21, %rd3, %rd20;
	ld.global.nc.u16 	%rs14, [%rd21];
	add.s32 	%r409, %r256, %r402;
	add.s32 	%r410, %r256, %r401;
	mul.wide.s32 	%rd22, %r410, 2;
	add.s64 	%rd23, %rd1, %rd22;
	ld.global.nc.u16 	%rs15, [%rd23];
	mul.wide.s32 	%rd24, %r409, 2;
	add.s64 	%rd25, %rd1, %rd24;
	ld.global.nc.u16 	%rs16, [%rd25];
	add.s32 	%r411, %r258, %r402;
	add.s32 	%r412, %r258, %r401;
	mul.wide.s32 	%rd26, %r412, 2;
	add.s64 	%rd27, %rd6, %rd26;
	ld.global.nc.u16 	%rs17, [%rd27];
	mul.wide.s32 	%rd28, %r411, 2;
	add.s64 	%rd29, %rd6, %rd28;
	ld.global.nc.u16 	%rs18, [%rd29];
	add.s32 	%r413, %r260, %r402;
	add.s32 	%r414, %r260, %r401;
	mul.wide.s32 	%rd30, %r414, 2;
	add.s64 	%rd31, %rd6, %rd30;
	ld.global.nc.u16 	%rs19, [%rd31];
	mul.wide.s32 	%rd32, %r413, 2;
	add.s64 	%rd33, %rd6, %rd32;
	ld.global.nc.u16 	%rs20, [%rd33];
	add.s32 	%r415, %r262, %r402;
	add.s32 	%r416, %r262, %r401;
	mul.wide.s32 	%rd34, %r416, 2;
	add.s64 	%rd35, %rd6, %rd34;
	ld.global.nc.u16 	%rs21, [%rd35];
	mul.wide.s32 	%rd36, %r415, 2;
	add.s64 	%rd37, %rd6, %rd36;
	ld.global.nc.u16 	%rs22, [%rd37];
	add.s32 	%r417, %r264, %r402;
	add.s32 	%r418, %r264, %r401;
	mul.wide.s32 	%rd38, %r418, 2;
	add.s64 	%rd39, %rd6, %rd38;
	ld.global.nc.u16 	%rs23, [%rd39];
	mul.wide.s32 	%rd40, %r417, 2;
	add.s64 	%rd41, %rd6, %rd40;
	ld.global.nc.u16 	%rs24, [%rd41];
	add.s32 	%r419, %r266, %r402;
	add.s32 	%r420, %r266, %r401;
	mul.wide.s32 	%rd42, %r420, 2;
	add.s64 	%rd43, %rd2, %rd42;
	ld.global.nc.u16 	%rs25, [%rd43];
	mul.wide.s32 	%rd44, %r419, 2;
	add.s64 	%rd45, %rd2, %rd44;
	ld.global.nc.u16 	%rs26, [%rd45];
	add.s32 	%r421, %r268, %r402;
	add.s32 	%r422, %r268, %r401;
	mul.wide.s32 	%rd46, %r422, 2;
	add.s64 	%rd47, %rd2, %rd46;
	ld.global.nc.u16 	%rs27, [%rd47];
	mul.wide.s32 	%rd48, %r421, 2;
	add.s64 	%rd49, %rd2, %rd48;
	ld.global.nc.u16 	%rs28, [%rd49];
	add.s32 	%r423, %r406, %r270;
	add.s32 	%r424, %r405, %r270;
	mul.wide.s32 	%rd50, %r424, 2;
	add.s64 	%rd51, %rd3, %rd50;
	ld.global.nc.u16 	%rs29, [%rd51];
	mul.wide.s32 	%rd52, %r423, 2;
	add.s64 	%rd53, %rd3, %rd52;
	ld.global.nc.u16 	%rs30, [%rd53];
	setp.lt.s16 	%p7, %rs25, %rs27;
	setp.lt.s16 	%p8, %rs26, %rs28;
	sub.s16 	%rs31, %rs27, %rs25;
	sub.s16 	%rs32, %rs28, %rs26;
	sub.s16 	%rs33, %rs25, %rs27;
	sub.s16 	%rs34, %rs26, %rs28;
	selp.b16 	%rs35, %rs32, %rs34, %p8;
	selp.b16 	%rs36, %rs31, %rs33, %p7;
	setp.lt.s16 	%p9, %rs29, %rs13;
	setp.lt.s16 	%p10, %rs30, %rs14;
	sub.s16 	%rs37, %rs13, %rs29;
	sub.s16 	%rs38, %rs14, %rs30;
	sub.s16 	%rs39, %rs29, %rs13;
	sub.s16 	%rs40, %rs30, %rs14;
	selp.b16 	%rs41, %rs38, %rs40, %p10;
	selp.b16 	%rs42, %rs37, %rs39, %p9;
	setp.lt.u16 	%p11, %rs36, %rs42;
	setp.lt.u16 	%p12, %rs35, %rs41;
	cvt.s32.s16 	%r425, %rs26;
	cvt.s32.s16 	%r426, %rs25;
	cvt.s32.s16 	%r427, %rs28;
	cvt.s32.s16 	%r428, %rs27;
	add.s32 	%r429, %r428, %r426;
	add.s32 	%r430, %r427, %r425;
	cvt.s32.s16 	%r431, %rs30;
	cvt.s32.s16 	%r432, %rs29;
	cvt.s32.s16 	%r433, %rs14;
	cvt.s32.s16 	%r434, %rs13;
	add.s32 	%r435, %r432, %r434;
	add.s32 	%r436, %r431, %r433;
	selp.b32 	%r437, %r430, %r436, %p12;
	selp.b32 	%r438, %r429, %r435, %p11;
	add.s32 	%r439, %r438, 1;
	add.s32 	%r440, %r437, 1;
	shr.u32 	%r441, %r440, 1;
	shr.u32 	%r442, %r439, 1;
	cvt.u16.u32 	%rs43, %r442;
	cvt.u16.u32 	%rs44, %r441;
	add.s32 	%r443, %r272, %r402;
	add.s32 	%r444, %r272, %r401;
	mul.wide.s32 	%rd54, %r444, 2;
	add.s64 	%rd55, %rd2, %rd54;
	ld.global.nc.u16 	%rs45, [%rd55];
	mul.wide.s32 	%rd56, %r443, 2;
	add.s64 	%rd57, %rd2, %rd56;
	ld.global.nc.u16 	%rs46, [%rd57];
	add.s32 	%r445, %r274, %r402;
	add.s32 	%r446, %r274, %r401;
	mul.wide.s32 	%rd58, %r446, 2;
	add.s64 	%rd59, %rd2, %rd58;
	ld.global.nc.u16 	%rs47, [%rd59];
	mul.wide.s32 	%rd60, %r445, 2;
	add.s64 	%rd61, %rd2, %rd60;
	ld.global.nc.u16 	%rs48, [%rd61];
	add.s32 	%r447, %r406, %r276;
	add.s32 	%r448, %r405, %r276;
	mul.wide.s32 	%rd62, %r448, 2;
	add.s64 	%rd63, %rd3, %rd62;
	ld.global.nc.u16 	%rs49, [%rd63];
	mul.wide.s32 	%rd64, %r447, 2;
	add.s64 	%rd65, %rd3, %rd64;
	ld.global.nc.u16 	%rs50, [%rd65];
	and.b32  	%r449, %r399, -2;
	and.b32  	%r450, %r400, -2;
	add.s32 	%r451, %r278, %r450;
	add.s32 	%r452, %r278, %r449;
	mul.wide.s32 	%rd66, %r452, 2;
	add.s64 	%rd67, %rd7, %rd66;
	ld.global.nc.u16 	%rs51, [%rd67];
	mul.wide.s32 	%rd68, %r451, 2;
	add.s64 	%rd69, %rd7, %rd68;
	ld.global.nc.u16 	%rs52, [%rd69];
	add.s32 	%r453, %r280, %r450;
	add.s32 	%r454, %r280, %r449;
	mul.wide.s32 	%rd70, %r454, 2;
	add.s64 	%rd71, %rd7, %rd70;
	ld.global.nc.u16 	%rs53, [%rd71];
	mul.wide.s32 	%rd72, %r453, 2;
	add.s64 	%rd73, %rd7, %rd72;
	ld.global.nc.u16 	%rs54, [%rd73];
	add.s32 	%r455, %r450, %r282;
	add.s32 	%r456, %r449, %r282;
	mul.wide.s32 	%rd74, %r456, 2;
	add.s64 	%rd75, %rd7, %rd74;
	ld.global.nc.u16 	%rs55, [%rd75];
	mul.wide.s32 	%rd76, %r455, 2;
	add.s64 	%rd77, %rd7, %rd76;
	ld.global.nc.u16 	%rs56, [%rd77];
	add.s32 	%r457, %r450, %r284;
	add.s32 	%r458, %r449, %r284;
	mul.wide.s32 	%rd78, %r458, 2;
	add.s64 	%rd79, %rd7, %rd78;
	ld.global.nc.u16 	%rs57, [%rd79];
	mul.wide.s32 	%rd80, %r457, 2;
	add.s64 	%rd81, %rd7, %rd80;
	ld.global.nc.u16 	%rs58, [%rd81];
	add.s32 	%r459, %r402, %r286;
	add.s32 	%r460, %r401, %r286;
	mul.wide.s32 	%rd82, %r460, 2;
	add.s64 	%rd83, %rd2, %rd82;
	ld.global.nc.u16 	%rs59, [%rd83];
	mul.wide.s32 	%rd84, %r459, 2;
	add.s64 	%rd85, %rd2, %rd84;
	ld.global.nc.u16 	%rs60, [%rd85];
	add.s32 	%r461, %r406, %r288;
	add.s32 	%r462, %r405, %r288;
	mul.wide.s32 	%rd86, %r462, 2;
	add.s64 	%rd87, %rd3, %rd86;
	ld.global.nc.u16 	%rs61, [%rd87];
	mul.wide.s32 	%rd88, %r461, 2;
	add.s64 	%rd89, %rd3, %rd88;
	ld.global.nc.u16 	%rs62, [%rd89];
	add.s32 	%r463, %r406, %r290;
	add.s32 	%r464, %r405, %r290;
	mul.wide.s32 	%rd90, %r464, 2;
	add.s64 	%rd91, %rd3, %rd90;
	ld.global.nc.u16 	%rs63, [%rd91];
	mul.wide.s32 	%rd92, %r463, 2;
	add.s64 	%rd93, %rd3, %rd92;
	ld.global.nc.u16 	%rs64, [%rd93];
	add.s32 	%r465, %r402, %r292;
	add.s32 	%r466, %r401, %r292;
	mul.wide.s32 	%rd94, %r466, 2;
	add.s64 	%rd95, %rd2, %rd94;
	ld.global.nc.u16 	%rs65, [%rd95];
	mul.wide.s32 	%rd96, %r465, 2;
	add.s64 	%rd97, %rd2, %rd96;
	ld.global.nc.u16 	%rs66, [%rd97];
	add.s32 	%r467, %r406, %r294;
	add.s32 	%r468, %r405, %r294;
	mul.wide.s32 	%rd98, %r468, 2;
	add.s64 	%rd99, %rd3, %rd98;
	ld.global.nc.u16 	%rs67, [%rd99];
	mul.wide.s32 	%rd100, %r467, 2;
	add.s64 	%rd101, %rd3, %rd100;
	ld.global.nc.u16 	%rs68, [%rd101];
	add.s32 	%r469, %r296, %r402;
	add.s32 	%r470, %r296, %r401;
	mul.wide.s32 	%rd102, %r470, 2;
	add.s64 	%rd103, %rd1, %rd102;
	ld.global.nc.u16 	%rs69, [%rd103];
	cvt.s32.s16 	%r471, %rs69;
	mul.wide.s32 	%rd104, %r469, 2;
	add.s64 	%rd105, %rd1, %rd104;
	ld.global.nc.u16 	%rs70, [%rd105];
	cvt.s32.s16 	%r472, %rs70;
	add.s32 	%r473, %r298, %r402;
	add.s32 	%r474, %r298, %r401;
	mul.wide.s32 	%rd106, %r474, 2;
	add.s64 	%rd107, %rd1, %rd106;
	ld.global.nc.u16 	%rs71, [%rd107];
	cvt.s32.s16 	%r475, %rs71;
	mul.wide.s32 	%rd108, %r473, 2;
	add.s64 	%rd109, %rd1, %rd108;
	ld.global.nc.u16 	%rs72, [%rd109];
	cvt.s32.s16 	%r476, %rs72;
	setp.lt.s16 	%p13, %rs45, %rs47;
	setp.lt.s16 	%p14, %rs46, %rs48;
	sub.s16 	%rs73, %rs47, %rs45;
	sub.s16 	%rs74, %rs48, %rs46;
	sub.s16 	%rs75, %rs45, %rs47;
	sub.s16 	%rs76, %rs46, %rs48;
	selp.b16 	%rs77, %rs74, %rs76, %p14;
	selp.b16 	%rs78, %rs73, %rs75, %p13;
	setp.lt.s16 	%p15, %rs13, %rs49;
	setp.lt.s16 	%p16, %rs14, %rs50;
	sub.s16 	%rs79, %rs49, %rs13;
	sub.s16 	%rs80, %rs50, %rs14;
	sub.s16 	%rs81, %rs13, %rs49;
	sub.s16 	%rs82, %rs14, %rs50;
	selp.b16 	%rs83, %rs80, %rs82, %p16;
	selp.b16 	%rs84, %rs79, %rs81, %p15;
	setp.lt.u16 	%p17, %rs78, %rs84;
	setp.lt.u16 	%p18, %rs77, %rs83;
	cvt.s32.s16 	%r477, %rs46;
	cvt.s32.s16 	%r478, %rs45;
	cvt.s32.s16 	%r479, %rs48;
	cvt.s32.s16 	%r480, %rs47;
	add.s32 	%r481, %r480, %r478;
	add.s32 	%r482, %r479, %r477;
	cvt.s32.s16 	%r483, %rs50;
	cvt.s32.s16 	%r484, %rs49;
	add.s32 	%r485, %r484, %r434;
	add.s32 	%r486, %r483, %r433;
	selp.b32 	%r487, %r482, %r486, %p18;
	selp.b32 	%r488, %r481, %r485, %p17;
	setp.lt.s16 	%p19, %rs27, %rs59;
	setp.lt.s16 	%p20, %rs28, %rs60;
	sub.s16 	%rs85, %rs59, %rs27;
	sub.s16 	%rs86, %rs60, %rs28;
	sub.s16 	%rs87, %rs27, %rs59;
	sub.s16 	%rs88, %rs28, %rs60;
	selp.b16 	%rs89, %rs86, %rs88, %p20;
	selp.b16 	%rs90, %rs85, %rs87, %p19;
	setp.lt.s16 	%p21, %rs61, %rs63;
	setp.lt.s16 	%p22, %rs62, %rs64;
	sub.s16 	%rs91, %rs63, %rs61;
	sub.s16 	%rs92, %rs64, %rs62;
	sub.s16 	%rs93, %rs61, %rs63;
	sub.s16 	%rs94, %rs62, %rs64;
	selp.b16 	%rs95, %rs92, %rs94, %p22;
	selp.b16 	%rs96, %rs91, %rs93, %p21;
	setp.lt.u16 	%p23, %rs90, %rs96;
	setp.lt.u16 	%p24, %rs89, %rs95;
	cvt.s32.s16 	%r489, %rs60;
	cvt.s32.s16 	%r490, %rs59;
	add.s32 	%r491, %r490, %r428;
	add.s32 	%r492, %r489, %r427;
	cvt.s32.s16 	%r493, %rs62;
	cvt.s32.s16 	%r494, %rs61;
	cvt.s32.s16 	%r495, %rs64;
	cvt.s32.s16 	%r496, %rs63;
	add.s32 	%r497, %r496, %r494;
	add.s32 	%r498, %r495, %r493;
	selp.b32 	%r499, %r492, %r498, %p24;
	selp.b32 	%r500, %r491, %r497, %p23;
	cvt.s32.s16 	%r501, %rs15;
	cvt.s32.s16 	%r502, %rs16;
	add.s32 	%r503, %r502, 1;
	add.s32 	%r504, %r501, 1;
	add.s32 	%r505, %r504, %r471;
	add.s32 	%r506, %r503, %r472;
	shr.u32 	%r507, %r506, 1;
	shr.u32 	%r508, %r505, 1;
	cvt.u16.u32 	%rs97, %r508;
	cvt.u16.u32 	%rs98, %r507;
	cvt.s32.s16 	%r509, %rs19;
	cvt.s32.s16 	%r510, %rs20;
	cvt.s32.s16 	%r511, %rs18;
	cvt.s32.s16 	%r512, %rs17;
	add.s32 	%r513, %r512, 1;
	add.s32 	%r514, %r511, 1;
	add.s32 	%r515, %r514, %r510;
	add.s32 	%r516, %r513, %r509;
	shr.u32 	%r517, %r516, 1;
	shr.u32 	%r518, %r515, 1;
	cvt.u16.u32 	%rs99, %r518;
	cvt.u16.u32 	%rs100, %r517;
	add.s16 	%rs101, %rs13, %rs100;
	add.s16 	%rs102, %rs14, %rs99;
	sub.s16 	%rs103, %rs102, %rs98;
	sub.s16 	%rs104, %rs101, %rs97;
	selp.b16 	%rs105, %rs104, %rs17, %p2;
	selp.b16 	%rs106, %rs103, %rs18, %p2;
	setp.lt.s16 	%p25, %rs17, %rs21;
	setp.lt.s16 	%p26, %rs18, %rs22;
	sub.s16 	%rs107, %rs21, %rs17;
	sub.s16 	%rs108, %rs22, %rs18;
	sub.s16 	%rs109, %rs17, %rs21;
	sub.s16 	%rs110, %rs18, %rs22;
	selp.b16 	%rs111, %rs108, %rs110, %p26;
	selp.b16 	%rs112, %rs107, %rs109, %p25;
	setp.lt.s16 	%p27, %rs19, %rs23;
	setp.lt.s16 	%p28, %rs20, %rs24;
	sub.s16 	%rs113, %rs23, %rs19;
	sub.s16 	%rs114, %rs24, %rs20;
	sub.s16 	%rs115, %rs19, %rs23;
	sub.s16 	%rs116, %rs20, %rs24;
	selp.b16 	%rs117, %rs114, %rs116, %p28;
	selp.b16 	%rs118, %rs113, %rs115, %p27;
	setp.lt.u16 	%p29, %rs112, %rs118;
	setp.lt.u16 	%p30, %rs111, %rs117;
	add.s32 	%r519, %r300, %r402;
	add.s32 	%r520, %r300, %r401;
	mul.wide.s32 	%rd110, %r520, 2;
	add.s64 	%rd111, %rd1, %rd110;
	ld.global.nc.u16 	%rs119, [%rd111];
	cvt.s32.s16 	%r521, %rs119;
	mul.wide.s32 	%rd112, %r519, 2;
	add.s64 	%rd113, %rd1, %rd112;
	ld.global.nc.u16 	%rs120, [%rd113];
	cvt.s32.s16 	%r522, %rs120;
	add.s32 	%r523, %r503, %r522;
	add.s32 	%r524, %r504, %r521;
	shr.u32 	%r525, %r524, 1;
	shr.u32 	%r526, %r523, 1;
	cvt.u16.u32 	%rs121, %r526;
	cvt.u16.u32 	%rs122, %r525;
	cvt.s32.s16 	%r527, %rs22;
	cvt.s32.s16 	%r528, %rs21;
	add.s32 	%r529, %r513, %r528;
	add.s32 	%r530, %r514, %r527;
	shr.u32 	%r531, %r530, 1;
	shr.u32 	%r532, %r529, 1;
	cvt.u16.u32 	%rs123, %r532;
	cvt.u16.u32 	%rs124, %r531;
	add.s16 	%rs125, %rs44, %rs124;
	add.s16 	%rs126, %rs43, %rs123;
	sub.s16 	%rs127, %rs126, %rs122;
	sub.s16 	%rs128, %rs125, %rs121;
	add.s32 	%r533, %r471, %r475;
	add.s32 	%r534, %r472, %r476;
	add.s32 	%r535, %r534, 1;
	add.s32 	%r536, %r533, 1;
	shr.u32 	%r537, %r536, 1;
	shr.u32 	%r538, %r535, 1;
	cvt.u16.u32 	%rs129, %r538;
	cvt.u16.u32 	%rs130, %r537;
	cvt.s32.s16 	%r539, %rs23;
	cvt.s32.s16 	%r540, %rs24;
	add.s32 	%r541, %r510, %r540;
	add.s32 	%r542, %r509, %r539;
	add.s32 	%r543, %r542, 1;
	add.s32 	%r544, %r541, 1;
	shr.u32 	%r545, %r544, 1;
	shr.u32 	%r546, %r543, 1;
	cvt.u16.u32 	%rs131, %r546;
	cvt.u16.u32 	%rs132, %r545;
	add.s16 	%rs133, %rs44, %rs132;
	add.s16 	%rs134, %rs43, %rs131;
	sub.s16 	%rs135, %rs134, %rs130;
	sub.s16 	%rs136, %rs133, %rs129;
	selp.b16 	%rs137, %rs128, %rs136, %p30;
	selp.b16 	%rs138, %rs127, %rs135, %p29;
	add.s32 	%r547, %r504, %r475;
	add.s32 	%r548, %r503, %r476;
	shr.u32 	%r549, %r548, 1;
	shr.u32 	%r550, %r547, 1;
	cvt.u16.u32 	%rs139, %r550;
	cvt.u16.u32 	%rs140, %r549;
	add.s32 	%r551, %r514, %r540;
	add.s32 	%r552, %r513, %r539;
	shr.u32 	%r553, %r552, 1;
	shr.u32 	%r554, %r551, 1;
	cvt.u16.u32 	%rs141, %r554;
	cvt.u16.u32 	%rs142, %r553;
	add.s16 	%rs143, %rs27, %rs142;
	add.s16 	%rs144, %rs28, %rs141;
	sub.s16 	%rs145, %rs144, %rs140;
	sub.s16 	%rs146, %rs143, %rs139;
	selp.b16 	%rs147, %rs138, %rs146, %p2;
	selp.b16 	%rs148, %rs137, %rs145, %p2;
	selp.b16 	%rs149, %rs106, %rs148, %p6;
	selp.b16 	%rs150, %rs105, %rs147, %p5;
	selp.b16 	%rs151, %rs14, %rs16, %p2;
	selp.b16 	%rs152, %rs13, %rs15, %p2;
	selp.b16 	%rs153, %rs44, %rs28, %p2;
	selp.b16 	%rs154, %rs43, %rs27, %p2;
	selp.b16 	%rs155, %rs152, %rs154, %p5;
	selp.b16 	%rs156, %rs151, %rs153, %p6;
	cvt.s32.s16 	%r555, %r441;
	cvt.s32.s16 	%r556, %r442;
	shl.b32 	%r557, %r488, 15;
	shl.b32 	%r558, %r487, 15;
	add.s32 	%r559, %r558, 32768;
	add.s32 	%r560, %r557, 32768;
	shr.s32 	%r561, %r560, 16;
	shr.s32 	%r562, %r559, 16;
	add.s32 	%r563, %r556, 1;
	add.s32 	%r564, %r555, 1;
	add.s32 	%r565, %r564, %r562;
	add.s32 	%r566, %r563, %r561;
	shr.u32 	%r567, %r566, 1;
	shr.u32 	%r568, %r565, 1;
	cvt.u16.u32 	%rs157, %r568;
	cvt.u16.u32 	%rs158, %r567;
	cvt.s32.s16 	%r569, %rs51;
	cvt.s32.s16 	%r570, %rs52;
	cvt.s32.s16 	%r571, %rs54;
	cvt.s32.s16 	%r572, %rs53;
	add.s32 	%r573, %r570, 1;
	add.s32 	%r574, %r569, 1;
	add.s32 	%r575, %r574, %r572;
	add.s32 	%r576, %r573, %r571;
	shr.u32 	%r577, %r576, 1;
	shr.u32 	%r578, %r575, 1;
	cvt.u16.u32 	%rs159, %r578;
	cvt.u16.u32 	%rs160, %r577;
	add.s16 	%rs161, %rs14, %rs160;
	add.s16 	%rs162, %rs13, %rs159;
	sub.s16 	%rs163, %rs162, %rs158;
	sub.s16 	%rs164, %rs161, %rs157;
	setp.lt.s16 	%p31, %rs52, %rs56;
	setp.lt.s16 	%p32, %rs51, %rs55;
	sub.s16 	%rs165, %rs56, %rs52;
	sub.s16 	%rs166, %rs55, %rs51;
	sub.s16 	%rs167, %rs52, %rs56;
	sub.s16 	%rs168, %rs51, %rs55;
	selp.b16 	%rs169, %rs166, %rs168, %p32;
	selp.b16 	%rs170, %rs165, %rs167, %p31;
	setp.lt.s16 	%p33, %rs58, %rs54;
	setp.lt.s16 	%p34, %rs57, %rs53;
	sub.s16 	%rs171, %rs54, %rs58;
	sub.s16 	%rs172, %rs53, %rs57;
	sub.s16 	%rs173, %rs58, %rs54;
	sub.s16 	%rs174, %rs57, %rs53;
	selp.b16 	%rs175, %rs172, %rs174, %p34;
	selp.b16 	%rs176, %rs171, %rs173, %p33;
	setp.lt.u16 	%p35, %rs170, %rs176;
	setp.lt.u16 	%p36, %rs169, %rs175;
	setp.lt.s16 	%p37, %rs48, %rs66;
	setp.lt.s16 	%p38, %rs47, %rs65;
	sub.s16 	%rs177, %rs66, %rs48;
	sub.s16 	%rs178, %rs65, %rs47;
	sub.s16 	%rs179, %rs48, %rs66;
	sub.s16 	%rs180, %rs47, %rs65;
	selp.b16 	%rs181, %rs178, %rs180, %p38;
	selp.b16 	%rs182, %rs177, %rs179, %p37;
	setp.lt.s16 	%p39, %rs64, %rs68;
	setp.lt.s16 	%p40, %rs63, %rs67;
	sub.s16 	%rs183, %rs68, %rs64;
	sub.s16 	%rs184, %rs67, %rs63;
	sub.s16 	%rs185, %rs64, %rs68;
	sub.s16 	%rs186, %rs63, %rs67;
	selp.b16 	%rs187, %rs184, %rs186, %p40;
	selp.b16 	%rs188, %rs183, %rs185, %p39;
	setp.lt.u16 	%p41, %rs182, %rs188;
	setp.lt.u16 	%p42, %rs181, %rs187;
	cvt.s32.s16 	%r579, %rs65;
	cvt.s32.s16 	%r580, %rs66;
	add.s32 	%r581, %r580, %r479;
	add.s32 	%r582, %r579, %r480;
	cvt.s32.s16 	%r583, %rs67;
	cvt.s32.s16 	%r584, %rs68;
	add.s32 	%r585, %r584, %r495;
	add.s32 	%r586, %r583, %r496;
	selp.b32 	%r587, %r582, %r586, %p42;
	selp.b32 	%r588, %r581, %r585, %p41;
	shl.b32 	%r589, %r588, 15;
	shl.b32 	%r590, %r587, 15;
	add.s32 	%r591, %r590, 32768;
	add.s32 	%r592, %r589, 32768;
	shr.s32 	%r593, %r592, 16;
	shr.s32 	%r594, %r591, 16;
	add.s32 	%r595, %r563, %r594;
	add.s32 	%r596, %r564, %r593;
	shr.u32 	%r597, %r596, 1;
	shr.u32 	%r598, %r595, 1;
	cvt.u16.u32 	%rs189, %r598;
	cvt.u16.u32 	%rs190, %r597;
	cvt.s32.s16 	%r599, %rs55;
	cvt.s32.s16 	%r600, %rs56;
	add.s32 	%r601, %r573, %r600;
	add.s32 	%r602, %r574, %r599;
	shr.u32 	%r603, %r602, 1;
	shr.u32 	%r604, %r601, 1;
	cvt.u16.u32 	%rs191, %r604;
	cvt.u16.u32 	%rs192, %r603;
	add.s16 	%rs193, %rs15, %rs192;
	add.s16 	%rs194, %rs16, %rs191;
	sub.s16 	%rs195, %rs194, %rs190;
	sub.s16 	%rs196, %rs193, %rs189;
	shl.b32 	%r605, %r500, 15;
	shl.b32 	%r606, %r499, 15;
	add.s32 	%r607, %r606, 32768;
	add.s32 	%r608, %r605, 32768;
	shr.s32 	%r609, %r608, 16;
	shr.s32 	%r610, %r607, 16;
	add.s32 	%r611, %r562, %r610;
	add.s32 	%r612, %r561, %r609;
	add.s32 	%r613, %r612, 1;
	add.s32 	%r614, %r611, 1;
	shr.u32 	%r615, %r614, 1;
	shr.u32 	%r616, %r613, 1;
	cvt.u16.u32 	%rs197, %r616;
	cvt.u16.u32 	%rs198, %r615;
	cvt.s32.s16 	%r617, %rs58;
	cvt.s32.s16 	%r618, %rs57;
	add.s32 	%r619, %r572, %r618;
	add.s32 	%r620, %r571, %r617;
	add.s32 	%r621, %r620, 1;
	add.s32 	%r622, %r619, 1;
	shr.u32 	%r623, %r622, 1;
	shr.u32 	%r624, %r621, 1;
	cvt.u16.u32 	%rs199, %r624;
	cvt.u16.u32 	%rs200, %r623;
	add.s16 	%rs201, %rs15, %rs200;
	add.s16 	%rs202, %rs16, %rs199;
	sub.s16 	%rs203, %rs202, %rs198;
	sub.s16 	%rs204, %rs201, %rs197;
	selp.b16 	%rs205, %rs196, %rs204, %p36;
	selp.b16 	%rs206, %rs195, %rs203, %p35;
	selp.b16 	%rs207, %rs164, %rs206, %p2;
	selp.b16 	%rs208, %rs163, %rs205, %p2;
	add.s32 	%r625, %r564, %r610;
	add.s32 	%r626, %r563, %r609;
	shr.u32 	%r627, %r626, 1;
	shr.u32 	%r628, %r625, 1;
	cvt.u16.u32 	%rs209, %r628;
	cvt.u16.u32 	%rs210, %r627;
	add.s32 	%r629, %r574, %r618;
	add.s32 	%r630, %r573, %r617;
	shr.u32 	%r631, %r630, 1;
	shr.u32 	%r632, %r629, 1;
	cvt.u16.u32 	%rs211, %r632;
	cvt.u16.u32 	%rs212, %r631;
	add.s16 	%rs213, %rs28, %rs212;
	add.s16 	%rs214, %rs27, %rs211;
	sub.s16 	%rs215, %rs214, %rs210;
	sub.s16 	%rs216, %rs213, %rs209;
	selp.b16 	%rs217, %rs52, %rs216, %p2;
	selp.b16 	%rs218, %rs51, %rs215, %p2;
	selp.b16 	%rs219, %rs208, %rs218, %p5;
	selp.b16 	%rs220, %rs207, %rs217, %p6;
	cvt.s32.s16 	%r633, %rs220;
	cvt.s32.s16 	%r634, %rs219;
	cvt.s32.s16 	%r635, %rs156;
	cvt.s32.s16 	%r636, %rs155;
	cvt.s32.s16 	%r637, %rs150;
	cvt.s32.s16 	%r638, %rs149;
	mad.lo.s32 	%r639, %r23, %r636, %r27;
	mad.lo.s32 	%r640, %r23, %r635, %r27;
	mad.lo.s32 	%r641, %r25, %r638, %r640;
	mad.lo.s32 	%r642, %r25, %r637, %r639;
	mad.lo.s32 	%r643, %r21, %r634, %r642;
	mad.lo.s32 	%r644, %r21, %r633, %r641;
	mad.lo.s32 	%r645, %r31, %r635, %r35;
	mad.lo.s32 	%r646, %r31, %r636, %r35;
	mad.lo.s32 	%r647, %r33, %r637, %r646;
	mad.lo.s32 	%r648, %r33, %r638, %r645;
	mad.lo.s32 	%r649, %r29, %r633, %r648;
	mad.lo.s32 	%r650, %r29, %r634, %r647;
	mul.lo.s32 	%r651, %r37, %r634;
	mul.lo.s32 	%r652, %r37, %r633;
	mad.lo.s32 	%r653, %r39, %r635, %r652;
	mad.lo.s32 	%r654, %r39, %r636, %r651;
	add.s32 	%r655, %r654, %r43;
	add.s32 	%r656, %r653, %r43;
	mad.lo.s32 	%r657, %r41, %r638, %r656;
	mad.lo.s32 	%r658, %r41, %r637, %r655;
	selp.b32 	%r659, %r650, %r658, %p4;
	selp.b32 	%r660, %r649, %r657, %p4;
	selp.b32 	%r661, %r644, %r660, %p3;
	selp.b32 	%r662, %r643, %r659, %p3;
	shr.u32 	%r663, %r662, 8;
	shr.u32 	%r664, %r661, 8;
	cvt.u16.u32 	%rs221, %r664;
	cvt.u16.u32 	%rs222, %r663;
	add.s32 	%r665, %r1294, %r1296;
	mul.wide.s32 	%rd114, %r665, 2;
	add.s64 	%rd115, %rd4, %rd114;
	st.global.v2.u16 	[%rd115], {%rs222, %rs221};
	add.s32 	%r1296, %r1296, 2;
	setp.ne.s32 	%p43, %r1296, 16;
	@%p43 bra 	LBB7_17;
// %bb.18:                              // %"end for f27.s0._::y._::yi._::yii._::yii22"
                                        //   in Loop: Header=BB7_16 Depth=2
	add.s32 	%r1295, %r1295, 1;
	add.s32 	%r1294, %r1294, %r346;
	setp.eq.s32 	%p44, %r1295, 8;
	@%p44 bra 	LBB7_19;
	bra.uni 	LBB7_16;
LBB7_19:                                // %"end for f27.s0._::x._::xi._::xii19"
                                        //   in Loop: Header=BB7_15 Depth=1
	add.s32 	%r1293, %r1293, 1;
	add.s32 	%r1292, %r1292, %r331;
	setp.eq.s32 	%p45, %r1293, 3;
	@%p45 bra 	LBB7_20;
	bra.uni 	LBB7_15;
LBB7_8:                                 // %false_bb2
	shl.b32 	%r668, %r2, 3;
	shl.b32 	%r89, %r2, 2;
	sub.s32 	%r90, %r89, %r338;
	shl.b32 	%r669, %r316, 1;
	sub.s32 	%r91, %r669, %r318;
	sub.s32 	%r92, %r311, %r332;
	mov.u32 	%r670, 985;
	sub.s32 	%r93, %r670, %r318;
	mov.u32 	%r671, 983;
	sub.s32 	%r94, %r671, %r318;
	mov.u32 	%r672, 247;
	sub.s32 	%r95, %r672, %r332;
	mov.u32 	%r673, 246;
	sub.s32 	%r96, %r673, %r332;
	add.s32 	%r97, %r316, 985;
	add.s32 	%r98, %r311, 248;
	add.s32 	%r674, %r7, 1;
	add.s32 	%r675, %r7, 2;
	and.b32  	%r100, %r675, 1;
	and.b32  	%r99, %r674, 1;
	ld.global.nc.u16 	%rs223, [%rd5+4];
	cvt.s32.s16 	%r105, %rs223;
	ld.global.nc.u16 	%rs224, [%rd5+2];
	cvt.s32.s16 	%r107, %rs224;
	ld.global.nc.u16 	%rs225, [%rd5];
	cvt.s32.s16 	%r109, %rs225;
	ld.global.nc.u16 	%rs226, [%rd5+6];
	cvt.s32.s16 	%r111, %rs226;
	ld.global.nc.u16 	%rs227, [%rd5+12];
	cvt.s32.s16 	%r113, %rs227;
	ld.global.nc.u16 	%rs228, [%rd5+10];
	cvt.s32.s16 	%r115, %rs228;
	ld.global.nc.u16 	%rs229, [%rd5+8];
	cvt.s32.s16 	%r117, %rs229;
	ld.global.nc.u16 	%rs230, [%rd5+14];
	cvt.s32.s16 	%r119, %rs230;
	ld.global.nc.u16 	%rs231, [%rd5+20];
	cvt.s32.s16 	%r121, %rs231;
	ld.global.nc.u16 	%rs232, [%rd5+18];
	cvt.s32.s16 	%r123, %rs232;
	ld.global.nc.u16 	%rs233, [%rd5+16];
	cvt.s32.s16 	%r125, %rs233;
	ld.global.nc.u16 	%rs234, [%rd5+22];
	cvt.s32.s16 	%r127, %rs234;
	add.s32 	%r676, %r668, -1;
	sub.s32 	%r677, %r676, %r330;
	not.b32 	%r678, %r327;
	mov.u32 	%r679, -432;
	sub.s32 	%r680, %r679, %r4;
	max.s32 	%r681, %r678, %r680;
	sub.s32 	%r682, %r677, %r681;
	mad.lo.s32 	%r683, %r346, %r682, 231;
	sub.s32 	%r684, %r683, %r347;
	not.b32 	%r685, %r337;
	mov.u32 	%r686, -247;
	sub.s32 	%r687, %r686, %r6;
	max.s32 	%r688, %r685, %r687;
	sub.s32 	%r1287, %r684, %r688;
	mov.u32 	%r689, -16;
	sub.s32 	%r130, %r689, %r688;
	mov.u32 	%r667, 0;
	setp.eq.s32 	%p50, %r100, 0;
	setp.eq.s32 	%p51, %r99, 0;
	mov.u32 	%r1288, %r667;
LBB7_9:                                 // %"for f27.s0._::c5"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB7_10 Depth 2
                                        //       Child Loop BB7_11 Depth 3
	mov.u32 	%r1289, %r1287;
	mov.u32 	%r1290, %r667;
LBB7_10:                                // %"for f27.s0._::x._::xi._::xii8"
                                        //   Parent Loop BB7_9 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB7_11 Depth 3
	add.s32 	%r692, %r1290, %r5;
	and.b32  	%r194, %r692, 1;
	shr.s32 	%r693, %r692, 1;
	add.s32 	%r694, %r693, %r90;
	add.s32 	%r195, %r694, 216;
	add.s32 	%r695, %r693, %r89;
	add.s32 	%r696, %r695, %r333;
	mul.lo.s32 	%r697, %r696, %r343;
	add.s32 	%r197, %r697, %r342;
	add.s32 	%r698, %r695, %r341;
	mul.lo.s32 	%r699, %r698, %r340;
	add.s32 	%r199, %r699, %r328;
	add.s32 	%r201, %r699, %r339;
	add.s32 	%r203, %r699, %r309;
	add.s32 	%r205, %r699, %r310;
	add.s32 	%r700, %r695, %r334;
	mul.lo.s32 	%r701, %r700, %r98;
	add.s32 	%r207, %r701, %r312;
	add.s32 	%r209, %r95, %r701;
	add.s32 	%r211, %r694, %r313;
	add.s32 	%r213, %r701, %r314;
	add.s32 	%r215, %r96, %r701;
	add.s32 	%r217, %r694, %r315;
	shl.b32 	%r702, %r695, 1;
	sub.s32 	%r703, %r702, %r329;
	mul.lo.s32 	%r704, %r703, %r97;
	add.s32 	%r219, %r93, %r704;
	add.s32 	%r221, %r94, %r704;
	add.s32 	%r705, %r704, %r91;
	add.s32 	%r223, %r705, 2953;
	add.s32 	%r225, %r705, 2955;
	add.s32 	%r706, %r701, %r92;
	add.s32 	%r227, %r706, 495;
	add.s32 	%r229, %r694, %r317;
	add.s32 	%r231, %r694, 217;
	add.s32 	%r233, %r706, 494;
	add.s32 	%r235, %r694, %r308;
	add.s32 	%r237, %r697, %r319;
	add.s32 	%r239, %r697, %r320;
	add.s32 	%r241, %r697, %r321;
	mov.u32 	%r1291, %r667;
LBB7_11:                                // %"for f27.s0._::y._::yi._::yii._::yii11"
                                        //   Parent Loop BB7_9 Depth=1
                                        //     Parent Loop BB7_10 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	setp.eq.s32 	%p47, %r194, 0;
	setp.eq.s32 	%p48, %r1288, 0;
	setp.eq.s32 	%p49, %r1288, 1;
	add.s32 	%r707, %r130, %r1291;
	add.s32 	%r708, %r707, 1;
	shr.s32 	%r709, %r707, 1;
	shr.s32 	%r710, %r708, 1;
	add.s32 	%r711, %r710, %r345;
	add.s32 	%r712, %r709, %r345;
	mul.lo.s32 	%r713, %r712, %r344;
	mul.lo.s32 	%r714, %r711, %r344;
	add.s32 	%r715, %r714, %r195;
	add.s32 	%r716, %r713, %r195;
	mul.wide.s32 	%rd116, %r716, 2;
	add.s64 	%rd117, %rd3, %rd116;
	ld.global.nc.u16 	%rs235, [%rd117];
	mul.wide.s32 	%rd118, %r715, 2;
	add.s64 	%rd119, %rd3, %rd118;
	ld.global.nc.u16 	%rs236, [%rd119];
	add.s32 	%r717, %r710, %r197;
	add.s32 	%r718, %r709, %r197;
	mul.wide.s32 	%rd120, %r718, 2;
	add.s64 	%rd121, %rd1, %rd120;
	ld.global.nc.u16 	%rs237, [%rd121];
	mul.wide.s32 	%rd122, %r717, 2;
	add.s64 	%rd123, %rd1, %rd122;
	ld.global.nc.u16 	%rs238, [%rd123];
	add.s32 	%r719, %r710, %r199;
	add.s32 	%r720, %r709, %r199;
	mul.wide.s32 	%rd124, %r720, 2;
	add.s64 	%rd125, %rd6, %rd124;
	ld.global.nc.u16 	%rs239, [%rd125];
	mul.wide.s32 	%rd126, %r719, 2;
	add.s64 	%rd127, %rd6, %rd126;
	ld.global.nc.u16 	%rs240, [%rd127];
	add.s32 	%r721, %r710, %r201;
	add.s32 	%r722, %r709, %r201;
	mul.wide.s32 	%rd128, %r722, 2;
	add.s64 	%rd129, %rd6, %rd128;
	ld.global.nc.u16 	%rs241, [%rd129];
	mul.wide.s32 	%rd130, %r721, 2;
	add.s64 	%rd131, %rd6, %rd130;
	ld.global.nc.u16 	%rs242, [%rd131];
	add.s32 	%r723, %r710, %r203;
	add.s32 	%r724, %r709, %r203;
	mul.wide.s32 	%rd132, %r724, 2;
	add.s64 	%rd133, %rd6, %rd132;
	ld.global.nc.u16 	%rs243, [%rd133];
	mul.wide.s32 	%rd134, %r723, 2;
	add.s64 	%rd135, %rd6, %rd134;
	ld.global.nc.u16 	%rs244, [%rd135];
	add.s32 	%r725, %r710, %r205;
	add.s32 	%r726, %r709, %r205;
	mul.wide.s32 	%rd136, %r726, 2;
	add.s64 	%rd137, %rd6, %rd136;
	ld.global.nc.u16 	%rs245, [%rd137];
	mul.wide.s32 	%rd138, %r725, 2;
	add.s64 	%rd139, %rd6, %rd138;
	ld.global.nc.u16 	%rs246, [%rd139];
	add.s32 	%r727, %r710, %r207;
	add.s32 	%r728, %r709, %r207;
	mul.wide.s32 	%rd140, %r728, 2;
	add.s64 	%rd141, %rd2, %rd140;
	ld.global.nc.u16 	%rs247, [%rd141];
	mul.wide.s32 	%rd142, %r727, 2;
	add.s64 	%rd143, %rd2, %rd142;
	ld.global.nc.u16 	%rs248, [%rd143];
	add.s32 	%r729, %r710, %r209;
	add.s32 	%r730, %r709, %r209;
	mul.wide.s32 	%rd144, %r730, 2;
	add.s64 	%rd145, %rd2, %rd144;
	ld.global.nc.u16 	%rs249, [%rd145];
	mul.wide.s32 	%rd146, %r729, 2;
	add.s64 	%rd147, %rd2, %rd146;
	ld.global.nc.u16 	%rs250, [%rd147];
	add.s32 	%r731, %r714, %r211;
	add.s32 	%r732, %r713, %r211;
	mul.wide.s32 	%rd148, %r732, 2;
	add.s64 	%rd149, %rd3, %rd148;
	ld.global.nc.u16 	%rs251, [%rd149];
	mul.wide.s32 	%rd150, %r731, 2;
	add.s64 	%rd151, %rd3, %rd150;
	ld.global.nc.u16 	%rs252, [%rd151];
	setp.lt.s16 	%p52, %rs248, %rs250;
	setp.lt.s16 	%p53, %rs247, %rs249;
	sub.s16 	%rs253, %rs250, %rs248;
	sub.s16 	%rs254, %rs249, %rs247;
	sub.s16 	%rs255, %rs248, %rs250;
	sub.s16 	%rs256, %rs247, %rs249;
	selp.b16 	%rs257, %rs254, %rs256, %p53;
	selp.b16 	%rs258, %rs253, %rs255, %p52;
	setp.lt.s16 	%p54, %rs252, %rs236;
	setp.lt.s16 	%p55, %rs251, %rs235;
	sub.s16 	%rs259, %rs236, %rs252;
	sub.s16 	%rs260, %rs235, %rs251;
	sub.s16 	%rs261, %rs252, %rs236;
	sub.s16 	%rs262, %rs251, %rs235;
	selp.b16 	%rs263, %rs260, %rs262, %p55;
	selp.b16 	%rs264, %rs259, %rs261, %p54;
	setp.lt.u16 	%p56, %rs258, %rs264;
	setp.lt.u16 	%p57, %rs257, %rs263;
	cvt.s32.s16 	%r733, %rs247;
	cvt.s32.s16 	%r734, %rs248;
	cvt.s32.s16 	%r735, %rs249;
	cvt.s32.s16 	%r736, %rs250;
	add.s32 	%r737, %r736, %r734;
	add.s32 	%r738, %r735, %r733;
	cvt.s32.s16 	%r739, %rs251;
	cvt.s32.s16 	%r740, %rs252;
	cvt.s32.s16 	%r741, %rs235;
	cvt.s32.s16 	%r742, %rs236;
	add.s32 	%r743, %r740, %r742;
	add.s32 	%r744, %r739, %r741;
	selp.b32 	%r745, %r738, %r744, %p57;
	selp.b32 	%r746, %r737, %r743, %p56;
	add.s32 	%r747, %r746, 1;
	add.s32 	%r748, %r745, 1;
	shr.u32 	%r749, %r748, 1;
	shr.u32 	%r750, %r747, 1;
	cvt.u16.u32 	%rs265, %r750;
	cvt.u16.u32 	%rs266, %r749;
	add.s32 	%r751, %r710, %r213;
	add.s32 	%r752, %r709, %r213;
	mul.wide.s32 	%rd152, %r752, 2;
	add.s64 	%rd153, %rd2, %rd152;
	ld.global.nc.u16 	%rs267, [%rd153];
	mul.wide.s32 	%rd154, %r751, 2;
	add.s64 	%rd155, %rd2, %rd154;
	ld.global.nc.u16 	%rs268, [%rd155];
	add.s32 	%r753, %r710, %r215;
	add.s32 	%r754, %r709, %r215;
	mul.wide.s32 	%rd156, %r754, 2;
	add.s64 	%rd157, %rd2, %rd156;
	ld.global.nc.u16 	%rs269, [%rd157];
	mul.wide.s32 	%rd158, %r753, 2;
	add.s64 	%rd159, %rd2, %rd158;
	ld.global.nc.u16 	%rs270, [%rd159];
	add.s32 	%r755, %r714, %r217;
	add.s32 	%r756, %r713, %r217;
	mul.wide.s32 	%rd160, %r756, 2;
	add.s64 	%rd161, %rd3, %rd160;
	ld.global.nc.u16 	%rs271, [%rd161];
	mul.wide.s32 	%rd162, %r755, 2;
	add.s64 	%rd163, %rd3, %rd162;
	ld.global.nc.u16 	%rs272, [%rd163];
	and.b32  	%r757, %r707, -2;
	and.b32  	%r758, %r708, -2;
	add.s32 	%r759, %r758, %r219;
	add.s32 	%r760, %r757, %r219;
	mul.wide.s32 	%rd164, %r760, 2;
	add.s64 	%rd165, %rd7, %rd164;
	ld.global.nc.u16 	%rs273, [%rd165];
	mul.wide.s32 	%rd166, %r759, 2;
	add.s64 	%rd167, %rd7, %rd166;
	ld.global.nc.u16 	%rs274, [%rd167];
	add.s32 	%r761, %r758, %r221;
	add.s32 	%r762, %r757, %r221;
	mul.wide.s32 	%rd168, %r762, 2;
	add.s64 	%rd169, %rd7, %rd168;
	ld.global.nc.u16 	%rs275, [%rd169];
	mul.wide.s32 	%rd170, %r761, 2;
	add.s64 	%rd171, %rd7, %rd170;
	ld.global.nc.u16 	%rs276, [%rd171];
	add.s32 	%r763, %r758, %r223;
	add.s32 	%r764, %r757, %r223;
	mul.wide.s32 	%rd172, %r764, 2;
	add.s64 	%rd173, %rd7, %rd172;
	ld.global.nc.u16 	%rs277, [%rd173];
	mul.wide.s32 	%rd174, %r763, 2;
	add.s64 	%rd175, %rd7, %rd174;
	ld.global.nc.u16 	%rs278, [%rd175];
	add.s32 	%r765, %r758, %r225;
	add.s32 	%r766, %r757, %r225;
	mul.wide.s32 	%rd176, %r766, 2;
	add.s64 	%rd177, %rd7, %rd176;
	ld.global.nc.u16 	%rs279, [%rd177];
	mul.wide.s32 	%rd178, %r765, 2;
	add.s64 	%rd179, %rd7, %rd178;
	ld.global.nc.u16 	%rs280, [%rd179];
	add.s32 	%r767, %r710, %r227;
	add.s32 	%r768, %r709, %r227;
	mul.wide.s32 	%rd180, %r768, 2;
	add.s64 	%rd181, %rd2, %rd180;
	ld.global.nc.u16 	%rs281, [%rd181];
	mul.wide.s32 	%rd182, %r767, 2;
	add.s64 	%rd183, %rd2, %rd182;
	ld.global.nc.u16 	%rs282, [%rd183];
	add.s32 	%r769, %r714, %r229;
	add.s32 	%r770, %r713, %r229;
	mul.wide.s32 	%rd184, %r770, 2;
	add.s64 	%rd185, %rd3, %rd184;
	ld.global.nc.u16 	%rs283, [%rd185];
	mul.wide.s32 	%rd186, %r769, 2;
	add.s64 	%rd187, %rd3, %rd186;
	ld.global.nc.u16 	%rs284, [%rd187];
	add.s32 	%r771, %r714, %r231;
	add.s32 	%r772, %r713, %r231;
	mul.wide.s32 	%rd188, %r772, 2;
	add.s64 	%rd189, %rd3, %rd188;
	ld.global.nc.u16 	%rs285, [%rd189];
	mul.wide.s32 	%rd190, %r771, 2;
	add.s64 	%rd191, %rd3, %rd190;
	ld.global.nc.u16 	%rs286, [%rd191];
	add.s32 	%r773, %r710, %r233;
	add.s32 	%r774, %r709, %r233;
	mul.wide.s32 	%rd192, %r774, 2;
	add.s64 	%rd193, %rd2, %rd192;
	ld.global.nc.u16 	%rs287, [%rd193];
	mul.wide.s32 	%rd194, %r773, 2;
	add.s64 	%rd195, %rd2, %rd194;
	ld.global.nc.u16 	%rs288, [%rd195];
	add.s32 	%r775, %r714, %r235;
	add.s32 	%r776, %r713, %r235;
	mul.wide.s32 	%rd196, %r776, 2;
	add.s64 	%rd197, %rd3, %rd196;
	ld.global.nc.u16 	%rs289, [%rd197];
	mul.wide.s32 	%rd198, %r775, 2;
	add.s64 	%rd199, %rd3, %rd198;
	ld.global.nc.u16 	%rs290, [%rd199];
	add.s32 	%r777, %r710, %r237;
	add.s32 	%r778, %r709, %r237;
	mul.wide.s32 	%rd200, %r778, 2;
	add.s64 	%rd201, %rd1, %rd200;
	ld.global.nc.u16 	%rs291, [%rd201];
	cvt.s32.s16 	%r779, %rs291;
	mul.wide.s32 	%rd202, %r777, 2;
	add.s64 	%rd203, %rd1, %rd202;
	ld.global.nc.u16 	%rs292, [%rd203];
	cvt.s32.s16 	%r780, %rs292;
	add.s32 	%r781, %r710, %r239;
	add.s32 	%r782, %r709, %r239;
	mul.wide.s32 	%rd204, %r782, 2;
	add.s64 	%rd205, %rd1, %rd204;
	ld.global.nc.u16 	%rs293, [%rd205];
	cvt.s32.s16 	%r783, %rs293;
	mul.wide.s32 	%rd206, %r781, 2;
	add.s64 	%rd207, %rd1, %rd206;
	ld.global.nc.u16 	%rs294, [%rd207];
	cvt.s32.s16 	%r784, %rs294;
	setp.lt.s16 	%p58, %rs268, %rs270;
	setp.lt.s16 	%p59, %rs267, %rs269;
	sub.s16 	%rs295, %rs270, %rs268;
	sub.s16 	%rs296, %rs269, %rs267;
	sub.s16 	%rs297, %rs268, %rs270;
	sub.s16 	%rs298, %rs267, %rs269;
	selp.b16 	%rs299, %rs296, %rs298, %p59;
	selp.b16 	%rs300, %rs295, %rs297, %p58;
	setp.lt.s16 	%p60, %rs236, %rs272;
	setp.lt.s16 	%p61, %rs235, %rs271;
	sub.s16 	%rs301, %rs272, %rs236;
	sub.s16 	%rs302, %rs271, %rs235;
	sub.s16 	%rs303, %rs236, %rs272;
	sub.s16 	%rs304, %rs235, %rs271;
	selp.b16 	%rs305, %rs302, %rs304, %p61;
	selp.b16 	%rs306, %rs301, %rs303, %p60;
	setp.lt.u16 	%p62, %rs300, %rs306;
	setp.lt.u16 	%p63, %rs299, %rs305;
	cvt.s32.s16 	%r785, %rs267;
	cvt.s32.s16 	%r786, %rs268;
	cvt.s32.s16 	%r787, %rs269;
	cvt.s32.s16 	%r788, %rs270;
	add.s32 	%r789, %r788, %r786;
	add.s32 	%r790, %r787, %r785;
	cvt.s32.s16 	%r791, %rs271;
	cvt.s32.s16 	%r792, %rs272;
	add.s32 	%r793, %r792, %r742;
	add.s32 	%r794, %r791, %r741;
	selp.b32 	%r795, %r790, %r794, %p63;
	selp.b32 	%r796, %r789, %r793, %p62;
	setp.lt.s16 	%p64, %rs250, %rs282;
	setp.lt.s16 	%p65, %rs249, %rs281;
	sub.s16 	%rs307, %rs282, %rs250;
	sub.s16 	%rs308, %rs281, %rs249;
	sub.s16 	%rs309, %rs250, %rs282;
	sub.s16 	%rs310, %rs249, %rs281;
	selp.b16 	%rs311, %rs308, %rs310, %p65;
	selp.b16 	%rs312, %rs307, %rs309, %p64;
	setp.lt.s16 	%p66, %rs284, %rs286;
	setp.lt.s16 	%p67, %rs283, %rs285;
	sub.s16 	%rs313, %rs286, %rs284;
	sub.s16 	%rs314, %rs285, %rs283;
	sub.s16 	%rs315, %rs284, %rs286;
	sub.s16 	%rs316, %rs283, %rs285;
	selp.b16 	%rs317, %rs314, %rs316, %p67;
	selp.b16 	%rs318, %rs313, %rs315, %p66;
	setp.lt.u16 	%p68, %rs312, %rs318;
	setp.lt.u16 	%p69, %rs311, %rs317;
	cvt.s32.s16 	%r797, %rs281;
	cvt.s32.s16 	%r798, %rs282;
	add.s32 	%r799, %r798, %r736;
	add.s32 	%r800, %r797, %r735;
	cvt.s32.s16 	%r801, %rs283;
	cvt.s32.s16 	%r802, %rs284;
	cvt.s32.s16 	%r803, %rs285;
	cvt.s32.s16 	%r804, %rs286;
	add.s32 	%r805, %r804, %r802;
	add.s32 	%r806, %r803, %r801;
	selp.b32 	%r807, %r800, %r806, %p69;
	selp.b32 	%r808, %r799, %r805, %p68;
	cvt.s32.s16 	%r809, %rs238;
	cvt.s32.s16 	%r810, %rs237;
	add.s32 	%r811, %r810, 1;
	add.s32 	%r812, %r809, 1;
	add.s32 	%r813, %r812, %r780;
	add.s32 	%r814, %r811, %r779;
	shr.u32 	%r815, %r814, 1;
	shr.u32 	%r816, %r813, 1;
	cvt.u16.u32 	%rs319, %r816;
	cvt.u16.u32 	%rs320, %r815;
	cvt.s32.s16 	%r817, %rs242;
	cvt.s32.s16 	%r818, %rs241;
	cvt.s32.s16 	%r819, %rs239;
	cvt.s32.s16 	%r820, %rs240;
	add.s32 	%r821, %r820, 1;
	add.s32 	%r822, %r819, 1;
	add.s32 	%r823, %r822, %r818;
	add.s32 	%r824, %r821, %r817;
	shr.u32 	%r825, %r824, 1;
	shr.u32 	%r826, %r823, 1;
	cvt.u16.u32 	%rs321, %r826;
	cvt.u16.u32 	%rs322, %r825;
	add.s16 	%rs323, %rs236, %rs322;
	add.s16 	%rs324, %rs235, %rs321;
	sub.s16 	%rs325, %rs324, %rs320;
	sub.s16 	%rs326, %rs323, %rs319;
	selp.b16 	%rs327, %rs326, %rs240, %p47;
	selp.b16 	%rs328, %rs325, %rs239, %p47;
	setp.lt.s16 	%p70, %rs240, %rs244;
	setp.lt.s16 	%p71, %rs239, %rs243;
	sub.s16 	%rs329, %rs244, %rs240;
	sub.s16 	%rs330, %rs243, %rs239;
	sub.s16 	%rs331, %rs240, %rs244;
	sub.s16 	%rs332, %rs239, %rs243;
	selp.b16 	%rs333, %rs330, %rs332, %p71;
	selp.b16 	%rs334, %rs329, %rs331, %p70;
	setp.lt.s16 	%p72, %rs242, %rs246;
	setp.lt.s16 	%p73, %rs241, %rs245;
	sub.s16 	%rs335, %rs246, %rs242;
	sub.s16 	%rs336, %rs245, %rs241;
	sub.s16 	%rs337, %rs242, %rs246;
	sub.s16 	%rs338, %rs241, %rs245;
	selp.b16 	%rs339, %rs336, %rs338, %p73;
	selp.b16 	%rs340, %rs335, %rs337, %p72;
	setp.lt.u16 	%p74, %rs334, %rs340;
	setp.lt.u16 	%p75, %rs333, %rs339;
	add.s32 	%r827, %r710, %r241;
	add.s32 	%r828, %r709, %r241;
	mul.wide.s32 	%rd208, %r828, 2;
	add.s64 	%rd209, %rd1, %rd208;
	ld.global.nc.u16 	%rs341, [%rd209];
	cvt.s32.s16 	%r829, %rs341;
	mul.wide.s32 	%rd210, %r827, 2;
	add.s64 	%rd211, %rd1, %rd210;
	ld.global.nc.u16 	%rs342, [%rd211];
	cvt.s32.s16 	%r830, %rs342;
	add.s32 	%r831, %r811, %r829;
	add.s32 	%r832, %r812, %r830;
	shr.u32 	%r833, %r832, 1;
	shr.u32 	%r834, %r831, 1;
	cvt.u16.u32 	%rs343, %r834;
	cvt.u16.u32 	%rs344, %r833;
	cvt.s32.s16 	%r835, %rs243;
	cvt.s32.s16 	%r836, %rs244;
	add.s32 	%r837, %r821, %r836;
	add.s32 	%r838, %r822, %r835;
	shr.u32 	%r839, %r838, 1;
	shr.u32 	%r840, %r837, 1;
	cvt.u16.u32 	%rs345, %r840;
	cvt.u16.u32 	%rs346, %r839;
	add.s16 	%rs347, %rs266, %rs346;
	add.s16 	%rs348, %rs265, %rs345;
	sub.s16 	%rs349, %rs348, %rs344;
	sub.s16 	%rs350, %rs347, %rs343;
	add.s32 	%r841, %r780, %r784;
	add.s32 	%r842, %r779, %r783;
	add.s32 	%r843, %r842, 1;
	add.s32 	%r844, %r841, 1;
	shr.u32 	%r845, %r844, 1;
	shr.u32 	%r846, %r843, 1;
	cvt.u16.u32 	%rs351, %r846;
	cvt.u16.u32 	%rs352, %r845;
	cvt.s32.s16 	%r847, %rs246;
	cvt.s32.s16 	%r848, %rs245;
	add.s32 	%r849, %r818, %r848;
	add.s32 	%r850, %r817, %r847;
	add.s32 	%r851, %r850, 1;
	add.s32 	%r852, %r849, 1;
	shr.u32 	%r853, %r852, 1;
	shr.u32 	%r854, %r851, 1;
	cvt.u16.u32 	%rs353, %r854;
	cvt.u16.u32 	%rs354, %r853;
	add.s16 	%rs355, %rs266, %rs354;
	add.s16 	%rs356, %rs265, %rs353;
	sub.s16 	%rs357, %rs356, %rs352;
	sub.s16 	%rs358, %rs355, %rs351;
	selp.b16 	%rs359, %rs350, %rs358, %p75;
	selp.b16 	%rs360, %rs349, %rs357, %p74;
	add.s32 	%r855, %r812, %r784;
	add.s32 	%r856, %r811, %r783;
	shr.u32 	%r857, %r856, 1;
	shr.u32 	%r858, %r855, 1;
	cvt.u16.u32 	%rs361, %r858;
	cvt.u16.u32 	%rs362, %r857;
	add.s32 	%r859, %r822, %r848;
	add.s32 	%r860, %r821, %r847;
	shr.u32 	%r861, %r860, 1;
	shr.u32 	%r862, %r859, 1;
	cvt.u16.u32 	%rs363, %r862;
	cvt.u16.u32 	%rs364, %r861;
	add.s16 	%rs365, %rs250, %rs364;
	add.s16 	%rs366, %rs249, %rs363;
	sub.s16 	%rs367, %rs366, %rs362;
	sub.s16 	%rs368, %rs365, %rs361;
	selp.b16 	%rs369, %rs360, %rs368, %p47;
	selp.b16 	%rs370, %rs359, %rs367, %p47;
	selp.b16 	%rs371, %rs328, %rs370, %p51;
	selp.b16 	%rs372, %rs327, %rs369, %p50;
	selp.b16 	%rs373, %rs235, %rs237, %p47;
	selp.b16 	%rs374, %rs236, %rs238, %p47;
	selp.b16 	%rs375, %rs266, %rs249, %p47;
	selp.b16 	%rs376, %rs265, %rs250, %p47;
	selp.b16 	%rs377, %rs374, %rs376, %p50;
	selp.b16 	%rs378, %rs373, %rs375, %p51;
	cvt.s32.s16 	%r863, %r749;
	cvt.s32.s16 	%r864, %r750;
	shl.b32 	%r865, %r796, 15;
	shl.b32 	%r866, %r795, 15;
	add.s32 	%r867, %r866, 32768;
	add.s32 	%r868, %r865, 32768;
	shr.s32 	%r869, %r868, 16;
	shr.s32 	%r870, %r867, 16;
	add.s32 	%r871, %r864, 1;
	add.s32 	%r872, %r863, 1;
	add.s32 	%r873, %r872, %r870;
	add.s32 	%r874, %r871, %r869;
	shr.u32 	%r875, %r874, 1;
	shr.u32 	%r876, %r873, 1;
	cvt.u16.u32 	%rs379, %r876;
	cvt.u16.u32 	%rs380, %r875;
	cvt.s32.s16 	%r877, %rs274;
	cvt.s32.s16 	%r878, %rs273;
	cvt.s32.s16 	%r879, %rs275;
	cvt.s32.s16 	%r880, %rs276;
	add.s32 	%r881, %r878, 1;
	add.s32 	%r882, %r877, 1;
	add.s32 	%r883, %r882, %r880;
	add.s32 	%r884, %r881, %r879;
	shr.u32 	%r885, %r884, 1;
	shr.u32 	%r886, %r883, 1;
	cvt.u16.u32 	%rs381, %r886;
	cvt.u16.u32 	%rs382, %r885;
	add.s16 	%rs383, %rs235, %rs382;
	add.s16 	%rs384, %rs236, %rs381;
	sub.s16 	%rs385, %rs384, %rs380;
	sub.s16 	%rs386, %rs383, %rs379;
	setp.lt.s16 	%p76, %rs273, %rs277;
	setp.lt.s16 	%p77, %rs274, %rs278;
	sub.s16 	%rs387, %rs277, %rs273;
	sub.s16 	%rs388, %rs278, %rs274;
	sub.s16 	%rs389, %rs273, %rs277;
	sub.s16 	%rs390, %rs274, %rs278;
	selp.b16 	%rs391, %rs388, %rs390, %p77;
	selp.b16 	%rs392, %rs387, %rs389, %p76;
	setp.lt.s16 	%p78, %rs279, %rs275;
	setp.lt.s16 	%p79, %rs280, %rs276;
	sub.s16 	%rs393, %rs275, %rs279;
	sub.s16 	%rs394, %rs276, %rs280;
	sub.s16 	%rs395, %rs279, %rs275;
	sub.s16 	%rs396, %rs280, %rs276;
	selp.b16 	%rs397, %rs394, %rs396, %p79;
	selp.b16 	%rs398, %rs393, %rs395, %p78;
	setp.lt.u16 	%p80, %rs392, %rs398;
	setp.lt.u16 	%p81, %rs391, %rs397;
	setp.lt.s16 	%p82, %rs269, %rs287;
	setp.lt.s16 	%p83, %rs270, %rs288;
	sub.s16 	%rs399, %rs287, %rs269;
	sub.s16 	%rs400, %rs288, %rs270;
	sub.s16 	%rs401, %rs269, %rs287;
	sub.s16 	%rs402, %rs270, %rs288;
	selp.b16 	%rs403, %rs400, %rs402, %p83;
	selp.b16 	%rs404, %rs399, %rs401, %p82;
	setp.lt.s16 	%p84, %rs285, %rs289;
	setp.lt.s16 	%p85, %rs286, %rs290;
	sub.s16 	%rs405, %rs289, %rs285;
	sub.s16 	%rs406, %rs290, %rs286;
	sub.s16 	%rs407, %rs285, %rs289;
	sub.s16 	%rs408, %rs286, %rs290;
	selp.b16 	%rs409, %rs406, %rs408, %p85;
	selp.b16 	%rs410, %rs405, %rs407, %p84;
	setp.lt.u16 	%p86, %rs404, %rs410;
	setp.lt.u16 	%p87, %rs403, %rs409;
	cvt.s32.s16 	%r887, %rs288;
	cvt.s32.s16 	%r888, %rs287;
	add.s32 	%r889, %r888, %r787;
	add.s32 	%r890, %r887, %r788;
	cvt.s32.s16 	%r891, %rs290;
	cvt.s32.s16 	%r892, %rs289;
	add.s32 	%r893, %r892, %r803;
	add.s32 	%r894, %r891, %r804;
	selp.b32 	%r895, %r890, %r894, %p87;
	selp.b32 	%r896, %r889, %r893, %p86;
	shl.b32 	%r897, %r896, 15;
	shl.b32 	%r898, %r895, 15;
	add.s32 	%r899, %r898, 32768;
	add.s32 	%r900, %r897, 32768;
	shr.s32 	%r901, %r900, 16;
	shr.s32 	%r902, %r899, 16;
	add.s32 	%r903, %r871, %r902;
	add.s32 	%r904, %r872, %r901;
	shr.u32 	%r905, %r904, 1;
	shr.u32 	%r906, %r903, 1;
	cvt.u16.u32 	%rs411, %r906;
	cvt.u16.u32 	%rs412, %r905;
	cvt.s32.s16 	%r907, %rs278;
	cvt.s32.s16 	%r908, %rs277;
	add.s32 	%r909, %r881, %r908;
	add.s32 	%r910, %r882, %r907;
	shr.u32 	%r911, %r910, 1;
	shr.u32 	%r912, %r909, 1;
	cvt.u16.u32 	%rs413, %r912;
	cvt.u16.u32 	%rs414, %r911;
	add.s16 	%rs415, %rs238, %rs414;
	add.s16 	%rs416, %rs237, %rs413;
	sub.s16 	%rs417, %rs416, %rs412;
	sub.s16 	%rs418, %rs415, %rs411;
	shl.b32 	%r913, %r808, 15;
	shl.b32 	%r914, %r807, 15;
	add.s32 	%r915, %r914, 32768;
	add.s32 	%r916, %r913, 32768;
	shr.s32 	%r917, %r916, 16;
	shr.s32 	%r918, %r915, 16;
	add.s32 	%r919, %r870, %r918;
	add.s32 	%r920, %r869, %r917;
	add.s32 	%r921, %r920, 1;
	add.s32 	%r922, %r919, 1;
	shr.u32 	%r923, %r922, 1;
	shr.u32 	%r924, %r921, 1;
	cvt.u16.u32 	%rs419, %r924;
	cvt.u16.u32 	%rs420, %r923;
	cvt.s32.s16 	%r925, %rs279;
	cvt.s32.s16 	%r926, %rs280;
	add.s32 	%r927, %r880, %r926;
	add.s32 	%r928, %r879, %r925;
	add.s32 	%r929, %r928, 1;
	add.s32 	%r930, %r927, 1;
	shr.u32 	%r931, %r930, 1;
	shr.u32 	%r932, %r929, 1;
	cvt.u16.u32 	%rs421, %r932;
	cvt.u16.u32 	%rs422, %r931;
	add.s16 	%rs423, %rs238, %rs422;
	add.s16 	%rs424, %rs237, %rs421;
	sub.s16 	%rs425, %rs424, %rs420;
	sub.s16 	%rs426, %rs423, %rs419;
	selp.b16 	%rs427, %rs418, %rs426, %p81;
	selp.b16 	%rs428, %rs417, %rs425, %p80;
	selp.b16 	%rs429, %rs386, %rs428, %p47;
	selp.b16 	%rs430, %rs385, %rs427, %p47;
	add.s32 	%r933, %r872, %r918;
	add.s32 	%r934, %r871, %r917;
	shr.u32 	%r935, %r934, 1;
	shr.u32 	%r936, %r933, 1;
	cvt.u16.u32 	%rs431, %r936;
	cvt.u16.u32 	%rs432, %r935;
	add.s32 	%r937, %r882, %r926;
	add.s32 	%r938, %r881, %r925;
	shr.u32 	%r939, %r938, 1;
	shr.u32 	%r940, %r937, 1;
	cvt.u16.u32 	%rs433, %r940;
	cvt.u16.u32 	%rs434, %r939;
	add.s16 	%rs435, %rs249, %rs434;
	add.s16 	%rs436, %rs250, %rs433;
	sub.s16 	%rs437, %rs436, %rs432;
	sub.s16 	%rs438, %rs435, %rs431;
	selp.b16 	%rs439, %rs273, %rs438, %p47;
	selp.b16 	%rs440, %rs274, %rs437, %p47;
	selp.b16 	%rs441, %rs430, %rs440, %p50;
	selp.b16 	%rs442, %rs429, %rs439, %p51;
	cvt.s32.s16 	%r941, %rs442;
	cvt.s32.s16 	%r942, %rs441;
	cvt.s32.s16 	%r943, %rs378;
	cvt.s32.s16 	%r944, %rs377;
	cvt.s32.s16 	%r945, %rs372;
	cvt.s32.s16 	%r946, %rs371;
	mad.lo.s32 	%r947, %r107, %r944, %r111;
	mad.lo.s32 	%r948, %r107, %r943, %r111;
	mad.lo.s32 	%r949, %r109, %r946, %r948;
	mad.lo.s32 	%r950, %r109, %r945, %r947;
	mad.lo.s32 	%r951, %r105, %r942, %r950;
	mad.lo.s32 	%r952, %r105, %r941, %r949;
	mad.lo.s32 	%r953, %r115, %r943, %r119;
	mad.lo.s32 	%r954, %r115, %r944, %r119;
	mad.lo.s32 	%r955, %r117, %r945, %r954;
	mad.lo.s32 	%r956, %r117, %r946, %r953;
	mad.lo.s32 	%r957, %r113, %r941, %r956;
	mad.lo.s32 	%r958, %r113, %r942, %r955;
	mul.lo.s32 	%r959, %r121, %r942;
	mul.lo.s32 	%r960, %r121, %r941;
	mad.lo.s32 	%r961, %r123, %r943, %r960;
	mad.lo.s32 	%r962, %r123, %r944, %r959;
	add.s32 	%r963, %r962, %r127;
	add.s32 	%r964, %r961, %r127;
	mad.lo.s32 	%r965, %r125, %r946, %r964;
	mad.lo.s32 	%r966, %r125, %r945, %r963;
	selp.b32 	%r967, %r958, %r966, %p49;
	selp.b32 	%r968, %r957, %r965, %p49;
	selp.b32 	%r969, %r952, %r968, %p48;
	selp.b32 	%r970, %r951, %r967, %p48;
	shr.u32 	%r971, %r970, 8;
	shr.u32 	%r972, %r969, 8;
	cvt.u16.u32 	%rs443, %r972;
	cvt.u16.u32 	%rs444, %r971;
	add.s32 	%r973, %r1289, %r1291;
	mul.wide.s32 	%rd212, %r973, 2;
	add.s64 	%rd213, %rd4, %rd212;
	st.global.v2.u16 	[%rd213], {%rs443, %rs444};
	add.s32 	%r1291, %r1291, 2;
	setp.ne.s32 	%p88, %r1291, 16;
	@%p88 bra 	LBB7_11;
// %bb.12:                              // %"end for f27.s0._::y._::yi._::yii._::yii12"
                                        //   in Loop: Header=BB7_10 Depth=2
	add.s32 	%r1290, %r1290, 1;
	add.s32 	%r1289, %r1289, %r346;
	setp.eq.s32 	%p89, %r1290, 8;
	@%p89 bra 	LBB7_13;
	bra.uni 	LBB7_10;
LBB7_13:                                // %"end for f27.s0._::x._::xi._::xii9"
                                        //   in Loop: Header=BB7_9 Depth=1
	add.s32 	%r1288, %r1288, 1;
	add.s32 	%r1287, %r1287, %r331;
	setp.eq.s32 	%p90, %r1288, 3;
	@%p90 bra 	LBB7_20;
	bra.uni 	LBB7_9;
LBB7_20:                                // %after_bb
	ret;
                                        // -- End function
}
	// .globl	kernel_f28_s0____c___block_id_z // -- Begin function kernel_f28_s0____c___block_id_z
.visible .entry kernel_f28_s0____c___block_id_z(
	.param .u32 kernel_f28_s0____c___block_id_z_param_0,
	.param .u32 kernel_f28_s0____c___block_id_z_param_1,
	.param .u32 kernel_f28_s0____c___block_id_z_param_2,
	.param .u32 kernel_f28_s0____c___block_id_z_param_3,
	.param .u32 kernel_f28_s0____c___block_id_z_param_4,
	.param .u32 kernel_f28_s0____c___block_id_z_param_5,
	.param .u32 kernel_f28_s0____c___block_id_z_param_6,
	.param .u32 kernel_f28_s0____c___block_id_z_param_7,
	.param .u32 kernel_f28_s0____c___block_id_z_param_8,
	.param .u32 kernel_f28_s0____c___block_id_z_param_9,
	.param .u32 kernel_f28_s0____c___block_id_z_param_10,
	.param .u32 kernel_f28_s0____c___block_id_z_param_11,
	.param .u32 kernel_f28_s0____c___block_id_z_param_12,
	.param .u32 kernel_f28_s0____c___block_id_z_param_13,
	.param .u32 kernel_f28_s0____c___block_id_z_param_14,
	.param .u32 kernel_f28_s0____c___block_id_z_param_15,
	.param .u32 kernel_f28_s0____c___block_id_z_param_16,
	.param .u32 kernel_f28_s0____c___block_id_z_param_17,
	.param .u32 kernel_f28_s0____c___block_id_z_param_18,
	.param .u32 kernel_f28_s0____c___block_id_z_param_19,
	.param .u32 kernel_f28_s0____c___block_id_z_param_20,
	.param .u32 kernel_f28_s0____c___block_id_z_param_21,
	.param .u32 kernel_f28_s0____c___block_id_z_param_22,
	.param .u32 kernel_f28_s0____c___block_id_z_param_23,
	.param .u32 kernel_f28_s0____c___block_id_z_param_24,
	.param .u32 kernel_f28_s0____c___block_id_z_param_25,
	.param .u32 kernel_f28_s0____c___block_id_z_param_26,
	.param .u32 kernel_f28_s0____c___block_id_z_param_27,
	.param .u32 kernel_f28_s0____c___block_id_z_param_28,
	.param .u64 kernel_f28_s0____c___block_id_z_param_29,
	.param .u64 kernel_f28_s0____c___block_id_z_param_30,
	.param .u64 kernel_f28_s0____c___block_id_z_param_31
)                                       // @kernel_f28_s0____c___block_id_z
{
	.reg .pred 	%p<3>;
	.reg .b16 	%rs<249>;
	.reg .b32 	%r<119>;
	.reg .b64 	%rd<206>;

// %bb.0:                               // %entry
	ld.param.u32 	%r31, [kernel_f28_s0____c___block_id_z_param_23];
	ld.param.u32 	%r30, [kernel_f28_s0____c___block_id_z_param_22];
	ld.param.u32 	%r27, [kernel_f28_s0____c___block_id_z_param_19];
	ld.param.u32 	%r26, [kernel_f28_s0____c___block_id_z_param_17];
	ld.param.u32 	%r25, [kernel_f28_s0____c___block_id_z_param_16];
	ld.param.u32 	%r10, [kernel_f28_s0____c___block_id_z_param_0];
	ld.param.u64 	%rd4, [kernel_f28_s0____c___block_id_z_param_31];
	cvta.to.global.u64 	%rd1, %rd4;
	ld.param.u32 	%r37, [kernel_f28_s0____c___block_id_z_param_1];
	ld.param.u64 	%rd5, [kernel_f28_s0____c___block_id_z_param_30];
	cvta.to.global.u64 	%rd2, %rd5;
	ld.param.u64 	%rd6, [kernel_f28_s0____c___block_id_z_param_29];
	cvta.to.global.u64 	%rd3, %rd6;
	mov.u32 	%r1, %ctaid.z;
	mov.u32 	%r38, %ctaid.y;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %tid.y;
	mov.u32 	%r4, %tid.x;
	min.s32 	%r5, %r38, %r37;
	ld.param.u32 	%r39, [kernel_f28_s0____c___block_id_z_param_18];
	setp.ge.s32 	%p1, %r2, %r39;
	@%p1 bra 	LBB8_3;
// %bb.1:                               // %true_bb
	setp.lt.u32 	%p2, %r4, 14;
	@%p2 bra 	LBB8_2;
	bra.uni 	LBB8_5;
LBB8_2:                                 // %true_bb1
	ld.param.u32 	%r36, [kernel_f28_s0____c___block_id_z_param_28];
	ld.param.u32 	%r35, [kernel_f28_s0____c___block_id_z_param_27];
	ld.param.u32 	%r34, [kernel_f28_s0____c___block_id_z_param_26];
	ld.param.u32 	%r33, [kernel_f28_s0____c___block_id_z_param_25];
	ld.param.u32 	%r32, [kernel_f28_s0____c___block_id_z_param_24];
	ld.param.u32 	%r29, [kernel_f28_s0____c___block_id_z_param_21];
	ld.param.u32 	%r28, [kernel_f28_s0____c___block_id_z_param_20];
	ld.param.u32 	%r24, [kernel_f28_s0____c___block_id_z_param_15];
	shl.b32 	%r87, %r4, 4;
	mad.lo.s32 	%r88, %r2, 236, %r87;
	add.s32 	%r89, %r88, %r28;
	shl.b32 	%r90, %r27, 1;
	add.s32 	%r91, %r90, 2;
	shl.b32 	%r92, %r5, 1;
	add.s32 	%r93, %r3, %r26;
	mad.lo.s32 	%r94, %r1, %r25, %r93;
	add.s32 	%r95, %r94, %r92;
	mad.lo.s32 	%r96, %r89, %r91, %r95;
	mul.wide.s32 	%rd137, %r96, 2;
	add.s64 	%rd138, %rd3, %rd137;
	ld.global.nc.u16 	%rs169, [%rd138];
	mul.wide.s32 	%rd139, %r90, 2;
	add.s64 	%rd140, %rd138, %rd139;
	add.s64 	%rd141, %rd140, 4;
	ld.global.nc.u16 	%rs170, [%rd140+4];
	add.s64 	%rd142, %rd141, %rd139;
	add.s64 	%rd143, %rd142, 4;
	ld.global.u16 	%rs171, [%rd142+4];
	add.s64 	%rd144, %rd143, %rd139;
	ld.global.u16 	%rs172, [%rd144+4];
	min.s16 	%rs173, %rs169, 1023;
	min.s16 	%rs174, %rs170, 1023;
	min.s16 	%rs175, %rs171, 1023;
	min.s16 	%rs176, %rs172, 1023;
	max.s16 	%rs177, %rs176, 0;
	max.s16 	%rs178, %rs175, 0;
	max.s16 	%rs179, %rs174, 0;
	max.s16 	%rs180, %rs173, 0;
	cvt.u64.u16 	%rd145, %rs180;
	add.s64 	%rd146, %rd2, %rd145;
	ld.global.nc.u8 	%rs181, [%rd146];
	cvt.u16.u8 	%rs182, %rs181;
	cvt.u64.u16 	%rd147, %rs179;
	add.s64 	%rd148, %rd2, %rd147;
	ld.global.nc.u8 	%rs183, [%rd148];
	cvt.u16.u8 	%rs184, %rs183;
	cvt.u64.u16 	%rd149, %rs178;
	add.s64 	%rd150, %rd2, %rd149;
	ld.global.nc.u8 	%rs185, [%rd150];
	cvt.u16.u8 	%rs186, %rs185;
	cvt.u64.u16 	%rd151, %rs177;
	add.s64 	%rd152, %rd2, %rd151;
	ld.global.nc.u8 	%rs187, [%rd152];
	cvt.u16.u8 	%rs188, %rs187;
	add.s32 	%r97, %r3, %r30;
	add.s32 	%r98, %r97, %r92;
	mul.lo.s32 	%r99, %r98, %r31;
	mul.lo.s32 	%r100, %r1, %r10;
	add.s32 	%r101, %r88, %r29;
	add.s32 	%r102, %r101, %r100;
	add.s32 	%r103, %r102, %r99;
	cvt.s64.s32 	%rd153, %r103;
	add.s64 	%rd154, %rd1, %rd153;
	st.global.u8 	[%rd154+2], %rs186;
	st.global.u8 	[%rd154+1], %rs184;
	st.global.u8 	[%rd154], %rs182;
	st.global.u8 	[%rd154+3], %rs188;
	add.s32 	%r104, %r88, %r32;
	mad.lo.s32 	%r105, %r104, %r91, %r95;
	mul.wide.s32 	%rd155, %r105, 2;
	add.s64 	%rd156, %rd3, %rd155;
	ld.global.nc.u16 	%rs189, [%rd156];
	add.s64 	%rd157, %rd156, %rd139;
	add.s64 	%rd158, %rd157, 4;
	ld.global.nc.u16 	%rs190, [%rd157+4];
	add.s64 	%rd159, %rd158, %rd139;
	add.s64 	%rd160, %rd159, 4;
	ld.global.u16 	%rs191, [%rd159+4];
	add.s64 	%rd161, %rd160, %rd139;
	ld.global.u16 	%rs192, [%rd161+4];
	min.s16 	%rs193, %rs189, 1023;
	min.s16 	%rs194, %rs190, 1023;
	min.s16 	%rs195, %rs191, 1023;
	min.s16 	%rs196, %rs192, 1023;
	max.s16 	%rs197, %rs196, 0;
	max.s16 	%rs198, %rs195, 0;
	max.s16 	%rs199, %rs194, 0;
	max.s16 	%rs200, %rs193, 0;
	cvt.u64.u16 	%rd162, %rs200;
	add.s64 	%rd163, %rd2, %rd162;
	ld.global.nc.u8 	%rs201, [%rd163];
	cvt.u16.u8 	%rs202, %rs201;
	cvt.u64.u16 	%rd164, %rs199;
	add.s64 	%rd165, %rd2, %rd164;
	ld.global.nc.u8 	%rs203, [%rd165];
	cvt.u16.u8 	%rs204, %rs203;
	cvt.u64.u16 	%rd166, %rs198;
	add.s64 	%rd167, %rd2, %rd166;
	ld.global.nc.u8 	%rs205, [%rd167];
	cvt.u16.u8 	%rs206, %rs205;
	cvt.u64.u16 	%rd168, %rs197;
	add.s64 	%rd169, %rd2, %rd168;
	ld.global.nc.u8 	%rs207, [%rd169];
	cvt.u16.u8 	%rs208, %rs207;
	add.s32 	%r106, %r88, %r33;
	add.s32 	%r107, %r106, %r100;
	add.s32 	%r108, %r107, %r99;
	cvt.s64.s32 	%rd170, %r108;
	add.s64 	%rd171, %rd1, %rd170;
	st.global.u8 	[%rd171+3], %rs208;
	st.global.u8 	[%rd171+2], %rs206;
	st.global.u8 	[%rd171+1], %rs204;
	st.global.u8 	[%rd171], %rs202;
	add.s32 	%r109, %r88, %r34;
	mad.lo.s32 	%r110, %r109, %r91, %r95;
	mul.wide.s32 	%rd172, %r110, 2;
	add.s64 	%rd173, %rd3, %rd172;
	ld.global.nc.u16 	%rs209, [%rd173];
	add.s64 	%rd174, %rd173, %rd139;
	add.s64 	%rd175, %rd174, 4;
	ld.global.nc.u16 	%rs210, [%rd174+4];
	add.s64 	%rd176, %rd175, %rd139;
	add.s64 	%rd177, %rd176, 4;
	ld.global.u16 	%rs211, [%rd176+4];
	add.s64 	%rd178, %rd177, %rd139;
	ld.global.u16 	%rs212, [%rd178+4];
	min.s16 	%rs213, %rs209, 1023;
	min.s16 	%rs214, %rs210, 1023;
	min.s16 	%rs215, %rs211, 1023;
	min.s16 	%rs216, %rs212, 1023;
	max.s16 	%rs217, %rs216, 0;
	max.s16 	%rs218, %rs215, 0;
	max.s16 	%rs219, %rs214, 0;
	max.s16 	%rs220, %rs213, 0;
	cvt.u64.u16 	%rd179, %rs220;
	add.s64 	%rd180, %rd2, %rd179;
	ld.global.nc.u8 	%rs221, [%rd180];
	cvt.u16.u8 	%rs222, %rs221;
	cvt.u64.u16 	%rd181, %rs219;
	add.s64 	%rd182, %rd2, %rd181;
	ld.global.nc.u8 	%rs223, [%rd182];
	cvt.u16.u8 	%rs224, %rs223;
	cvt.u64.u16 	%rd183, %rs218;
	add.s64 	%rd184, %rd2, %rd183;
	ld.global.nc.u8 	%rs225, [%rd184];
	cvt.u16.u8 	%rs226, %rs225;
	cvt.u64.u16 	%rd185, %rs217;
	add.s64 	%rd186, %rd2, %rd185;
	ld.global.nc.u8 	%rs227, [%rd186];
	cvt.u16.u8 	%rs228, %rs227;
	add.s32 	%r111, %r88, %r35;
	add.s32 	%r112, %r111, %r100;
	add.s32 	%r113, %r112, %r99;
	cvt.s64.s32 	%rd187, %r113;
	add.s64 	%rd188, %rd1, %rd187;
	st.global.u8 	[%rd188+3], %rs228;
	st.global.u8 	[%rd188+2], %rs226;
	st.global.u8 	[%rd188+1], %rs224;
	st.global.u8 	[%rd188], %rs222;
	add.s32 	%r114, %r88, %r24;
	mad.lo.s32 	%r115, %r114, %r91, %r95;
	mul.wide.s32 	%rd189, %r115, 2;
	add.s64 	%rd190, %rd3, %rd189;
	ld.global.nc.u16 	%rs229, [%rd190];
	add.s64 	%rd191, %rd190, %rd139;
	add.s64 	%rd192, %rd191, 4;
	ld.global.nc.u16 	%rs230, [%rd191+4];
	add.s64 	%rd193, %rd192, %rd139;
	add.s64 	%rd194, %rd193, 4;
	ld.global.u16 	%rs231, [%rd193+4];
	add.s64 	%rd195, %rd194, %rd139;
	ld.global.u16 	%rs232, [%rd195+4];
	min.s16 	%rs233, %rs229, 1023;
	min.s16 	%rs234, %rs230, 1023;
	min.s16 	%rs235, %rs231, 1023;
	min.s16 	%rs236, %rs232, 1023;
	max.s16 	%rs237, %rs236, 0;
	max.s16 	%rs238, %rs235, 0;
	max.s16 	%rs239, %rs234, 0;
	max.s16 	%rs240, %rs233, 0;
	cvt.u64.u16 	%rd196, %rs240;
	add.s64 	%rd197, %rd2, %rd196;
	ld.global.nc.u8 	%rs241, [%rd197];
	cvt.u16.u8 	%rs245, %rs241;
	cvt.u64.u16 	%rd198, %rs239;
	add.s64 	%rd199, %rd2, %rd198;
	ld.global.nc.u8 	%rs242, [%rd199];
	cvt.u16.u8 	%rs246, %rs242;
	cvt.u64.u16 	%rd200, %rs238;
	add.s64 	%rd201, %rd2, %rd200;
	ld.global.nc.u8 	%rs243, [%rd201];
	cvt.u16.u8 	%rs247, %rs243;
	cvt.u64.u16 	%rd202, %rs237;
	add.s64 	%rd203, %rd2, %rd202;
	ld.global.nc.u8 	%rs244, [%rd203];
	cvt.u16.u8 	%rs248, %rs244;
	add.s32 	%r116, %r88, %r36;
	add.s32 	%r117, %r116, %r100;
	add.s32 	%r118, %r117, %r99;
	bra.uni 	LBB8_4;
LBB8_3:                                 // %false_bb
	ld.param.u32 	%r15, [kernel_f28_s0____c___block_id_z_param_6];
	ld.param.u32 	%r14, [kernel_f28_s0____c___block_id_z_param_5];
	ld.param.u32 	%r13, [kernel_f28_s0____c___block_id_z_param_4];
	ld.param.u32 	%r12, [kernel_f28_s0____c___block_id_z_param_3];
	ld.param.u32 	%r11, [kernel_f28_s0____c___block_id_z_param_2];
	shl.b32 	%r40, %r4, 4;
	min.u32 	%r41, %r40, 220;
	add.s32 	%r42, %r41, %r15;
	shl.b32 	%r43, %r27, 1;
	add.s32 	%r44, %r43, 2;
	shl.b32 	%r45, %r5, 1;
	add.s32 	%r46, %r3, %r26;
	mad.lo.s32 	%r47, %r1, %r25, %r46;
	add.s32 	%r48, %r47, %r45;
	mad.lo.s32 	%r49, %r42, %r44, %r48;
	mul.wide.s32 	%rd7, %r49, 2;
	add.s64 	%rd8, %rd3, %rd7;
	ld.global.nc.u16 	%rs17, [%rd8];
	mul.wide.s32 	%rd9, %r43, 2;
	add.s64 	%rd10, %rd8, %rd9;
	add.s64 	%rd11, %rd10, 4;
	ld.global.nc.u16 	%rs18, [%rd10+4];
	add.s64 	%rd12, %rd11, %rd9;
	add.s64 	%rd13, %rd12, 4;
	ld.global.u16 	%rs19, [%rd12+4];
	add.s64 	%rd14, %rd13, %rd9;
	ld.global.u16 	%rs20, [%rd14+4];
	min.s16 	%rs21, %rs17, 1023;
	min.s16 	%rs22, %rs18, 1023;
	min.s16 	%rs23, %rs19, 1023;
	min.s16 	%rs24, %rs20, 1023;
	max.s16 	%rs25, %rs24, 0;
	max.s16 	%rs26, %rs23, 0;
	max.s16 	%rs27, %rs22, 0;
	max.s16 	%rs28, %rs21, 0;
	cvt.u64.u16 	%rd15, %rs28;
	add.s64 	%rd16, %rd2, %rd15;
	ld.global.nc.u8 	%rs29, [%rd16];
	cvt.u16.u8 	%rs30, %rs29;
	cvt.u64.u16 	%rd17, %rs27;
	add.s64 	%rd18, %rd2, %rd17;
	ld.global.nc.u8 	%rs31, [%rd18];
	cvt.u16.u8 	%rs32, %rs31;
	cvt.u64.u16 	%rd19, %rs26;
	add.s64 	%rd20, %rd2, %rd19;
	ld.global.nc.u8 	%rs33, [%rd20];
	cvt.u16.u8 	%rs34, %rs33;
	cvt.u64.u16 	%rd21, %rs25;
	add.s64 	%rd22, %rd2, %rd21;
	ld.global.nc.u8 	%rs35, [%rd22];
	cvt.u16.u8 	%rs36, %rs35;
	add.s32 	%r50, %r3, %r30;
	add.s32 	%r51, %r50, %r45;
	mad.lo.s32 	%r52, %r1, %r10, %r11;
	mad.lo.s32 	%r53, %r51, %r31, %r52;
	add.s32 	%r54, %r53, %r41;
	cvt.s64.s32 	%rd23, %r54;
	add.s64 	%rd24, %rd1, %rd23;
	st.global.u8 	[%rd24+2], %rs34;
	st.global.u8 	[%rd24+1], %rs32;
	st.global.u8 	[%rd24], %rs30;
	st.global.u8 	[%rd24+3], %rs36;
	add.s32 	%r55, %r41, %r14;
	mad.lo.s32 	%r56, %r55, %r44, %r48;
	mul.wide.s32 	%rd25, %r56, 2;
	add.s64 	%rd26, %rd3, %rd25;
	ld.global.nc.u16 	%rs37, [%rd26];
	add.s64 	%rd27, %rd26, %rd9;
	add.s64 	%rd28, %rd27, 4;
	ld.global.nc.u16 	%rs38, [%rd27+4];
	add.s64 	%rd29, %rd28, %rd9;
	add.s64 	%rd30, %rd29, 4;
	ld.global.u16 	%rs39, [%rd29+4];
	add.s64 	%rd31, %rd30, %rd9;
	ld.global.u16 	%rs40, [%rd31+4];
	min.s16 	%rs41, %rs37, 1023;
	min.s16 	%rs42, %rs38, 1023;
	min.s16 	%rs43, %rs39, 1023;
	min.s16 	%rs44, %rs40, 1023;
	max.s16 	%rs45, %rs44, 0;
	max.s16 	%rs46, %rs43, 0;
	max.s16 	%rs47, %rs42, 0;
	max.s16 	%rs48, %rs41, 0;
	cvt.u64.u16 	%rd32, %rs48;
	add.s64 	%rd33, %rd2, %rd32;
	ld.global.nc.u8 	%rs49, [%rd33];
	cvt.u16.u8 	%rs50, %rs49;
	cvt.u64.u16 	%rd34, %rs47;
	add.s64 	%rd35, %rd2, %rd34;
	ld.global.nc.u8 	%rs51, [%rd35];
	cvt.u16.u8 	%rs52, %rs51;
	cvt.u64.u16 	%rd36, %rs46;
	add.s64 	%rd37, %rd2, %rd36;
	ld.global.nc.u8 	%rs53, [%rd37];
	cvt.u16.u8 	%rs54, %rs53;
	cvt.u64.u16 	%rd38, %rs45;
	add.s64 	%rd39, %rd2, %rd38;
	ld.global.nc.u8 	%rs55, [%rd39];
	cvt.u16.u8 	%rs56, %rs55;
	st.global.u8 	[%rd24+7], %rs56;
	st.global.u8 	[%rd24+6], %rs54;
	st.global.u8 	[%rd24+5], %rs52;
	st.global.u8 	[%rd24+4], %rs50;
	add.s32 	%r57, %r41, %r13;
	mad.lo.s32 	%r58, %r57, %r44, %r48;
	mul.wide.s32 	%rd40, %r58, 2;
	add.s64 	%rd41, %rd3, %rd40;
	ld.global.nc.u16 	%rs57, [%rd41];
	add.s64 	%rd42, %rd41, %rd9;
	add.s64 	%rd43, %rd42, 4;
	ld.global.nc.u16 	%rs58, [%rd42+4];
	add.s64 	%rd44, %rd43, %rd9;
	add.s64 	%rd45, %rd44, 4;
	ld.global.u16 	%rs59, [%rd44+4];
	add.s64 	%rd46, %rd45, %rd9;
	ld.global.u16 	%rs60, [%rd46+4];
	min.s16 	%rs61, %rs57, 1023;
	min.s16 	%rs62, %rs58, 1023;
	min.s16 	%rs63, %rs59, 1023;
	min.s16 	%rs64, %rs60, 1023;
	max.s16 	%rs65, %rs64, 0;
	max.s16 	%rs66, %rs63, 0;
	max.s16 	%rs67, %rs62, 0;
	max.s16 	%rs68, %rs61, 0;
	cvt.u64.u16 	%rd47, %rs68;
	add.s64 	%rd48, %rd2, %rd47;
	ld.global.nc.u8 	%rs69, [%rd48];
	cvt.u16.u8 	%rs70, %rs69;
	cvt.u64.u16 	%rd49, %rs67;
	add.s64 	%rd50, %rd2, %rd49;
	ld.global.nc.u8 	%rs71, [%rd50];
	cvt.u16.u8 	%rs72, %rs71;
	cvt.u64.u16 	%rd51, %rs66;
	add.s64 	%rd52, %rd2, %rd51;
	ld.global.nc.u8 	%rs73, [%rd52];
	cvt.u16.u8 	%rs74, %rs73;
	cvt.u64.u16 	%rd53, %rs65;
	add.s64 	%rd54, %rd2, %rd53;
	ld.global.nc.u8 	%rs75, [%rd54];
	cvt.u16.u8 	%rs76, %rs75;
	st.global.u8 	[%rd24+11], %rs76;
	st.global.u8 	[%rd24+10], %rs74;
	st.global.u8 	[%rd24+9], %rs72;
	st.global.u8 	[%rd24+8], %rs70;
	add.s32 	%r59, %r41, %r12;
	mad.lo.s32 	%r60, %r59, %r44, %r48;
	mul.wide.s32 	%rd55, %r60, 2;
	add.s64 	%rd56, %rd3, %rd55;
	ld.global.nc.u16 	%rs77, [%rd56];
	add.s64 	%rd57, %rd56, %rd9;
	add.s64 	%rd58, %rd57, 4;
	ld.global.nc.u16 	%rs78, [%rd57+4];
	add.s64 	%rd59, %rd58, %rd9;
	add.s64 	%rd60, %rd59, 4;
	ld.global.u16 	%rs79, [%rd59+4];
	add.s64 	%rd61, %rd60, %rd9;
	ld.global.u16 	%rs80, [%rd61+4];
	min.s16 	%rs81, %rs77, 1023;
	min.s16 	%rs82, %rs78, 1023;
	min.s16 	%rs83, %rs79, 1023;
	min.s16 	%rs84, %rs80, 1023;
	max.s16 	%rs85, %rs84, 0;
	max.s16 	%rs86, %rs83, 0;
	max.s16 	%rs87, %rs82, 0;
	max.s16 	%rs88, %rs81, 0;
	cvt.u64.u16 	%rd62, %rs88;
	add.s64 	%rd63, %rd2, %rd62;
	ld.global.nc.u8 	%rs89, [%rd63];
	cvt.u16.u8 	%rs245, %rs89;
	cvt.u64.u16 	%rd64, %rs87;
	add.s64 	%rd65, %rd2, %rd64;
	ld.global.nc.u8 	%rs90, [%rd65];
	cvt.u16.u8 	%rs246, %rs90;
	cvt.u64.u16 	%rd66, %rs86;
	add.s64 	%rd67, %rd2, %rd66;
	ld.global.nc.u8 	%rs91, [%rd67];
	cvt.u16.u8 	%rs247, %rs91;
	cvt.u64.u16 	%rd68, %rs85;
	add.s64 	%rd69, %rd2, %rd68;
	ld.global.nc.u8 	%rs92, [%rd69];
	cvt.u16.u8 	%rs248, %rs92;
	add.s32 	%r118, %r54, 12;
	bra.uni 	LBB8_4;
LBB8_5:                                 // %false_bb2
	ld.param.u32 	%r23, [kernel_f28_s0____c___block_id_z_param_14];
	ld.param.u32 	%r22, [kernel_f28_s0____c___block_id_z_param_13];
	ld.param.u32 	%r21, [kernel_f28_s0____c___block_id_z_param_12];
	ld.param.u32 	%r20, [kernel_f28_s0____c___block_id_z_param_11];
	ld.param.u32 	%r19, [kernel_f28_s0____c___block_id_z_param_10];
	ld.param.u32 	%r18, [kernel_f28_s0____c___block_id_z_param_9];
	ld.param.u32 	%r17, [kernel_f28_s0____c___block_id_z_param_8];
	ld.param.u32 	%r16, [kernel_f28_s0____c___block_id_z_param_7];
	mul.lo.s32 	%r61, %r2, 236;
	add.s32 	%r62, %r61, %r23;
	shl.b32 	%r63, %r27, 1;
	add.s32 	%r64, %r63, 2;
	shl.b32 	%r65, %r5, 1;
	mad.lo.s32 	%r66, %r1, %r25, %r26;
	add.s32 	%r67, %r66, %r65;
	add.s32 	%r68, %r67, %r3;
	mad.lo.s32 	%r69, %r62, %r64, %r68;
	mul.wide.s32 	%rd70, %r69, 2;
	add.s64 	%rd71, %rd3, %rd70;
	ld.global.nc.u16 	%rs93, [%rd71];
	mul.wide.s32 	%rd72, %r63, 2;
	add.s64 	%rd73, %rd71, %rd72;
	add.s64 	%rd74, %rd73, 4;
	ld.global.nc.u16 	%rs94, [%rd73+4];
	add.s64 	%rd75, %rd74, %rd72;
	add.s64 	%rd76, %rd75, 4;
	ld.global.u16 	%rs95, [%rd75+4];
	add.s64 	%rd77, %rd76, %rd72;
	ld.global.u16 	%rs96, [%rd77+4];
	min.s16 	%rs97, %rs93, 1023;
	min.s16 	%rs98, %rs94, 1023;
	min.s16 	%rs99, %rs95, 1023;
	min.s16 	%rs100, %rs96, 1023;
	max.s16 	%rs101, %rs100, 0;
	max.s16 	%rs102, %rs99, 0;
	max.s16 	%rs103, %rs98, 0;
	max.s16 	%rs104, %rs97, 0;
	cvt.u64.u16 	%rd78, %rs104;
	add.s64 	%rd79, %rd2, %rd78;
	ld.global.nc.u8 	%rs105, [%rd79];
	cvt.u16.u8 	%rs106, %rs105;
	cvt.u64.u16 	%rd80, %rs103;
	add.s64 	%rd81, %rd2, %rd80;
	ld.global.nc.u8 	%rs107, [%rd81];
	cvt.u16.u8 	%rs108, %rs107;
	cvt.u64.u16 	%rd82, %rs102;
	add.s64 	%rd83, %rd2, %rd82;
	ld.global.nc.u8 	%rs109, [%rd83];
	cvt.u16.u8 	%rs110, %rs109;
	cvt.u64.u16 	%rd84, %rs101;
	add.s64 	%rd85, %rd2, %rd84;
	ld.global.nc.u8 	%rs111, [%rd85];
	cvt.u16.u8 	%rs112, %rs111;
	add.s32 	%r70, %r3, %r30;
	add.s32 	%r71, %r70, %r65;
	mul.lo.s32 	%r72, %r71, %r31;
	mad.lo.s32 	%r73, %r1, %r10, %r61;
	add.s32 	%r74, %r73, %r22;
	add.s32 	%r75, %r74, %r72;
	cvt.s64.s32 	%rd86, %r75;
	add.s64 	%rd87, %rd1, %rd86;
	st.global.u8 	[%rd87+2], %rs110;
	st.global.u8 	[%rd87+1], %rs108;
	st.global.u8 	[%rd87], %rs106;
	st.global.u8 	[%rd87+3], %rs112;
	add.s32 	%r76, %r61, %r21;
	mad.lo.s32 	%r77, %r76, %r64, %r68;
	mul.wide.s32 	%rd88, %r77, 2;
	add.s64 	%rd89, %rd3, %rd88;
	ld.global.nc.u16 	%rs113, [%rd89];
	add.s64 	%rd90, %rd89, %rd72;
	add.s64 	%rd91, %rd90, 4;
	ld.global.nc.u16 	%rs114, [%rd90+4];
	add.s64 	%rd92, %rd91, %rd72;
	add.s64 	%rd93, %rd92, 4;
	ld.global.u16 	%rs115, [%rd92+4];
	add.s64 	%rd94, %rd93, %rd72;
	ld.global.u16 	%rs116, [%rd94+4];
	min.s16 	%rs117, %rs113, 1023;
	min.s16 	%rs118, %rs114, 1023;
	min.s16 	%rs119, %rs115, 1023;
	min.s16 	%rs120, %rs116, 1023;
	max.s16 	%rs121, %rs120, 0;
	max.s16 	%rs122, %rs119, 0;
	max.s16 	%rs123, %rs118, 0;
	max.s16 	%rs124, %rs117, 0;
	cvt.u64.u16 	%rd95, %rs124;
	add.s64 	%rd96, %rd2, %rd95;
	ld.global.nc.u8 	%rs125, [%rd96];
	cvt.u16.u8 	%rs126, %rs125;
	cvt.u64.u16 	%rd97, %rs123;
	add.s64 	%rd98, %rd2, %rd97;
	ld.global.nc.u8 	%rs127, [%rd98];
	cvt.u16.u8 	%rs128, %rs127;
	cvt.u64.u16 	%rd99, %rs122;
	add.s64 	%rd100, %rd2, %rd99;
	ld.global.nc.u8 	%rs129, [%rd100];
	cvt.u16.u8 	%rs130, %rs129;
	cvt.u64.u16 	%rd101, %rs121;
	add.s64 	%rd102, %rd2, %rd101;
	ld.global.nc.u8 	%rs131, [%rd102];
	cvt.u16.u8 	%rs132, %rs131;
	add.s32 	%r78, %r73, %r20;
	add.s32 	%r79, %r78, %r72;
	cvt.s64.s32 	%rd103, %r79;
	add.s64 	%rd104, %rd1, %rd103;
	st.global.u8 	[%rd104+3], %rs132;
	st.global.u8 	[%rd104+2], %rs130;
	st.global.u8 	[%rd104+1], %rs128;
	st.global.u8 	[%rd104], %rs126;
	add.s32 	%r80, %r61, %r19;
	mad.lo.s32 	%r81, %r80, %r64, %r68;
	mul.wide.s32 	%rd105, %r81, 2;
	add.s64 	%rd106, %rd3, %rd105;
	ld.global.nc.u16 	%rs133, [%rd106];
	add.s64 	%rd107, %rd106, %rd72;
	add.s64 	%rd108, %rd107, 4;
	ld.global.nc.u16 	%rs134, [%rd107+4];
	add.s64 	%rd109, %rd108, %rd72;
	add.s64 	%rd110, %rd109, 4;
	ld.global.u16 	%rs135, [%rd109+4];
	add.s64 	%rd111, %rd110, %rd72;
	ld.global.u16 	%rs136, [%rd111+4];
	min.s16 	%rs137, %rs133, 1023;
	min.s16 	%rs138, %rs134, 1023;
	min.s16 	%rs139, %rs135, 1023;
	min.s16 	%rs140, %rs136, 1023;
	max.s16 	%rs141, %rs140, 0;
	max.s16 	%rs142, %rs139, 0;
	max.s16 	%rs143, %rs138, 0;
	max.s16 	%rs144, %rs137, 0;
	cvt.u64.u16 	%rd112, %rs144;
	add.s64 	%rd113, %rd2, %rd112;
	ld.global.nc.u8 	%rs145, [%rd113];
	cvt.u16.u8 	%rs146, %rs145;
	cvt.u64.u16 	%rd114, %rs143;
	add.s64 	%rd115, %rd2, %rd114;
	ld.global.nc.u8 	%rs147, [%rd115];
	cvt.u16.u8 	%rs148, %rs147;
	cvt.u64.u16 	%rd116, %rs142;
	add.s64 	%rd117, %rd2, %rd116;
	ld.global.nc.u8 	%rs149, [%rd117];
	cvt.u16.u8 	%rs150, %rs149;
	cvt.u64.u16 	%rd118, %rs141;
	add.s64 	%rd119, %rd2, %rd118;
	ld.global.nc.u8 	%rs151, [%rd119];
	cvt.u16.u8 	%rs152, %rs151;
	add.s32 	%r82, %r73, %r18;
	add.s32 	%r83, %r82, %r72;
	cvt.s64.s32 	%rd120, %r83;
	add.s64 	%rd121, %rd1, %rd120;
	st.global.u8 	[%rd121+3], %rs152;
	st.global.u8 	[%rd121+2], %rs150;
	st.global.u8 	[%rd121+1], %rs148;
	st.global.u8 	[%rd121], %rs146;
	add.s32 	%r84, %r61, %r17;
	mad.lo.s32 	%r85, %r84, %r64, %r68;
	mul.wide.s32 	%rd122, %r85, 2;
	add.s64 	%rd123, %rd3, %rd122;
	ld.global.nc.u16 	%rs153, [%rd123];
	add.s64 	%rd124, %rd123, %rd72;
	add.s64 	%rd125, %rd124, 4;
	ld.global.nc.u16 	%rs154, [%rd124+4];
	add.s64 	%rd126, %rd125, %rd72;
	add.s64 	%rd127, %rd126, 4;
	ld.global.u16 	%rs155, [%rd126+4];
	add.s64 	%rd128, %rd127, %rd72;
	ld.global.u16 	%rs156, [%rd128+4];
	min.s16 	%rs157, %rs153, 1023;
	min.s16 	%rs158, %rs154, 1023;
	min.s16 	%rs159, %rs155, 1023;
	min.s16 	%rs160, %rs156, 1023;
	max.s16 	%rs161, %rs160, 0;
	max.s16 	%rs162, %rs159, 0;
	max.s16 	%rs163, %rs158, 0;
	max.s16 	%rs164, %rs157, 0;
	cvt.u64.u16 	%rd129, %rs164;
	add.s64 	%rd130, %rd2, %rd129;
	ld.global.nc.u8 	%rs165, [%rd130];
	cvt.u16.u8 	%rs245, %rs165;
	cvt.u64.u16 	%rd131, %rs163;
	add.s64 	%rd132, %rd2, %rd131;
	ld.global.nc.u8 	%rs166, [%rd132];
	cvt.u16.u8 	%rs246, %rs166;
	cvt.u64.u16 	%rd133, %rs162;
	add.s64 	%rd134, %rd2, %rd133;
	ld.global.nc.u8 	%rs167, [%rd134];
	cvt.u16.u8 	%rs247, %rs167;
	cvt.u64.u16 	%rd135, %rs161;
	add.s64 	%rd136, %rd2, %rd135;
	ld.global.nc.u8 	%rs168, [%rd136];
	cvt.u16.u8 	%rs248, %rs168;
	add.s32 	%r86, %r73, %r16;
	add.s32 	%r118, %r86, %r72;
LBB8_4:                                 // %after_bb
	cvt.s64.s32 	%rd204, %r118;
	add.s64 	%rd205, %rd1, %rd204;
	st.global.u8 	[%rd205+2], %rs247;
	st.global.u8 	[%rd205+1], %rs246;
	st.global.u8 	[%rd205], %rs245;
	st.global.u8 	[%rd205+3], %rs248;
	ret;
                                        // -- End function
}
	// .globl	kernel_unsharp_y_s0____c____c___block_id_z // -- Begin function kernel_unsharp_y_s0____c____c___block_id_z
.visible .entry kernel_unsharp_y_s0____c____c___block_id_z(
	.param .u32 kernel_unsharp_y_s0____c____c___block_id_z_param_0,
	.param .u32 kernel_unsharp_y_s0____c____c___block_id_z_param_1,
	.param .u32 kernel_unsharp_y_s0____c____c___block_id_z_param_2,
	.param .u32 kernel_unsharp_y_s0____c____c___block_id_z_param_3,
	.param .u32 kernel_unsharp_y_s0____c____c___block_id_z_param_4,
	.param .u32 kernel_unsharp_y_s0____c____c___block_id_z_param_5,
	.param .u32 kernel_unsharp_y_s0____c____c___block_id_z_param_6,
	.param .u32 kernel_unsharp_y_s0____c____c___block_id_z_param_7,
	.param .u32 kernel_unsharp_y_s0____c____c___block_id_z_param_8,
	.param .u32 kernel_unsharp_y_s0____c____c___block_id_z_param_9,
	.param .u32 kernel_unsharp_y_s0____c____c___block_id_z_param_10,
	.param .u32 kernel_unsharp_y_s0____c____c___block_id_z_param_11,
	.param .u32 kernel_unsharp_y_s0____c____c___block_id_z_param_12,
	.param .u32 kernel_unsharp_y_s0____c____c___block_id_z_param_13,
	.param .u32 kernel_unsharp_y_s0____c____c___block_id_z_param_14,
	.param .u32 kernel_unsharp_y_s0____c____c___block_id_z_param_15,
	.param .u32 kernel_unsharp_y_s0____c____c___block_id_z_param_16,
	.param .u32 kernel_unsharp_y_s0____c____c___block_id_z_param_17,
	.param .u32 kernel_unsharp_y_s0____c____c___block_id_z_param_18,
	.param .u32 kernel_unsharp_y_s0____c____c___block_id_z_param_19,
	.param .u32 kernel_unsharp_y_s0____c____c___block_id_z_param_20,
	.param .u32 kernel_unsharp_y_s0____c____c___block_id_z_param_21,
	.param .u32 kernel_unsharp_y_s0____c____c___block_id_z_param_22,
	.param .u64 kernel_unsharp_y_s0____c____c___block_id_z_param_23,
	.param .u64 kernel_unsharp_y_s0____c____c___block_id_z_param_24
)                                       // @kernel_unsharp_y_s0____c____c___block_id_z
{
	.reg .pred 	%p<3>;
	.reg .b16 	%rs<1129>;
	.reg .b32 	%r<193>;
	.reg .b64 	%rd<520>;

// %bb.0:                               // %entry
	ld.param.u32 	%r31, [kernel_unsharp_y_s0____c____c___block_id_z_param_22];
	ld.param.u32 	%r27, [kernel_unsharp_y_s0____c____c___block_id_z_param_17];
	ld.param.u32 	%r26, [kernel_unsharp_y_s0____c____c___block_id_z_param_16];
	ld.param.u32 	%r25, [kernel_unsharp_y_s0____c____c___block_id_z_param_15];
	ld.param.u32 	%r24, [kernel_unsharp_y_s0____c____c___block_id_z_param_14];
	ld.param.u32 	%r22, [kernel_unsharp_y_s0____c____c___block_id_z_param_12];
	ld.param.u32 	%r21, [kernel_unsharp_y_s0____c____c___block_id_z_param_11];
	ld.param.u32 	%r20, [kernel_unsharp_y_s0____c____c___block_id_z_param_10];
	ld.param.u32 	%r19, [kernel_unsharp_y_s0____c____c___block_id_z_param_9];
	ld.param.u32 	%r18, [kernel_unsharp_y_s0____c____c___block_id_z_param_8];
	ld.param.u32 	%r12, [kernel_unsharp_y_s0____c____c___block_id_z_param_2];
	ld.param.u32 	%r11, [kernel_unsharp_y_s0____c____c___block_id_z_param_1];
	ld.param.u32 	%r10, [kernel_unsharp_y_s0____c____c___block_id_z_param_0];
	ld.param.u64 	%rd3, [kernel_unsharp_y_s0____c____c___block_id_z_param_24];
	cvta.to.global.u64 	%rd1, %rd3;
	ld.param.u64 	%rd4, [kernel_unsharp_y_s0____c____c___block_id_z_param_23];
	cvta.to.global.u64 	%rd2, %rd4;
	mov.u32 	%r32, %ctaid.z;
	mov.u32 	%r33, %ctaid.y;
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %tid.z;
	mov.u32 	%r3, %tid.y;
	mov.u32 	%r4, %tid.x;
	setp.ne.s32 	%p1, %r32, 0;
	shl.b32 	%r34, %r33, 3;
	or.b32  	%r35, %r34, 6;
	ld.param.u32 	%r36, [kernel_unsharp_y_s0____c____c___block_id_z_param_19];
	min.s32 	%r5, %r35, %r36;
	@%p1 bra 	LBB9_3;
	bra.uni 	LBB9_1;
LBB9_3:                                 // %false_bb
	ld.param.u32 	%r30, [kernel_unsharp_y_s0____c____c___block_id_z_param_21];
	ld.param.u32 	%r29, [kernel_unsharp_y_s0____c____c___block_id_z_param_20];
	ld.param.u32 	%r14, [kernel_unsharp_y_s0____c____c___block_id_z_param_4];
	mul.lo.s32 	%r37, %r1, 248;
	min.s32 	%r38, %r37, %r14;
	shl.b32 	%r39, %r4, 3;
	add.s32 	%r40, %r39, %r38;
	add.s32 	%r41, %r40, %r26;
	add.s32 	%r42, %r27, 236;
	mul.lo.s32 	%r43, %r41, %r42;
	shl.b32 	%r44, %r3, 2;
	add.s32 	%r45, %r2, 1;
	mul.lo.s32 	%r46, %r45, %r10;
	add.s32 	%r47, %r5, %r44;
	add.s32 	%r48, %r47, %r25;
	add.s32 	%r49, %r48, %r46;
	add.s32 	%r50, %r49, %r43;
	cvt.s64.s32 	%rd5, %r50;
	add.s64 	%rd6, %rd2, %rd5;
	ld.global.nc.u8 	%rs17, [%rd6];
	cvt.u16.u8 	%rs18, %rs17;
	cvt.s64.s32 	%rd7, %r27;
	add.s64 	%rd8, %rd6, %rd7;
	add.s64 	%rd9, %rd8, 236;
	ld.global.nc.u8 	%rs19, [%rd8+236];
	cvt.u16.u8 	%rs20, %rs19;
	add.s64 	%rd10, %rd9, %rd7;
	add.s64 	%rd11, %rd10, 236;
	ld.global.nc.u8 	%rs21, [%rd10+236];
	cvt.u16.u8 	%rs22, %rs21;
	add.s64 	%rd12, %rd11, %rd7;
	ld.global.u8 	%rs23, [%rd12+236];
	add.s32 	%r51, %r47, %r27;
	sub.s32 	%r52, %r51, %r31;
	add.s32 	%r53, %r52, %r46;
	add.s32 	%r54, %r53, %r43;
	cvt.s64.s32 	%rd13, %r54;
	add.s64 	%rd14, %rd2, %rd13;
	add.s64 	%rd15, %rd14, 464;
	ld.global.nc.u8 	%rs24, [%rd14+464];
	cvt.u16.u8 	%rs25, %rs24;
	add.s64 	%rd16, %rd15, %rd7;
	add.s64 	%rd17, %rd16, 236;
	ld.global.nc.u8 	%rs26, [%rd16+236];
	cvt.u16.u8 	%rs27, %rs26;
	add.s64 	%rd18, %rd17, %rd7;
	add.s64 	%rd19, %rd18, 236;
	ld.global.u8 	%rs28, [%rd18+236];
	add.s64 	%rd20, %rd19, %rd7;
	ld.global.u8 	%rs29, [%rd20+236];
	add.s16 	%rs30, %rs22, %rs28;
	add.s16 	%rs31, %rs23, %rs29;
	add.s16 	%rs32, %rs18, %rs25;
	add.s16 	%rs33, %rs20, %rs27;
	add.s16 	%rs34, %rs33, 1;
	add.s16 	%rs35, %rs32, 1;
	add.s16 	%rs36, %rs31, 1;
	add.s16 	%rs37, %rs30, 1;
	shr.u16 	%rs38, %rs37, 1;
	shr.u16 	%rs39, %rs36, 1;
	shr.u16 	%rs40, %rs35, 1;
	shr.u16 	%rs41, %rs34, 1;
	and.b16  	%rs42, %rs41, 255;
	and.b16  	%rs43, %rs40, 255;
	and.b16  	%rs44, %rs39, 255;
	and.b16  	%rs45, %rs38, 255;
	sub.s32 	%r55, %r47, %r31;
	add.s32 	%r56, %r55, %r46;
	add.s32 	%r57, %r56, %r43;
	cvt.s64.s32 	%rd21, %r57;
	add.s64 	%rd22, %rd2, %rd21;
	add.s64 	%rd23, %rd22, 228;
	ld.global.nc.u8 	%rs46, [%rd22+228];
	cvt.u16.u8 	%rs47, %rs46;
	add.s64 	%rd24, %rd23, %rd7;
	add.s64 	%rd25, %rd24, 236;
	ld.global.nc.u8 	%rs48, [%rd24+236];
	cvt.u16.u8 	%rs49, %rs48;
	add.s64 	%rd26, %rd25, %rd7;
	add.s64 	%rd27, %rd26, 236;
	ld.global.u8 	%rs50, [%rd26+236];
	add.s64 	%rd28, %rd27, %rd7;
	ld.global.u8 	%rs51, [%rd28+236];
	add.s16 	%rs52, %rs45, %rs50;
	add.s16 	%rs53, %rs44, %rs51;
	add.s16 	%rs54, %rs43, %rs47;
	add.s16 	%rs55, %rs42, %rs49;
	add.s16 	%rs56, %rs55, 1;
	add.s16 	%rs57, %rs54, 1;
	add.s16 	%rs58, %rs53, 1;
	add.s16 	%rs59, %rs52, 1;
	shr.u16 	%rs60, %rs59, 1;
	shr.u16 	%rs61, %rs58, 1;
	shr.u16 	%rs62, %rs57, 1;
	shr.u16 	%rs63, %rs56, 1;
	sub.s32 	%r58, %r5, %r12;
	add.s32 	%r59, %r58, %r44;
	mul.lo.s32 	%r60, %r59, %r24;
	mad.lo.s32 	%r61, %r45, %r11, %r38;
	add.s32 	%r62, %r61, %r30;
	add.s32 	%r63, %r62, %r39;
	add.s32 	%r64, %r63, %r60;
	cvt.s64.s32 	%rd29, %r64;
	add.s64 	%rd30, %rd1, %rd29;
	st.global.v2.u8 	[%rd30], {%rs62, %rs63};
	st.global.v2.u8 	[%rd30+2], {%rs60, %rs61};
	add.s32 	%r65, %r40, %r22;
	mul.lo.s32 	%r66, %r65, %r42;
	add.s32 	%r67, %r49, %r66;
	cvt.s64.s32 	%rd31, %r67;
	add.s64 	%rd32, %rd2, %rd31;
	ld.global.nc.u8 	%rs64, [%rd32];
	cvt.u16.u8 	%rs65, %rs64;
	add.s64 	%rd33, %rd32, %rd7;
	add.s64 	%rd34, %rd33, 236;
	ld.global.nc.u8 	%rs66, [%rd33+236];
	cvt.u16.u8 	%rs67, %rs66;
	add.s64 	%rd35, %rd34, %rd7;
	add.s64 	%rd36, %rd35, 236;
	ld.global.nc.u8 	%rs68, [%rd35+236];
	cvt.u16.u8 	%rs69, %rs68;
	add.s64 	%rd37, %rd36, %rd7;
	ld.global.u8 	%rs70, [%rd37+236];
	add.s32 	%r68, %r53, %r66;
	cvt.s64.s32 	%rd38, %r68;
	add.s64 	%rd39, %rd2, %rd38;
	add.s64 	%rd40, %rd39, 464;
	ld.global.nc.u8 	%rs71, [%rd39+464];
	cvt.u16.u8 	%rs72, %rs71;
	add.s64 	%rd41, %rd40, %rd7;
	add.s64 	%rd42, %rd41, 236;
	ld.global.nc.u8 	%rs73, [%rd41+236];
	cvt.u16.u8 	%rs74, %rs73;
	add.s64 	%rd43, %rd42, %rd7;
	add.s64 	%rd44, %rd43, 236;
	ld.global.u8 	%rs75, [%rd43+236];
	add.s64 	%rd45, %rd44, %rd7;
	ld.global.u8 	%rs76, [%rd45+236];
	add.s16 	%rs77, %rs67, %rs74;
	add.s16 	%rs78, %rs65, %rs72;
	add.s16 	%rs79, %rs70, %rs76;
	add.s16 	%rs80, %rs69, %rs75;
	add.s16 	%rs81, %rs80, 1;
	add.s16 	%rs82, %rs79, 1;
	add.s16 	%rs83, %rs78, 1;
	add.s16 	%rs84, %rs77, 1;
	shr.u16 	%rs85, %rs84, 1;
	shr.u16 	%rs86, %rs83, 1;
	shr.u16 	%rs87, %rs82, 1;
	shr.u16 	%rs88, %rs81, 1;
	and.b16  	%rs89, %rs88, 255;
	and.b16  	%rs90, %rs87, 255;
	and.b16  	%rs91, %rs86, 255;
	and.b16  	%rs92, %rs85, 255;
	add.s32 	%r69, %r56, %r66;
	cvt.s64.s32 	%rd46, %r69;
	add.s64 	%rd47, %rd2, %rd46;
	add.s64 	%rd48, %rd47, 228;
	ld.global.nc.u8 	%rs93, [%rd47+228];
	cvt.u16.u8 	%rs94, %rs93;
	add.s64 	%rd49, %rd48, %rd7;
	add.s64 	%rd50, %rd49, 236;
	ld.global.nc.u8 	%rs95, [%rd49+236];
	cvt.u16.u8 	%rs96, %rs95;
	add.s64 	%rd51, %rd50, %rd7;
	add.s64 	%rd52, %rd51, 236;
	ld.global.u8 	%rs97, [%rd51+236];
	add.s64 	%rd53, %rd52, %rd7;
	ld.global.u8 	%rs98, [%rd53+236];
	add.s16 	%rs99, %rs92, %rs96;
	add.s16 	%rs100, %rs91, %rs94;
	add.s16 	%rs101, %rs90, %rs98;
	add.s16 	%rs102, %rs89, %rs97;
	add.s16 	%rs103, %rs102, 1;
	add.s16 	%rs104, %rs101, 1;
	add.s16 	%rs105, %rs100, 1;
	add.s16 	%rs106, %rs99, 1;
	shr.u16 	%rs107, %rs106, 1;
	shr.u16 	%rs108, %rs105, 1;
	shr.u16 	%rs109, %rs104, 1;
	shr.u16 	%rs110, %rs103, 1;
	add.s32 	%r70, %r61, %r29;
	add.s32 	%r71, %r70, %r39;
	add.s32 	%r72, %r71, %r60;
	cvt.s64.s32 	%rd54, %r72;
	add.s64 	%rd55, %rd1, %rd54;
	st.global.v2.u8 	[%rd55+2], {%rs110, %rs109};
	st.global.v2.u8 	[%rd55], {%rs108, %rs107};
	add.s32 	%r73, %r47, %r21;
	add.s32 	%r74, %r73, %r46;
	add.s32 	%r75, %r74, %r43;
	cvt.s64.s32 	%rd56, %r75;
	add.s64 	%rd57, %rd2, %rd56;
	ld.global.nc.u8 	%rs111, [%rd57];
	cvt.u16.u8 	%rs112, %rs111;
	add.s64 	%rd58, %rd57, %rd7;
	add.s64 	%rd59, %rd58, 236;
	ld.global.nc.u8 	%rs113, [%rd58+236];
	cvt.u16.u8 	%rs114, %rs113;
	add.s64 	%rd60, %rd59, %rd7;
	add.s64 	%rd61, %rd60, 236;
	ld.global.nc.u8 	%rs115, [%rd60+236];
	cvt.u16.u8 	%rs116, %rs115;
	add.s64 	%rd62, %rd61, %rd7;
	ld.global.u8 	%rs117, [%rd62+236];
	add.s64 	%rd63, %rd14, 465;
	ld.global.nc.u8 	%rs118, [%rd14+465];
	cvt.u16.u8 	%rs119, %rs118;
	add.s64 	%rd64, %rd63, %rd7;
	add.s64 	%rd65, %rd64, 236;
	ld.global.nc.u8 	%rs120, [%rd64+236];
	cvt.u16.u8 	%rs121, %rs120;
	add.s64 	%rd66, %rd65, %rd7;
	add.s64 	%rd67, %rd66, 236;
	ld.global.u8 	%rs122, [%rd66+236];
	add.s64 	%rd68, %rd67, %rd7;
	ld.global.u8 	%rs123, [%rd68+236];
	add.s16 	%rs124, %rs114, %rs121;
	add.s16 	%rs125, %rs112, %rs119;
	add.s16 	%rs126, %rs117, %rs123;
	add.s16 	%rs127, %rs116, %rs122;
	add.s16 	%rs128, %rs127, 1;
	add.s16 	%rs129, %rs126, 1;
	add.s16 	%rs130, %rs125, 1;
	add.s16 	%rs131, %rs124, 1;
	shr.u16 	%rs132, %rs131, 1;
	shr.u16 	%rs133, %rs130, 1;
	shr.u16 	%rs134, %rs129, 1;
	shr.u16 	%rs135, %rs128, 1;
	and.b16  	%rs136, %rs135, 255;
	and.b16  	%rs137, %rs134, 255;
	and.b16  	%rs138, %rs133, 255;
	and.b16  	%rs139, %rs132, 255;
	add.s64 	%rd69, %rd22, 229;
	ld.global.nc.u8 	%rs140, [%rd22+229];
	cvt.u16.u8 	%rs141, %rs140;
	add.s64 	%rd70, %rd69, %rd7;
	add.s64 	%rd71, %rd70, 236;
	ld.global.nc.u8 	%rs142, [%rd70+236];
	cvt.u16.u8 	%rs143, %rs142;
	add.s64 	%rd72, %rd71, %rd7;
	add.s64 	%rd73, %rd72, 236;
	ld.global.u8 	%rs144, [%rd72+236];
	add.s64 	%rd74, %rd73, %rd7;
	ld.global.u8 	%rs145, [%rd74+236];
	add.s16 	%rs146, %rs139, %rs143;
	add.s16 	%rs147, %rs138, %rs141;
	add.s16 	%rs148, %rs137, %rs145;
	add.s16 	%rs149, %rs136, %rs144;
	add.s16 	%rs150, %rs149, 1;
	add.s16 	%rs151, %rs148, 1;
	add.s16 	%rs152, %rs147, 1;
	add.s16 	%rs153, %rs146, 1;
	shr.u16 	%rs154, %rs153, 1;
	shr.u16 	%rs155, %rs152, 1;
	shr.u16 	%rs156, %rs151, 1;
	shr.u16 	%rs157, %rs150, 1;
	add.s32 	%r76, %r59, 1;
	mul.lo.s32 	%r77, %r76, %r24;
	add.s32 	%r78, %r63, %r77;
	cvt.s64.s32 	%rd75, %r78;
	add.s64 	%rd76, %rd1, %rd75;
	st.global.v2.u8 	[%rd76+2], {%rs157, %rs156};
	st.global.v2.u8 	[%rd76], {%rs155, %rs154};
	add.s32 	%r79, %r74, %r66;
	cvt.s64.s32 	%rd77, %r79;
	add.s64 	%rd78, %rd2, %rd77;
	ld.global.nc.u8 	%rs158, [%rd78];
	cvt.u16.u8 	%rs159, %rs158;
	add.s64 	%rd79, %rd78, %rd7;
	add.s64 	%rd80, %rd79, 236;
	ld.global.nc.u8 	%rs160, [%rd79+236];
	cvt.u16.u8 	%rs161, %rs160;
	add.s64 	%rd81, %rd80, %rd7;
	add.s64 	%rd82, %rd81, 236;
	ld.global.nc.u8 	%rs162, [%rd81+236];
	cvt.u16.u8 	%rs163, %rs162;
	add.s64 	%rd83, %rd82, %rd7;
	ld.global.u8 	%rs164, [%rd83+236];
	add.s64 	%rd84, %rd39, 465;
	ld.global.nc.u8 	%rs165, [%rd39+465];
	cvt.u16.u8 	%rs166, %rs165;
	add.s64 	%rd85, %rd84, %rd7;
	add.s64 	%rd86, %rd85, 236;
	ld.global.nc.u8 	%rs167, [%rd85+236];
	cvt.u16.u8 	%rs168, %rs167;
	add.s64 	%rd87, %rd86, %rd7;
	add.s64 	%rd88, %rd87, 236;
	ld.global.u8 	%rs169, [%rd87+236];
	add.s64 	%rd89, %rd88, %rd7;
	ld.global.u8 	%rs170, [%rd89+236];
	add.s16 	%rs171, %rs161, %rs168;
	add.s16 	%rs172, %rs159, %rs166;
	add.s16 	%rs173, %rs164, %rs170;
	add.s16 	%rs174, %rs163, %rs169;
	add.s16 	%rs175, %rs174, 1;
	add.s16 	%rs176, %rs173, 1;
	add.s16 	%rs177, %rs172, 1;
	add.s16 	%rs178, %rs171, 1;
	shr.u16 	%rs179, %rs178, 1;
	shr.u16 	%rs180, %rs177, 1;
	shr.u16 	%rs181, %rs176, 1;
	shr.u16 	%rs182, %rs175, 1;
	and.b16  	%rs183, %rs182, 255;
	and.b16  	%rs184, %rs181, 255;
	and.b16  	%rs185, %rs180, 255;
	and.b16  	%rs186, %rs179, 255;
	add.s64 	%rd90, %rd47, 229;
	ld.global.nc.u8 	%rs187, [%rd47+229];
	cvt.u16.u8 	%rs188, %rs187;
	add.s64 	%rd91, %rd90, %rd7;
	add.s64 	%rd92, %rd91, 236;
	ld.global.nc.u8 	%rs189, [%rd91+236];
	cvt.u16.u8 	%rs190, %rs189;
	add.s64 	%rd93, %rd92, %rd7;
	add.s64 	%rd94, %rd93, 236;
	ld.global.u8 	%rs191, [%rd93+236];
	add.s64 	%rd95, %rd94, %rd7;
	ld.global.u8 	%rs192, [%rd95+236];
	add.s16 	%rs193, %rs186, %rs190;
	add.s16 	%rs194, %rs185, %rs188;
	add.s16 	%rs195, %rs184, %rs192;
	add.s16 	%rs196, %rs183, %rs191;
	add.s16 	%rs197, %rs196, 1;
	add.s16 	%rs198, %rs195, 1;
	add.s16 	%rs199, %rs194, 1;
	add.s16 	%rs200, %rs193, 1;
	shr.u16 	%rs201, %rs200, 1;
	shr.u16 	%rs202, %rs199, 1;
	shr.u16 	%rs203, %rs198, 1;
	shr.u16 	%rs204, %rs197, 1;
	add.s32 	%r80, %r71, %r77;
	cvt.s64.s32 	%rd96, %r80;
	add.s64 	%rd97, %rd1, %rd96;
	st.global.v2.u8 	[%rd97+2], {%rs204, %rs203};
	st.global.v2.u8 	[%rd97], {%rs202, %rs201};
	add.s32 	%r81, %r47, %r20;
	add.s32 	%r82, %r81, %r46;
	add.s32 	%r83, %r82, %r43;
	cvt.s64.s32 	%rd98, %r83;
	add.s64 	%rd99, %rd2, %rd98;
	ld.global.nc.u8 	%rs205, [%rd99];
	cvt.u16.u8 	%rs206, %rs205;
	add.s64 	%rd100, %rd99, %rd7;
	add.s64 	%rd101, %rd100, 236;
	ld.global.nc.u8 	%rs207, [%rd100+236];
	cvt.u16.u8 	%rs208, %rs207;
	add.s64 	%rd102, %rd101, %rd7;
	add.s64 	%rd103, %rd102, 236;
	ld.global.nc.u8 	%rs209, [%rd102+236];
	cvt.u16.u8 	%rs210, %rs209;
	add.s64 	%rd104, %rd103, %rd7;
	ld.global.u8 	%rs211, [%rd104+236];
	add.s64 	%rd105, %rd14, 466;
	ld.global.nc.u8 	%rs212, [%rd14+466];
	cvt.u16.u8 	%rs213, %rs212;
	add.s64 	%rd106, %rd105, %rd7;
	add.s64 	%rd107, %rd106, 236;
	ld.global.nc.u8 	%rs214, [%rd106+236];
	cvt.u16.u8 	%rs215, %rs214;
	add.s64 	%rd108, %rd107, %rd7;
	add.s64 	%rd109, %rd108, 236;
	ld.global.u8 	%rs216, [%rd108+236];
	add.s64 	%rd110, %rd109, %rd7;
	ld.global.u8 	%rs217, [%rd110+236];
	add.s16 	%rs218, %rs208, %rs215;
	add.s16 	%rs219, %rs206, %rs213;
	add.s16 	%rs220, %rs211, %rs217;
	add.s16 	%rs221, %rs210, %rs216;
	add.s16 	%rs222, %rs221, 1;
	add.s16 	%rs223, %rs220, 1;
	add.s16 	%rs224, %rs219, 1;
	add.s16 	%rs225, %rs218, 1;
	shr.u16 	%rs226, %rs225, 1;
	shr.u16 	%rs227, %rs224, 1;
	shr.u16 	%rs228, %rs223, 1;
	shr.u16 	%rs229, %rs222, 1;
	and.b16  	%rs230, %rs229, 255;
	and.b16  	%rs231, %rs228, 255;
	and.b16  	%rs232, %rs227, 255;
	and.b16  	%rs233, %rs226, 255;
	add.s64 	%rd111, %rd22, 230;
	ld.global.nc.u8 	%rs234, [%rd22+230];
	cvt.u16.u8 	%rs235, %rs234;
	add.s64 	%rd112, %rd111, %rd7;
	add.s64 	%rd113, %rd112, 236;
	ld.global.nc.u8 	%rs236, [%rd112+236];
	cvt.u16.u8 	%rs237, %rs236;
	add.s64 	%rd114, %rd113, %rd7;
	add.s64 	%rd115, %rd114, 236;
	ld.global.u8 	%rs238, [%rd114+236];
	add.s64 	%rd116, %rd115, %rd7;
	ld.global.u8 	%rs239, [%rd116+236];
	add.s16 	%rs240, %rs233, %rs237;
	add.s16 	%rs241, %rs232, %rs235;
	add.s16 	%rs242, %rs231, %rs239;
	add.s16 	%rs243, %rs230, %rs238;
	add.s16 	%rs244, %rs243, 1;
	add.s16 	%rs245, %rs242, 1;
	add.s16 	%rs246, %rs241, 1;
	add.s16 	%rs247, %rs240, 1;
	shr.u16 	%rs248, %rs247, 1;
	shr.u16 	%rs249, %rs246, 1;
	shr.u16 	%rs250, %rs245, 1;
	shr.u16 	%rs251, %rs244, 1;
	add.s32 	%r84, %r47, %r19;
	mul.lo.s32 	%r85, %r84, %r24;
	add.s32 	%r86, %r63, %r85;
	cvt.s64.s32 	%rd117, %r86;
	add.s64 	%rd118, %rd1, %rd117;
	st.global.v2.u8 	[%rd118+2], {%rs251, %rs250};
	st.global.v2.u8 	[%rd118], {%rs249, %rs248};
	add.s32 	%r87, %r82, %r66;
	cvt.s64.s32 	%rd119, %r87;
	add.s64 	%rd120, %rd2, %rd119;
	ld.global.nc.u8 	%rs252, [%rd120];
	cvt.u16.u8 	%rs253, %rs252;
	add.s64 	%rd121, %rd120, %rd7;
	add.s64 	%rd122, %rd121, 236;
	ld.global.nc.u8 	%rs254, [%rd121+236];
	cvt.u16.u8 	%rs255, %rs254;
	add.s64 	%rd123, %rd122, %rd7;
	add.s64 	%rd124, %rd123, 236;
	ld.global.nc.u8 	%rs256, [%rd123+236];
	cvt.u16.u8 	%rs257, %rs256;
	add.s64 	%rd125, %rd124, %rd7;
	ld.global.u8 	%rs258, [%rd125+236];
	add.s64 	%rd126, %rd39, 466;
	ld.global.nc.u8 	%rs259, [%rd39+466];
	cvt.u16.u8 	%rs260, %rs259;
	add.s64 	%rd127, %rd126, %rd7;
	add.s64 	%rd128, %rd127, 236;
	ld.global.nc.u8 	%rs261, [%rd127+236];
	cvt.u16.u8 	%rs262, %rs261;
	add.s64 	%rd129, %rd128, %rd7;
	add.s64 	%rd130, %rd129, 236;
	ld.global.u8 	%rs263, [%rd129+236];
	add.s64 	%rd131, %rd130, %rd7;
	ld.global.u8 	%rs264, [%rd131+236];
	add.s16 	%rs265, %rs255, %rs262;
	add.s16 	%rs266, %rs253, %rs260;
	add.s16 	%rs267, %rs258, %rs264;
	add.s16 	%rs268, %rs257, %rs263;
	add.s16 	%rs269, %rs268, 1;
	add.s16 	%rs270, %rs267, 1;
	add.s16 	%rs271, %rs266, 1;
	add.s16 	%rs272, %rs265, 1;
	shr.u16 	%rs273, %rs272, 1;
	shr.u16 	%rs274, %rs271, 1;
	shr.u16 	%rs275, %rs270, 1;
	shr.u16 	%rs276, %rs269, 1;
	and.b16  	%rs277, %rs276, 255;
	and.b16  	%rs278, %rs275, 255;
	and.b16  	%rs279, %rs274, 255;
	and.b16  	%rs280, %rs273, 255;
	add.s64 	%rd132, %rd47, 230;
	ld.global.nc.u8 	%rs281, [%rd47+230];
	cvt.u16.u8 	%rs282, %rs281;
	add.s64 	%rd133, %rd132, %rd7;
	add.s64 	%rd134, %rd133, 236;
	ld.global.nc.u8 	%rs283, [%rd133+236];
	cvt.u16.u8 	%rs284, %rs283;
	add.s64 	%rd135, %rd134, %rd7;
	add.s64 	%rd136, %rd135, 236;
	ld.global.u8 	%rs285, [%rd135+236];
	add.s64 	%rd137, %rd136, %rd7;
	ld.global.u8 	%rs286, [%rd137+236];
	add.s16 	%rs287, %rs280, %rs284;
	add.s16 	%rs288, %rs279, %rs282;
	add.s16 	%rs289, %rs278, %rs286;
	add.s16 	%rs290, %rs277, %rs285;
	add.s16 	%rs291, %rs290, 1;
	add.s16 	%rs292, %rs289, 1;
	add.s16 	%rs293, %rs288, 1;
	add.s16 	%rs294, %rs287, 1;
	shr.u16 	%rs295, %rs294, 1;
	shr.u16 	%rs296, %rs293, 1;
	shr.u16 	%rs297, %rs292, 1;
	shr.u16 	%rs298, %rs291, 1;
	add.s32 	%r88, %r71, %r85;
	cvt.s64.s32 	%rd138, %r88;
	add.s64 	%rd139, %rd1, %rd138;
	st.global.v2.u8 	[%rd139+2], {%rs298, %rs297};
	st.global.v2.u8 	[%rd139], {%rs296, %rs295};
	add.s32 	%r89, %r47, %r18;
	add.s32 	%r90, %r89, %r46;
	add.s32 	%r91, %r90, %r43;
	cvt.s64.s32 	%rd140, %r91;
	add.s64 	%rd141, %rd2, %rd140;
	ld.global.nc.u8 	%rs299, [%rd141];
	cvt.u16.u8 	%rs300, %rs299;
	add.s64 	%rd142, %rd141, %rd7;
	add.s64 	%rd143, %rd142, 236;
	ld.global.nc.u8 	%rs301, [%rd142+236];
	cvt.u16.u8 	%rs302, %rs301;
	add.s64 	%rd144, %rd143, %rd7;
	add.s64 	%rd145, %rd144, 236;
	ld.global.nc.u8 	%rs303, [%rd144+236];
	cvt.u16.u8 	%rs304, %rs303;
	add.s64 	%rd146, %rd145, %rd7;
	ld.global.u8 	%rs305, [%rd146+236];
	add.s64 	%rd147, %rd14, 467;
	ld.global.nc.u8 	%rs306, [%rd14+467];
	cvt.u16.u8 	%rs307, %rs306;
	add.s64 	%rd148, %rd147, %rd7;
	add.s64 	%rd149, %rd148, 236;
	ld.global.nc.u8 	%rs308, [%rd148+236];
	cvt.u16.u8 	%rs309, %rs308;
	add.s64 	%rd150, %rd149, %rd7;
	add.s64 	%rd151, %rd150, 236;
	ld.global.u8 	%rs310, [%rd150+236];
	add.s64 	%rd152, %rd151, %rd7;
	ld.global.u8 	%rs311, [%rd152+236];
	add.s16 	%rs312, %rs302, %rs309;
	add.s16 	%rs313, %rs300, %rs307;
	add.s16 	%rs314, %rs305, %rs311;
	add.s16 	%rs315, %rs304, %rs310;
	add.s16 	%rs316, %rs315, 1;
	add.s16 	%rs317, %rs314, 1;
	add.s16 	%rs318, %rs313, 1;
	add.s16 	%rs319, %rs312, 1;
	shr.u16 	%rs320, %rs319, 1;
	shr.u16 	%rs321, %rs318, 1;
	shr.u16 	%rs322, %rs317, 1;
	shr.u16 	%rs323, %rs316, 1;
	and.b16  	%rs324, %rs323, 255;
	and.b16  	%rs325, %rs322, 255;
	and.b16  	%rs326, %rs321, 255;
	and.b16  	%rs327, %rs320, 255;
	add.s64 	%rd153, %rd22, 231;
	ld.global.nc.u8 	%rs328, [%rd22+231];
	cvt.u16.u8 	%rs329, %rs328;
	add.s64 	%rd154, %rd153, %rd7;
	add.s64 	%rd155, %rd154, 236;
	ld.global.nc.u8 	%rs330, [%rd154+236];
	cvt.u16.u8 	%rs331, %rs330;
	add.s64 	%rd156, %rd155, %rd7;
	add.s64 	%rd157, %rd156, 236;
	ld.global.u8 	%rs332, [%rd156+236];
	add.s64 	%rd158, %rd157, %rd7;
	ld.global.u8 	%rs333, [%rd158+236];
	add.s16 	%rs334, %rs327, %rs331;
	add.s16 	%rs335, %rs326, %rs329;
	add.s16 	%rs336, %rs325, %rs333;
	add.s16 	%rs337, %rs324, %rs332;
	add.s16 	%rs338, %rs337, 1;
	add.s16 	%rs339, %rs336, 1;
	add.s16 	%rs340, %rs335, 1;
	add.s16 	%rs341, %rs334, 1;
	shr.u16 	%rs342, %rs341, 1;
	shr.u16 	%rs343, %rs340, 1;
	shr.u16 	%rs344, %rs339, 1;
	shr.u16 	%rs345, %rs338, 1;
	add.s32 	%r92, %r59, 3;
	mul.lo.s32 	%r93, %r92, %r24;
	add.s32 	%r94, %r63, %r93;
	cvt.s64.s32 	%rd159, %r94;
	add.s64 	%rd160, %rd1, %rd159;
	st.global.v2.u8 	[%rd160+2], {%rs345, %rs344};
	st.global.v2.u8 	[%rd160], {%rs343, %rs342};
	add.s32 	%r95, %r90, %r66;
	cvt.s64.s32 	%rd161, %r95;
	add.s64 	%rd162, %rd2, %rd161;
	ld.global.nc.u8 	%rs346, [%rd162];
	cvt.u16.u8 	%rs347, %rs346;
	add.s64 	%rd163, %rd162, %rd7;
	add.s64 	%rd164, %rd163, 236;
	ld.global.nc.u8 	%rs348, [%rd163+236];
	cvt.u16.u8 	%rs349, %rs348;
	add.s64 	%rd165, %rd164, %rd7;
	add.s64 	%rd166, %rd165, 236;
	ld.global.nc.u8 	%rs350, [%rd165+236];
	cvt.u16.u8 	%rs351, %rs350;
	add.s64 	%rd167, %rd166, %rd7;
	ld.global.u8 	%rs352, [%rd167+236];
	add.s64 	%rd168, %rd39, 467;
	ld.global.nc.u8 	%rs353, [%rd39+467];
	cvt.u16.u8 	%rs354, %rs353;
	add.s64 	%rd169, %rd168, %rd7;
	add.s64 	%rd170, %rd169, 236;
	ld.global.nc.u8 	%rs355, [%rd169+236];
	cvt.u16.u8 	%rs356, %rs355;
	add.s64 	%rd171, %rd170, %rd7;
	add.s64 	%rd172, %rd171, 236;
	ld.global.u8 	%rs357, [%rd171+236];
	add.s64 	%rd173, %rd172, %rd7;
	ld.global.u8 	%rs358, [%rd173+236];
	add.s16 	%rs359, %rs347, %rs354;
	add.s16 	%rs360, %rs349, %rs356;
	add.s16 	%rs361, %rs351, %rs357;
	add.s16 	%rs362, %rs352, %rs358;
	add.s16 	%rs363, %rs362, 1;
	add.s16 	%rs364, %rs361, 1;
	add.s16 	%rs365, %rs360, 1;
	add.s16 	%rs366, %rs359, 1;
	shr.u16 	%rs367, %rs366, 1;
	shr.u16 	%rs368, %rs365, 1;
	shr.u16 	%rs369, %rs364, 1;
	shr.u16 	%rs370, %rs363, 1;
	and.b16  	%rs371, %rs370, 255;
	and.b16  	%rs372, %rs369, 255;
	and.b16  	%rs373, %rs368, 255;
	and.b16  	%rs374, %rs367, 255;
	add.s64 	%rd174, %rd47, 231;
	ld.global.nc.u8 	%rs375, [%rd47+231];
	cvt.u16.u8 	%rs376, %rs375;
	add.s64 	%rd175, %rd174, %rd7;
	add.s64 	%rd176, %rd175, 236;
	ld.global.nc.u8 	%rs377, [%rd175+236];
	cvt.u16.u8 	%rs378, %rs377;
	add.s64 	%rd177, %rd176, %rd7;
	add.s64 	%rd178, %rd177, 236;
	ld.global.u8 	%rs379, [%rd177+236];
	add.s64 	%rd179, %rd178, %rd7;
	ld.global.u8 	%rs380, [%rd179+236];
	add.s16 	%rs381, %rs374, %rs376;
	add.s16 	%rs382, %rs373, %rs378;
	add.s16 	%rs383, %rs372, %rs379;
	add.s16 	%rs384, %rs371, %rs380;
	add.s16 	%rs1128, %rs384, 1;
	add.s16 	%rs1127, %rs383, 1;
	add.s16 	%rs1126, %rs382, 1;
	add.s16 	%rs1125, %rs381, 1;
	add.s32 	%r192, %r71, %r93;
	bra.uni 	LBB9_4;
LBB9_1:                                 // %true_bb
	ld.param.u32 	%r28, [kernel_unsharp_y_s0____c____c___block_id_z_param_18];
	setp.lt.s32 	%p2, %r1, %r28;
	@%p2 bra 	LBB9_2;
	bra.uni 	LBB9_5;
LBB9_2:                                 // %true_bb1
	ld.param.u32 	%r23, [kernel_unsharp_y_s0____c____c___block_id_z_param_13];
	mad.lo.s32 	%r144, %r1, 31, %r4;
	shl.b32 	%r145, %r144, 3;
	add.s32 	%r146, %r145, %r26;
	add.s32 	%r147, %r27, 236;
	mul.lo.s32 	%r148, %r146, %r147;
	shl.b32 	%r149, %r3, 2;
	mul.lo.s32 	%r150, %r2, %r10;
	add.s32 	%r151, %r149, %r5;
	add.s32 	%r152, %r151, %r25;
	add.s32 	%r153, %r152, %r150;
	add.s32 	%r154, %r148, %r153;
	cvt.s64.s32 	%rd349, %r154;
	add.s64 	%rd350, %rd2, %rd349;
	ld.global.nc.u8 	%rs753, [%rd350];
	cvt.u16.u8 	%rs754, %rs753;
	cvt.s64.s32 	%rd351, %r27;
	add.s64 	%rd352, %rd350, %rd351;
	add.s64 	%rd353, %rd352, 236;
	ld.global.nc.u8 	%rs755, [%rd352+236];
	cvt.u16.u8 	%rs756, %rs755;
	add.s64 	%rd354, %rd353, %rd351;
	add.s64 	%rd355, %rd354, 236;
	ld.global.nc.u8 	%rs757, [%rd354+236];
	cvt.u16.u8 	%rs758, %rs757;
	add.s64 	%rd356, %rd355, %rd351;
	ld.global.u8 	%rs759, [%rd356+236];
	add.s32 	%r155, %r151, %r27;
	sub.s32 	%r156, %r155, %r31;
	add.s32 	%r157, %r156, %r150;
	add.s32 	%r158, %r148, %r157;
	cvt.s64.s32 	%rd357, %r158;
	add.s64 	%rd358, %rd2, %rd357;
	add.s64 	%rd359, %rd358, 464;
	ld.global.nc.u8 	%rs760, [%rd358+464];
	cvt.u16.u8 	%rs761, %rs760;
	add.s64 	%rd360, %rd359, %rd351;
	add.s64 	%rd361, %rd360, 236;
	ld.global.nc.u8 	%rs762, [%rd360+236];
	cvt.u16.u8 	%rs763, %rs762;
	add.s64 	%rd362, %rd361, %rd351;
	add.s64 	%rd363, %rd362, 236;
	ld.global.u8 	%rs764, [%rd362+236];
	add.s64 	%rd364, %rd363, %rd351;
	ld.global.u8 	%rs765, [%rd364+236];
	add.s16 	%rs766, %rs758, %rs764;
	add.s16 	%rs767, %rs759, %rs765;
	add.s16 	%rs768, %rs754, %rs761;
	add.s16 	%rs769, %rs756, %rs763;
	add.s16 	%rs770, %rs769, 1;
	add.s16 	%rs771, %rs768, 1;
	add.s16 	%rs772, %rs767, 1;
	add.s16 	%rs773, %rs766, 1;
	shr.u16 	%rs774, %rs773, 1;
	shr.u16 	%rs775, %rs772, 1;
	shr.u16 	%rs776, %rs771, 1;
	shr.u16 	%rs777, %rs770, 1;
	and.b16  	%rs778, %rs777, 255;
	and.b16  	%rs779, %rs776, 255;
	and.b16  	%rs780, %rs775, 255;
	and.b16  	%rs781, %rs774, 255;
	sub.s32 	%r159, %r151, %r31;
	add.s32 	%r160, %r159, %r150;
	add.s32 	%r161, %r148, %r160;
	cvt.s64.s32 	%rd365, %r161;
	add.s64 	%rd366, %rd2, %rd365;
	add.s64 	%rd367, %rd366, 228;
	ld.global.nc.u8 	%rs782, [%rd366+228];
	cvt.u16.u8 	%rs783, %rs782;
	add.s64 	%rd368, %rd367, %rd351;
	add.s64 	%rd369, %rd368, 236;
	ld.global.nc.u8 	%rs784, [%rd368+236];
	cvt.u16.u8 	%rs785, %rs784;
	add.s64 	%rd370, %rd369, %rd351;
	add.s64 	%rd371, %rd370, 236;
	ld.global.u8 	%rs786, [%rd370+236];
	add.s64 	%rd372, %rd371, %rd351;
	ld.global.u8 	%rs787, [%rd372+236];
	add.s16 	%rs788, %rs781, %rs786;
	add.s16 	%rs789, %rs780, %rs787;
	add.s16 	%rs790, %rs779, %rs783;
	add.s16 	%rs791, %rs778, %rs785;
	add.s16 	%rs792, %rs791, 1;
	add.s16 	%rs793, %rs790, 1;
	add.s16 	%rs794, %rs789, 1;
	add.s16 	%rs795, %rs788, 1;
	shr.u16 	%rs796, %rs795, 1;
	shr.u16 	%rs797, %rs794, 1;
	shr.u16 	%rs798, %rs793, 1;
	shr.u16 	%rs799, %rs792, 1;
	shl.b32 	%r162, %r144, 2;
	sub.s32 	%r163, %r162, %r23;
	shl.b32 	%r164, %r163, 1;
	sub.s32 	%r165, %r5, %r12;
	add.s32 	%r166, %r165, %r149;
	mad.lo.s32 	%r167, %r2, %r11, %r164;
	mad.lo.s32 	%r168, %r166, %r24, %r167;
	cvt.s64.s32 	%rd373, %r168;
	add.s64 	%rd374, %rd1, %rd373;
	st.global.v2.u8 	[%rd374+248], {%rs798, %rs799};
	st.global.v2.u8 	[%rd374+250], {%rs796, %rs797};
	add.s32 	%r169, %r145, %r22;
	mul.lo.s32 	%r170, %r169, %r147;
	add.s32 	%r171, %r170, %r153;
	cvt.s64.s32 	%rd375, %r171;
	add.s64 	%rd376, %rd2, %rd375;
	ld.global.nc.u8 	%rs800, [%rd376];
	cvt.u16.u8 	%rs801, %rs800;
	add.s64 	%rd377, %rd376, %rd351;
	add.s64 	%rd378, %rd377, 236;
	ld.global.nc.u8 	%rs802, [%rd377+236];
	cvt.u16.u8 	%rs803, %rs802;
	add.s64 	%rd379, %rd378, %rd351;
	add.s64 	%rd380, %rd379, 236;
	ld.global.nc.u8 	%rs804, [%rd379+236];
	cvt.u16.u8 	%rs805, %rs804;
	add.s64 	%rd381, %rd380, %rd351;
	ld.global.u8 	%rs806, [%rd381+236];
	add.s32 	%r172, %r170, %r157;
	cvt.s64.s32 	%rd382, %r172;
	add.s64 	%rd383, %rd2, %rd382;
	add.s64 	%rd384, %rd383, 464;
	ld.global.nc.u8 	%rs807, [%rd383+464];
	cvt.u16.u8 	%rs808, %rs807;
	add.s64 	%rd385, %rd384, %rd351;
	add.s64 	%rd386, %rd385, 236;
	ld.global.nc.u8 	%rs809, [%rd385+236];
	cvt.u16.u8 	%rs810, %rs809;
	add.s64 	%rd387, %rd386, %rd351;
	add.s64 	%rd388, %rd387, 236;
	ld.global.u8 	%rs811, [%rd387+236];
	add.s64 	%rd389, %rd388, %rd351;
	ld.global.u8 	%rs812, [%rd389+236];
	add.s16 	%rs813, %rs803, %rs810;
	add.s16 	%rs814, %rs801, %rs808;
	add.s16 	%rs815, %rs806, %rs812;
	add.s16 	%rs816, %rs805, %rs811;
	add.s16 	%rs817, %rs816, 1;
	add.s16 	%rs818, %rs815, 1;
	add.s16 	%rs819, %rs814, 1;
	add.s16 	%rs820, %rs813, 1;
	shr.u16 	%rs821, %rs820, 1;
	shr.u16 	%rs822, %rs819, 1;
	shr.u16 	%rs823, %rs818, 1;
	shr.u16 	%rs824, %rs817, 1;
	and.b16  	%rs825, %rs824, 255;
	and.b16  	%rs826, %rs823, 255;
	and.b16  	%rs827, %rs822, 255;
	and.b16  	%rs828, %rs821, 255;
	add.s32 	%r173, %r170, %r160;
	cvt.s64.s32 	%rd390, %r173;
	add.s64 	%rd391, %rd2, %rd390;
	add.s64 	%rd392, %rd391, 228;
	ld.global.nc.u8 	%rs829, [%rd391+228];
	cvt.u16.u8 	%rs830, %rs829;
	add.s64 	%rd393, %rd392, %rd351;
	add.s64 	%rd394, %rd393, 236;
	ld.global.nc.u8 	%rs831, [%rd393+236];
	cvt.u16.u8 	%rs832, %rs831;
	add.s64 	%rd395, %rd394, %rd351;
	add.s64 	%rd396, %rd395, 236;
	ld.global.u8 	%rs833, [%rd395+236];
	add.s64 	%rd397, %rd396, %rd351;
	ld.global.u8 	%rs834, [%rd397+236];
	add.s16 	%rs835, %rs828, %rs832;
	add.s16 	%rs836, %rs827, %rs830;
	add.s16 	%rs837, %rs826, %rs834;
	add.s16 	%rs838, %rs825, %rs833;
	add.s16 	%rs839, %rs838, 1;
	add.s16 	%rs840, %rs837, 1;
	add.s16 	%rs841, %rs836, 1;
	add.s16 	%rs842, %rs835, 1;
	shr.u16 	%rs843, %rs842, 1;
	shr.u16 	%rs844, %rs841, 1;
	shr.u16 	%rs845, %rs840, 1;
	shr.u16 	%rs846, %rs839, 1;
	st.global.v2.u8 	[%rd374+254], {%rs846, %rs845};
	st.global.v2.u8 	[%rd374+252], {%rs844, %rs843};
	add.s32 	%r174, %r151, %r21;
	add.s32 	%r175, %r174, %r150;
	add.s32 	%r176, %r148, %r175;
	cvt.s64.s32 	%rd398, %r176;
	add.s64 	%rd399, %rd2, %rd398;
	ld.global.nc.u8 	%rs847, [%rd399];
	cvt.u16.u8 	%rs848, %rs847;
	add.s64 	%rd400, %rd399, %rd351;
	add.s64 	%rd401, %rd400, 236;
	ld.global.nc.u8 	%rs849, [%rd400+236];
	cvt.u16.u8 	%rs850, %rs849;
	add.s64 	%rd402, %rd401, %rd351;
	add.s64 	%rd403, %rd402, 236;
	ld.global.nc.u8 	%rs851, [%rd402+236];
	cvt.u16.u8 	%rs852, %rs851;
	add.s64 	%rd404, %rd403, %rd351;
	ld.global.u8 	%rs853, [%rd404+236];
	add.s64 	%rd405, %rd358, 465;
	ld.global.nc.u8 	%rs854, [%rd358+465];
	cvt.u16.u8 	%rs855, %rs854;
	add.s64 	%rd406, %rd405, %rd351;
	add.s64 	%rd407, %rd406, 236;
	ld.global.nc.u8 	%rs856, [%rd406+236];
	cvt.u16.u8 	%rs857, %rs856;
	add.s64 	%rd408, %rd407, %rd351;
	add.s64 	%rd409, %rd408, 236;
	ld.global.u8 	%rs858, [%rd408+236];
	add.s64 	%rd410, %rd409, %rd351;
	ld.global.u8 	%rs859, [%rd410+236];
	add.s16 	%rs860, %rs850, %rs857;
	add.s16 	%rs861, %rs848, %rs855;
	add.s16 	%rs862, %rs853, %rs859;
	add.s16 	%rs863, %rs852, %rs858;
	add.s16 	%rs864, %rs863, 1;
	add.s16 	%rs865, %rs862, 1;
	add.s16 	%rs866, %rs861, 1;
	add.s16 	%rs867, %rs860, 1;
	shr.u16 	%rs868, %rs867, 1;
	shr.u16 	%rs869, %rs866, 1;
	shr.u16 	%rs870, %rs865, 1;
	shr.u16 	%rs871, %rs864, 1;
	and.b16  	%rs872, %rs871, 255;
	and.b16  	%rs873, %rs870, 255;
	and.b16  	%rs874, %rs869, 255;
	and.b16  	%rs875, %rs868, 255;
	add.s64 	%rd411, %rd366, 229;
	ld.global.nc.u8 	%rs876, [%rd366+229];
	cvt.u16.u8 	%rs877, %rs876;
	add.s64 	%rd412, %rd411, %rd351;
	add.s64 	%rd413, %rd412, 236;
	ld.global.nc.u8 	%rs878, [%rd412+236];
	cvt.u16.u8 	%rs879, %rs878;
	add.s64 	%rd414, %rd413, %rd351;
	add.s64 	%rd415, %rd414, 236;
	ld.global.u8 	%rs880, [%rd414+236];
	add.s64 	%rd416, %rd415, %rd351;
	ld.global.u8 	%rs881, [%rd416+236];
	add.s16 	%rs882, %rs875, %rs879;
	add.s16 	%rs883, %rs874, %rs877;
	add.s16 	%rs884, %rs873, %rs881;
	add.s16 	%rs885, %rs872, %rs880;
	add.s16 	%rs886, %rs885, 1;
	add.s16 	%rs887, %rs884, 1;
	add.s16 	%rs888, %rs883, 1;
	add.s16 	%rs889, %rs882, 1;
	shr.u16 	%rs890, %rs889, 1;
	shr.u16 	%rs891, %rs888, 1;
	shr.u16 	%rs892, %rs887, 1;
	shr.u16 	%rs893, %rs886, 1;
	add.s32 	%r177, %r166, 1;
	mad.lo.s32 	%r178, %r177, %r24, %r167;
	cvt.s64.s32 	%rd417, %r178;
	add.s64 	%rd418, %rd1, %rd417;
	st.global.v2.u8 	[%rd418+250], {%rs893, %rs892};
	st.global.v2.u8 	[%rd418+248], {%rs891, %rs890};
	add.s32 	%r179, %r170, %r175;
	cvt.s64.s32 	%rd419, %r179;
	add.s64 	%rd420, %rd2, %rd419;
	ld.global.nc.u8 	%rs894, [%rd420];
	cvt.u16.u8 	%rs895, %rs894;
	add.s64 	%rd421, %rd420, %rd351;
	add.s64 	%rd422, %rd421, 236;
	ld.global.nc.u8 	%rs896, [%rd421+236];
	cvt.u16.u8 	%rs897, %rs896;
	add.s64 	%rd423, %rd422, %rd351;
	add.s64 	%rd424, %rd423, 236;
	ld.global.nc.u8 	%rs898, [%rd423+236];
	cvt.u16.u8 	%rs899, %rs898;
	add.s64 	%rd425, %rd424, %rd351;
	ld.global.u8 	%rs900, [%rd425+236];
	add.s64 	%rd426, %rd383, 465;
	ld.global.nc.u8 	%rs901, [%rd383+465];
	cvt.u16.u8 	%rs902, %rs901;
	add.s64 	%rd427, %rd426, %rd351;
	add.s64 	%rd428, %rd427, 236;
	ld.global.nc.u8 	%rs903, [%rd427+236];
	cvt.u16.u8 	%rs904, %rs903;
	add.s64 	%rd429, %rd428, %rd351;
	add.s64 	%rd430, %rd429, 236;
	ld.global.u8 	%rs905, [%rd429+236];
	add.s64 	%rd431, %rd430, %rd351;
	ld.global.u8 	%rs906, [%rd431+236];
	add.s16 	%rs907, %rs897, %rs904;
	add.s16 	%rs908, %rs895, %rs902;
	add.s16 	%rs909, %rs900, %rs906;
	add.s16 	%rs910, %rs899, %rs905;
	add.s16 	%rs911, %rs910, 1;
	add.s16 	%rs912, %rs909, 1;
	add.s16 	%rs913, %rs908, 1;
	add.s16 	%rs914, %rs907, 1;
	shr.u16 	%rs915, %rs914, 1;
	shr.u16 	%rs916, %rs913, 1;
	shr.u16 	%rs917, %rs912, 1;
	shr.u16 	%rs918, %rs911, 1;
	and.b16  	%rs919, %rs918, 255;
	and.b16  	%rs920, %rs917, 255;
	and.b16  	%rs921, %rs916, 255;
	and.b16  	%rs922, %rs915, 255;
	add.s64 	%rd432, %rd391, 229;
	ld.global.nc.u8 	%rs923, [%rd391+229];
	cvt.u16.u8 	%rs924, %rs923;
	add.s64 	%rd433, %rd432, %rd351;
	add.s64 	%rd434, %rd433, 236;
	ld.global.nc.u8 	%rs925, [%rd433+236];
	cvt.u16.u8 	%rs926, %rs925;
	add.s64 	%rd435, %rd434, %rd351;
	add.s64 	%rd436, %rd435, 236;
	ld.global.u8 	%rs927, [%rd435+236];
	add.s64 	%rd437, %rd436, %rd351;
	ld.global.u8 	%rs928, [%rd437+236];
	add.s16 	%rs929, %rs922, %rs926;
	add.s16 	%rs930, %rs921, %rs924;
	add.s16 	%rs931, %rs920, %rs928;
	add.s16 	%rs932, %rs919, %rs927;
	add.s16 	%rs933, %rs932, 1;
	add.s16 	%rs934, %rs931, 1;
	add.s16 	%rs935, %rs930, 1;
	add.s16 	%rs936, %rs929, 1;
	shr.u16 	%rs937, %rs936, 1;
	shr.u16 	%rs938, %rs935, 1;
	shr.u16 	%rs939, %rs934, 1;
	shr.u16 	%rs940, %rs933, 1;
	st.global.v2.u8 	[%rd418+254], {%rs940, %rs939};
	st.global.v2.u8 	[%rd418+252], {%rs938, %rs937};
	add.s32 	%r180, %r151, %r20;
	add.s32 	%r181, %r180, %r150;
	add.s32 	%r182, %r148, %r181;
	cvt.s64.s32 	%rd438, %r182;
	add.s64 	%rd439, %rd2, %rd438;
	ld.global.nc.u8 	%rs941, [%rd439];
	cvt.u16.u8 	%rs942, %rs941;
	add.s64 	%rd440, %rd439, %rd351;
	add.s64 	%rd441, %rd440, 236;
	ld.global.nc.u8 	%rs943, [%rd440+236];
	cvt.u16.u8 	%rs944, %rs943;
	add.s64 	%rd442, %rd441, %rd351;
	add.s64 	%rd443, %rd442, 236;
	ld.global.nc.u8 	%rs945, [%rd442+236];
	cvt.u16.u8 	%rs946, %rs945;
	add.s64 	%rd444, %rd443, %rd351;
	ld.global.u8 	%rs947, [%rd444+236];
	add.s64 	%rd445, %rd358, 466;
	ld.global.nc.u8 	%rs948, [%rd358+466];
	cvt.u16.u8 	%rs949, %rs948;
	add.s64 	%rd446, %rd445, %rd351;
	add.s64 	%rd447, %rd446, 236;
	ld.global.nc.u8 	%rs950, [%rd446+236];
	cvt.u16.u8 	%rs951, %rs950;
	add.s64 	%rd448, %rd447, %rd351;
	add.s64 	%rd449, %rd448, 236;
	ld.global.u8 	%rs952, [%rd448+236];
	add.s64 	%rd450, %rd449, %rd351;
	ld.global.u8 	%rs953, [%rd450+236];
	add.s16 	%rs954, %rs944, %rs951;
	add.s16 	%rs955, %rs942, %rs949;
	add.s16 	%rs956, %rs947, %rs953;
	add.s16 	%rs957, %rs946, %rs952;
	add.s16 	%rs958, %rs957, 1;
	add.s16 	%rs959, %rs956, 1;
	add.s16 	%rs960, %rs955, 1;
	add.s16 	%rs961, %rs954, 1;
	shr.u16 	%rs962, %rs961, 1;
	shr.u16 	%rs963, %rs960, 1;
	shr.u16 	%rs964, %rs959, 1;
	shr.u16 	%rs965, %rs958, 1;
	and.b16  	%rs966, %rs965, 255;
	and.b16  	%rs967, %rs964, 255;
	and.b16  	%rs968, %rs963, 255;
	and.b16  	%rs969, %rs962, 255;
	add.s64 	%rd451, %rd366, 230;
	ld.global.nc.u8 	%rs970, [%rd366+230];
	cvt.u16.u8 	%rs971, %rs970;
	add.s64 	%rd452, %rd451, %rd351;
	add.s64 	%rd453, %rd452, 236;
	ld.global.nc.u8 	%rs972, [%rd452+236];
	cvt.u16.u8 	%rs973, %rs972;
	add.s64 	%rd454, %rd453, %rd351;
	add.s64 	%rd455, %rd454, 236;
	ld.global.u8 	%rs974, [%rd454+236];
	add.s64 	%rd456, %rd455, %rd351;
	ld.global.u8 	%rs975, [%rd456+236];
	add.s16 	%rs976, %rs969, %rs973;
	add.s16 	%rs977, %rs968, %rs971;
	add.s16 	%rs978, %rs967, %rs975;
	add.s16 	%rs979, %rs966, %rs974;
	add.s16 	%rs980, %rs979, 1;
	add.s16 	%rs981, %rs978, 1;
	add.s16 	%rs982, %rs977, 1;
	add.s16 	%rs983, %rs976, 1;
	shr.u16 	%rs984, %rs983, 1;
	shr.u16 	%rs985, %rs982, 1;
	shr.u16 	%rs986, %rs981, 1;
	shr.u16 	%rs987, %rs980, 1;
	add.s32 	%r183, %r151, %r19;
	mad.lo.s32 	%r184, %r183, %r24, %r167;
	cvt.s64.s32 	%rd457, %r184;
	add.s64 	%rd458, %rd1, %rd457;
	st.global.v2.u8 	[%rd458+250], {%rs987, %rs986};
	st.global.v2.u8 	[%rd458+248], {%rs985, %rs984};
	add.s32 	%r185, %r170, %r181;
	cvt.s64.s32 	%rd459, %r185;
	add.s64 	%rd460, %rd2, %rd459;
	ld.global.nc.u8 	%rs988, [%rd460];
	cvt.u16.u8 	%rs989, %rs988;
	add.s64 	%rd461, %rd460, %rd351;
	add.s64 	%rd462, %rd461, 236;
	ld.global.nc.u8 	%rs990, [%rd461+236];
	cvt.u16.u8 	%rs991, %rs990;
	add.s64 	%rd463, %rd462, %rd351;
	add.s64 	%rd464, %rd463, 236;
	ld.global.nc.u8 	%rs992, [%rd463+236];
	cvt.u16.u8 	%rs993, %rs992;
	add.s64 	%rd465, %rd464, %rd351;
	ld.global.u8 	%rs994, [%rd465+236];
	add.s64 	%rd466, %rd383, 466;
	ld.global.nc.u8 	%rs995, [%rd383+466];
	cvt.u16.u8 	%rs996, %rs995;
	add.s64 	%rd467, %rd466, %rd351;
	add.s64 	%rd468, %rd467, 236;
	ld.global.nc.u8 	%rs997, [%rd467+236];
	cvt.u16.u8 	%rs998, %rs997;
	add.s64 	%rd469, %rd468, %rd351;
	add.s64 	%rd470, %rd469, 236;
	ld.global.u8 	%rs999, [%rd469+236];
	add.s64 	%rd471, %rd470, %rd351;
	ld.global.u8 	%rs1000, [%rd471+236];
	add.s16 	%rs1001, %rs991, %rs998;
	add.s16 	%rs1002, %rs989, %rs996;
	add.s16 	%rs1003, %rs994, %rs1000;
	add.s16 	%rs1004, %rs993, %rs999;
	add.s16 	%rs1005, %rs1004, 1;
	add.s16 	%rs1006, %rs1003, 1;
	add.s16 	%rs1007, %rs1002, 1;
	add.s16 	%rs1008, %rs1001, 1;
	shr.u16 	%rs1009, %rs1008, 1;
	shr.u16 	%rs1010, %rs1007, 1;
	shr.u16 	%rs1011, %rs1006, 1;
	shr.u16 	%rs1012, %rs1005, 1;
	and.b16  	%rs1013, %rs1012, 255;
	and.b16  	%rs1014, %rs1011, 255;
	and.b16  	%rs1015, %rs1010, 255;
	and.b16  	%rs1016, %rs1009, 255;
	add.s64 	%rd472, %rd391, 230;
	ld.global.nc.u8 	%rs1017, [%rd391+230];
	cvt.u16.u8 	%rs1018, %rs1017;
	add.s64 	%rd473, %rd472, %rd351;
	add.s64 	%rd474, %rd473, 236;
	ld.global.nc.u8 	%rs1019, [%rd473+236];
	cvt.u16.u8 	%rs1020, %rs1019;
	add.s64 	%rd475, %rd474, %rd351;
	add.s64 	%rd476, %rd475, 236;
	ld.global.u8 	%rs1021, [%rd475+236];
	add.s64 	%rd477, %rd476, %rd351;
	ld.global.u8 	%rs1022, [%rd477+236];
	add.s16 	%rs1023, %rs1016, %rs1020;
	add.s16 	%rs1024, %rs1015, %rs1018;
	add.s16 	%rs1025, %rs1014, %rs1022;
	add.s16 	%rs1026, %rs1013, %rs1021;
	add.s16 	%rs1027, %rs1026, 1;
	add.s16 	%rs1028, %rs1025, 1;
	add.s16 	%rs1029, %rs1024, 1;
	add.s16 	%rs1030, %rs1023, 1;
	shr.u16 	%rs1031, %rs1030, 1;
	shr.u16 	%rs1032, %rs1029, 1;
	shr.u16 	%rs1033, %rs1028, 1;
	shr.u16 	%rs1034, %rs1027, 1;
	st.global.v2.u8 	[%rd458+254], {%rs1034, %rs1033};
	st.global.v2.u8 	[%rd458+252], {%rs1032, %rs1031};
	add.s32 	%r186, %r151, %r18;
	add.s32 	%r187, %r186, %r150;
	add.s32 	%r188, %r148, %r187;
	cvt.s64.s32 	%rd478, %r188;
	add.s64 	%rd479, %rd2, %rd478;
	ld.global.nc.u8 	%rs1035, [%rd479];
	cvt.u16.u8 	%rs1036, %rs1035;
	add.s64 	%rd480, %rd479, %rd351;
	add.s64 	%rd481, %rd480, 236;
	ld.global.nc.u8 	%rs1037, [%rd480+236];
	cvt.u16.u8 	%rs1038, %rs1037;
	add.s64 	%rd482, %rd481, %rd351;
	add.s64 	%rd483, %rd482, 236;
	ld.global.nc.u8 	%rs1039, [%rd482+236];
	cvt.u16.u8 	%rs1040, %rs1039;
	add.s64 	%rd484, %rd483, %rd351;
	ld.global.u8 	%rs1041, [%rd484+236];
	add.s64 	%rd485, %rd358, 467;
	ld.global.nc.u8 	%rs1042, [%rd358+467];
	cvt.u16.u8 	%rs1043, %rs1042;
	add.s64 	%rd486, %rd485, %rd351;
	add.s64 	%rd487, %rd486, 236;
	ld.global.nc.u8 	%rs1044, [%rd486+236];
	cvt.u16.u8 	%rs1045, %rs1044;
	add.s64 	%rd488, %rd487, %rd351;
	add.s64 	%rd489, %rd488, 236;
	ld.global.u8 	%rs1046, [%rd488+236];
	add.s64 	%rd490, %rd489, %rd351;
	ld.global.u8 	%rs1047, [%rd490+236];
	add.s16 	%rs1048, %rs1038, %rs1045;
	add.s16 	%rs1049, %rs1036, %rs1043;
	add.s16 	%rs1050, %rs1041, %rs1047;
	add.s16 	%rs1051, %rs1040, %rs1046;
	add.s16 	%rs1052, %rs1051, 1;
	add.s16 	%rs1053, %rs1050, 1;
	add.s16 	%rs1054, %rs1049, 1;
	add.s16 	%rs1055, %rs1048, 1;
	shr.u16 	%rs1056, %rs1055, 1;
	shr.u16 	%rs1057, %rs1054, 1;
	shr.u16 	%rs1058, %rs1053, 1;
	shr.u16 	%rs1059, %rs1052, 1;
	and.b16  	%rs1060, %rs1059, 255;
	and.b16  	%rs1061, %rs1058, 255;
	and.b16  	%rs1062, %rs1057, 255;
	and.b16  	%rs1063, %rs1056, 255;
	add.s64 	%rd491, %rd366, 231;
	ld.global.nc.u8 	%rs1064, [%rd366+231];
	cvt.u16.u8 	%rs1065, %rs1064;
	add.s64 	%rd492, %rd491, %rd351;
	add.s64 	%rd493, %rd492, 236;
	ld.global.nc.u8 	%rs1066, [%rd492+236];
	cvt.u16.u8 	%rs1067, %rs1066;
	add.s64 	%rd494, %rd493, %rd351;
	add.s64 	%rd495, %rd494, 236;
	ld.global.u8 	%rs1068, [%rd494+236];
	add.s64 	%rd496, %rd495, %rd351;
	ld.global.u8 	%rs1069, [%rd496+236];
	add.s16 	%rs1070, %rs1063, %rs1067;
	add.s16 	%rs1071, %rs1062, %rs1065;
	add.s16 	%rs1072, %rs1061, %rs1069;
	add.s16 	%rs1073, %rs1060, %rs1068;
	add.s16 	%rs1074, %rs1073, 1;
	add.s16 	%rs1075, %rs1072, 1;
	add.s16 	%rs1076, %rs1071, 1;
	add.s16 	%rs1077, %rs1070, 1;
	shr.u16 	%rs1078, %rs1077, 1;
	shr.u16 	%rs1079, %rs1076, 1;
	shr.u16 	%rs1080, %rs1075, 1;
	shr.u16 	%rs1081, %rs1074, 1;
	add.s32 	%r189, %r166, 3;
	mad.lo.s32 	%r190, %r189, %r24, %r167;
	cvt.s64.s32 	%rd497, %r190;
	add.s64 	%rd498, %rd1, %rd497;
	st.global.v2.u8 	[%rd498+250], {%rs1081, %rs1080};
	st.global.v2.u8 	[%rd498+248], {%rs1079, %rs1078};
	add.s32 	%r191, %r170, %r187;
	cvt.s64.s32 	%rd499, %r191;
	add.s64 	%rd500, %rd2, %rd499;
	ld.global.nc.u8 	%rs1082, [%rd500];
	cvt.u16.u8 	%rs1083, %rs1082;
	add.s64 	%rd501, %rd500, %rd351;
	add.s64 	%rd502, %rd501, 236;
	ld.global.nc.u8 	%rs1084, [%rd501+236];
	cvt.u16.u8 	%rs1085, %rs1084;
	add.s64 	%rd503, %rd502, %rd351;
	add.s64 	%rd504, %rd503, 236;
	ld.global.nc.u8 	%rs1086, [%rd503+236];
	cvt.u16.u8 	%rs1087, %rs1086;
	add.s64 	%rd505, %rd504, %rd351;
	ld.global.u8 	%rs1088, [%rd505+236];
	add.s64 	%rd506, %rd383, 467;
	ld.global.nc.u8 	%rs1089, [%rd383+467];
	cvt.u16.u8 	%rs1090, %rs1089;
	add.s64 	%rd507, %rd506, %rd351;
	add.s64 	%rd508, %rd507, 236;
	ld.global.nc.u8 	%rs1091, [%rd507+236];
	cvt.u16.u8 	%rs1092, %rs1091;
	add.s64 	%rd509, %rd508, %rd351;
	add.s64 	%rd510, %rd509, 236;
	ld.global.u8 	%rs1093, [%rd509+236];
	add.s64 	%rd511, %rd510, %rd351;
	ld.global.u8 	%rs1094, [%rd511+236];
	add.s16 	%rs1095, %rs1083, %rs1090;
	add.s16 	%rs1096, %rs1085, %rs1092;
	add.s16 	%rs1097, %rs1087, %rs1093;
	add.s16 	%rs1098, %rs1088, %rs1094;
	add.s16 	%rs1099, %rs1098, 1;
	add.s16 	%rs1100, %rs1097, 1;
	add.s16 	%rs1101, %rs1096, 1;
	add.s16 	%rs1102, %rs1095, 1;
	shr.u16 	%rs1103, %rs1102, 1;
	shr.u16 	%rs1104, %rs1101, 1;
	shr.u16 	%rs1105, %rs1100, 1;
	shr.u16 	%rs1106, %rs1099, 1;
	and.b16  	%rs1107, %rs1106, 255;
	and.b16  	%rs1108, %rs1105, 255;
	and.b16  	%rs1109, %rs1104, 255;
	and.b16  	%rs1110, %rs1103, 255;
	add.s64 	%rd512, %rd391, 231;
	ld.global.nc.u8 	%rs1111, [%rd391+231];
	cvt.u16.u8 	%rs1112, %rs1111;
	add.s64 	%rd513, %rd512, %rd351;
	add.s64 	%rd514, %rd513, 236;
	ld.global.nc.u8 	%rs1113, [%rd513+236];
	cvt.u16.u8 	%rs1114, %rs1113;
	add.s64 	%rd515, %rd514, %rd351;
	add.s64 	%rd516, %rd515, 236;
	ld.global.u8 	%rs1115, [%rd515+236];
	add.s64 	%rd517, %rd516, %rd351;
	ld.global.u8 	%rs1116, [%rd517+236];
	add.s16 	%rs1117, %rs1110, %rs1112;
	add.s16 	%rs1118, %rs1109, %rs1114;
	add.s16 	%rs1119, %rs1108, %rs1115;
	add.s16 	%rs1120, %rs1107, %rs1116;
	add.s16 	%rs1128, %rs1120, 1;
	add.s16 	%rs1127, %rs1119, 1;
	add.s16 	%rs1126, %rs1118, 1;
	add.s16 	%rs1125, %rs1117, 1;
	add.s32 	%r192, %r190, 252;
	bra.uni 	LBB9_4;
LBB9_5:                                 // %false_bb2
	ld.param.u32 	%r17, [kernel_unsharp_y_s0____c____c___block_id_z_param_7];
	ld.param.u32 	%r16, [kernel_unsharp_y_s0____c____c___block_id_z_param_6];
	ld.param.u32 	%r15, [kernel_unsharp_y_s0____c____c___block_id_z_param_5];
	ld.param.u32 	%r13, [kernel_unsharp_y_s0____c____c___block_id_z_param_3];
	shl.b32 	%r96, %r4, 2;
	add.s32 	%r97, %r96, %r13;
	shl.b32 	%r98, %r97, 1;
	add.s32 	%r99, %r98, %r17;
	add.s32 	%r100, %r27, 236;
	mul.lo.s32 	%r101, %r99, %r100;
	shl.b32 	%r102, %r3, 2;
	mul.lo.s32 	%r103, %r2, %r10;
	add.s32 	%r104, %r102, %r5;
	add.s32 	%r105, %r104, %r25;
	add.s32 	%r106, %r105, %r103;
	add.s32 	%r107, %r101, %r106;
	cvt.s64.s32 	%rd180, %r107;
	add.s64 	%rd181, %rd2, %rd180;
	ld.global.nc.u8 	%rs385, [%rd181];
	cvt.u16.u8 	%rs386, %rs385;
	cvt.s64.s32 	%rd182, %r27;
	add.s64 	%rd183, %rd181, %rd182;
	add.s64 	%rd184, %rd183, 236;
	ld.global.nc.u8 	%rs387, [%rd183+236];
	cvt.u16.u8 	%rs388, %rs387;
	add.s64 	%rd185, %rd184, %rd182;
	add.s64 	%rd186, %rd185, 236;
	ld.global.nc.u8 	%rs389, [%rd185+236];
	cvt.u16.u8 	%rs390, %rs389;
	add.s64 	%rd187, %rd186, %rd182;
	ld.global.u8 	%rs391, [%rd187+236];
	add.s32 	%r108, %r104, %r27;
	sub.s32 	%r109, %r108, %r31;
	add.s32 	%r110, %r109, %r103;
	add.s32 	%r111, %r101, %r110;
	cvt.s64.s32 	%rd188, %r111;
	add.s64 	%rd189, %rd2, %rd188;
	add.s64 	%rd190, %rd189, 464;
	ld.global.nc.u8 	%rs392, [%rd189+464];
	cvt.u16.u8 	%rs393, %rs392;
	add.s64 	%rd191, %rd190, %rd182;
	add.s64 	%rd192, %rd191, 236;
	ld.global.nc.u8 	%rs394, [%rd191+236];
	cvt.u16.u8 	%rs395, %rs394;
	add.s64 	%rd193, %rd192, %rd182;
	add.s64 	%rd194, %rd193, 236;
	ld.global.u8 	%rs396, [%rd193+236];
	add.s64 	%rd195, %rd194, %rd182;
	ld.global.u8 	%rs397, [%rd195+236];
	add.s16 	%rs398, %rs390, %rs396;
	add.s16 	%rs399, %rs391, %rs397;
	add.s16 	%rs400, %rs386, %rs393;
	add.s16 	%rs401, %rs388, %rs395;
	add.s16 	%rs402, %rs401, 1;
	add.s16 	%rs403, %rs400, 1;
	add.s16 	%rs404, %rs399, 1;
	add.s16 	%rs405, %rs398, 1;
	shr.u16 	%rs406, %rs405, 1;
	shr.u16 	%rs407, %rs404, 1;
	shr.u16 	%rs408, %rs403, 1;
	shr.u16 	%rs409, %rs402, 1;
	and.b16  	%rs410, %rs409, 255;
	and.b16  	%rs411, %rs408, 255;
	and.b16  	%rs412, %rs407, 255;
	and.b16  	%rs413, %rs406, 255;
	sub.s32 	%r112, %r104, %r31;
	add.s32 	%r113, %r112, %r103;
	add.s32 	%r114, %r101, %r113;
	cvt.s64.s32 	%rd196, %r114;
	add.s64 	%rd197, %rd2, %rd196;
	add.s64 	%rd198, %rd197, 228;
	ld.global.nc.u8 	%rs414, [%rd197+228];
	cvt.u16.u8 	%rs415, %rs414;
	add.s64 	%rd199, %rd198, %rd182;
	add.s64 	%rd200, %rd199, 236;
	ld.global.nc.u8 	%rs416, [%rd199+236];
	cvt.u16.u8 	%rs417, %rs416;
	add.s64 	%rd201, %rd200, %rd182;
	add.s64 	%rd202, %rd201, 236;
	ld.global.u8 	%rs418, [%rd201+236];
	add.s64 	%rd203, %rd202, %rd182;
	ld.global.u8 	%rs419, [%rd203+236];
	add.s16 	%rs420, %rs413, %rs418;
	add.s16 	%rs421, %rs412, %rs419;
	add.s16 	%rs422, %rs411, %rs415;
	add.s16 	%rs423, %rs410, %rs417;
	add.s16 	%rs424, %rs423, 1;
	add.s16 	%rs425, %rs422, 1;
	add.s16 	%rs426, %rs421, 1;
	add.s16 	%rs427, %rs420, 1;
	shr.u16 	%rs428, %rs427, 1;
	shr.u16 	%rs429, %rs426, 1;
	shr.u16 	%rs430, %rs425, 1;
	shr.u16 	%rs431, %rs424, 1;
	add.s32 	%r115, %r96, %r16;
	shl.b32 	%r116, %r115, 1;
	sub.s32 	%r117, %r5, %r12;
	add.s32 	%r118, %r117, %r102;
	mad.lo.s32 	%r119, %r2, %r11, %r116;
	mad.lo.s32 	%r120, %r118, %r24, %r119;
	cvt.s64.s32 	%rd204, %r120;
	add.s64 	%rd205, %rd1, %rd204;
	st.global.v2.u8 	[%rd205+-248], {%rs430, %rs431};
	st.global.v2.u8 	[%rd205+-246], {%rs428, %rs429};
	add.s32 	%r121, %r98, %r15;
	mul.lo.s32 	%r122, %r121, %r100;
	add.s32 	%r123, %r122, %r106;
	cvt.s64.s32 	%rd206, %r123;
	add.s64 	%rd207, %rd2, %rd206;
	ld.global.nc.u8 	%rs432, [%rd207];
	cvt.u16.u8 	%rs433, %rs432;
	add.s64 	%rd208, %rd207, %rd182;
	add.s64 	%rd209, %rd208, 236;
	ld.global.nc.u8 	%rs434, [%rd208+236];
	cvt.u16.u8 	%rs435, %rs434;
	add.s64 	%rd210, %rd209, %rd182;
	add.s64 	%rd211, %rd210, 236;
	ld.global.nc.u8 	%rs436, [%rd210+236];
	cvt.u16.u8 	%rs437, %rs436;
	add.s64 	%rd212, %rd211, %rd182;
	ld.global.u8 	%rs438, [%rd212+236];
	add.s32 	%r124, %r122, %r110;
	cvt.s64.s32 	%rd213, %r124;
	add.s64 	%rd214, %rd2, %rd213;
	add.s64 	%rd215, %rd214, 464;
	ld.global.nc.u8 	%rs439, [%rd214+464];
	cvt.u16.u8 	%rs440, %rs439;
	add.s64 	%rd216, %rd215, %rd182;
	add.s64 	%rd217, %rd216, 236;
	ld.global.nc.u8 	%rs441, [%rd216+236];
	cvt.u16.u8 	%rs442, %rs441;
	add.s64 	%rd218, %rd217, %rd182;
	add.s64 	%rd219, %rd218, 236;
	ld.global.u8 	%rs443, [%rd218+236];
	add.s64 	%rd220, %rd219, %rd182;
	ld.global.u8 	%rs444, [%rd220+236];
	add.s16 	%rs445, %rs435, %rs442;
	add.s16 	%rs446, %rs433, %rs440;
	add.s16 	%rs447, %rs438, %rs444;
	add.s16 	%rs448, %rs437, %rs443;
	add.s16 	%rs449, %rs448, 1;
	add.s16 	%rs450, %rs447, 1;
	add.s16 	%rs451, %rs446, 1;
	add.s16 	%rs452, %rs445, 1;
	shr.u16 	%rs453, %rs452, 1;
	shr.u16 	%rs454, %rs451, 1;
	shr.u16 	%rs455, %rs450, 1;
	shr.u16 	%rs456, %rs449, 1;
	and.b16  	%rs457, %rs456, 255;
	and.b16  	%rs458, %rs455, 255;
	and.b16  	%rs459, %rs454, 255;
	and.b16  	%rs460, %rs453, 255;
	add.s32 	%r125, %r122, %r113;
	cvt.s64.s32 	%rd221, %r125;
	add.s64 	%rd222, %rd2, %rd221;
	add.s64 	%rd223, %rd222, 228;
	ld.global.nc.u8 	%rs461, [%rd222+228];
	cvt.u16.u8 	%rs462, %rs461;
	add.s64 	%rd224, %rd223, %rd182;
	add.s64 	%rd225, %rd224, 236;
	ld.global.nc.u8 	%rs463, [%rd224+236];
	cvt.u16.u8 	%rs464, %rs463;
	add.s64 	%rd226, %rd225, %rd182;
	add.s64 	%rd227, %rd226, 236;
	ld.global.u8 	%rs465, [%rd226+236];
	add.s64 	%rd228, %rd227, %rd182;
	ld.global.u8 	%rs466, [%rd228+236];
	add.s16 	%rs467, %rs460, %rs464;
	add.s16 	%rs468, %rs459, %rs462;
	add.s16 	%rs469, %rs458, %rs466;
	add.s16 	%rs470, %rs457, %rs465;
	add.s16 	%rs471, %rs470, 1;
	add.s16 	%rs472, %rs469, 1;
	add.s16 	%rs473, %rs468, 1;
	add.s16 	%rs474, %rs467, 1;
	shr.u16 	%rs475, %rs474, 1;
	shr.u16 	%rs476, %rs473, 1;
	shr.u16 	%rs477, %rs472, 1;
	shr.u16 	%rs478, %rs471, 1;
	st.global.v2.u8 	[%rd205+-242], {%rs478, %rs477};
	st.global.v2.u8 	[%rd205+-244], {%rs476, %rs475};
	add.s32 	%r126, %r104, %r21;
	add.s32 	%r127, %r126, %r103;
	add.s32 	%r128, %r101, %r127;
	cvt.s64.s32 	%rd229, %r128;
	add.s64 	%rd230, %rd2, %rd229;
	ld.global.nc.u8 	%rs479, [%rd230];
	cvt.u16.u8 	%rs480, %rs479;
	add.s64 	%rd231, %rd230, %rd182;
	add.s64 	%rd232, %rd231, 236;
	ld.global.nc.u8 	%rs481, [%rd231+236];
	cvt.u16.u8 	%rs482, %rs481;
	add.s64 	%rd233, %rd232, %rd182;
	add.s64 	%rd234, %rd233, 236;
	ld.global.nc.u8 	%rs483, [%rd233+236];
	cvt.u16.u8 	%rs484, %rs483;
	add.s64 	%rd235, %rd234, %rd182;
	ld.global.u8 	%rs485, [%rd235+236];
	add.s64 	%rd236, %rd189, 465;
	ld.global.nc.u8 	%rs486, [%rd189+465];
	cvt.u16.u8 	%rs487, %rs486;
	add.s64 	%rd237, %rd236, %rd182;
	add.s64 	%rd238, %rd237, 236;
	ld.global.nc.u8 	%rs488, [%rd237+236];
	cvt.u16.u8 	%rs489, %rs488;
	add.s64 	%rd239, %rd238, %rd182;
	add.s64 	%rd240, %rd239, 236;
	ld.global.u8 	%rs490, [%rd239+236];
	add.s64 	%rd241, %rd240, %rd182;
	ld.global.u8 	%rs491, [%rd241+236];
	add.s16 	%rs492, %rs482, %rs489;
	add.s16 	%rs493, %rs480, %rs487;
	add.s16 	%rs494, %rs485, %rs491;
	add.s16 	%rs495, %rs484, %rs490;
	add.s16 	%rs496, %rs495, 1;
	add.s16 	%rs497, %rs494, 1;
	add.s16 	%rs498, %rs493, 1;
	add.s16 	%rs499, %rs492, 1;
	shr.u16 	%rs500, %rs499, 1;
	shr.u16 	%rs501, %rs498, 1;
	shr.u16 	%rs502, %rs497, 1;
	shr.u16 	%rs503, %rs496, 1;
	and.b16  	%rs504, %rs503, 255;
	and.b16  	%rs505, %rs502, 255;
	and.b16  	%rs506, %rs501, 255;
	and.b16  	%rs507, %rs500, 255;
	add.s64 	%rd242, %rd197, 229;
	ld.global.nc.u8 	%rs508, [%rd197+229];
	cvt.u16.u8 	%rs509, %rs508;
	add.s64 	%rd243, %rd242, %rd182;
	add.s64 	%rd244, %rd243, 236;
	ld.global.nc.u8 	%rs510, [%rd243+236];
	cvt.u16.u8 	%rs511, %rs510;
	add.s64 	%rd245, %rd244, %rd182;
	add.s64 	%rd246, %rd245, 236;
	ld.global.u8 	%rs512, [%rd245+236];
	add.s64 	%rd247, %rd246, %rd182;
	ld.global.u8 	%rs513, [%rd247+236];
	add.s16 	%rs514, %rs507, %rs511;
	add.s16 	%rs515, %rs506, %rs509;
	add.s16 	%rs516, %rs505, %rs513;
	add.s16 	%rs517, %rs504, %rs512;
	add.s16 	%rs518, %rs517, 1;
	add.s16 	%rs519, %rs516, 1;
	add.s16 	%rs520, %rs515, 1;
	add.s16 	%rs521, %rs514, 1;
	shr.u16 	%rs522, %rs521, 1;
	shr.u16 	%rs523, %rs520, 1;
	shr.u16 	%rs524, %rs519, 1;
	shr.u16 	%rs525, %rs518, 1;
	add.s32 	%r129, %r118, 1;
	mad.lo.s32 	%r130, %r129, %r24, %r119;
	cvt.s64.s32 	%rd248, %r130;
	add.s64 	%rd249, %rd1, %rd248;
	st.global.v2.u8 	[%rd249+-246], {%rs525, %rs524};
	st.global.v2.u8 	[%rd249+-248], {%rs523, %rs522};
	add.s32 	%r131, %r122, %r127;
	cvt.s64.s32 	%rd250, %r131;
	add.s64 	%rd251, %rd2, %rd250;
	ld.global.nc.u8 	%rs526, [%rd251];
	cvt.u16.u8 	%rs527, %rs526;
	add.s64 	%rd252, %rd251, %rd182;
	add.s64 	%rd253, %rd252, 236;
	ld.global.nc.u8 	%rs528, [%rd252+236];
	cvt.u16.u8 	%rs529, %rs528;
	add.s64 	%rd254, %rd253, %rd182;
	add.s64 	%rd255, %rd254, 236;
	ld.global.nc.u8 	%rs530, [%rd254+236];
	cvt.u16.u8 	%rs531, %rs530;
	add.s64 	%rd256, %rd255, %rd182;
	ld.global.u8 	%rs532, [%rd256+236];
	add.s64 	%rd257, %rd214, 465;
	ld.global.nc.u8 	%rs533, [%rd214+465];
	cvt.u16.u8 	%rs534, %rs533;
	add.s64 	%rd258, %rd257, %rd182;
	add.s64 	%rd259, %rd258, 236;
	ld.global.nc.u8 	%rs535, [%rd258+236];
	cvt.u16.u8 	%rs536, %rs535;
	add.s64 	%rd260, %rd259, %rd182;
	add.s64 	%rd261, %rd260, 236;
	ld.global.u8 	%rs537, [%rd260+236];
	add.s64 	%rd262, %rd261, %rd182;
	ld.global.u8 	%rs538, [%rd262+236];
	add.s16 	%rs539, %rs529, %rs536;
	add.s16 	%rs540, %rs527, %rs534;
	add.s16 	%rs541, %rs532, %rs538;
	add.s16 	%rs542, %rs531, %rs537;
	add.s16 	%rs543, %rs542, 1;
	add.s16 	%rs544, %rs541, 1;
	add.s16 	%rs545, %rs540, 1;
	add.s16 	%rs546, %rs539, 1;
	shr.u16 	%rs547, %rs546, 1;
	shr.u16 	%rs548, %rs545, 1;
	shr.u16 	%rs549, %rs544, 1;
	shr.u16 	%rs550, %rs543, 1;
	and.b16  	%rs551, %rs550, 255;
	and.b16  	%rs552, %rs549, 255;
	and.b16  	%rs553, %rs548, 255;
	and.b16  	%rs554, %rs547, 255;
	add.s64 	%rd263, %rd222, 229;
	ld.global.nc.u8 	%rs555, [%rd222+229];
	cvt.u16.u8 	%rs556, %rs555;
	add.s64 	%rd264, %rd263, %rd182;
	add.s64 	%rd265, %rd264, 236;
	ld.global.nc.u8 	%rs557, [%rd264+236];
	cvt.u16.u8 	%rs558, %rs557;
	add.s64 	%rd266, %rd265, %rd182;
	add.s64 	%rd267, %rd266, 236;
	ld.global.u8 	%rs559, [%rd266+236];
	add.s64 	%rd268, %rd267, %rd182;
	ld.global.u8 	%rs560, [%rd268+236];
	add.s16 	%rs561, %rs554, %rs558;
	add.s16 	%rs562, %rs553, %rs556;
	add.s16 	%rs563, %rs552, %rs560;
	add.s16 	%rs564, %rs551, %rs559;
	add.s16 	%rs565, %rs564, 1;
	add.s16 	%rs566, %rs563, 1;
	add.s16 	%rs567, %rs562, 1;
	add.s16 	%rs568, %rs561, 1;
	shr.u16 	%rs569, %rs568, 1;
	shr.u16 	%rs570, %rs567, 1;
	shr.u16 	%rs571, %rs566, 1;
	shr.u16 	%rs572, %rs565, 1;
	st.global.v2.u8 	[%rd249+-242], {%rs572, %rs571};
	st.global.v2.u8 	[%rd249+-244], {%rs570, %rs569};
	add.s32 	%r132, %r104, %r20;
	add.s32 	%r133, %r132, %r103;
	add.s32 	%r134, %r101, %r133;
	cvt.s64.s32 	%rd269, %r134;
	add.s64 	%rd270, %rd2, %rd269;
	ld.global.nc.u8 	%rs573, [%rd270];
	cvt.u16.u8 	%rs574, %rs573;
	add.s64 	%rd271, %rd270, %rd182;
	add.s64 	%rd272, %rd271, 236;
	ld.global.nc.u8 	%rs575, [%rd271+236];
	cvt.u16.u8 	%rs576, %rs575;
	add.s64 	%rd273, %rd272, %rd182;
	add.s64 	%rd274, %rd273, 236;
	ld.global.nc.u8 	%rs577, [%rd273+236];
	cvt.u16.u8 	%rs578, %rs577;
	add.s64 	%rd275, %rd274, %rd182;
	ld.global.u8 	%rs579, [%rd275+236];
	add.s64 	%rd276, %rd189, 466;
	ld.global.nc.u8 	%rs580, [%rd189+466];
	cvt.u16.u8 	%rs581, %rs580;
	add.s64 	%rd277, %rd276, %rd182;
	add.s64 	%rd278, %rd277, 236;
	ld.global.nc.u8 	%rs582, [%rd277+236];
	cvt.u16.u8 	%rs583, %rs582;
	add.s64 	%rd279, %rd278, %rd182;
	add.s64 	%rd280, %rd279, 236;
	ld.global.u8 	%rs584, [%rd279+236];
	add.s64 	%rd281, %rd280, %rd182;
	ld.global.u8 	%rs585, [%rd281+236];
	add.s16 	%rs586, %rs576, %rs583;
	add.s16 	%rs587, %rs574, %rs581;
	add.s16 	%rs588, %rs579, %rs585;
	add.s16 	%rs589, %rs578, %rs584;
	add.s16 	%rs590, %rs589, 1;
	add.s16 	%rs591, %rs588, 1;
	add.s16 	%rs592, %rs587, 1;
	add.s16 	%rs593, %rs586, 1;
	shr.u16 	%rs594, %rs593, 1;
	shr.u16 	%rs595, %rs592, 1;
	shr.u16 	%rs596, %rs591, 1;
	shr.u16 	%rs597, %rs590, 1;
	and.b16  	%rs598, %rs597, 255;
	and.b16  	%rs599, %rs596, 255;
	and.b16  	%rs600, %rs595, 255;
	and.b16  	%rs601, %rs594, 255;
	add.s64 	%rd282, %rd197, 230;
	ld.global.nc.u8 	%rs602, [%rd197+230];
	cvt.u16.u8 	%rs603, %rs602;
	add.s64 	%rd283, %rd282, %rd182;
	add.s64 	%rd284, %rd283, 236;
	ld.global.nc.u8 	%rs604, [%rd283+236];
	cvt.u16.u8 	%rs605, %rs604;
	add.s64 	%rd285, %rd284, %rd182;
	add.s64 	%rd286, %rd285, 236;
	ld.global.u8 	%rs606, [%rd285+236];
	add.s64 	%rd287, %rd286, %rd182;
	ld.global.u8 	%rs607, [%rd287+236];
	add.s16 	%rs608, %rs601, %rs605;
	add.s16 	%rs609, %rs600, %rs603;
	add.s16 	%rs610, %rs599, %rs607;
	add.s16 	%rs611, %rs598, %rs606;
	add.s16 	%rs612, %rs611, 1;
	add.s16 	%rs613, %rs610, 1;
	add.s16 	%rs614, %rs609, 1;
	add.s16 	%rs615, %rs608, 1;
	shr.u16 	%rs616, %rs615, 1;
	shr.u16 	%rs617, %rs614, 1;
	shr.u16 	%rs618, %rs613, 1;
	shr.u16 	%rs619, %rs612, 1;
	add.s32 	%r135, %r104, %r19;
	mad.lo.s32 	%r136, %r135, %r24, %r119;
	cvt.s64.s32 	%rd288, %r136;
	add.s64 	%rd289, %rd1, %rd288;
	st.global.v2.u8 	[%rd289+-246], {%rs619, %rs618};
	st.global.v2.u8 	[%rd289+-248], {%rs617, %rs616};
	add.s32 	%r137, %r122, %r133;
	cvt.s64.s32 	%rd290, %r137;
	add.s64 	%rd291, %rd2, %rd290;
	ld.global.nc.u8 	%rs620, [%rd291];
	cvt.u16.u8 	%rs621, %rs620;
	add.s64 	%rd292, %rd291, %rd182;
	add.s64 	%rd293, %rd292, 236;
	ld.global.nc.u8 	%rs622, [%rd292+236];
	cvt.u16.u8 	%rs623, %rs622;
	add.s64 	%rd294, %rd293, %rd182;
	add.s64 	%rd295, %rd294, 236;
	ld.global.nc.u8 	%rs624, [%rd294+236];
	cvt.u16.u8 	%rs625, %rs624;
	add.s64 	%rd296, %rd295, %rd182;
	ld.global.u8 	%rs626, [%rd296+236];
	add.s64 	%rd297, %rd214, 466;
	ld.global.nc.u8 	%rs627, [%rd214+466];
	cvt.u16.u8 	%rs628, %rs627;
	add.s64 	%rd298, %rd297, %rd182;
	add.s64 	%rd299, %rd298, 236;
	ld.global.nc.u8 	%rs629, [%rd298+236];
	cvt.u16.u8 	%rs630, %rs629;
	add.s64 	%rd300, %rd299, %rd182;
	add.s64 	%rd301, %rd300, 236;
	ld.global.u8 	%rs631, [%rd300+236];
	add.s64 	%rd302, %rd301, %rd182;
	ld.global.u8 	%rs632, [%rd302+236];
	add.s16 	%rs633, %rs623, %rs630;
	add.s16 	%rs634, %rs621, %rs628;
	add.s16 	%rs635, %rs626, %rs632;
	add.s16 	%rs636, %rs625, %rs631;
	add.s16 	%rs637, %rs636, 1;
	add.s16 	%rs638, %rs635, 1;
	add.s16 	%rs639, %rs634, 1;
	add.s16 	%rs640, %rs633, 1;
	shr.u16 	%rs641, %rs640, 1;
	shr.u16 	%rs642, %rs639, 1;
	shr.u16 	%rs643, %rs638, 1;
	shr.u16 	%rs644, %rs637, 1;
	and.b16  	%rs645, %rs644, 255;
	and.b16  	%rs646, %rs643, 255;
	and.b16  	%rs647, %rs642, 255;
	and.b16  	%rs648, %rs641, 255;
	add.s64 	%rd303, %rd222, 230;
	ld.global.nc.u8 	%rs649, [%rd222+230];
	cvt.u16.u8 	%rs650, %rs649;
	add.s64 	%rd304, %rd303, %rd182;
	add.s64 	%rd305, %rd304, 236;
	ld.global.nc.u8 	%rs651, [%rd304+236];
	cvt.u16.u8 	%rs652, %rs651;
	add.s64 	%rd306, %rd305, %rd182;
	add.s64 	%rd307, %rd306, 236;
	ld.global.u8 	%rs653, [%rd306+236];
	add.s64 	%rd308, %rd307, %rd182;
	ld.global.u8 	%rs654, [%rd308+236];
	add.s16 	%rs655, %rs648, %rs652;
	add.s16 	%rs656, %rs647, %rs650;
	add.s16 	%rs657, %rs646, %rs654;
	add.s16 	%rs658, %rs645, %rs653;
	add.s16 	%rs659, %rs658, 1;
	add.s16 	%rs660, %rs657, 1;
	add.s16 	%rs661, %rs656, 1;
	add.s16 	%rs662, %rs655, 1;
	shr.u16 	%rs663, %rs662, 1;
	shr.u16 	%rs664, %rs661, 1;
	shr.u16 	%rs665, %rs660, 1;
	shr.u16 	%rs666, %rs659, 1;
	st.global.v2.u8 	[%rd289+-242], {%rs666, %rs665};
	st.global.v2.u8 	[%rd289+-244], {%rs664, %rs663};
	add.s32 	%r138, %r104, %r18;
	add.s32 	%r139, %r138, %r103;
	add.s32 	%r140, %r101, %r139;
	cvt.s64.s32 	%rd309, %r140;
	add.s64 	%rd310, %rd2, %rd309;
	ld.global.nc.u8 	%rs667, [%rd310];
	cvt.u16.u8 	%rs668, %rs667;
	add.s64 	%rd311, %rd310, %rd182;
	add.s64 	%rd312, %rd311, 236;
	ld.global.nc.u8 	%rs669, [%rd311+236];
	cvt.u16.u8 	%rs670, %rs669;
	add.s64 	%rd313, %rd312, %rd182;
	add.s64 	%rd314, %rd313, 236;
	ld.global.nc.u8 	%rs671, [%rd313+236];
	cvt.u16.u8 	%rs672, %rs671;
	add.s64 	%rd315, %rd314, %rd182;
	ld.global.u8 	%rs673, [%rd315+236];
	add.s64 	%rd316, %rd189, 467;
	ld.global.nc.u8 	%rs674, [%rd189+467];
	cvt.u16.u8 	%rs675, %rs674;
	add.s64 	%rd317, %rd316, %rd182;
	add.s64 	%rd318, %rd317, 236;
	ld.global.nc.u8 	%rs676, [%rd317+236];
	cvt.u16.u8 	%rs677, %rs676;
	add.s64 	%rd319, %rd318, %rd182;
	add.s64 	%rd320, %rd319, 236;
	ld.global.u8 	%rs678, [%rd319+236];
	add.s64 	%rd321, %rd320, %rd182;
	ld.global.u8 	%rs679, [%rd321+236];
	add.s16 	%rs680, %rs670, %rs677;
	add.s16 	%rs681, %rs668, %rs675;
	add.s16 	%rs682, %rs673, %rs679;
	add.s16 	%rs683, %rs672, %rs678;
	add.s16 	%rs684, %rs683, 1;
	add.s16 	%rs685, %rs682, 1;
	add.s16 	%rs686, %rs681, 1;
	add.s16 	%rs687, %rs680, 1;
	shr.u16 	%rs688, %rs687, 1;
	shr.u16 	%rs689, %rs686, 1;
	shr.u16 	%rs690, %rs685, 1;
	shr.u16 	%rs691, %rs684, 1;
	and.b16  	%rs692, %rs691, 255;
	and.b16  	%rs693, %rs690, 255;
	and.b16  	%rs694, %rs689, 255;
	and.b16  	%rs695, %rs688, 255;
	add.s64 	%rd322, %rd197, 231;
	ld.global.nc.u8 	%rs696, [%rd197+231];
	cvt.u16.u8 	%rs697, %rs696;
	add.s64 	%rd323, %rd322, %rd182;
	add.s64 	%rd324, %rd323, 236;
	ld.global.nc.u8 	%rs698, [%rd323+236];
	cvt.u16.u8 	%rs699, %rs698;
	add.s64 	%rd325, %rd324, %rd182;
	add.s64 	%rd326, %rd325, 236;
	ld.global.u8 	%rs700, [%rd325+236];
	add.s64 	%rd327, %rd326, %rd182;
	ld.global.u8 	%rs701, [%rd327+236];
	add.s16 	%rs702, %rs695, %rs699;
	add.s16 	%rs703, %rs694, %rs697;
	add.s16 	%rs704, %rs693, %rs701;
	add.s16 	%rs705, %rs692, %rs700;
	add.s16 	%rs706, %rs705, 1;
	add.s16 	%rs707, %rs704, 1;
	add.s16 	%rs708, %rs703, 1;
	add.s16 	%rs709, %rs702, 1;
	shr.u16 	%rs710, %rs709, 1;
	shr.u16 	%rs711, %rs708, 1;
	shr.u16 	%rs712, %rs707, 1;
	shr.u16 	%rs713, %rs706, 1;
	add.s32 	%r141, %r118, 3;
	mad.lo.s32 	%r142, %r141, %r24, %r119;
	cvt.s64.s32 	%rd328, %r142;
	add.s64 	%rd329, %rd1, %rd328;
	st.global.v2.u8 	[%rd329+-246], {%rs713, %rs712};
	st.global.v2.u8 	[%rd329+-248], {%rs711, %rs710};
	add.s32 	%r143, %r122, %r139;
	cvt.s64.s32 	%rd330, %r143;
	add.s64 	%rd331, %rd2, %rd330;
	ld.global.nc.u8 	%rs714, [%rd331];
	cvt.u16.u8 	%rs715, %rs714;
	add.s64 	%rd332, %rd331, %rd182;
	add.s64 	%rd333, %rd332, 236;
	ld.global.nc.u8 	%rs716, [%rd332+236];
	cvt.u16.u8 	%rs717, %rs716;
	add.s64 	%rd334, %rd333, %rd182;
	add.s64 	%rd335, %rd334, 236;
	ld.global.nc.u8 	%rs718, [%rd334+236];
	cvt.u16.u8 	%rs719, %rs718;
	add.s64 	%rd336, %rd335, %rd182;
	ld.global.u8 	%rs720, [%rd336+236];
	add.s64 	%rd337, %rd214, 467;
	ld.global.nc.u8 	%rs721, [%rd214+467];
	cvt.u16.u8 	%rs722, %rs721;
	add.s64 	%rd338, %rd337, %rd182;
	add.s64 	%rd339, %rd338, 236;
	ld.global.nc.u8 	%rs723, [%rd338+236];
	cvt.u16.u8 	%rs724, %rs723;
	add.s64 	%rd340, %rd339, %rd182;
	add.s64 	%rd341, %rd340, 236;
	ld.global.u8 	%rs725, [%rd340+236];
	add.s64 	%rd342, %rd341, %rd182;
	ld.global.u8 	%rs726, [%rd342+236];
	add.s16 	%rs727, %rs715, %rs722;
	add.s16 	%rs728, %rs717, %rs724;
	add.s16 	%rs729, %rs719, %rs725;
	add.s16 	%rs730, %rs720, %rs726;
	add.s16 	%rs731, %rs730, 1;
	add.s16 	%rs732, %rs729, 1;
	add.s16 	%rs733, %rs728, 1;
	add.s16 	%rs734, %rs727, 1;
	shr.u16 	%rs735, %rs734, 1;
	shr.u16 	%rs736, %rs733, 1;
	shr.u16 	%rs737, %rs732, 1;
	shr.u16 	%rs738, %rs731, 1;
	and.b16  	%rs739, %rs738, 255;
	and.b16  	%rs740, %rs737, 255;
	and.b16  	%rs741, %rs736, 255;
	and.b16  	%rs742, %rs735, 255;
	add.s64 	%rd343, %rd222, 231;
	ld.global.nc.u8 	%rs743, [%rd222+231];
	cvt.u16.u8 	%rs744, %rs743;
	add.s64 	%rd344, %rd343, %rd182;
	add.s64 	%rd345, %rd344, 236;
	ld.global.nc.u8 	%rs745, [%rd344+236];
	cvt.u16.u8 	%rs746, %rs745;
	add.s64 	%rd346, %rd345, %rd182;
	add.s64 	%rd347, %rd346, 236;
	ld.global.u8 	%rs747, [%rd346+236];
	add.s64 	%rd348, %rd347, %rd182;
	ld.global.u8 	%rs748, [%rd348+236];
	add.s16 	%rs749, %rs742, %rs744;
	add.s16 	%rs750, %rs741, %rs746;
	add.s16 	%rs751, %rs740, %rs747;
	add.s16 	%rs752, %rs739, %rs748;
	add.s16 	%rs1128, %rs752, 1;
	add.s16 	%rs1127, %rs751, 1;
	add.s16 	%rs1126, %rs750, 1;
	add.s16 	%rs1125, %rs749, 1;
	add.s32 	%r192, %r142, -244;
LBB9_4:                                 // %after_bb
	shr.u16 	%rs1121, %rs1127, 1;
	shr.u16 	%rs1122, %rs1128, 1;
	shr.u16 	%rs1123, %rs1125, 1;
	shr.u16 	%rs1124, %rs1126, 1;
	cvt.s64.s32 	%rd518, %r192;
	add.s64 	%rd519, %rd1, %rd518;
	st.global.v2.u8 	[%rd519], {%rs1123, %rs1124};
	st.global.v2.u8 	[%rd519+2], {%rs1121, %rs1122};
	ret;
                                        // -- End function
}
	// .globl	kernel_mask_s0____x____x___block_id_y // -- Begin function kernel_mask_s0____x____x___block_id_y
.visible .entry kernel_mask_s0____x____x___block_id_y(
	.param .u32 kernel_mask_s0____x____x___block_id_y_param_0,
	.param .u32 kernel_mask_s0____x____x___block_id_y_param_1,
	.param .u32 kernel_mask_s0____x____x___block_id_y_param_2,
	.param .u32 kernel_mask_s0____x____x___block_id_y_param_3,
	.param .u32 kernel_mask_s0____x____x___block_id_y_param_4,
	.param .u32 kernel_mask_s0____x____x___block_id_y_param_5,
	.param .u32 kernel_mask_s0____x____x___block_id_y_param_6,
	.param .u32 kernel_mask_s0____x____x___block_id_y_param_7,
	.param .u32 kernel_mask_s0____x____x___block_id_y_param_8,
	.param .u32 kernel_mask_s0____x____x___block_id_y_param_9,
	.param .u32 kernel_mask_s0____x____x___block_id_y_param_10,
	.param .u32 kernel_mask_s0____x____x___block_id_y_param_11,
	.param .u32 kernel_mask_s0____x____x___block_id_y_param_12,
	.param .u32 kernel_mask_s0____x____x___block_id_y_param_13,
	.param .u32 kernel_mask_s0____x____x___block_id_y_param_14,
	.param .u32 kernel_mask_s0____x____x___block_id_y_param_15,
	.param .u32 kernel_mask_s0____x____x___block_id_y_param_16,
	.param .u32 kernel_mask_s0____x____x___block_id_y_param_17,
	.param .u32 kernel_mask_s0____x____x___block_id_y_param_18,
	.param .u32 kernel_mask_s0____x____x___block_id_y_param_19,
	.param .u32 kernel_mask_s0____x____x___block_id_y_param_20,
	.param .u32 kernel_mask_s0____x____x___block_id_y_param_21,
	.param .u32 kernel_mask_s0____x____x___block_id_y_param_22,
	.param .u32 kernel_mask_s0____x____x___block_id_y_param_23,
	.param .u32 kernel_mask_s0____x____x___block_id_y_param_24,
	.param .u32 kernel_mask_s0____x____x___block_id_y_param_25,
	.param .u32 kernel_mask_s0____x____x___block_id_y_param_26,
	.param .u32 kernel_mask_s0____x____x___block_id_y_param_27,
	.param .u32 kernel_mask_s0____x____x___block_id_y_param_28,
	.param .u32 kernel_mask_s0____x____x___block_id_y_param_29,
	.param .u32 kernel_mask_s0____x____x___block_id_y_param_30,
	.param .u32 kernel_mask_s0____x____x___block_id_y_param_31,
	.param .u32 kernel_mask_s0____x____x___block_id_y_param_32,
	.param .u32 kernel_mask_s0____x____x___block_id_y_param_33,
	.param .u32 kernel_mask_s0____x____x___block_id_y_param_34,
	.param .u32 kernel_mask_s0____x____x___block_id_y_param_35,
	.param .u64 kernel_mask_s0____x____x___block_id_y_param_36,
	.param .u64 kernel_mask_s0____x____x___block_id_y_param_37,
	.param .u64 kernel_mask_s0____x____x___block_id_y_param_38
)                                       // @kernel_mask_s0____x____x___block_id_y
{
	.reg .pred 	%p<4>;
	.reg .b16 	%rs<1329>;
	.reg .b32 	%r<218>;
	.reg .b64 	%rd<298>;

// %bb.0:                               // %entry
	ld.param.u32 	%r48, [kernel_mask_s0____x____x___block_id_y_param_33];
	ld.param.u32 	%r46, [kernel_mask_s0____x____x___block_id_y_param_31];
	ld.param.u32 	%r44, [kernel_mask_s0____x____x___block_id_y_param_29];
	ld.param.u32 	%r43, [kernel_mask_s0____x____x___block_id_y_param_28];
	ld.param.u32 	%r41, [kernel_mask_s0____x____x___block_id_y_param_24];
	ld.param.u32 	%r40, [kernel_mask_s0____x____x___block_id_y_param_23];
	ld.param.u32 	%r39, [kernel_mask_s0____x____x___block_id_y_param_22];
	ld.param.u32 	%r38, [kernel_mask_s0____x____x___block_id_y_param_21];
	ld.param.u32 	%r37, [kernel_mask_s0____x____x___block_id_y_param_20];
	ld.param.u32 	%r34, [kernel_mask_s0____x____x___block_id_y_param_17];
	ld.param.u32 	%r33, [kernel_mask_s0____x____x___block_id_y_param_16];
	ld.param.u32 	%r26, [kernel_mask_s0____x____x___block_id_y_param_9];
	ld.param.u64 	%rd8, [kernel_mask_s0____x____x___block_id_y_param_38];
	cvta.to.global.u64 	%rd1, %rd8;
	ld.param.u64 	%rd9, [kernel_mask_s0____x____x___block_id_y_param_37];
	cvta.to.global.u64 	%rd2, %rd9;
	ld.param.u64 	%rd10, [kernel_mask_s0____x____x___block_id_y_param_36];
	cvta.to.global.u64 	%rd3, %rd10;
	mov.u32 	%r51, %ctaid.y;
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %tid.z;
	mov.u32 	%r3, %tid.y;
	mov.u32 	%r4, %tid.x;
	shl.b32 	%r52, %r51, 2;
	ld.param.u32 	%r53, [kernel_mask_s0____x____x___block_id_y_param_25];
	min.s32 	%r5, %r52, %r53;
	ld.param.u32 	%r54, [kernel_mask_s0____x____x___block_id_y_param_26];
	setp.ge.s32 	%p1, %r1, %r54;
	@%p1 bra 	LBB10_3;
// %bb.1:                               // %true_bb
	ld.param.u32 	%r50, [kernel_mask_s0____x____x___block_id_y_param_35];
	ld.param.u32 	%r49, [kernel_mask_s0____x____x___block_id_y_param_34];
	ld.param.u32 	%r47, [kernel_mask_s0____x____x___block_id_y_param_32];
	ld.param.u32 	%r45, [kernel_mask_s0____x____x___block_id_y_param_30];
	ld.param.u32 	%r42, [kernel_mask_s0____x____x___block_id_y_param_27];
	ld.param.u32 	%r35, [kernel_mask_s0____x____x___block_id_y_param_18];
	ld.param.u32 	%r30, [kernel_mask_s0____x____x___block_id_y_param_13];
	ld.param.u32 	%r18, [kernel_mask_s0____x____x___block_id_y_param_1];
	setp.eq.s32 	%p3, %r2, 0;
	shl.b32 	%r122, %r3, 1;
	add.s32 	%r6, %r122, %r5;
	add.s32 	%r123, %r6, %r38;
	add.s32 	%r7, %r33, 248;
	mul.lo.s32 	%r8, %r123, %r7;
	mad.lo.s32 	%r9, %r1, 31, %r4;
	shl.b32 	%r10, %r9, 3;
	add.s32 	%r124, %r10, %r45;
	add.s32 	%r11, %r43, 236;
	mul.lo.s32 	%r12, %r124, %r11;
	@%p3 bra 	LBB10_2;
// %bb.5:                               // %false_bb2
	ld.param.u32 	%r31, [kernel_mask_s0____x____x___block_id_y_param_14];
	ld.param.u32 	%r25, [kernel_mask_s0____x____x___block_id_y_param_8];
	ld.param.u32 	%r24, [kernel_mask_s0____x____x___block_id_y_param_7];
	ld.param.u32 	%r23, [kernel_mask_s0____x____x___block_id_y_param_6];
	ld.param.u32 	%r22, [kernel_mask_s0____x____x___block_id_y_param_5];
	ld.param.u32 	%r21, [kernel_mask_s0____x____x___block_id_y_param_4];
	ld.param.u32 	%r20, [kernel_mask_s0____x____x___block_id_y_param_3];
	ld.param.u32 	%r19, [kernel_mask_s0____x____x___block_id_y_param_2];
	ld.param.u32 	%r17, [kernel_mask_s0____x____x___block_id_y_param_0];
	add.s32 	%r125, %r6, %r49;
	add.s32 	%r126, %r12, %r125;
	cvt.s64.s32 	%rd100, %r126;
	add.s64 	%rd101, %rd2, %rd100;
	ld.global.nc.u8 	%rs453, [%rd101];
	cvt.u16.u8 	%rs454, %rs453;
	cvt.s64.s32 	%rd102, %r43;
	add.s64 	%rd103, %rd101, %rd102;
	add.s64 	%rd104, %rd103, 236;
	ld.global.nc.u8 	%rs455, [%rd103+236];
	cvt.u16.u8 	%rs456, %rs455;
	add.s64 	%rd105, %rd104, %rd102;
	add.s64 	%rd106, %rd105, 236;
	ld.global.nc.u8 	%rs457, [%rd105+236];
	cvt.u16.u8 	%rs458, %rs457;
	add.s64 	%rd107, %rd106, %rd102;
	ld.global.u8 	%rs459, [%rd107+236];
	shl.b32 	%r127, %r9, 2;
	sub.s32 	%r128, %r127, %r42;
	shl.b32 	%r129, %r128, 1;
	add.s32 	%r130, %r129, %r8;
	add.s32 	%r131, %r130, %r30;
	cvt.s64.s32 	%rd108, %r131;
	add.s64 	%rd109, %rd1, %rd108;
	ld.global.nc.v2.u8 	{%rs460, %rs461}, [%rd109+2];
	ld.global.nc.v2.u8 	{%rs462, %rs463}, [%rd109];
	add.s32 	%r132, %r130, %r35;
	cvt.s64.s32 	%rd110, %r132;
	add.s64 	%rd111, %rd1, %rd110;
	ld.global.nc.v2.u8 	{%rs464, %rs465}, [%rd111+2];
	ld.global.nc.v2.u8 	{%rs466, %rs467}, [%rd111];
	add.s16 	%rs468, %rs463, %rs467;
	add.s16 	%rs469, %rs462, %rs466;
	add.s16 	%rs470, %rs461, %rs465;
	add.s16 	%rs471, %rs460, %rs464;
	add.s16 	%rs472, %rs471, 1;
	add.s16 	%rs473, %rs470, 1;
	add.s16 	%rs474, %rs469, 1;
	add.s16 	%rs475, %rs468, 1;
	shr.u16 	%rs476, %rs475, 1;
	shr.u16 	%rs477, %rs474, 1;
	shr.u16 	%rs478, %rs473, 1;
	shr.u16 	%rs479, %rs472, 1;
	and.b16  	%rs480, %rs479, 255;
	and.b16  	%rs481, %rs478, 255;
	and.b16  	%rs482, %rs477, 255;
	and.b16  	%rs483, %rs476, 255;
	add.s32 	%r133, %r130, %r34;
	cvt.s64.s32 	%rd112, %r133;
	add.s64 	%rd113, %rd1, %rd112;
	ld.global.nc.v2.u8 	{%rs484, %rs485}, [%rd113+250];
	ld.global.nc.v2.u8 	{%rs486, %rs487}, [%rd113+248];
	add.s16 	%rs488, %rs487, %rs483;
	add.s16 	%rs489, %rs486, %rs482;
	add.s16 	%rs490, %rs485, %rs481;
	add.s16 	%rs491, %rs484, %rs480;
	add.s16 	%rs492, %rs491, 1;
	add.s16 	%rs493, %rs490, 1;
	add.s16 	%rs494, %rs489, 1;
	add.s16 	%rs495, %rs488, 1;
	shr.u16 	%rs496, %rs495, 1;
	shr.u16 	%rs497, %rs494, 1;
	shr.u16 	%rs498, %rs493, 1;
	shr.u16 	%rs499, %rs492, 1;
	and.b16  	%rs500, %rs499, 255;
	and.b16  	%rs501, %rs498, 255;
	and.b16  	%rs502, %rs497, 255;
	and.b16  	%rs503, %rs496, 255;
	sub.s16 	%rs504, %rs456, %rs503;
	sub.s16 	%rs505, %rs454, %rs502;
	sub.s16 	%rs506, %rs459, %rs501;
	sub.s16 	%rs507, %rs458, %rs500;
	sub.s32 	%r134, %r127, %r26;
	shl.b32 	%r135, %r134, 1;
	add.s32 	%r136, %r6, %r39;
	mad.lo.s32 	%r137, %r136, %r46, %r135;
	add.s32 	%r138, %r137, %r37;
	mul.wide.s32 	%rd114, %r138, 2;
	add.s64 	%rd115, %rd3, %rd114;
	st.global.v2.u16 	[%rd115+500], {%rs507, %rs506};
	st.global.v2.u16 	[%rd115+496], {%rs505, %rs504};
	add.s32 	%r139, %r10, %r47;
	mul.lo.s32 	%r140, %r139, %r11;
	add.s32 	%r141, %r140, %r125;
	cvt.s64.s32 	%rd116, %r141;
	add.s64 	%rd117, %rd2, %rd116;
	ld.global.nc.u8 	%rs508, [%rd117];
	cvt.u16.u8 	%rs509, %rs508;
	add.s64 	%rd118, %rd117, %rd102;
	add.s64 	%rd119, %rd118, 236;
	ld.global.nc.u8 	%rs510, [%rd118+236];
	cvt.u16.u8 	%rs511, %rs510;
	add.s64 	%rd120, %rd119, %rd102;
	add.s64 	%rd121, %rd120, 236;
	ld.global.nc.u8 	%rs512, [%rd120+236];
	cvt.u16.u8 	%rs513, %rs512;
	add.s64 	%rd122, %rd121, %rd102;
	ld.global.u8 	%rs514, [%rd122+236];
	ld.global.nc.v2.u8 	{%rs515, %rs516}, [%rd109+6];
	ld.global.nc.v2.u8 	{%rs517, %rs518}, [%rd109+4];
	add.s32 	%r142, %r130, %r50;
	cvt.s64.s32 	%rd123, %r142;
	add.s64 	%rd124, %rd1, %rd123;
	ld.global.nc.v2.u8 	{%rs519, %rs520}, [%rd124+2];
	ld.global.nc.v2.u8 	{%rs521, %rs522}, [%rd124];
	add.s16 	%rs523, %rs518, %rs522;
	add.s16 	%rs524, %rs517, %rs521;
	add.s16 	%rs525, %rs516, %rs520;
	add.s16 	%rs526, %rs515, %rs519;
	add.s16 	%rs527, %rs526, 1;
	add.s16 	%rs528, %rs525, 1;
	add.s16 	%rs529, %rs524, 1;
	add.s16 	%rs530, %rs523, 1;
	shr.u16 	%rs531, %rs530, 1;
	shr.u16 	%rs532, %rs529, 1;
	shr.u16 	%rs533, %rs528, 1;
	shr.u16 	%rs534, %rs527, 1;
	and.b16  	%rs535, %rs534, 255;
	and.b16  	%rs536, %rs533, 255;
	and.b16  	%rs537, %rs532, 255;
	and.b16  	%rs538, %rs531, 255;
	ld.global.nc.v2.u8 	{%rs539, %rs540}, [%rd113+254];
	ld.global.nc.v2.u8 	{%rs541, %rs542}, [%rd113+252];
	add.s16 	%rs543, %rs542, %rs538;
	add.s16 	%rs544, %rs541, %rs537;
	add.s16 	%rs545, %rs540, %rs536;
	add.s16 	%rs546, %rs539, %rs535;
	add.s16 	%rs547, %rs546, 1;
	add.s16 	%rs548, %rs545, 1;
	add.s16 	%rs549, %rs544, 1;
	add.s16 	%rs550, %rs543, 1;
	shr.u16 	%rs551, %rs550, 1;
	shr.u16 	%rs552, %rs549, 1;
	shr.u16 	%rs553, %rs548, 1;
	shr.u16 	%rs554, %rs547, 1;
	and.b16  	%rs555, %rs554, 255;
	and.b16  	%rs556, %rs553, 255;
	and.b16  	%rs557, %rs552, 255;
	and.b16  	%rs558, %rs551, 255;
	sub.s16 	%rs559, %rs511, %rs558;
	sub.s16 	%rs560, %rs509, %rs557;
	sub.s16 	%rs561, %rs514, %rs556;
	sub.s16 	%rs562, %rs513, %rs555;
	st.global.v2.u16 	[%rd115+508], {%rs562, %rs561};
	st.global.v2.u16 	[%rd115+504], {%rs560, %rs559};
	add.s32 	%r143, %r6, %r40;
	add.s32 	%r144, %r6, %r18;
	add.s32 	%r145, %r12, %r144;
	cvt.s64.s32 	%rd125, %r145;
	add.s64 	%rd126, %rd2, %rd125;
	ld.global.nc.u8 	%rs563, [%rd126];
	cvt.u16.u8 	%rs564, %rs563;
	add.s64 	%rd127, %rd126, %rd102;
	add.s64 	%rd128, %rd127, 236;
	ld.global.nc.u8 	%rs565, [%rd127+236];
	cvt.u16.u8 	%rs566, %rs565;
	add.s64 	%rd129, %rd128, %rd102;
	add.s64 	%rd130, %rd129, 236;
	ld.global.nc.u8 	%rs567, [%rd129+236];
	cvt.u16.u8 	%rs568, %rs567;
	add.s64 	%rd131, %rd130, %rd102;
	ld.global.u8 	%rs569, [%rd131+236];
	mad.lo.s32 	%r146, %r143, %r7, %r129;
	add.s32 	%r147, %r146, %r30;
	cvt.s64.s32 	%rd132, %r147;
	add.s64 	%rd133, %rd1, %rd132;
	ld.global.nc.v2.u8 	{%rs570, %rs571}, [%rd133+2];
	ld.global.nc.v2.u8 	{%rs572, %rs573}, [%rd133];
	add.s32 	%r148, %r146, %r35;
	cvt.s64.s32 	%rd134, %r148;
	add.s64 	%rd135, %rd1, %rd134;
	ld.global.nc.v2.u8 	{%rs574, %rs575}, [%rd135+2];
	ld.global.nc.v2.u8 	{%rs576, %rs577}, [%rd135];
	add.s16 	%rs578, %rs573, %rs577;
	add.s16 	%rs579, %rs572, %rs576;
	add.s16 	%rs580, %rs571, %rs575;
	add.s16 	%rs581, %rs570, %rs574;
	add.s16 	%rs582, %rs581, 1;
	add.s16 	%rs583, %rs580, 1;
	add.s16 	%rs584, %rs579, 1;
	add.s16 	%rs585, %rs578, 1;
	shr.u16 	%rs586, %rs585, 1;
	shr.u16 	%rs587, %rs584, 1;
	shr.u16 	%rs588, %rs583, 1;
	shr.u16 	%rs589, %rs582, 1;
	and.b16  	%rs590, %rs589, 255;
	and.b16  	%rs591, %rs588, 255;
	and.b16  	%rs592, %rs587, 255;
	and.b16  	%rs593, %rs586, 255;
	add.s32 	%r149, %r146, %r34;
	cvt.s64.s32 	%rd136, %r149;
	add.s64 	%rd137, %rd1, %rd136;
	ld.global.nc.v2.u8 	{%rs594, %rs595}, [%rd137+250];
	ld.global.nc.v2.u8 	{%rs596, %rs597}, [%rd137+248];
	add.s16 	%rs598, %rs597, %rs593;
	add.s16 	%rs599, %rs596, %rs592;
	add.s16 	%rs600, %rs595, %rs591;
	add.s16 	%rs601, %rs594, %rs590;
	add.s16 	%rs602, %rs601, 1;
	add.s16 	%rs603, %rs600, 1;
	add.s16 	%rs604, %rs599, 1;
	add.s16 	%rs605, %rs598, 1;
	shr.u16 	%rs606, %rs605, 1;
	shr.u16 	%rs607, %rs604, 1;
	shr.u16 	%rs608, %rs603, 1;
	shr.u16 	%rs609, %rs602, 1;
	and.b16  	%rs610, %rs609, 255;
	and.b16  	%rs611, %rs608, 255;
	and.b16  	%rs612, %rs607, 255;
	and.b16  	%rs613, %rs606, 255;
	sub.s16 	%rs614, %rs566, %rs613;
	sub.s16 	%rs615, %rs564, %rs612;
	sub.s16 	%rs616, %rs569, %rs611;
	sub.s16 	%rs617, %rs568, %rs610;
	add.s32 	%r150, %r6, %r41;
	mad.lo.s32 	%r151, %r150, %r46, %r135;
	add.s32 	%r152, %r151, %r37;
	mul.wide.s32 	%rd138, %r152, 2;
	add.s64 	%rd139, %rd3, %rd138;
	st.global.v2.u16 	[%rd139+500], {%rs617, %rs616};
	st.global.v2.u16 	[%rd139+496], {%rs615, %rs614};
	add.s32 	%r153, %r140, %r144;
	cvt.s64.s32 	%rd140, %r153;
	add.s64 	%rd141, %rd2, %rd140;
	ld.global.nc.u8 	%rs618, [%rd141];
	cvt.u16.u8 	%rs619, %rs618;
	add.s64 	%rd142, %rd141, %rd102;
	add.s64 	%rd143, %rd142, 236;
	ld.global.nc.u8 	%rs620, [%rd142+236];
	cvt.u16.u8 	%rs621, %rs620;
	add.s64 	%rd144, %rd143, %rd102;
	add.s64 	%rd145, %rd144, 236;
	ld.global.nc.u8 	%rs622, [%rd144+236];
	cvt.u16.u8 	%rs623, %rs622;
	add.s64 	%rd146, %rd145, %rd102;
	ld.global.u8 	%rs624, [%rd146+236];
	ld.global.nc.v2.u8 	{%rs625, %rs626}, [%rd133+6];
	ld.global.nc.v2.u8 	{%rs627, %rs628}, [%rd133+4];
	add.s32 	%r154, %r146, %r50;
	cvt.s64.s32 	%rd147, %r154;
	add.s64 	%rd148, %rd1, %rd147;
	ld.global.nc.v2.u8 	{%rs629, %rs630}, [%rd148+2];
	ld.global.nc.v2.u8 	{%rs631, %rs632}, [%rd148];
	add.s16 	%rs633, %rs628, %rs632;
	add.s16 	%rs634, %rs627, %rs631;
	add.s16 	%rs635, %rs626, %rs630;
	add.s16 	%rs636, %rs625, %rs629;
	add.s16 	%rs637, %rs636, 1;
	add.s16 	%rs638, %rs635, 1;
	add.s16 	%rs639, %rs634, 1;
	add.s16 	%rs640, %rs633, 1;
	shr.u16 	%rs641, %rs640, 1;
	shr.u16 	%rs642, %rs639, 1;
	shr.u16 	%rs643, %rs638, 1;
	shr.u16 	%rs644, %rs637, 1;
	and.b16  	%rs645, %rs644, 255;
	and.b16  	%rs646, %rs643, 255;
	and.b16  	%rs647, %rs642, 255;
	and.b16  	%rs648, %rs641, 255;
	ld.global.nc.v2.u8 	{%rs649, %rs650}, [%rd137+254];
	ld.global.nc.v2.u8 	{%rs651, %rs652}, [%rd137+252];
	add.s16 	%rs653, %rs652, %rs648;
	add.s16 	%rs654, %rs651, %rs647;
	add.s16 	%rs655, %rs650, %rs646;
	add.s16 	%rs656, %rs649, %rs645;
	add.s16 	%rs657, %rs656, 1;
	add.s16 	%rs658, %rs655, 1;
	add.s16 	%rs659, %rs654, 1;
	add.s16 	%rs660, %rs653, 1;
	shr.u16 	%rs661, %rs660, 1;
	shr.u16 	%rs662, %rs659, 1;
	shr.u16 	%rs663, %rs658, 1;
	shr.u16 	%rs664, %rs657, 1;
	and.b16  	%rs665, %rs664, 255;
	and.b16  	%rs666, %rs663, 255;
	and.b16  	%rs667, %rs662, 255;
	and.b16  	%rs668, %rs661, 255;
	sub.s16 	%rs669, %rs621, %rs668;
	sub.s16 	%rs670, %rs619, %rs667;
	sub.s16 	%rs671, %rs624, %rs666;
	sub.s16 	%rs672, %rs623, %rs665;
	st.global.v2.u16 	[%rd139+508], {%rs672, %rs671};
	st.global.v2.u16 	[%rd139+504], {%rs670, %rs669};
	add.s32 	%r155, %r6, %r19;
	add.s32 	%r156, %r12, %r155;
	cvt.s64.s32 	%rd149, %r156;
	add.s64 	%rd150, %rd2, %rd149;
	ld.global.nc.u8 	%rs673, [%rd150];
	cvt.u16.u8 	%rs674, %rs673;
	add.s64 	%rd151, %rd150, %rd102;
	add.s64 	%rd152, %rd151, 236;
	ld.global.nc.u8 	%rs675, [%rd151+236];
	cvt.u16.u8 	%rs676, %rs675;
	add.s64 	%rd153, %rd152, %rd102;
	add.s64 	%rd154, %rd153, 236;
	ld.global.nc.u8 	%rs677, [%rd153+236];
	cvt.u16.u8 	%rs678, %rs677;
	add.s64 	%rd155, %rd154, %rd102;
	ld.global.u8 	%rs679, [%rd155+236];
	add.s32 	%r157, %r130, %r31;
	cvt.s64.s32 	%rd156, %r157;
	add.s64 	%rd157, %rd1, %rd156;
	ld.global.nc.v2.u8 	{%rs680, %rs681}, [%rd157+2];
	ld.global.nc.v2.u8 	{%rs682, %rs683}, [%rd157];
	add.s32 	%r158, %r130, %r20;
	cvt.s64.s32 	%rd158, %r158;
	add.s64 	%rd159, %rd1, %rd158;
	ld.global.nc.v2.u8 	{%rs684, %rs685}, [%rd159+2];
	ld.global.nc.v2.u8 	{%rs686, %rs687}, [%rd159];
	add.s16 	%rs688, %rs683, %rs687;
	add.s16 	%rs689, %rs682, %rs686;
	add.s16 	%rs690, %rs681, %rs685;
	add.s16 	%rs691, %rs680, %rs684;
	add.s16 	%rs692, %rs691, 1;
	add.s16 	%rs693, %rs690, 1;
	add.s16 	%rs694, %rs689, 1;
	add.s16 	%rs695, %rs688, 1;
	shr.u16 	%rs696, %rs695, 1;
	shr.u16 	%rs697, %rs694, 1;
	shr.u16 	%rs698, %rs693, 1;
	shr.u16 	%rs699, %rs692, 1;
	and.b16  	%rs700, %rs699, 255;
	and.b16  	%rs701, %rs698, 255;
	and.b16  	%rs702, %rs697, 255;
	and.b16  	%rs703, %rs696, 255;
	add.s32 	%r159, %r130, %r21;
	cvt.s64.s32 	%rd160, %r159;
	add.s64 	%rd161, %rd1, %rd160;
	ld.global.nc.v2.u8 	{%rs704, %rs705}, [%rd161+2];
	ld.global.nc.v2.u8 	{%rs706, %rs707}, [%rd161];
	add.s16 	%rs708, %rs707, %rs703;
	add.s16 	%rs709, %rs706, %rs702;
	add.s16 	%rs710, %rs705, %rs701;
	add.s16 	%rs711, %rs704, %rs700;
	add.s16 	%rs712, %rs711, 1;
	add.s16 	%rs713, %rs710, 1;
	add.s16 	%rs714, %rs709, 1;
	add.s16 	%rs715, %rs708, 1;
	shr.u16 	%rs716, %rs715, 1;
	shr.u16 	%rs717, %rs714, 1;
	shr.u16 	%rs718, %rs713, 1;
	shr.u16 	%rs719, %rs712, 1;
	and.b16  	%rs720, %rs719, 255;
	and.b16  	%rs721, %rs718, 255;
	and.b16  	%rs722, %rs717, 255;
	and.b16  	%rs723, %rs716, 255;
	sub.s16 	%rs724, %rs676, %rs723;
	sub.s16 	%rs725, %rs674, %rs722;
	sub.s16 	%rs726, %rs679, %rs721;
	sub.s16 	%rs727, %rs678, %rs720;
	add.s32 	%r160, %r137, %r22;
	mul.wide.s32 	%rd162, %r160, 2;
	add.s64 	%rd163, %rd3, %rd162;
	st.global.v2.u16 	[%rd163+4], {%rs727, %rs726};
	st.global.v2.u16 	[%rd163], {%rs725, %rs724};
	add.s32 	%r161, %r140, %r155;
	cvt.s64.s32 	%rd164, %r161;
	add.s64 	%rd165, %rd2, %rd164;
	ld.global.nc.u8 	%rs728, [%rd165];
	cvt.u16.u8 	%rs729, %rs728;
	add.s64 	%rd166, %rd165, %rd102;
	add.s64 	%rd167, %rd166, 236;
	ld.global.nc.u8 	%rs730, [%rd166+236];
	cvt.u16.u8 	%rs731, %rs730;
	add.s64 	%rd168, %rd167, %rd102;
	add.s64 	%rd169, %rd168, 236;
	ld.global.nc.u8 	%rs732, [%rd168+236];
	cvt.u16.u8 	%rs733, %rs732;
	add.s64 	%rd170, %rd169, %rd102;
	ld.global.u8 	%rs734, [%rd170+236];
	ld.global.nc.v2.u8 	{%rs735, %rs736}, [%rd157+6];
	ld.global.nc.v2.u8 	{%rs737, %rs738}, [%rd157+4];
	add.s32 	%r162, %r130, %r23;
	cvt.s64.s32 	%rd171, %r162;
	add.s64 	%rd172, %rd1, %rd171;
	ld.global.nc.v2.u8 	{%rs739, %rs740}, [%rd172+2];
	ld.global.nc.v2.u8 	{%rs741, %rs742}, [%rd172];
	add.s16 	%rs743, %rs738, %rs742;
	add.s16 	%rs744, %rs737, %rs741;
	add.s16 	%rs745, %rs736, %rs740;
	add.s16 	%rs746, %rs735, %rs739;
	add.s16 	%rs747, %rs746, 1;
	add.s16 	%rs748, %rs745, 1;
	add.s16 	%rs749, %rs744, 1;
	add.s16 	%rs750, %rs743, 1;
	shr.u16 	%rs751, %rs750, 1;
	shr.u16 	%rs752, %rs749, 1;
	shr.u16 	%rs753, %rs748, 1;
	shr.u16 	%rs754, %rs747, 1;
	and.b16  	%rs755, %rs754, 255;
	and.b16  	%rs756, %rs753, 255;
	and.b16  	%rs757, %rs752, 255;
	and.b16  	%rs758, %rs751, 255;
	add.s32 	%r163, %r130, %r24;
	cvt.s64.s32 	%rd173, %r163;
	add.s64 	%rd174, %rd1, %rd173;
	ld.global.nc.v2.u8 	{%rs759, %rs760}, [%rd174+2];
	ld.global.nc.v2.u8 	{%rs761, %rs762}, [%rd174];
	add.s16 	%rs763, %rs762, %rs758;
	add.s16 	%rs764, %rs761, %rs757;
	add.s16 	%rs765, %rs760, %rs756;
	add.s16 	%rs766, %rs759, %rs755;
	add.s16 	%rs767, %rs766, 1;
	add.s16 	%rs768, %rs765, 1;
	add.s16 	%rs769, %rs764, 1;
	add.s16 	%rs770, %rs763, 1;
	shr.u16 	%rs771, %rs770, 1;
	shr.u16 	%rs772, %rs769, 1;
	shr.u16 	%rs773, %rs768, 1;
	shr.u16 	%rs774, %rs767, 1;
	and.b16  	%rs775, %rs774, 255;
	and.b16  	%rs776, %rs773, 255;
	and.b16  	%rs777, %rs772, 255;
	and.b16  	%rs778, %rs771, 255;
	sub.s16 	%rs779, %rs731, %rs778;
	sub.s16 	%rs780, %rs729, %rs777;
	sub.s16 	%rs781, %rs734, %rs776;
	sub.s16 	%rs782, %rs733, %rs775;
	add.s32 	%r164, %r137, %r25;
	mul.wide.s32 	%rd175, %r164, 2;
	add.s64 	%rd176, %rd3, %rd175;
	st.global.v2.u16 	[%rd176+4], {%rs782, %rs781};
	st.global.v2.u16 	[%rd176], {%rs780, %rs779};
	add.s32 	%r165, %r6, %r17;
	add.s32 	%r166, %r12, %r165;
	cvt.s64.s32 	%rd177, %r166;
	add.s64 	%rd178, %rd2, %rd177;
	ld.global.nc.u8 	%rs783, [%rd178];
	cvt.u16.u8 	%rs784, %rs783;
	add.s64 	%rd179, %rd178, %rd102;
	add.s64 	%rd180, %rd179, 236;
	ld.global.nc.u8 	%rs785, [%rd179+236];
	cvt.u16.u8 	%rs786, %rs785;
	add.s64 	%rd181, %rd180, %rd102;
	add.s64 	%rd182, %rd181, 236;
	ld.global.nc.u8 	%rs787, [%rd181+236];
	cvt.u16.u8 	%rs788, %rs787;
	add.s64 	%rd183, %rd182, %rd102;
	ld.global.u8 	%rs789, [%rd183+236];
	add.s32 	%r167, %r146, %r31;
	cvt.s64.s32 	%rd184, %r167;
	add.s64 	%rd185, %rd1, %rd184;
	ld.global.nc.v2.u8 	{%rs790, %rs791}, [%rd185+2];
	ld.global.nc.v2.u8 	{%rs792, %rs793}, [%rd185];
	add.s32 	%r168, %r146, %r20;
	cvt.s64.s32 	%rd186, %r168;
	add.s64 	%rd187, %rd1, %rd186;
	ld.global.nc.v2.u8 	{%rs794, %rs795}, [%rd187+2];
	ld.global.nc.v2.u8 	{%rs796, %rs797}, [%rd187];
	add.s16 	%rs798, %rs793, %rs797;
	add.s16 	%rs799, %rs792, %rs796;
	add.s16 	%rs800, %rs791, %rs795;
	add.s16 	%rs801, %rs790, %rs794;
	add.s16 	%rs802, %rs801, 1;
	add.s16 	%rs803, %rs800, 1;
	add.s16 	%rs804, %rs799, 1;
	add.s16 	%rs805, %rs798, 1;
	shr.u16 	%rs806, %rs805, 1;
	shr.u16 	%rs807, %rs804, 1;
	shr.u16 	%rs808, %rs803, 1;
	shr.u16 	%rs809, %rs802, 1;
	and.b16  	%rs810, %rs809, 255;
	and.b16  	%rs811, %rs808, 255;
	and.b16  	%rs812, %rs807, 255;
	and.b16  	%rs813, %rs806, 255;
	add.s32 	%r169, %r146, %r21;
	cvt.s64.s32 	%rd188, %r169;
	add.s64 	%rd189, %rd1, %rd188;
	ld.global.nc.v2.u8 	{%rs814, %rs815}, [%rd189+2];
	ld.global.nc.v2.u8 	{%rs816, %rs817}, [%rd189];
	add.s16 	%rs818, %rs817, %rs813;
	add.s16 	%rs819, %rs816, %rs812;
	add.s16 	%rs820, %rs815, %rs811;
	add.s16 	%rs821, %rs814, %rs810;
	add.s16 	%rs822, %rs821, 1;
	add.s16 	%rs823, %rs820, 1;
	add.s16 	%rs824, %rs819, 1;
	add.s16 	%rs825, %rs818, 1;
	shr.u16 	%rs826, %rs825, 1;
	shr.u16 	%rs827, %rs824, 1;
	shr.u16 	%rs828, %rs823, 1;
	shr.u16 	%rs829, %rs822, 1;
	and.b16  	%rs830, %rs829, 255;
	and.b16  	%rs831, %rs828, 255;
	and.b16  	%rs832, %rs827, 255;
	and.b16  	%rs833, %rs826, 255;
	sub.s16 	%rs834, %rs786, %rs833;
	sub.s16 	%rs835, %rs784, %rs832;
	sub.s16 	%rs836, %rs789, %rs831;
	sub.s16 	%rs837, %rs788, %rs830;
	add.s32 	%r170, %r151, %r22;
	mul.wide.s32 	%rd190, %r170, 2;
	add.s64 	%rd191, %rd3, %rd190;
	st.global.v2.u16 	[%rd191+4], {%rs837, %rs836};
	st.global.v2.u16 	[%rd191], {%rs835, %rs834};
	add.s32 	%r171, %r140, %r165;
	cvt.s64.s32 	%rd192, %r171;
	add.s64 	%rd193, %rd2, %rd192;
	ld.global.nc.u8 	%rs838, [%rd193];
	cvt.u16.u8 	%rs839, %rs838;
	add.s64 	%rd194, %rd193, %rd102;
	add.s64 	%rd195, %rd194, 236;
	ld.global.nc.u8 	%rs840, [%rd194+236];
	cvt.u16.u8 	%rs841, %rs840;
	add.s64 	%rd196, %rd195, %rd102;
	add.s64 	%rd197, %rd196, 236;
	ld.global.nc.u8 	%rs842, [%rd196+236];
	cvt.u16.u8 	%rs843, %rs842;
	add.s64 	%rd198, %rd197, %rd102;
	ld.global.u8 	%rs844, [%rd198+236];
	ld.global.nc.v2.u8 	{%rs845, %rs846}, [%rd185+4];
	ld.global.nc.v2.u8 	{%rs847, %rs848}, [%rd185+6];
	add.s32 	%r172, %r146, %r23;
	cvt.s64.s32 	%rd199, %r172;
	add.s64 	%rd200, %rd1, %rd199;
	ld.global.nc.v2.u8 	{%rs849, %rs850}, [%rd200];
	ld.global.nc.v2.u8 	{%rs851, %rs852}, [%rd200+2];
	add.s16 	%rs853, %rs848, %rs852;
	add.s16 	%rs854, %rs847, %rs851;
	add.s16 	%rs855, %rs846, %rs850;
	add.s16 	%rs856, %rs845, %rs849;
	add.s16 	%rs857, %rs856, 1;
	add.s16 	%rs858, %rs855, 1;
	add.s16 	%rs859, %rs854, 1;
	add.s16 	%rs860, %rs853, 1;
	shr.u16 	%rs861, %rs860, 1;
	shr.u16 	%rs862, %rs859, 1;
	shr.u16 	%rs863, %rs858, 1;
	shr.u16 	%rs864, %rs857, 1;
	and.b16  	%rs865, %rs864, 255;
	and.b16  	%rs866, %rs863, 255;
	and.b16  	%rs867, %rs862, 255;
	and.b16  	%rs868, %rs861, 255;
	add.s32 	%r173, %r146, %r24;
	cvt.s64.s32 	%rd201, %r173;
	add.s64 	%rd202, %rd1, %rd201;
	ld.global.nc.v2.u8 	{%rs869, %rs870}, [%rd202];
	ld.global.nc.v2.u8 	{%rs871, %rs872}, [%rd202+2];
	add.s16 	%rs873, %rs872, %rs868;
	add.s16 	%rs874, %rs871, %rs867;
	add.s16 	%rs875, %rs870, %rs866;
	add.s16 	%rs876, %rs869, %rs865;
	add.s16 	%rs877, %rs876, 1;
	add.s16 	%rs878, %rs875, 1;
	add.s16 	%rs879, %rs874, 1;
	add.s16 	%rs880, %rs873, 1;
	shr.u16 	%rs881, %rs880, 1;
	shr.u16 	%rs882, %rs879, 1;
	shr.u16 	%rs883, %rs878, 1;
	shr.u16 	%rs884, %rs877, 1;
	and.b16  	%rs885, %rs884, 255;
	and.b16  	%rs886, %rs883, 255;
	and.b16  	%rs887, %rs882, 255;
	and.b16  	%rs888, %rs881, 255;
	sub.s16 	%rs1328, %rs844, %rs888;
	sub.s16 	%rs1327, %rs843, %rs887;
	sub.s16 	%rs1326, %rs841, %rs886;
	sub.s16 	%rs1325, %rs839, %rs885;
	add.s32 	%r217, %r151, %r25;
	bra.uni 	LBB10_4;
LBB10_3:                                // %false_bb
	ld.param.u32 	%r36, [kernel_mask_s0____x____x___block_id_y_param_19];
	ld.param.u32 	%r32, [kernel_mask_s0____x____x___block_id_y_param_15];
	ld.param.u32 	%r29, [kernel_mask_s0____x____x___block_id_y_param_12];
	ld.param.u32 	%r28, [kernel_mask_s0____x____x___block_id_y_param_11];
	ld.param.u32 	%r27, [kernel_mask_s0____x____x___block_id_y_param_10];
	shl.b32 	%r55, %r3, 1;
	add.s32 	%r56, %r55, %r5;
	add.s32 	%r57, %r56, %r38;
	add.s32 	%r58, %r33, 248;
	shl.b32 	%r59, %r4, 2;
	add.s32 	%r60, %r59, %r32;
	shl.b32 	%r61, %r60, 1;
	add.s32 	%r62, %r61, %r28;
	add.s32 	%r63, %r43, 236;
	mul.lo.s32 	%r64, %r62, %r63;
	shl.b32 	%r65, %r2, 1;
	setp.eq.s32 	%p2, %r2, 0;
	selp.b32 	%r66, %r65, 1, %p2;
	mul.lo.s32 	%r67, %r66, %r36;
	add.s32 	%r68, %r56, %r44;
	add.s32 	%r69, %r68, %r67;
	add.s32 	%r70, %r64, %r69;
	cvt.s64.s32 	%rd11, %r70;
	add.s64 	%rd12, %rd2, %rd11;
	ld.global.nc.u8 	%rs17, [%rd12];
	cvt.u16.u8 	%rs18, %rs17;
	cvt.s64.s32 	%rd13, %r43;
	add.s64 	%rd14, %rd12, %rd13;
	add.s64 	%rd15, %rd14, 236;
	ld.global.nc.u8 	%rs19, [%rd14+236];
	cvt.u16.u8 	%rs20, %rs19;
	add.s64 	%rd16, %rd15, %rd13;
	add.s64 	%rd17, %rd16, 236;
	ld.global.nc.u8 	%rs21, [%rd16+236];
	cvt.u16.u8 	%rs22, %rs21;
	add.s64 	%rd18, %rd17, %rd13;
	ld.global.u8 	%rs23, [%rd18+236];
	add.s32 	%r71, %r59, %r27;
	shl.b32 	%r72, %r71, 1;
	mul.lo.s32 	%r73, %r66, %r34;
	sub.s32 	%r74, %r73, %r33;
	mad.lo.s32 	%r75, %r57, %r58, %r72;
	add.s32 	%r76, %r75, %r74;
	cvt.s64.s32 	%rd19, %r76;
	add.s64 	%rd20, %rd1, %rd19;
	ld.global.nc.v2.u8 	{%rs24, %rs25}, [%rd20+-494];
	ld.global.nc.v2.u8 	{%rs26, %rs27}, [%rd20+-496];
	add.s32 	%r77, %r73, %r33;
	add.s32 	%r78, %r75, %r77;
	cvt.s64.s32 	%rd21, %r78;
	add.s64 	%rd22, %rd1, %rd21;
	ld.global.nc.v2.u8 	{%rs28, %rs29}, [%rd22+2];
	ld.global.nc.v2.u8 	{%rs30, %rs31}, [%rd22];
	add.s16 	%rs32, %rs27, %rs31;
	add.s16 	%rs33, %rs26, %rs30;
	add.s16 	%rs34, %rs25, %rs29;
	add.s16 	%rs35, %rs24, %rs28;
	add.s16 	%rs36, %rs35, 1;
	add.s16 	%rs37, %rs34, 1;
	add.s16 	%rs38, %rs33, 1;
	add.s16 	%rs39, %rs32, 1;
	shr.u16 	%rs40, %rs39, 1;
	shr.u16 	%rs41, %rs38, 1;
	shr.u16 	%rs42, %rs37, 1;
	shr.u16 	%rs43, %rs36, 1;
	and.b16  	%rs44, %rs43, 255;
	and.b16  	%rs45, %rs42, 255;
	and.b16  	%rs46, %rs41, 255;
	and.b16  	%rs47, %rs40, 255;
	add.s32 	%r79, %r75, %r73;
	cvt.s64.s32 	%rd23, %r79;
	add.s64 	%rd24, %rd1, %rd23;
	ld.global.nc.v2.u8 	{%rs48, %rs49}, [%rd24+-246];
	ld.global.nc.v2.u8 	{%rs50, %rs51}, [%rd24+-248];
	add.s16 	%rs52, %rs51, %rs47;
	add.s16 	%rs53, %rs50, %rs46;
	add.s16 	%rs54, %rs49, %rs45;
	add.s16 	%rs55, %rs48, %rs44;
	add.s16 	%rs56, %rs55, 1;
	add.s16 	%rs57, %rs54, 1;
	add.s16 	%rs58, %rs53, 1;
	add.s16 	%rs59, %rs52, 1;
	shr.u16 	%rs60, %rs59, 1;
	shr.u16 	%rs61, %rs58, 1;
	shr.u16 	%rs62, %rs57, 1;
	shr.u16 	%rs63, %rs56, 1;
	and.b16  	%rs64, %rs63, 255;
	and.b16  	%rs65, %rs62, 255;
	and.b16  	%rs66, %rs61, 255;
	and.b16  	%rs67, %rs60, 255;
	sub.s16 	%rs68, %rs20, %rs67;
	sub.s16 	%rs69, %rs18, %rs66;
	sub.s16 	%rs70, %rs23, %rs65;
	sub.s16 	%rs71, %rs22, %rs64;
	sub.s32 	%r80, %r32, %r26;
	add.s32 	%r81, %r80, %r59;
	shl.b32 	%r82, %r81, 1;
	mul.lo.s32 	%r83, %r66, %r37;
	add.s32 	%r84, %r56, %r39;
	mad.lo.s32 	%r85, %r84, %r46, %r82;
	add.s32 	%r86, %r85, %r83;
	mul.wide.s32 	%rd25, %r86, 2;
	add.s64 	%rd26, %rd3, %rd25;
	st.global.v2.u16 	[%rd26+4], {%rs71, %rs70};
	st.global.v2.u16 	[%rd26], {%rs69, %rs68};
	add.s32 	%r87, %r61, %r29;
	mul.lo.s32 	%r88, %r87, %r63;
	add.s32 	%r89, %r88, %r69;
	cvt.s64.s32 	%rd27, %r89;
	add.s64 	%rd28, %rd2, %rd27;
	ld.global.nc.u8 	%rs72, [%rd28];
	cvt.u16.u8 	%rs73, %rs72;
	add.s64 	%rd29, %rd28, %rd13;
	add.s64 	%rd30, %rd29, 236;
	ld.global.nc.u8 	%rs74, [%rd29+236];
	cvt.u16.u8 	%rs75, %rs74;
	add.s64 	%rd31, %rd30, %rd13;
	add.s64 	%rd32, %rd31, 236;
	ld.global.nc.u8 	%rs76, [%rd31+236];
	cvt.u16.u8 	%rs77, %rs76;
	add.s64 	%rd33, %rd32, %rd13;
	ld.global.u8 	%rs78, [%rd33+236];
	ld.global.nc.v2.u8 	{%rs79, %rs80}, [%rd20+-490];
	ld.global.nc.v2.u8 	{%rs81, %rs82}, [%rd20+-492];
	ld.global.nc.v2.u8 	{%rs83, %rs84}, [%rd22+6];
	ld.global.nc.v2.u8 	{%rs85, %rs86}, [%rd22+4];
	add.s16 	%rs87, %rs82, %rs86;
	add.s16 	%rs88, %rs81, %rs85;
	add.s16 	%rs89, %rs80, %rs84;
	add.s16 	%rs90, %rs79, %rs83;
	add.s16 	%rs91, %rs90, 1;
	add.s16 	%rs92, %rs89, 1;
	add.s16 	%rs93, %rs88, 1;
	add.s16 	%rs94, %rs87, 1;
	shr.u16 	%rs95, %rs94, 1;
	shr.u16 	%rs96, %rs93, 1;
	shr.u16 	%rs97, %rs92, 1;
	shr.u16 	%rs98, %rs91, 1;
	and.b16  	%rs99, %rs98, 255;
	and.b16  	%rs100, %rs97, 255;
	and.b16  	%rs101, %rs96, 255;
	and.b16  	%rs102, %rs95, 255;
	ld.global.nc.v2.u8 	{%rs103, %rs104}, [%rd24+-242];
	ld.global.nc.v2.u8 	{%rs105, %rs106}, [%rd24+-244];
	add.s16 	%rs107, %rs106, %rs102;
	add.s16 	%rs108, %rs105, %rs101;
	add.s16 	%rs109, %rs104, %rs100;
	add.s16 	%rs110, %rs103, %rs99;
	add.s16 	%rs111, %rs110, 1;
	add.s16 	%rs112, %rs109, 1;
	add.s16 	%rs113, %rs108, 1;
	add.s16 	%rs114, %rs107, 1;
	shr.u16 	%rs115, %rs114, 1;
	shr.u16 	%rs116, %rs113, 1;
	shr.u16 	%rs117, %rs112, 1;
	shr.u16 	%rs118, %rs111, 1;
	and.b16  	%rs119, %rs118, 255;
	and.b16  	%rs120, %rs117, 255;
	and.b16  	%rs121, %rs116, 255;
	and.b16  	%rs122, %rs115, 255;
	sub.s16 	%rs123, %rs75, %rs122;
	sub.s16 	%rs124, %rs73, %rs121;
	sub.s16 	%rs125, %rs78, %rs120;
	sub.s16 	%rs126, %rs77, %rs119;
	st.global.v2.u16 	[%rd26+12], {%rs126, %rs125};
	st.global.v2.u16 	[%rd26+8], {%rs124, %rs123};
	add.s32 	%r90, %r56, %r40;
	add.s32 	%r91, %r56, %r48;
	add.s32 	%r92, %r91, %r67;
	add.s32 	%r93, %r64, %r92;
	cvt.s64.s32 	%rd34, %r93;
	add.s64 	%rd35, %rd2, %rd34;
	ld.global.nc.u8 	%rs127, [%rd35];
	cvt.u16.u8 	%rs128, %rs127;
	add.s64 	%rd36, %rd35, %rd13;
	add.s64 	%rd37, %rd36, 236;
	ld.global.nc.u8 	%rs129, [%rd36+236];
	cvt.u16.u8 	%rs130, %rs129;
	add.s64 	%rd38, %rd37, %rd13;
	add.s64 	%rd39, %rd38, 236;
	ld.global.nc.u8 	%rs131, [%rd38+236];
	cvt.u16.u8 	%rs132, %rs131;
	add.s64 	%rd40, %rd39, %rd13;
	ld.global.u8 	%rs133, [%rd40+236];
	mad.lo.s32 	%r94, %r90, %r58, %r72;
	add.s32 	%r95, %r94, %r74;
	cvt.s64.s32 	%rd41, %r95;
	add.s64 	%rd42, %rd1, %rd41;
	ld.global.nc.v2.u8 	{%rs134, %rs135}, [%rd42+-494];
	ld.global.nc.v2.u8 	{%rs136, %rs137}, [%rd42+-496];
	add.s32 	%r96, %r94, %r77;
	cvt.s64.s32 	%rd43, %r96;
	add.s64 	%rd44, %rd1, %rd43;
	ld.global.nc.v2.u8 	{%rs138, %rs139}, [%rd44+2];
	ld.global.nc.v2.u8 	{%rs140, %rs141}, [%rd44];
	add.s16 	%rs142, %rs137, %rs141;
	add.s16 	%rs143, %rs136, %rs140;
	add.s16 	%rs144, %rs135, %rs139;
	add.s16 	%rs145, %rs134, %rs138;
	add.s16 	%rs146, %rs145, 1;
	add.s16 	%rs147, %rs144, 1;
	add.s16 	%rs148, %rs143, 1;
	add.s16 	%rs149, %rs142, 1;
	shr.u16 	%rs150, %rs149, 1;
	shr.u16 	%rs151, %rs148, 1;
	shr.u16 	%rs152, %rs147, 1;
	shr.u16 	%rs153, %rs146, 1;
	and.b16  	%rs154, %rs153, 255;
	and.b16  	%rs155, %rs152, 255;
	and.b16  	%rs156, %rs151, 255;
	and.b16  	%rs157, %rs150, 255;
	add.s32 	%r97, %r94, %r73;
	cvt.s64.s32 	%rd45, %r97;
	add.s64 	%rd46, %rd1, %rd45;
	ld.global.nc.v2.u8 	{%rs158, %rs159}, [%rd46+-246];
	ld.global.nc.v2.u8 	{%rs160, %rs161}, [%rd46+-248];
	add.s16 	%rs162, %rs161, %rs157;
	add.s16 	%rs163, %rs160, %rs156;
	add.s16 	%rs164, %rs159, %rs155;
	add.s16 	%rs165, %rs158, %rs154;
	add.s16 	%rs166, %rs165, 1;
	add.s16 	%rs167, %rs164, 1;
	add.s16 	%rs168, %rs163, 1;
	add.s16 	%rs169, %rs162, 1;
	shr.u16 	%rs170, %rs169, 1;
	shr.u16 	%rs171, %rs168, 1;
	shr.u16 	%rs172, %rs167, 1;
	shr.u16 	%rs173, %rs166, 1;
	and.b16  	%rs174, %rs173, 255;
	and.b16  	%rs175, %rs172, 255;
	and.b16  	%rs176, %rs171, 255;
	and.b16  	%rs177, %rs170, 255;
	sub.s16 	%rs178, %rs130, %rs177;
	sub.s16 	%rs179, %rs128, %rs176;
	sub.s16 	%rs180, %rs133, %rs175;
	sub.s16 	%rs181, %rs132, %rs174;
	add.s32 	%r98, %r56, %r41;
	mad.lo.s32 	%r99, %r98, %r46, %r82;
	add.s32 	%r100, %r99, %r83;
	mul.wide.s32 	%rd47, %r100, 2;
	add.s64 	%rd48, %rd3, %rd47;
	st.global.v2.u16 	[%rd48+4], {%rs181, %rs180};
	st.global.v2.u16 	[%rd48], {%rs179, %rs178};
	add.s32 	%r101, %r88, %r92;
	cvt.s64.s32 	%rd49, %r101;
	add.s64 	%rd50, %rd2, %rd49;
	ld.global.nc.u8 	%rs182, [%rd50];
	cvt.u16.u8 	%rs183, %rs182;
	add.s64 	%rd51, %rd50, %rd13;
	add.s64 	%rd52, %rd51, 236;
	ld.global.nc.u8 	%rs184, [%rd51+236];
	cvt.u16.u8 	%rs185, %rs184;
	add.s64 	%rd53, %rd52, %rd13;
	add.s64 	%rd54, %rd53, 236;
	ld.global.nc.u8 	%rs186, [%rd53+236];
	cvt.u16.u8 	%rs187, %rs186;
	add.s64 	%rd55, %rd54, %rd13;
	ld.global.u8 	%rs188, [%rd55+236];
	ld.global.nc.v2.u8 	{%rs189, %rs190}, [%rd42+-490];
	ld.global.nc.v2.u8 	{%rs191, %rs192}, [%rd42+-492];
	ld.global.nc.v2.u8 	{%rs193, %rs194}, [%rd44+6];
	ld.global.nc.v2.u8 	{%rs195, %rs196}, [%rd44+4];
	add.s16 	%rs197, %rs192, %rs196;
	add.s16 	%rs198, %rs191, %rs195;
	add.s16 	%rs199, %rs190, %rs194;
	add.s16 	%rs200, %rs189, %rs193;
	add.s16 	%rs201, %rs200, 1;
	add.s16 	%rs202, %rs199, 1;
	add.s16 	%rs203, %rs198, 1;
	add.s16 	%rs204, %rs197, 1;
	shr.u16 	%rs205, %rs204, 1;
	shr.u16 	%rs206, %rs203, 1;
	shr.u16 	%rs207, %rs202, 1;
	shr.u16 	%rs208, %rs201, 1;
	and.b16  	%rs209, %rs208, 255;
	and.b16  	%rs210, %rs207, 255;
	and.b16  	%rs211, %rs206, 255;
	and.b16  	%rs212, %rs205, 255;
	ld.global.nc.v2.u8 	{%rs213, %rs214}, [%rd46+-242];
	ld.global.nc.v2.u8 	{%rs215, %rs216}, [%rd46+-244];
	add.s16 	%rs217, %rs216, %rs212;
	add.s16 	%rs218, %rs215, %rs211;
	add.s16 	%rs219, %rs214, %rs210;
	add.s16 	%rs220, %rs213, %rs209;
	add.s16 	%rs221, %rs220, 1;
	add.s16 	%rs222, %rs219, 1;
	add.s16 	%rs223, %rs218, 1;
	add.s16 	%rs224, %rs217, 1;
	shr.u16 	%rs225, %rs224, 1;
	shr.u16 	%rs226, %rs223, 1;
	shr.u16 	%rs227, %rs222, 1;
	shr.u16 	%rs228, %rs221, 1;
	and.b16  	%rs229, %rs228, 255;
	and.b16  	%rs230, %rs227, 255;
	and.b16  	%rs231, %rs226, 255;
	and.b16  	%rs232, %rs225, 255;
	sub.s16 	%rs233, %rs185, %rs232;
	sub.s16 	%rs234, %rs183, %rs231;
	sub.s16 	%rs235, %rs188, %rs230;
	sub.s16 	%rs236, %rs187, %rs229;
	st.global.v2.u16 	[%rd48+12], {%rs236, %rs235};
	st.global.v2.u16 	[%rd48+8], {%rs234, %rs233};
	add.s32 	%r102, %r66, 1;
	mul.lo.s32 	%r103, %r102, %r36;
	add.s32 	%r104, %r68, %r103;
	add.s32 	%r105, %r64, %r104;
	cvt.s64.s32 	%rd56, %r105;
	add.s64 	%rd57, %rd2, %rd56;
	ld.global.nc.u8 	%rs237, [%rd57];
	cvt.u16.u8 	%rs238, %rs237;
	add.s64 	%rd58, %rd57, %rd13;
	add.s64 	%rd59, %rd58, 236;
	ld.global.nc.u8 	%rs239, [%rd58+236];
	cvt.u16.u8 	%rs240, %rs239;
	add.s64 	%rd60, %rd59, %rd13;
	add.s64 	%rd61, %rd60, 236;
	ld.global.nc.u8 	%rs241, [%rd60+236];
	cvt.u16.u8 	%rs242, %rs241;
	add.s64 	%rd62, %rd61, %rd13;
	ld.global.u8 	%rs243, [%rd62+236];
	mul.lo.s32 	%r106, %r102, %r34;
	sub.s32 	%r107, %r106, %r33;
	add.s32 	%r108, %r75, %r107;
	cvt.s64.s32 	%rd63, %r108;
	add.s64 	%rd64, %rd1, %rd63;
	ld.global.nc.v2.u8 	{%rs244, %rs245}, [%rd64+-494];
	ld.global.nc.v2.u8 	{%rs246, %rs247}, [%rd64+-496];
	add.s32 	%r109, %r106, %r33;
	add.s32 	%r110, %r75, %r109;
	cvt.s64.s32 	%rd65, %r110;
	add.s64 	%rd66, %rd1, %rd65;
	ld.global.nc.v2.u8 	{%rs248, %rs249}, [%rd66+2];
	ld.global.nc.v2.u8 	{%rs250, %rs251}, [%rd66];
	add.s16 	%rs252, %rs247, %rs251;
	add.s16 	%rs253, %rs246, %rs250;
	add.s16 	%rs254, %rs245, %rs249;
	add.s16 	%rs255, %rs244, %rs248;
	add.s16 	%rs256, %rs255, 1;
	add.s16 	%rs257, %rs254, 1;
	add.s16 	%rs258, %rs253, 1;
	add.s16 	%rs259, %rs252, 1;
	shr.u16 	%rs260, %rs259, 1;
	shr.u16 	%rs261, %rs258, 1;
	shr.u16 	%rs262, %rs257, 1;
	shr.u16 	%rs263, %rs256, 1;
	and.b16  	%rs264, %rs263, 255;
	and.b16  	%rs265, %rs262, 255;
	and.b16  	%rs266, %rs261, 255;
	and.b16  	%rs267, %rs260, 255;
	add.s32 	%r111, %r75, %r106;
	cvt.s64.s32 	%rd67, %r111;
	add.s64 	%rd68, %rd1, %rd67;
	ld.global.nc.v2.u8 	{%rs268, %rs269}, [%rd68+-246];
	ld.global.nc.v2.u8 	{%rs270, %rs271}, [%rd68+-248];
	add.s16 	%rs272, %rs271, %rs267;
	add.s16 	%rs273, %rs270, %rs266;
	add.s16 	%rs274, %rs269, %rs265;
	add.s16 	%rs275, %rs268, %rs264;
	add.s16 	%rs276, %rs275, 1;
	add.s16 	%rs277, %rs274, 1;
	add.s16 	%rs278, %rs273, 1;
	add.s16 	%rs279, %rs272, 1;
	shr.u16 	%rs280, %rs279, 1;
	shr.u16 	%rs281, %rs278, 1;
	shr.u16 	%rs282, %rs277, 1;
	shr.u16 	%rs283, %rs276, 1;
	and.b16  	%rs284, %rs283, 255;
	and.b16  	%rs285, %rs282, 255;
	and.b16  	%rs286, %rs281, 255;
	and.b16  	%rs287, %rs280, 255;
	sub.s16 	%rs288, %rs240, %rs287;
	sub.s16 	%rs289, %rs238, %rs286;
	sub.s16 	%rs290, %rs243, %rs285;
	sub.s16 	%rs291, %rs242, %rs284;
	mul.lo.s32 	%r112, %r102, %r37;
	add.s32 	%r113, %r85, %r112;
	mul.wide.s32 	%rd69, %r113, 2;
	add.s64 	%rd70, %rd3, %rd69;
	st.global.v2.u16 	[%rd70+4], {%rs291, %rs290};
	st.global.v2.u16 	[%rd70], {%rs289, %rs288};
	add.s32 	%r114, %r88, %r104;
	cvt.s64.s32 	%rd71, %r114;
	add.s64 	%rd72, %rd2, %rd71;
	ld.global.nc.u8 	%rs292, [%rd72];
	cvt.u16.u8 	%rs293, %rs292;
	add.s64 	%rd73, %rd72, %rd13;
	add.s64 	%rd74, %rd73, 236;
	ld.global.nc.u8 	%rs294, [%rd73+236];
	cvt.u16.u8 	%rs295, %rs294;
	add.s64 	%rd75, %rd74, %rd13;
	add.s64 	%rd76, %rd75, 236;
	ld.global.nc.u8 	%rs296, [%rd75+236];
	cvt.u16.u8 	%rs297, %rs296;
	add.s64 	%rd77, %rd76, %rd13;
	ld.global.u8 	%rs298, [%rd77+236];
	ld.global.nc.v2.u8 	{%rs299, %rs300}, [%rd64+-490];
	ld.global.nc.v2.u8 	{%rs301, %rs302}, [%rd64+-492];
	ld.global.nc.v2.u8 	{%rs303, %rs304}, [%rd66+6];
	ld.global.nc.v2.u8 	{%rs305, %rs306}, [%rd66+4];
	add.s16 	%rs307, %rs302, %rs306;
	add.s16 	%rs308, %rs301, %rs305;
	add.s16 	%rs309, %rs300, %rs304;
	add.s16 	%rs310, %rs299, %rs303;
	add.s16 	%rs311, %rs310, 1;
	add.s16 	%rs312, %rs309, 1;
	add.s16 	%rs313, %rs308, 1;
	add.s16 	%rs314, %rs307, 1;
	shr.u16 	%rs315, %rs314, 1;
	shr.u16 	%rs316, %rs313, 1;
	shr.u16 	%rs317, %rs312, 1;
	shr.u16 	%rs318, %rs311, 1;
	and.b16  	%rs319, %rs318, 255;
	and.b16  	%rs320, %rs317, 255;
	and.b16  	%rs321, %rs316, 255;
	and.b16  	%rs322, %rs315, 255;
	ld.global.nc.v2.u8 	{%rs323, %rs324}, [%rd68+-242];
	ld.global.nc.v2.u8 	{%rs325, %rs326}, [%rd68+-244];
	add.s16 	%rs327, %rs326, %rs322;
	add.s16 	%rs328, %rs325, %rs321;
	add.s16 	%rs329, %rs324, %rs320;
	add.s16 	%rs330, %rs323, %rs319;
	add.s16 	%rs331, %rs330, 1;
	add.s16 	%rs332, %rs329, 1;
	add.s16 	%rs333, %rs328, 1;
	add.s16 	%rs334, %rs327, 1;
	shr.u16 	%rs335, %rs334, 1;
	shr.u16 	%rs336, %rs333, 1;
	shr.u16 	%rs337, %rs332, 1;
	shr.u16 	%rs338, %rs331, 1;
	and.b16  	%rs339, %rs338, 255;
	and.b16  	%rs340, %rs337, 255;
	and.b16  	%rs341, %rs336, 255;
	and.b16  	%rs342, %rs335, 255;
	sub.s16 	%rs343, %rs295, %rs342;
	sub.s16 	%rs344, %rs293, %rs341;
	sub.s16 	%rs345, %rs298, %rs340;
	sub.s16 	%rs346, %rs297, %rs339;
	st.global.v2.u16 	[%rd70+12], {%rs346, %rs345};
	st.global.v2.u16 	[%rd70+8], {%rs344, %rs343};
	add.s32 	%r115, %r91, %r103;
	add.s32 	%r116, %r64, %r115;
	cvt.s64.s32 	%rd78, %r116;
	add.s64 	%rd79, %rd2, %rd78;
	ld.global.nc.u8 	%rs347, [%rd79];
	cvt.u16.u8 	%rs348, %rs347;
	add.s64 	%rd80, %rd79, %rd13;
	add.s64 	%rd81, %rd80, 236;
	ld.global.nc.u8 	%rs349, [%rd80+236];
	cvt.u16.u8 	%rs350, %rs349;
	add.s64 	%rd82, %rd81, %rd13;
	add.s64 	%rd83, %rd82, 236;
	ld.global.nc.u8 	%rs351, [%rd82+236];
	cvt.u16.u8 	%rs352, %rs351;
	add.s64 	%rd84, %rd83, %rd13;
	ld.global.u8 	%rs353, [%rd84+236];
	add.s32 	%r117, %r94, %r107;
	cvt.s64.s32 	%rd85, %r117;
	add.s64 	%rd86, %rd1, %rd85;
	ld.global.nc.v2.u8 	{%rs354, %rs355}, [%rd86+-494];
	ld.global.nc.v2.u8 	{%rs356, %rs357}, [%rd86+-496];
	add.s32 	%r118, %r94, %r109;
	cvt.s64.s32 	%rd87, %r118;
	add.s64 	%rd88, %rd1, %rd87;
	ld.global.nc.v2.u8 	{%rs358, %rs359}, [%rd88+2];
	ld.global.nc.v2.u8 	{%rs360, %rs361}, [%rd88];
	add.s16 	%rs362, %rs357, %rs361;
	add.s16 	%rs363, %rs356, %rs360;
	add.s16 	%rs364, %rs355, %rs359;
	add.s16 	%rs365, %rs354, %rs358;
	add.s16 	%rs366, %rs365, 1;
	add.s16 	%rs367, %rs364, 1;
	add.s16 	%rs368, %rs363, 1;
	add.s16 	%rs369, %rs362, 1;
	shr.u16 	%rs370, %rs369, 1;
	shr.u16 	%rs371, %rs368, 1;
	shr.u16 	%rs372, %rs367, 1;
	shr.u16 	%rs373, %rs366, 1;
	and.b16  	%rs374, %rs373, 255;
	and.b16  	%rs375, %rs372, 255;
	and.b16  	%rs376, %rs371, 255;
	and.b16  	%rs377, %rs370, 255;
	add.s32 	%r119, %r94, %r106;
	cvt.s64.s32 	%rd89, %r119;
	add.s64 	%rd90, %rd1, %rd89;
	ld.global.nc.v2.u8 	{%rs378, %rs379}, [%rd90+-246];
	ld.global.nc.v2.u8 	{%rs380, %rs381}, [%rd90+-248];
	add.s16 	%rs382, %rs381, %rs377;
	add.s16 	%rs383, %rs380, %rs376;
	add.s16 	%rs384, %rs379, %rs375;
	add.s16 	%rs385, %rs378, %rs374;
	add.s16 	%rs386, %rs385, 1;
	add.s16 	%rs387, %rs384, 1;
	add.s16 	%rs388, %rs383, 1;
	add.s16 	%rs389, %rs382, 1;
	shr.u16 	%rs390, %rs389, 1;
	shr.u16 	%rs391, %rs388, 1;
	shr.u16 	%rs392, %rs387, 1;
	shr.u16 	%rs393, %rs386, 1;
	and.b16  	%rs394, %rs393, 255;
	and.b16  	%rs395, %rs392, 255;
	and.b16  	%rs396, %rs391, 255;
	and.b16  	%rs397, %rs390, 255;
	sub.s16 	%rs398, %rs350, %rs397;
	sub.s16 	%rs399, %rs348, %rs396;
	sub.s16 	%rs400, %rs353, %rs395;
	sub.s16 	%rs401, %rs352, %rs394;
	add.s32 	%r120, %r99, %r112;
	mul.wide.s32 	%rd91, %r120, 2;
	add.s64 	%rd92, %rd3, %rd91;
	st.global.v2.u16 	[%rd92+4], {%rs401, %rs400};
	st.global.v2.u16 	[%rd92], {%rs399, %rs398};
	add.s32 	%r121, %r88, %r115;
	cvt.s64.s32 	%rd93, %r121;
	add.s64 	%rd94, %rd2, %rd93;
	ld.global.nc.u8 	%rs402, [%rd94];
	cvt.u16.u8 	%rs403, %rs402;
	add.s64 	%rd95, %rd94, %rd13;
	add.s64 	%rd96, %rd95, 236;
	ld.global.nc.u8 	%rs404, [%rd95+236];
	cvt.u16.u8 	%rs405, %rs404;
	add.s64 	%rd97, %rd96, %rd13;
	add.s64 	%rd98, %rd97, 236;
	ld.global.nc.u8 	%rs406, [%rd97+236];
	cvt.u16.u8 	%rs407, %rs406;
	add.s64 	%rd99, %rd98, %rd13;
	ld.global.u8 	%rs408, [%rd99+236];
	ld.global.nc.v2.u8 	{%rs409, %rs410}, [%rd86+-492];
	ld.global.nc.v2.u8 	{%rs411, %rs412}, [%rd86+-490];
	ld.global.nc.v2.u8 	{%rs413, %rs414}, [%rd88+4];
	ld.global.nc.v2.u8 	{%rs415, %rs416}, [%rd88+6];
	add.s16 	%rs417, %rs412, %rs416;
	add.s16 	%rs418, %rs411, %rs415;
	add.s16 	%rs419, %rs410, %rs414;
	add.s16 	%rs420, %rs409, %rs413;
	add.s16 	%rs421, %rs420, 1;
	add.s16 	%rs422, %rs419, 1;
	add.s16 	%rs423, %rs418, 1;
	add.s16 	%rs424, %rs417, 1;
	shr.u16 	%rs425, %rs424, 1;
	shr.u16 	%rs426, %rs423, 1;
	shr.u16 	%rs427, %rs422, 1;
	shr.u16 	%rs428, %rs421, 1;
	and.b16  	%rs429, %rs428, 255;
	and.b16  	%rs430, %rs427, 255;
	and.b16  	%rs431, %rs426, 255;
	and.b16  	%rs432, %rs425, 255;
	ld.global.nc.v2.u8 	{%rs433, %rs434}, [%rd90+-244];
	ld.global.nc.v2.u8 	{%rs435, %rs436}, [%rd90+-242];
	add.s16 	%rs437, %rs436, %rs432;
	add.s16 	%rs438, %rs435, %rs431;
	add.s16 	%rs439, %rs434, %rs430;
	add.s16 	%rs440, %rs433, %rs429;
	add.s16 	%rs441, %rs440, 1;
	add.s16 	%rs442, %rs439, 1;
	add.s16 	%rs443, %rs438, 1;
	add.s16 	%rs444, %rs437, 1;
	shr.u16 	%rs445, %rs444, 1;
	shr.u16 	%rs446, %rs443, 1;
	shr.u16 	%rs447, %rs442, 1;
	shr.u16 	%rs448, %rs441, 1;
	and.b16  	%rs449, %rs448, 255;
	and.b16  	%rs450, %rs447, 255;
	and.b16  	%rs451, %rs446, 255;
	and.b16  	%rs452, %rs445, 255;
	sub.s16 	%rs1328, %rs408, %rs452;
	sub.s16 	%rs1327, %rs407, %rs451;
	sub.s16 	%rs1326, %rs405, %rs450;
	sub.s16 	%rs1325, %rs403, %rs449;
	add.s32 	%r217, %r120, 4;
	bra.uni 	LBB10_4;
LBB10_2:                                // %true_bb1
	add.s32 	%r174, %r6, %r44;
	add.s32 	%r175, %r12, %r174;
	cvt.s64.s32 	%rd203, %r175;
	add.s64 	%rd204, %rd2, %rd203;
	ld.global.nc.u8 	%rs889, [%rd204];
	cvt.u16.u8 	%rs890, %rs889;
	cvt.s64.s32 	%rd205, %r43;
	add.s64 	%rd206, %rd204, %rd205;
	add.s64 	%rd207, %rd206, 236;
	ld.global.nc.u8 	%rs891, [%rd206+236];
	cvt.u16.u8 	%rs892, %rs891;
	add.s64 	%rd208, %rd207, %rd205;
	add.s64 	%rd209, %rd208, 236;
	ld.global.nc.u8 	%rs893, [%rd208+236];
	cvt.u16.u8 	%rs894, %rs893;
	add.s64 	%rd210, %rd209, %rd205;
	ld.global.u8 	%rs895, [%rd210+236];
	shl.b32 	%r176, %r9, 2;
	sub.s32 	%r177, %r176, %r42;
	shl.b32 	%r178, %r177, 1;
	sub.s32 	%r179, %r8, %r33;
	add.s32 	%r180, %r178, %r179;
	cvt.s64.s32 	%rd211, %r180;
	add.s64 	%rd212, %rd1, %rd211;
	ld.global.nc.v2.u8 	{%rs896, %rs897}, [%rd212+2];
	ld.global.nc.v2.u8 	{%rs898, %rs899}, [%rd212];
	add.s32 	%r181, %r178, %r8;
	add.s32 	%r182, %r181, %r33;
	cvt.s64.s32 	%rd213, %r182;
	add.s64 	%rd214, %rd1, %rd213;
	ld.global.nc.v2.u8 	{%rs900, %rs901}, [%rd214+498];
	ld.global.nc.v2.u8 	{%rs902, %rs903}, [%rd214+496];
	add.s16 	%rs904, %rs899, %rs903;
	add.s16 	%rs905, %rs898, %rs902;
	add.s16 	%rs906, %rs897, %rs901;
	add.s16 	%rs907, %rs896, %rs900;
	add.s16 	%rs908, %rs907, 1;
	add.s16 	%rs909, %rs906, 1;
	add.s16 	%rs910, %rs905, 1;
	add.s16 	%rs911, %rs904, 1;
	shr.u16 	%rs912, %rs911, 1;
	shr.u16 	%rs913, %rs910, 1;
	shr.u16 	%rs914, %rs909, 1;
	shr.u16 	%rs915, %rs908, 1;
	and.b16  	%rs916, %rs915, 255;
	and.b16  	%rs917, %rs914, 255;
	and.b16  	%rs918, %rs913, 255;
	and.b16  	%rs919, %rs912, 255;
	cvt.s64.s32 	%rd215, %r181;
	add.s64 	%rd216, %rd1, %rd215;
	ld.global.nc.v2.u8 	{%rs920, %rs921}, [%rd216+250];
	ld.global.nc.v2.u8 	{%rs922, %rs923}, [%rd216+248];
	add.s16 	%rs924, %rs923, %rs919;
	add.s16 	%rs925, %rs922, %rs918;
	add.s16 	%rs926, %rs921, %rs917;
	add.s16 	%rs927, %rs920, %rs916;
	add.s16 	%rs928, %rs927, 1;
	add.s16 	%rs929, %rs926, 1;
	add.s16 	%rs930, %rs925, 1;
	add.s16 	%rs931, %rs924, 1;
	shr.u16 	%rs932, %rs931, 1;
	shr.u16 	%rs933, %rs930, 1;
	shr.u16 	%rs934, %rs929, 1;
	shr.u16 	%rs935, %rs928, 1;
	and.b16  	%rs936, %rs935, 255;
	and.b16  	%rs937, %rs934, 255;
	and.b16  	%rs938, %rs933, 255;
	and.b16  	%rs939, %rs932, 255;
	sub.s16 	%rs940, %rs892, %rs939;
	sub.s16 	%rs941, %rs890, %rs938;
	sub.s16 	%rs942, %rs895, %rs937;
	sub.s16 	%rs943, %rs894, %rs936;
	sub.s32 	%r183, %r176, %r26;
	shl.b32 	%r184, %r183, 1;
	add.s32 	%r185, %r6, %r39;
	mad.lo.s32 	%r186, %r185, %r46, %r184;
	mul.wide.s32 	%rd217, %r186, 2;
	add.s64 	%rd218, %rd3, %rd217;
	st.global.v2.u16 	[%rd218+500], {%rs943, %rs942};
	st.global.v2.u16 	[%rd218+496], {%rs941, %rs940};
	add.s32 	%r187, %r10, %r47;
	mul.lo.s32 	%r188, %r187, %r11;
	add.s32 	%r189, %r188, %r174;
	cvt.s64.s32 	%rd219, %r189;
	add.s64 	%rd220, %rd2, %rd219;
	ld.global.nc.u8 	%rs944, [%rd220];
	cvt.u16.u8 	%rs945, %rs944;
	add.s64 	%rd221, %rd220, %rd205;
	add.s64 	%rd222, %rd221, 236;
	ld.global.nc.u8 	%rs946, [%rd221+236];
	cvt.u16.u8 	%rs947, %rs946;
	add.s64 	%rd223, %rd222, %rd205;
	add.s64 	%rd224, %rd223, 236;
	ld.global.nc.u8 	%rs948, [%rd223+236];
	cvt.u16.u8 	%rs949, %rs948;
	add.s64 	%rd225, %rd224, %rd205;
	ld.global.u8 	%rs950, [%rd225+236];
	ld.global.nc.v2.u8 	{%rs951, %rs952}, [%rd212+6];
	ld.global.nc.v2.u8 	{%rs953, %rs954}, [%rd212+4];
	ld.global.nc.v2.u8 	{%rs955, %rs956}, [%rd214+502];
	ld.global.nc.v2.u8 	{%rs957, %rs958}, [%rd214+500];
	add.s16 	%rs959, %rs954, %rs958;
	add.s16 	%rs960, %rs953, %rs957;
	add.s16 	%rs961, %rs952, %rs956;
	add.s16 	%rs962, %rs951, %rs955;
	add.s16 	%rs963, %rs962, 1;
	add.s16 	%rs964, %rs961, 1;
	add.s16 	%rs965, %rs960, 1;
	add.s16 	%rs966, %rs959, 1;
	shr.u16 	%rs967, %rs966, 1;
	shr.u16 	%rs968, %rs965, 1;
	shr.u16 	%rs969, %rs964, 1;
	shr.u16 	%rs970, %rs963, 1;
	and.b16  	%rs971, %rs970, 255;
	and.b16  	%rs972, %rs969, 255;
	and.b16  	%rs973, %rs968, 255;
	and.b16  	%rs974, %rs967, 255;
	ld.global.nc.v2.u8 	{%rs975, %rs976}, [%rd216+254];
	ld.global.nc.v2.u8 	{%rs977, %rs978}, [%rd216+252];
	add.s16 	%rs979, %rs978, %rs974;
	add.s16 	%rs980, %rs977, %rs973;
	add.s16 	%rs981, %rs976, %rs972;
	add.s16 	%rs982, %rs975, %rs971;
	add.s16 	%rs983, %rs982, 1;
	add.s16 	%rs984, %rs981, 1;
	add.s16 	%rs985, %rs980, 1;
	add.s16 	%rs986, %rs979, 1;
	shr.u16 	%rs987, %rs986, 1;
	shr.u16 	%rs988, %rs985, 1;
	shr.u16 	%rs989, %rs984, 1;
	shr.u16 	%rs990, %rs983, 1;
	and.b16  	%rs991, %rs990, 255;
	and.b16  	%rs992, %rs989, 255;
	and.b16  	%rs993, %rs988, 255;
	and.b16  	%rs994, %rs987, 255;
	sub.s16 	%rs995, %rs947, %rs994;
	sub.s16 	%rs996, %rs945, %rs993;
	sub.s16 	%rs997, %rs950, %rs992;
	sub.s16 	%rs998, %rs949, %rs991;
	st.global.v2.u16 	[%rd218+508], {%rs998, %rs997};
	st.global.v2.u16 	[%rd218+504], {%rs996, %rs995};
	add.s32 	%r190, %r6, %r40;
	mul.lo.s32 	%r191, %r190, %r7;
	add.s32 	%r192, %r6, %r48;
	add.s32 	%r193, %r12, %r192;
	cvt.s64.s32 	%rd226, %r193;
	add.s64 	%rd227, %rd2, %rd226;
	ld.global.nc.u8 	%rs999, [%rd227];
	cvt.u16.u8 	%rs1000, %rs999;
	add.s64 	%rd228, %rd227, %rd205;
	add.s64 	%rd229, %rd228, 236;
	ld.global.nc.u8 	%rs1001, [%rd228+236];
	cvt.u16.u8 	%rs1002, %rs1001;
	add.s64 	%rd230, %rd229, %rd205;
	add.s64 	%rd231, %rd230, 236;
	ld.global.nc.u8 	%rs1003, [%rd230+236];
	cvt.u16.u8 	%rs1004, %rs1003;
	add.s64 	%rd232, %rd231, %rd205;
	ld.global.u8 	%rs1005, [%rd232+236];
	sub.s32 	%r194, %r191, %r33;
	add.s32 	%r195, %r178, %r194;
	cvt.s64.s32 	%rd233, %r195;
	add.s64 	%rd234, %rd1, %rd233;
	ld.global.nc.v2.u8 	{%rs1006, %rs1007}, [%rd234+2];
	ld.global.nc.v2.u8 	{%rs1008, %rs1009}, [%rd234];
	add.s32 	%r196, %r178, %r191;
	add.s32 	%r197, %r196, %r33;
	cvt.s64.s32 	%rd235, %r197;
	add.s64 	%rd236, %rd1, %rd235;
	ld.global.nc.v2.u8 	{%rs1010, %rs1011}, [%rd236+498];
	ld.global.nc.v2.u8 	{%rs1012, %rs1013}, [%rd236+496];
	add.s16 	%rs1014, %rs1009, %rs1013;
	add.s16 	%rs1015, %rs1008, %rs1012;
	add.s16 	%rs1016, %rs1007, %rs1011;
	add.s16 	%rs1017, %rs1006, %rs1010;
	add.s16 	%rs1018, %rs1017, 1;
	add.s16 	%rs1019, %rs1016, 1;
	add.s16 	%rs1020, %rs1015, 1;
	add.s16 	%rs1021, %rs1014, 1;
	shr.u16 	%rs1022, %rs1021, 1;
	shr.u16 	%rs1023, %rs1020, 1;
	shr.u16 	%rs1024, %rs1019, 1;
	shr.u16 	%rs1025, %rs1018, 1;
	and.b16  	%rs1026, %rs1025, 255;
	and.b16  	%rs1027, %rs1024, 255;
	and.b16  	%rs1028, %rs1023, 255;
	and.b16  	%rs1029, %rs1022, 255;
	cvt.s64.s32 	%rd237, %r196;
	add.s64 	%rd238, %rd1, %rd237;
	ld.global.nc.v2.u8 	{%rs1030, %rs1031}, [%rd238+250];
	ld.global.nc.v2.u8 	{%rs1032, %rs1033}, [%rd238+248];
	add.s16 	%rs1034, %rs1033, %rs1029;
	add.s16 	%rs1035, %rs1032, %rs1028;
	add.s16 	%rs1036, %rs1031, %rs1027;
	add.s16 	%rs1037, %rs1030, %rs1026;
	add.s16 	%rs1038, %rs1037, 1;
	add.s16 	%rs1039, %rs1036, 1;
	add.s16 	%rs1040, %rs1035, 1;
	add.s16 	%rs1041, %rs1034, 1;
	shr.u16 	%rs1042, %rs1041, 1;
	shr.u16 	%rs1043, %rs1040, 1;
	shr.u16 	%rs1044, %rs1039, 1;
	shr.u16 	%rs1045, %rs1038, 1;
	and.b16  	%rs1046, %rs1045, 255;
	and.b16  	%rs1047, %rs1044, 255;
	and.b16  	%rs1048, %rs1043, 255;
	and.b16  	%rs1049, %rs1042, 255;
	sub.s16 	%rs1050, %rs1002, %rs1049;
	sub.s16 	%rs1051, %rs1000, %rs1048;
	sub.s16 	%rs1052, %rs1005, %rs1047;
	sub.s16 	%rs1053, %rs1004, %rs1046;
	add.s32 	%r198, %r6, %r41;
	mad.lo.s32 	%r199, %r198, %r46, %r184;
	mul.wide.s32 	%rd239, %r199, 2;
	add.s64 	%rd240, %rd3, %rd239;
	st.global.v2.u16 	[%rd240+500], {%rs1053, %rs1052};
	st.global.v2.u16 	[%rd240+496], {%rs1051, %rs1050};
	add.s32 	%r200, %r188, %r192;
	cvt.s64.s32 	%rd241, %r200;
	add.s64 	%rd242, %rd2, %rd241;
	ld.global.nc.u8 	%rs1054, [%rd242];
	cvt.u16.u8 	%rs1055, %rs1054;
	add.s64 	%rd243, %rd242, %rd205;
	add.s64 	%rd244, %rd243, 236;
	ld.global.nc.u8 	%rs1056, [%rd243+236];
	cvt.u16.u8 	%rs1057, %rs1056;
	add.s64 	%rd245, %rd244, %rd205;
	add.s64 	%rd246, %rd245, 236;
	ld.global.nc.u8 	%rs1058, [%rd245+236];
	cvt.u16.u8 	%rs1059, %rs1058;
	add.s64 	%rd247, %rd246, %rd205;
	ld.global.u8 	%rs1060, [%rd247+236];
	ld.global.nc.v2.u8 	{%rs1061, %rs1062}, [%rd234+6];
	ld.global.nc.v2.u8 	{%rs1063, %rs1064}, [%rd234+4];
	ld.global.nc.v2.u8 	{%rs1065, %rs1066}, [%rd236+502];
	ld.global.nc.v2.u8 	{%rs1067, %rs1068}, [%rd236+500];
	add.s16 	%rs1069, %rs1064, %rs1068;
	add.s16 	%rs1070, %rs1063, %rs1067;
	add.s16 	%rs1071, %rs1062, %rs1066;
	add.s16 	%rs1072, %rs1061, %rs1065;
	add.s16 	%rs1073, %rs1072, 1;
	add.s16 	%rs1074, %rs1071, 1;
	add.s16 	%rs1075, %rs1070, 1;
	add.s16 	%rs1076, %rs1069, 1;
	shr.u16 	%rs1077, %rs1076, 1;
	shr.u16 	%rs1078, %rs1075, 1;
	shr.u16 	%rs1079, %rs1074, 1;
	shr.u16 	%rs1080, %rs1073, 1;
	and.b16  	%rs1081, %rs1080, 255;
	and.b16  	%rs1082, %rs1079, 255;
	and.b16  	%rs1083, %rs1078, 255;
	and.b16  	%rs1084, %rs1077, 255;
	ld.global.nc.v2.u8 	{%rs1085, %rs1086}, [%rd238+254];
	ld.global.nc.v2.u8 	{%rs1087, %rs1088}, [%rd238+252];
	add.s16 	%rs1089, %rs1088, %rs1084;
	add.s16 	%rs1090, %rs1087, %rs1083;
	add.s16 	%rs1091, %rs1086, %rs1082;
	add.s16 	%rs1092, %rs1085, %rs1081;
	add.s16 	%rs1093, %rs1092, 1;
	add.s16 	%rs1094, %rs1091, 1;
	add.s16 	%rs1095, %rs1090, 1;
	add.s16 	%rs1096, %rs1089, 1;
	shr.u16 	%rs1097, %rs1096, 1;
	shr.u16 	%rs1098, %rs1095, 1;
	shr.u16 	%rs1099, %rs1094, 1;
	shr.u16 	%rs1100, %rs1093, 1;
	and.b16  	%rs1101, %rs1100, 255;
	and.b16  	%rs1102, %rs1099, 255;
	and.b16  	%rs1103, %rs1098, 255;
	and.b16  	%rs1104, %rs1097, 255;
	sub.s16 	%rs1105, %rs1057, %rs1104;
	sub.s16 	%rs1106, %rs1055, %rs1103;
	sub.s16 	%rs1107, %rs1060, %rs1102;
	sub.s16 	%rs1108, %rs1059, %rs1101;
	st.global.v2.u16 	[%rd240+508], {%rs1108, %rs1107};
	st.global.v2.u16 	[%rd240+504], {%rs1106, %rs1105};
	add.s32 	%r201, %r6, %r49;
	add.s32 	%r202, %r12, %r201;
	cvt.s64.s32 	%rd248, %r202;
	add.s64 	%rd249, %rd2, %rd248;
	ld.global.nc.u8 	%rs1109, [%rd249];
	cvt.u16.u8 	%rs1110, %rs1109;
	add.s64 	%rd250, %rd249, %rd205;
	add.s64 	%rd251, %rd250, 236;
	ld.global.nc.u8 	%rs1111, [%rd250+236];
	cvt.u16.u8 	%rs1112, %rs1111;
	add.s64 	%rd252, %rd251, %rd205;
	add.s64 	%rd253, %rd252, 236;
	ld.global.nc.u8 	%rs1113, [%rd252+236];
	cvt.u16.u8 	%rs1114, %rs1113;
	add.s64 	%rd254, %rd253, %rd205;
	ld.global.u8 	%rs1115, [%rd254+236];
	add.s32 	%r203, %r181, %r30;
	cvt.s64.s32 	%rd255, %r203;
	add.s64 	%rd256, %rd1, %rd255;
	ld.global.nc.v2.u8 	{%rs1116, %rs1117}, [%rd256+2];
	ld.global.nc.v2.u8 	{%rs1118, %rs1119}, [%rd256];
	add.s32 	%r204, %r181, %r35;
	cvt.s64.s32 	%rd257, %r204;
	add.s64 	%rd258, %rd1, %rd257;
	ld.global.nc.v2.u8 	{%rs1120, %rs1121}, [%rd258+2];
	ld.global.nc.v2.u8 	{%rs1122, %rs1123}, [%rd258];
	add.s16 	%rs1124, %rs1119, %rs1123;
	add.s16 	%rs1125, %rs1118, %rs1122;
	add.s16 	%rs1126, %rs1117, %rs1121;
	add.s16 	%rs1127, %rs1116, %rs1120;
	add.s16 	%rs1128, %rs1127, 1;
	add.s16 	%rs1129, %rs1126, 1;
	add.s16 	%rs1130, %rs1125, 1;
	add.s16 	%rs1131, %rs1124, 1;
	shr.u16 	%rs1132, %rs1131, 1;
	shr.u16 	%rs1133, %rs1130, 1;
	shr.u16 	%rs1134, %rs1129, 1;
	shr.u16 	%rs1135, %rs1128, 1;
	and.b16  	%rs1136, %rs1135, 255;
	and.b16  	%rs1137, %rs1134, 255;
	and.b16  	%rs1138, %rs1133, 255;
	and.b16  	%rs1139, %rs1132, 255;
	add.s32 	%r205, %r181, %r34;
	cvt.s64.s32 	%rd259, %r205;
	add.s64 	%rd260, %rd1, %rd259;
	ld.global.nc.v2.u8 	{%rs1140, %rs1141}, [%rd260+250];
	ld.global.nc.v2.u8 	{%rs1142, %rs1143}, [%rd260+248];
	add.s16 	%rs1144, %rs1143, %rs1139;
	add.s16 	%rs1145, %rs1142, %rs1138;
	add.s16 	%rs1146, %rs1141, %rs1137;
	add.s16 	%rs1147, %rs1140, %rs1136;
	add.s16 	%rs1148, %rs1147, 1;
	add.s16 	%rs1149, %rs1146, 1;
	add.s16 	%rs1150, %rs1145, 1;
	add.s16 	%rs1151, %rs1144, 1;
	shr.u16 	%rs1152, %rs1151, 1;
	shr.u16 	%rs1153, %rs1150, 1;
	shr.u16 	%rs1154, %rs1149, 1;
	shr.u16 	%rs1155, %rs1148, 1;
	and.b16  	%rs1156, %rs1155, 255;
	and.b16  	%rs1157, %rs1154, 255;
	and.b16  	%rs1158, %rs1153, 255;
	and.b16  	%rs1159, %rs1152, 255;
	sub.s16 	%rs1160, %rs1112, %rs1159;
	sub.s16 	%rs1161, %rs1110, %rs1158;
	sub.s16 	%rs1162, %rs1115, %rs1157;
	sub.s16 	%rs1163, %rs1114, %rs1156;
	add.s32 	%r206, %r186, %r37;
	mul.wide.s32 	%rd261, %r206, 2;
	add.s64 	%rd262, %rd3, %rd261;
	st.global.v2.u16 	[%rd262+500], {%rs1163, %rs1162};
	st.global.v2.u16 	[%rd262+496], {%rs1161, %rs1160};
	add.s32 	%r207, %r188, %r201;
	cvt.s64.s32 	%rd263, %r207;
	add.s64 	%rd264, %rd2, %rd263;
	ld.global.nc.u8 	%rs1164, [%rd264];
	cvt.u16.u8 	%rs1165, %rs1164;
	add.s64 	%rd265, %rd264, %rd205;
	add.s64 	%rd266, %rd265, 236;
	ld.global.nc.u8 	%rs1166, [%rd265+236];
	cvt.u16.u8 	%rs1167, %rs1166;
	add.s64 	%rd267, %rd266, %rd205;
	add.s64 	%rd268, %rd267, 236;
	ld.global.nc.u8 	%rs1168, [%rd267+236];
	cvt.u16.u8 	%rs1169, %rs1168;
	add.s64 	%rd269, %rd268, %rd205;
	ld.global.u8 	%rs1170, [%rd269+236];
	ld.global.nc.v2.u8 	{%rs1171, %rs1172}, [%rd256+6];
	ld.global.nc.v2.u8 	{%rs1173, %rs1174}, [%rd256+4];
	add.s32 	%r208, %r181, %r50;
	cvt.s64.s32 	%rd270, %r208;
	add.s64 	%rd271, %rd1, %rd270;
	ld.global.nc.v2.u8 	{%rs1175, %rs1176}, [%rd271+2];
	ld.global.nc.v2.u8 	{%rs1177, %rs1178}, [%rd271];
	add.s16 	%rs1179, %rs1174, %rs1178;
	add.s16 	%rs1180, %rs1173, %rs1177;
	add.s16 	%rs1181, %rs1172, %rs1176;
	add.s16 	%rs1182, %rs1171, %rs1175;
	add.s16 	%rs1183, %rs1182, 1;
	add.s16 	%rs1184, %rs1181, 1;
	add.s16 	%rs1185, %rs1180, 1;
	add.s16 	%rs1186, %rs1179, 1;
	shr.u16 	%rs1187, %rs1186, 1;
	shr.u16 	%rs1188, %rs1185, 1;
	shr.u16 	%rs1189, %rs1184, 1;
	shr.u16 	%rs1190, %rs1183, 1;
	and.b16  	%rs1191, %rs1190, 255;
	and.b16  	%rs1192, %rs1189, 255;
	and.b16  	%rs1193, %rs1188, 255;
	and.b16  	%rs1194, %rs1187, 255;
	ld.global.nc.v2.u8 	{%rs1195, %rs1196}, [%rd260+254];
	ld.global.nc.v2.u8 	{%rs1197, %rs1198}, [%rd260+252];
	add.s16 	%rs1199, %rs1198, %rs1194;
	add.s16 	%rs1200, %rs1197, %rs1193;
	add.s16 	%rs1201, %rs1196, %rs1192;
	add.s16 	%rs1202, %rs1195, %rs1191;
	add.s16 	%rs1203, %rs1202, 1;
	add.s16 	%rs1204, %rs1201, 1;
	add.s16 	%rs1205, %rs1200, 1;
	add.s16 	%rs1206, %rs1199, 1;
	shr.u16 	%rs1207, %rs1206, 1;
	shr.u16 	%rs1208, %rs1205, 1;
	shr.u16 	%rs1209, %rs1204, 1;
	shr.u16 	%rs1210, %rs1203, 1;
	and.b16  	%rs1211, %rs1210, 255;
	and.b16  	%rs1212, %rs1209, 255;
	and.b16  	%rs1213, %rs1208, 255;
	and.b16  	%rs1214, %rs1207, 255;
	sub.s16 	%rs1215, %rs1167, %rs1214;
	sub.s16 	%rs1216, %rs1165, %rs1213;
	sub.s16 	%rs1217, %rs1170, %rs1212;
	sub.s16 	%rs1218, %rs1169, %rs1211;
	st.global.v2.u16 	[%rd262+508], {%rs1218, %rs1217};
	st.global.v2.u16 	[%rd262+504], {%rs1216, %rs1215};
	add.s32 	%r209, %r6, %r18;
	add.s32 	%r210, %r12, %r209;
	cvt.s64.s32 	%rd272, %r210;
	add.s64 	%rd273, %rd2, %rd272;
	ld.global.nc.u8 	%rs1219, [%rd273];
	cvt.u16.u8 	%rs1220, %rs1219;
	add.s64 	%rd274, %rd273, %rd205;
	add.s64 	%rd275, %rd274, 236;
	ld.global.nc.u8 	%rs1221, [%rd274+236];
	cvt.u16.u8 	%rs1222, %rs1221;
	add.s64 	%rd276, %rd275, %rd205;
	add.s64 	%rd277, %rd276, 236;
	ld.global.nc.u8 	%rs1223, [%rd276+236];
	cvt.u16.u8 	%rs1224, %rs1223;
	add.s64 	%rd278, %rd277, %rd205;
	ld.global.u8 	%rs1225, [%rd278+236];
	add.s32 	%r211, %r196, %r30;
	cvt.s64.s32 	%rd279, %r211;
	add.s64 	%rd280, %rd1, %rd279;
	ld.global.nc.v2.u8 	{%rs1226, %rs1227}, [%rd280+2];
	ld.global.nc.v2.u8 	{%rs1228, %rs1229}, [%rd280];
	add.s32 	%r212, %r196, %r35;
	cvt.s64.s32 	%rd281, %r212;
	add.s64 	%rd282, %rd1, %rd281;
	ld.global.nc.v2.u8 	{%rs1230, %rs1231}, [%rd282+2];
	ld.global.nc.v2.u8 	{%rs1232, %rs1233}, [%rd282];
	add.s16 	%rs1234, %rs1229, %rs1233;
	add.s16 	%rs1235, %rs1228, %rs1232;
	add.s16 	%rs1236, %rs1227, %rs1231;
	add.s16 	%rs1237, %rs1226, %rs1230;
	add.s16 	%rs1238, %rs1237, 1;
	add.s16 	%rs1239, %rs1236, 1;
	add.s16 	%rs1240, %rs1235, 1;
	add.s16 	%rs1241, %rs1234, 1;
	shr.u16 	%rs1242, %rs1241, 1;
	shr.u16 	%rs1243, %rs1240, 1;
	shr.u16 	%rs1244, %rs1239, 1;
	shr.u16 	%rs1245, %rs1238, 1;
	and.b16  	%rs1246, %rs1245, 255;
	and.b16  	%rs1247, %rs1244, 255;
	and.b16  	%rs1248, %rs1243, 255;
	and.b16  	%rs1249, %rs1242, 255;
	add.s32 	%r213, %r196, %r34;
	cvt.s64.s32 	%rd283, %r213;
	add.s64 	%rd284, %rd1, %rd283;
	ld.global.nc.v2.u8 	{%rs1250, %rs1251}, [%rd284+250];
	ld.global.nc.v2.u8 	{%rs1252, %rs1253}, [%rd284+248];
	add.s16 	%rs1254, %rs1253, %rs1249;
	add.s16 	%rs1255, %rs1252, %rs1248;
	add.s16 	%rs1256, %rs1251, %rs1247;
	add.s16 	%rs1257, %rs1250, %rs1246;
	add.s16 	%rs1258, %rs1257, 1;
	add.s16 	%rs1259, %rs1256, 1;
	add.s16 	%rs1260, %rs1255, 1;
	add.s16 	%rs1261, %rs1254, 1;
	shr.u16 	%rs1262, %rs1261, 1;
	shr.u16 	%rs1263, %rs1260, 1;
	shr.u16 	%rs1264, %rs1259, 1;
	shr.u16 	%rs1265, %rs1258, 1;
	and.b16  	%rs1266, %rs1265, 255;
	and.b16  	%rs1267, %rs1264, 255;
	and.b16  	%rs1268, %rs1263, 255;
	and.b16  	%rs1269, %rs1262, 255;
	sub.s16 	%rs1270, %rs1222, %rs1269;
	sub.s16 	%rs1271, %rs1220, %rs1268;
	sub.s16 	%rs1272, %rs1225, %rs1267;
	sub.s16 	%rs1273, %rs1224, %rs1266;
	add.s32 	%r214, %r199, %r37;
	mul.wide.s32 	%rd285, %r214, 2;
	add.s64 	%rd286, %rd3, %rd285;
	st.global.v2.u16 	[%rd286+500], {%rs1273, %rs1272};
	st.global.v2.u16 	[%rd286+496], {%rs1271, %rs1270};
	add.s32 	%r215, %r188, %r209;
	cvt.s64.s32 	%rd287, %r215;
	add.s64 	%rd288, %rd2, %rd287;
	ld.global.nc.u8 	%rs1274, [%rd288];
	cvt.u16.u8 	%rs1275, %rs1274;
	add.s64 	%rd289, %rd288, %rd205;
	add.s64 	%rd290, %rd289, 236;
	ld.global.nc.u8 	%rs1276, [%rd289+236];
	cvt.u16.u8 	%rs1277, %rs1276;
	add.s64 	%rd291, %rd290, %rd205;
	add.s64 	%rd292, %rd291, 236;
	ld.global.nc.u8 	%rs1278, [%rd291+236];
	cvt.u16.u8 	%rs1279, %rs1278;
	add.s64 	%rd293, %rd292, %rd205;
	ld.global.u8 	%rs1280, [%rd293+236];
	ld.global.nc.v2.u8 	{%rs1281, %rs1282}, [%rd280+4];
	ld.global.nc.v2.u8 	{%rs1283, %rs1284}, [%rd280+6];
	add.s32 	%r216, %r196, %r50;
	cvt.s64.s32 	%rd294, %r216;
	add.s64 	%rd295, %rd1, %rd294;
	ld.global.nc.v2.u8 	{%rs1285, %rs1286}, [%rd295];
	ld.global.nc.v2.u8 	{%rs1287, %rs1288}, [%rd295+2];
	add.s16 	%rs1289, %rs1284, %rs1288;
	add.s16 	%rs1290, %rs1283, %rs1287;
	add.s16 	%rs1291, %rs1282, %rs1286;
	add.s16 	%rs1292, %rs1281, %rs1285;
	add.s16 	%rs1293, %rs1292, 1;
	add.s16 	%rs1294, %rs1291, 1;
	add.s16 	%rs1295, %rs1290, 1;
	add.s16 	%rs1296, %rs1289, 1;
	shr.u16 	%rs1297, %rs1296, 1;
	shr.u16 	%rs1298, %rs1295, 1;
	shr.u16 	%rs1299, %rs1294, 1;
	shr.u16 	%rs1300, %rs1293, 1;
	and.b16  	%rs1301, %rs1300, 255;
	and.b16  	%rs1302, %rs1299, 255;
	and.b16  	%rs1303, %rs1298, 255;
	and.b16  	%rs1304, %rs1297, 255;
	ld.global.nc.v2.u8 	{%rs1305, %rs1306}, [%rd284+252];
	ld.global.nc.v2.u8 	{%rs1307, %rs1308}, [%rd284+254];
	add.s16 	%rs1309, %rs1308, %rs1304;
	add.s16 	%rs1310, %rs1307, %rs1303;
	add.s16 	%rs1311, %rs1306, %rs1302;
	add.s16 	%rs1312, %rs1305, %rs1301;
	add.s16 	%rs1313, %rs1312, 1;
	add.s16 	%rs1314, %rs1311, 1;
	add.s16 	%rs1315, %rs1310, 1;
	add.s16 	%rs1316, %rs1309, 1;
	shr.u16 	%rs1317, %rs1316, 1;
	shr.u16 	%rs1318, %rs1315, 1;
	shr.u16 	%rs1319, %rs1314, 1;
	shr.u16 	%rs1320, %rs1313, 1;
	and.b16  	%rs1321, %rs1320, 255;
	and.b16  	%rs1322, %rs1319, 255;
	and.b16  	%rs1323, %rs1318, 255;
	and.b16  	%rs1324, %rs1317, 255;
	sub.s16 	%rs1328, %rs1280, %rs1324;
	sub.s16 	%rs1327, %rs1279, %rs1323;
	sub.s16 	%rs1326, %rs1277, %rs1322;
	sub.s16 	%rs1325, %rs1275, %rs1321;
	add.s32 	%r217, %r214, 252;
LBB10_4:                                // %after_bb
	mul.wide.s32 	%rd296, %r217, 2;
	add.s64 	%rd297, %rd3, %rd296;
	st.global.v2.u16 	[%rd297], {%rs1325, %rs1326};
	st.global.v2.u16 	[%rd297+4], {%rs1327, %rs1328};
	ret;
                                        // -- End function
}
	// .globl	kernel_sharpened_s0____c___block_id_z // -- Begin function kernel_sharpened_s0____c___block_id_z
.visible .entry kernel_sharpened_s0____c___block_id_z(
	.param .u32 kernel_sharpened_s0____c___block_id_z_param_0,
	.param .u32 kernel_sharpened_s0____c___block_id_z_param_1,
	.param .u32 kernel_sharpened_s0____c___block_id_z_param_2,
	.param .u32 kernel_sharpened_s0____c___block_id_z_param_3,
	.param .u32 kernel_sharpened_s0____c___block_id_z_param_4,
	.param .u32 kernel_sharpened_s0____c___block_id_z_param_5,
	.param .u32 kernel_sharpened_s0____c___block_id_z_param_6,
	.param .u32 kernel_sharpened_s0____c___block_id_z_param_7,
	.param .u32 kernel_sharpened_s0____c___block_id_z_param_8,
	.param .u32 kernel_sharpened_s0____c___block_id_z_param_9,
	.param .u32 kernel_sharpened_s0____c___block_id_z_param_10,
	.param .u32 kernel_sharpened_s0____c___block_id_z_param_11,
	.param .u32 kernel_sharpened_s0____c___block_id_z_param_12,
	.param .u32 kernel_sharpened_s0____c___block_id_z_param_13,
	.param .u32 kernel_sharpened_s0____c___block_id_z_param_14,
	.param .u32 kernel_sharpened_s0____c___block_id_z_param_15,
	.param .u32 kernel_sharpened_s0____c___block_id_z_param_16,
	.param .u32 kernel_sharpened_s0____c___block_id_z_param_17,
	.param .u32 kernel_sharpened_s0____c___block_id_z_param_18,
	.param .u32 kernel_sharpened_s0____c___block_id_z_param_19,
	.param .u32 kernel_sharpened_s0____c___block_id_z_param_20,
	.param .u32 kernel_sharpened_s0____c___block_id_z_param_21,
	.param .u32 kernel_sharpened_s0____c___block_id_z_param_22,
	.param .u32 kernel_sharpened_s0____c___block_id_z_param_23,
	.param .u32 kernel_sharpened_s0____c___block_id_z_param_24,
	.param .u8 kernel_sharpened_s0____c___block_id_z_param_25,
	.param .u64 kernel_sharpened_s0____c___block_id_z_param_26,
	.param .u64 kernel_sharpened_s0____c___block_id_z_param_27,
	.param .u64 kernel_sharpened_s0____c___block_id_z_param_28
)                                       // @kernel_sharpened_s0____c___block_id_z
{
	.reg .pred 	%p<3>;
	.reg .b16 	%rs<199>;
	.reg .b32 	%r<104>;
	.reg .b64 	%rd<70>;

// %bb.0:                               // %entry
	ld.param.u8 	%rs17, [kernel_sharpened_s0____c___block_id_z_param_25];
	ld.param.u32 	%r32, [kernel_sharpened_s0____c___block_id_z_param_24];
	ld.param.u32 	%r31, [kernel_sharpened_s0____c___block_id_z_param_23];
	ld.param.u32 	%r29, [kernel_sharpened_s0____c___block_id_z_param_21];
	ld.param.u32 	%r27, [kernel_sharpened_s0____c___block_id_z_param_19];
	ld.param.u32 	%r23, [kernel_sharpened_s0____c___block_id_z_param_13];
	ld.param.u32 	%r22, [kernel_sharpened_s0____c___block_id_z_param_12];
	ld.param.u32 	%r21, [kernel_sharpened_s0____c___block_id_z_param_11];
	ld.param.u32 	%r19, [kernel_sharpened_s0____c___block_id_z_param_9];
	ld.param.u64 	%rd4, [kernel_sharpened_s0____c___block_id_z_param_28];
	cvta.to.global.u64 	%rd1, %rd4;
	ld.param.u64 	%rd5, [kernel_sharpened_s0____c___block_id_z_param_27];
	cvta.to.global.u64 	%rd2, %rd5;
	ld.param.u64 	%rd6, [kernel_sharpened_s0____c___block_id_z_param_26];
	cvta.to.global.u64 	%rd3, %rd6;
	mov.u32 	%r1, %ctaid.z;
	mov.u32 	%r33, %ctaid.y;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %tid.y;
	mov.u32 	%r4, %tid.x;
	shl.b32 	%r34, %r33, 6;
	ld.param.u32 	%r35, [kernel_sharpened_s0____c___block_id_z_param_15];
	min.s32 	%r5, %r34, %r35;
	ld.param.u32 	%r36, [kernel_sharpened_s0____c___block_id_z_param_14];
	setp.ge.s32 	%p1, %r2, %r36;
	@%p1 bra 	LBB11_3;
// %bb.1:                               // %true_bb
	setp.lt.u32 	%p2, %r4, 15;
	@%p2 bra 	LBB11_2;
	bra.uni 	LBB11_5;
LBB11_2:                                // %true_bb1
	ld.param.u32 	%r28, [kernel_sharpened_s0____c___block_id_z_param_20];
	ld.param.u32 	%r26, [kernel_sharpened_s0____c___block_id_z_param_18];
	ld.param.u32 	%r25, [kernel_sharpened_s0____c___block_id_z_param_17];
	ld.param.u32 	%r24, [kernel_sharpened_s0____c___block_id_z_param_16];
	ld.param.u32 	%r20, [kernel_sharpened_s0____c___block_id_z_param_10];
	ld.param.u32 	%r18, [kernel_sharpened_s0____c___block_id_z_param_8];
	shl.b32 	%r77, %r4, 3;
	add.s32 	%r78, %r5, %r3;
	add.s32 	%r79, %r78, %r27;
	mul.lo.s32 	%r80, %r79, %r22;
	mul.lo.s32 	%r81, %r1, %r31;
	mad.lo.s32 	%r82, %r2, 124, %r77;
	add.s32 	%r83, %r82, %r28;
	add.s32 	%r84, %r83, %r81;
	add.s32 	%r85, %r84, %r80;
	mul.wide.s32 	%rd47, %r85, 2;
	add.s64 	%rd48, %rd3, %rd47;
	ld.global.nc.v2.u16 	{%rs136, %rs137}, [%rd48];
	ld.global.nc.v2.u16 	{%rs138, %rs139}, [%rd48+4];
	and.b16  	%rs140, %rs17, 255;
	mul.lo.s16 	%rs141, %rs138, %rs140;
	mul.lo.s16 	%rs142, %rs139, %rs140;
	mul.lo.s16 	%rs143, %rs137, %rs140;
	mul.lo.s16 	%rs144, %rs136, %rs140;
	shr.s16 	%rs145, %rs144, 5;
	shr.s16 	%rs146, %rs143, 5;
	shr.s16 	%rs147, %rs142, 5;
	shr.s16 	%rs148, %rs141, 5;
	add.s32 	%r86, %r82, %r20;
	add.s32 	%r87, %r23, 236;
	add.s32 	%r88, %r78, %r21;
	mad.lo.s32 	%r89, %r1, %r32, %r88;
	mad.lo.s32 	%r90, %r86, %r87, %r89;
	cvt.s64.s32 	%rd49, %r90;
	add.s64 	%rd50, %rd2, %rd49;
	ld.global.nc.u8 	%rs149, [%rd50];
	cvt.u16.u8 	%rs150, %rs149;
	cvt.s64.s32 	%rd51, %r23;
	add.s64 	%rd52, %rd50, %rd51;
	add.s64 	%rd53, %rd52, 236;
	ld.global.nc.u8 	%rs151, [%rd52+236];
	cvt.u16.u8 	%rs152, %rs151;
	add.s64 	%rd54, %rd53, %rd51;
	add.s64 	%rd55, %rd54, 236;
	ld.global.nc.u8 	%rs153, [%rd54+236];
	cvt.u16.u8 	%rs154, %rs153;
	add.s64 	%rd56, %rd55, %rd51;
	ld.global.u8 	%rs155, [%rd56+236];
	add.s16 	%rs156, %rs148, %rs154;
	add.s16 	%rs157, %rs147, %rs155;
	add.s16 	%rs158, %rs146, %rs152;
	add.s16 	%rs159, %rs145, %rs150;
	min.s16 	%rs160, %rs159, 255;
	min.s16 	%rs161, %rs158, 255;
	min.s16 	%rs162, %rs157, 255;
	min.s16 	%rs163, %rs156, 255;
	max.s16 	%rs164, %rs163, 0;
	max.s16 	%rs165, %rs162, 0;
	max.s16 	%rs166, %rs161, 0;
	max.s16 	%rs167, %rs160, 0;
	mul.lo.s32 	%r91, %r79, %r19;
	mul.lo.s32 	%r92, %r1, %r29;
	add.s32 	%r93, %r82, %r26;
	add.s32 	%r94, %r93, %r92;
	add.s32 	%r95, %r94, %r91;
	cvt.s64.s32 	%rd57, %r95;
	add.s64 	%rd58, %rd1, %rd57;
	st.global.v2.u8 	[%rd58], {%rs167, %rs166};
	st.global.v2.u8 	[%rd58+2], {%rs164, %rs165};
	add.s32 	%r96, %r82, %r25;
	add.s32 	%r97, %r96, %r81;
	add.s32 	%r98, %r97, %r80;
	mul.wide.s32 	%rd59, %r98, 2;
	add.s64 	%rd60, %rd3, %rd59;
	ld.global.nc.v2.u16 	{%rs168, %rs169}, [%rd60];
	ld.global.nc.v2.u16 	{%rs170, %rs171}, [%rd60+4];
	mul.lo.s16 	%rs172, %rs171, %rs140;
	mul.lo.s16 	%rs173, %rs170, %rs140;
	mul.lo.s16 	%rs174, %rs169, %rs140;
	mul.lo.s16 	%rs175, %rs168, %rs140;
	shr.s16 	%rs176, %rs175, 5;
	shr.s16 	%rs177, %rs174, 5;
	shr.s16 	%rs178, %rs173, 5;
	shr.s16 	%rs179, %rs172, 5;
	add.s32 	%r99, %r82, %r18;
	mad.lo.s32 	%r100, %r99, %r87, %r89;
	cvt.s64.s32 	%rd61, %r100;
	add.s64 	%rd62, %rd2, %rd61;
	ld.global.nc.u8 	%rs180, [%rd62];
	cvt.u16.u8 	%rs181, %rs180;
	add.s64 	%rd63, %rd62, %rd51;
	add.s64 	%rd64, %rd63, 236;
	ld.global.nc.u8 	%rs182, [%rd63+236];
	cvt.u16.u8 	%rs183, %rs182;
	add.s64 	%rd65, %rd64, %rd51;
	add.s64 	%rd66, %rd65, 236;
	ld.global.nc.u8 	%rs184, [%rd65+236];
	cvt.u16.u8 	%rs185, %rs184;
	add.s64 	%rd67, %rd66, %rd51;
	ld.global.u8 	%rs186, [%rd67+236];
	add.s16 	%rs187, %rs179, %rs186;
	add.s16 	%rs188, %rs178, %rs185;
	add.s16 	%rs189, %rs177, %rs183;
	add.s16 	%rs190, %rs176, %rs181;
	min.s16 	%rs191, %rs190, 255;
	min.s16 	%rs192, %rs189, 255;
	min.s16 	%rs193, %rs188, 255;
	min.s16 	%rs194, %rs187, 255;
	max.s16 	%rs198, %rs194, 0;
	max.s16 	%rs197, %rs193, 0;
	max.s16 	%rs196, %rs192, 0;
	max.s16 	%rs195, %rs191, 0;
	add.s32 	%r101, %r82, %r24;
	add.s32 	%r102, %r101, %r92;
	add.s32 	%r103, %r102, %r91;
	bra.uni 	LBB11_4;
LBB11_3:                                // %false_bb
	ld.param.u32 	%r15, [kernel_sharpened_s0____c___block_id_z_param_5];
	ld.param.u32 	%r14, [kernel_sharpened_s0____c___block_id_z_param_4];
	ld.param.u32 	%r13, [kernel_sharpened_s0____c___block_id_z_param_3];
	ld.param.u32 	%r12, [kernel_sharpened_s0____c___block_id_z_param_2];
	ld.param.u32 	%r11, [kernel_sharpened_s0____c___block_id_z_param_1];
	shl.b32 	%r37, %r4, 3;
	min.u32 	%r38, %r37, 116;
	add.s32 	%r39, %r5, %r3;
	add.s32 	%r40, %r39, %r27;
	mul.lo.s32 	%r41, %r1, %r31;
	mad.lo.s32 	%r42, %r40, %r22, %r38;
	add.s32 	%r43, %r42, %r15;
	add.s32 	%r44, %r43, %r41;
	mul.wide.s32 	%rd7, %r44, 2;
	add.s64 	%rd8, %rd3, %rd7;
	ld.global.nc.v2.u16 	{%rs18, %rs19}, [%rd8];
	ld.global.nc.v2.u16 	{%rs20, %rs21}, [%rd8+4];
	and.b16  	%rs22, %rs17, 255;
	mul.lo.s16 	%rs23, %rs20, %rs22;
	mul.lo.s16 	%rs24, %rs21, %rs22;
	mul.lo.s16 	%rs25, %rs19, %rs22;
	mul.lo.s16 	%rs26, %rs18, %rs22;
	shr.s16 	%rs27, %rs26, 5;
	shr.s16 	%rs28, %rs25, 5;
	shr.s16 	%rs29, %rs24, 5;
	shr.s16 	%rs30, %rs23, 5;
	add.s32 	%r45, %r38, %r14;
	add.s32 	%r46, %r23, 236;
	add.s32 	%r47, %r39, %r21;
	mad.lo.s32 	%r48, %r1, %r32, %r47;
	mad.lo.s32 	%r49, %r45, %r46, %r48;
	cvt.s64.s32 	%rd9, %r49;
	add.s64 	%rd10, %rd2, %rd9;
	ld.global.nc.u8 	%rs31, [%rd10];
	cvt.u16.u8 	%rs32, %rs31;
	cvt.s64.s32 	%rd11, %r23;
	add.s64 	%rd12, %rd10, %rd11;
	add.s64 	%rd13, %rd12, 236;
	ld.global.nc.u8 	%rs33, [%rd12+236];
	cvt.u16.u8 	%rs34, %rs33;
	add.s64 	%rd14, %rd13, %rd11;
	add.s64 	%rd15, %rd14, 236;
	ld.global.nc.u8 	%rs35, [%rd14+236];
	cvt.u16.u8 	%rs36, %rs35;
	add.s64 	%rd16, %rd15, %rd11;
	ld.global.u8 	%rs37, [%rd16+236];
	add.s16 	%rs38, %rs30, %rs36;
	add.s16 	%rs39, %rs29, %rs37;
	add.s16 	%rs40, %rs28, %rs34;
	add.s16 	%rs41, %rs27, %rs32;
	min.s16 	%rs42, %rs41, 255;
	min.s16 	%rs43, %rs40, 255;
	min.s16 	%rs44, %rs39, 255;
	min.s16 	%rs45, %rs38, 255;
	max.s16 	%rs46, %rs45, 0;
	max.s16 	%rs47, %rs44, 0;
	max.s16 	%rs48, %rs43, 0;
	max.s16 	%rs49, %rs42, 0;
	mad.lo.s32 	%r50, %r1, %r29, %r11;
	mad.lo.s32 	%r51, %r40, %r19, %r50;
	add.s32 	%r52, %r51, %r38;
	cvt.s64.s32 	%rd17, %r52;
	add.s64 	%rd18, %rd1, %rd17;
	st.global.v2.u8 	[%rd18], {%rs49, %rs48};
	st.global.v2.u8 	[%rd18+2], {%rs46, %rs47};
	add.s32 	%r53, %r42, %r13;
	add.s32 	%r54, %r53, %r41;
	mul.wide.s32 	%rd19, %r54, 2;
	add.s64 	%rd20, %rd3, %rd19;
	ld.global.nc.v2.u16 	{%rs50, %rs51}, [%rd20];
	ld.global.nc.v2.u16 	{%rs52, %rs53}, [%rd20+4];
	mul.lo.s16 	%rs54, %rs53, %rs22;
	mul.lo.s16 	%rs55, %rs52, %rs22;
	mul.lo.s16 	%rs56, %rs51, %rs22;
	mul.lo.s16 	%rs57, %rs50, %rs22;
	shr.s16 	%rs58, %rs57, 5;
	shr.s16 	%rs59, %rs56, 5;
	shr.s16 	%rs60, %rs55, 5;
	shr.s16 	%rs61, %rs54, 5;
	add.s32 	%r55, %r38, %r12;
	mad.lo.s32 	%r56, %r55, %r46, %r48;
	cvt.s64.s32 	%rd21, %r56;
	add.s64 	%rd22, %rd2, %rd21;
	ld.global.nc.u8 	%rs62, [%rd22];
	cvt.u16.u8 	%rs63, %rs62;
	add.s64 	%rd23, %rd22, %rd11;
	add.s64 	%rd24, %rd23, 236;
	ld.global.nc.u8 	%rs64, [%rd23+236];
	cvt.u16.u8 	%rs65, %rs64;
	add.s64 	%rd25, %rd24, %rd11;
	add.s64 	%rd26, %rd25, 236;
	ld.global.nc.u8 	%rs66, [%rd25+236];
	cvt.u16.u8 	%rs67, %rs66;
	add.s64 	%rd27, %rd26, %rd11;
	ld.global.u8 	%rs68, [%rd27+236];
	add.s16 	%rs69, %rs61, %rs68;
	add.s16 	%rs70, %rs60, %rs67;
	add.s16 	%rs71, %rs59, %rs65;
	add.s16 	%rs72, %rs58, %rs63;
	min.s16 	%rs73, %rs72, 255;
	min.s16 	%rs74, %rs71, 255;
	min.s16 	%rs75, %rs70, 255;
	min.s16 	%rs76, %rs69, 255;
	max.s16 	%rs198, %rs76, 0;
	max.s16 	%rs197, %rs75, 0;
	max.s16 	%rs196, %rs74, 0;
	max.s16 	%rs195, %rs73, 0;
	add.s32 	%r103, %r52, 4;
	bra.uni 	LBB11_4;
LBB11_5:                                // %false_bb2
	ld.param.u32 	%r30, [kernel_sharpened_s0____c___block_id_z_param_22];
	ld.param.u32 	%r17, [kernel_sharpened_s0____c___block_id_z_param_7];
	ld.param.u32 	%r16, [kernel_sharpened_s0____c___block_id_z_param_6];
	ld.param.u32 	%r10, [kernel_sharpened_s0____c___block_id_z_param_0];
	add.s32 	%r57, %r5, %r3;
	add.s32 	%r58, %r57, %r27;
	mul.lo.s32 	%r59, %r2, 62;
	sub.s32 	%r60, %r59, %r10;
	shl.b32 	%r61, %r60, 1;
	mad.lo.s32 	%r62, %r1, %r31, %r61;
	mad.lo.s32 	%r63, %r58, %r22, %r62;
	mul.wide.s32 	%rd28, %r63, 2;
	add.s64 	%rd29, %rd3, %rd28;
	ld.global.nc.v2.u16 	{%rs77, %rs78}, [%rd29+728];
	ld.global.nc.v2.u16 	{%rs79, %rs80}, [%rd29+732];
	and.b16  	%rs81, %rs17, 255;
	mul.lo.s16 	%rs82, %rs79, %rs81;
	mul.lo.s16 	%rs83, %rs80, %rs81;
	mul.lo.s16 	%rs84, %rs78, %rs81;
	mul.lo.s16 	%rs85, %rs77, %rs81;
	shr.s16 	%rs86, %rs85, 5;
	shr.s16 	%rs87, %rs84, 5;
	shr.s16 	%rs88, %rs83, 5;
	shr.s16 	%rs89, %rs82, 5;
	mul.lo.s32 	%r64, %r2, 124;
	add.s32 	%r65, %r64, %r17;
	add.s32 	%r66, %r23, 236;
	add.s32 	%r67, %r5, %r21;
	mad.lo.s32 	%r68, %r1, %r32, %r67;
	add.s32 	%r69, %r3, %r68;
	mad.lo.s32 	%r70, %r65, %r66, %r69;
	cvt.s64.s32 	%rd30, %r70;
	add.s64 	%rd31, %rd2, %rd30;
	ld.global.nc.u8 	%rs90, [%rd31];
	cvt.u16.u8 	%rs91, %rs90;
	cvt.s64.s32 	%rd32, %r23;
	add.s64 	%rd33, %rd31, %rd32;
	add.s64 	%rd34, %rd33, 236;
	ld.global.nc.u8 	%rs92, [%rd33+236];
	cvt.u16.u8 	%rs93, %rs92;
	add.s64 	%rd35, %rd34, %rd32;
	add.s64 	%rd36, %rd35, 236;
	ld.global.nc.u8 	%rs94, [%rd35+236];
	cvt.u16.u8 	%rs95, %rs94;
	add.s64 	%rd37, %rd36, %rd32;
	ld.global.u8 	%rs96, [%rd37+236];
	add.s16 	%rs97, %rs89, %rs95;
	add.s16 	%rs98, %rs88, %rs96;
	add.s16 	%rs99, %rs87, %rs93;
	add.s16 	%rs100, %rs86, %rs91;
	min.s16 	%rs101, %rs100, 255;
	min.s16 	%rs102, %rs99, 255;
	min.s16 	%rs103, %rs98, 255;
	min.s16 	%rs104, %rs97, 255;
	max.s16 	%rs105, %rs104, 0;
	max.s16 	%rs106, %rs103, 0;
	max.s16 	%rs107, %rs102, 0;
	max.s16 	%rs108, %rs101, 0;
	sub.s32 	%r71, %r59, %r30;
	shl.b32 	%r72, %r71, 1;
	mad.lo.s32 	%r73, %r1, %r29, %r72;
	mad.lo.s32 	%r74, %r58, %r19, %r73;
	cvt.s64.s32 	%rd38, %r74;
	add.s64 	%rd39, %rd1, %rd38;
	st.global.v2.u8 	[%rd39+240], {%rs108, %rs107};
	st.global.v2.u8 	[%rd39+242], {%rs105, %rs106};
	ld.global.nc.v2.u16 	{%rs109, %rs110}, [%rd29+736];
	ld.global.nc.v2.u16 	{%rs111, %rs112}, [%rd29+740];
	mul.lo.s16 	%rs113, %rs112, %rs81;
	mul.lo.s16 	%rs114, %rs111, %rs81;
	mul.lo.s16 	%rs115, %rs110, %rs81;
	mul.lo.s16 	%rs116, %rs109, %rs81;
	shr.s16 	%rs117, %rs116, 5;
	shr.s16 	%rs118, %rs115, 5;
	shr.s16 	%rs119, %rs114, 5;
	shr.s16 	%rs120, %rs113, 5;
	add.s32 	%r75, %r64, %r16;
	mad.lo.s32 	%r76, %r75, %r66, %r69;
	cvt.s64.s32 	%rd40, %r76;
	add.s64 	%rd41, %rd2, %rd40;
	ld.global.nc.u8 	%rs121, [%rd41];
	cvt.u16.u8 	%rs122, %rs121;
	add.s64 	%rd42, %rd41, %rd32;
	add.s64 	%rd43, %rd42, 236;
	ld.global.nc.u8 	%rs123, [%rd42+236];
	cvt.u16.u8 	%rs124, %rs123;
	add.s64 	%rd44, %rd43, %rd32;
	add.s64 	%rd45, %rd44, 236;
	ld.global.nc.u8 	%rs125, [%rd44+236];
	cvt.u16.u8 	%rs126, %rs125;
	add.s64 	%rd46, %rd45, %rd32;
	ld.global.u8 	%rs127, [%rd46+236];
	add.s16 	%rs128, %rs120, %rs127;
	add.s16 	%rs129, %rs119, %rs126;
	add.s16 	%rs130, %rs118, %rs124;
	add.s16 	%rs131, %rs117, %rs122;
	min.s16 	%rs132, %rs131, 255;
	min.s16 	%rs133, %rs130, 255;
	min.s16 	%rs134, %rs129, 255;
	min.s16 	%rs135, %rs128, 255;
	max.s16 	%rs198, %rs135, 0;
	max.s16 	%rs197, %rs134, 0;
	max.s16 	%rs196, %rs133, 0;
	max.s16 	%rs195, %rs132, 0;
	add.s32 	%r103, %r74, 244;
LBB11_4:                                // %after_bb
	cvt.s64.s32 	%rd68, %r103;
	add.s64 	%rd69, %rd1, %rd68;
	st.global.v2.u8 	[%rd69], {%rs195, %rs196};
	st.global.v2.u8 	[%rd69+2], {%rs197, %rs198};
	ret;
                                        // -- End function
}
	// .globl	kernel_processed_s0____y____y___block_id_y // -- Begin function kernel_processed_s0____y____y___block_id_y
.visible .entry kernel_processed_s0____y____y___block_id_y(
	.param .u32 kernel_processed_s0____y____y___block_id_y_param_0,
	.param .u32 kernel_processed_s0____y____y___block_id_y_param_1,
	.param .u32 kernel_processed_s0____y____y___block_id_y_param_2,
	.param .u32 kernel_processed_s0____y____y___block_id_y_param_3,
	.param .u32 kernel_processed_s0____y____y___block_id_y_param_4,
	.param .u32 kernel_processed_s0____y____y___block_id_y_param_5,
	.param .u32 kernel_processed_s0____y____y___block_id_y_param_6,
	.param .u32 kernel_processed_s0____y____y___block_id_y_param_7,
	.param .u32 kernel_processed_s0____y____y___block_id_y_param_8,
	.param .u32 kernel_processed_s0____y____y___block_id_y_param_9,
	.param .u32 kernel_processed_s0____y____y___block_id_y_param_10,
	.param .u32 kernel_processed_s0____y____y___block_id_y_param_11,
	.param .u32 kernel_processed_s0____y____y___block_id_y_param_12,
	.param .u64 kernel_processed_s0____y____y___block_id_y_param_13,
	.param .u64 kernel_processed_s0____y____y___block_id_y_param_14
)                                       // @kernel_processed_s0____y____y___block_id_y
{
	.reg .pred 	%p<2>;
	.reg .b16 	%rs<57>;
	.reg .b32 	%r<62>;
	.reg .b64 	%rd<47>;

// %bb.0:                               // %entry
	ld.param.u32 	%r17, [kernel_processed_s0____y____y___block_id_y_param_11];
	ld.param.u32 	%r16, [kernel_processed_s0____y____y___block_id_y_param_10];
	ld.param.u32 	%r15, [kernel_processed_s0____y____y___block_id_y_param_9];
	ld.param.u32 	%r13, [kernel_processed_s0____y____y___block_id_y_param_7];
	ld.param.u32 	%r12, [kernel_processed_s0____y____y___block_id_y_param_6];
	ld.param.u32 	%r11, [kernel_processed_s0____y____y___block_id_y_param_5];
	ld.param.u32 	%r9, [kernel_processed_s0____y____y___block_id_y_param_1];
	ld.param.u32 	%r8, [kernel_processed_s0____y____y___block_id_y_param_0];
	ld.param.u64 	%rd3, [kernel_processed_s0____y____y___block_id_y_param_14];
	cvta.to.global.u64 	%rd1, %rd3;
	ld.param.u64 	%rd4, [kernel_processed_s0____y____y___block_id_y_param_13];
	cvta.to.global.u64 	%rd2, %rd4;
	ld.param.u32 	%r19, [kernel_processed_s0____y____y___block_id_y_param_2];
	ld.param.u32 	%r20, [kernel_processed_s0____y____y___block_id_y_param_3];
	mov.u32 	%r21, %ctaid.y;
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %tid.y;
	mov.u32 	%r3, %tid.x;
	shl.b32 	%r22, %r21, 6;
	min.s32 	%r4, %r22, %r19;
	setp.ge.s32 	%p1, %r1, %r20;
	@%p1 bra 	LBB12_2;
// %bb.1:                               // %true_bb
	ld.param.u32 	%r10, [kernel_processed_s0____y____y___block_id_y_param_4];
	shl.b32 	%r43, %r1, 4;
	add.s32 	%r44, %r3, %r43;
	shl.b32 	%r45, %r44, 1;
	sub.s32 	%r46, %r45, %r10;
	shl.b32 	%r47, %r46, 1;
	add.s32 	%r48, %r47, 64;
	mul.lo.s32 	%r49, %r48, %r11;
	add.s32 	%r50, %r4, %r2;
	add.s32 	%r51, %r50, %r9;
	add.s32 	%r52, %r51, %r49;
	cvt.s64.s32 	%rd25, %r52;
	add.s64 	%rd26, %rd1, %rd25;
	ld.global.nc.u8 	%rs33, [%rd26];
	cvt.u16.u8 	%rs34, %rs33;
	cvt.s64.s32 	%rd27, %r11;
	add.s64 	%rd28, %rd26, %rd27;
	ld.global.nc.u8 	%rs35, [%rd28];
	cvt.u16.u8 	%rs36, %rs35;
	add.s64 	%rd29, %rd28, %rd27;
	ld.global.nc.u8 	%rs37, [%rd29];
	cvt.u16.u8 	%rs38, %rs37;
	add.s64 	%rd30, %rd29, %rd27;
	ld.global.nc.u8 	%rs39, [%rd30];
	cvt.u16.u8 	%rs40, %rs39;
	shl.b32 	%r53, %r44, 2;
	mad.lo.s32 	%r54, %r50, %r8, %r53;
	sub.s32 	%r55, %r54, %r17;
	cvt.s64.s32 	%rd31, %r55;
	add.s64 	%rd32, %rd2, %rd31;
	st.global.u8 	[%rd32+2], %rs38;
	st.global.u8 	[%rd32+1], %rs36;
	st.global.u8 	[%rd32], %rs34;
	st.global.u8 	[%rd32+3], %rs40;
	add.s32 	%r56, %r50, %r12;
	add.s32 	%r57, %r56, %r49;
	cvt.s64.s32 	%rd33, %r57;
	add.s64 	%rd34, %rd1, %rd33;
	ld.global.nc.u8 	%rs41, [%rd34];
	cvt.u16.u8 	%rs42, %rs41;
	add.s64 	%rd35, %rd34, %rd27;
	ld.global.nc.u8 	%rs43, [%rd35];
	cvt.u16.u8 	%rs44, %rs43;
	add.s64 	%rd36, %rd35, %rd27;
	ld.global.nc.u8 	%rs45, [%rd36];
	cvt.u16.u8 	%rs46, %rs45;
	add.s64 	%rd37, %rd36, %rd27;
	ld.global.nc.u8 	%rs47, [%rd37];
	cvt.u16.u8 	%rs48, %rs47;
	add.s32 	%r58, %r54, %r15;
	cvt.s64.s32 	%rd38, %r58;
	add.s64 	%rd39, %rd2, %rd38;
	st.global.u8 	[%rd39+3], %rs48;
	st.global.u8 	[%rd39+2], %rs46;
	st.global.u8 	[%rd39+1], %rs44;
	st.global.u8 	[%rd39], %rs42;
	add.s32 	%r59, %r50, %r13;
	add.s32 	%r60, %r59, %r49;
	cvt.s64.s32 	%rd40, %r60;
	add.s64 	%rd41, %rd1, %rd40;
	ld.global.nc.u8 	%rs49, [%rd41];
	cvt.u16.u8 	%rs53, %rs49;
	add.s64 	%rd42, %rd41, %rd27;
	ld.global.nc.u8 	%rs50, [%rd42];
	cvt.u16.u8 	%rs54, %rs50;
	add.s64 	%rd43, %rd42, %rd27;
	ld.global.nc.u8 	%rs51, [%rd43];
	cvt.u16.u8 	%rs55, %rs51;
	add.s64 	%rd44, %rd43, %rd27;
	ld.global.nc.u8 	%rs52, [%rd44];
	cvt.u16.u8 	%rs56, %rs52;
	add.s32 	%r61, %r54, %r16;
	bra.uni 	LBB12_3;
LBB12_2:                                // %false_bb
	ld.param.u32 	%r18, [kernel_processed_s0____y____y___block_id_y_param_12];
	ld.param.u32 	%r14, [kernel_processed_s0____y____y___block_id_y_param_8];
	shl.b32 	%r23, %r3, 1;
	add.s32 	%r24, %r23, %r14;
	mul.lo.s32 	%r25, %r11, %r24;
	shl.b32 	%r26, %r25, 1;
	add.s32 	%r27, %r4, %r2;
	add.s32 	%r28, %r27, %r9;
	add.s32 	%r29, %r28, %r26;
	cvt.s64.s32 	%rd5, %r29;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.nc.u8 	%rs13, [%rd6];
	cvt.u16.u8 	%rs14, %rs13;
	cvt.s64.s32 	%rd7, %r11;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.nc.u8 	%rs15, [%rd8];
	cvt.u16.u8 	%rs16, %rs15;
	add.s64 	%rd9, %rd8, %rd7;
	ld.global.nc.u8 	%rs17, [%rd9];
	cvt.u16.u8 	%rs18, %rs17;
	add.s64 	%rd10, %rd9, %rd7;
	ld.global.nc.u8 	%rs19, [%rd10];
	cvt.u16.u8 	%rs20, %rs19;
	add.s32 	%r30, %r23, %r18;
	shl.b32 	%r31, %r30, 1;
	mul.lo.s32 	%r32, %r27, %r8;
	add.s32 	%r33, %r31, -64;
	sub.s32 	%r34, %r33, %r17;
	add.s32 	%r35, %r34, %r32;
	cvt.s64.s32 	%rd11, %r35;
	add.s64 	%rd12, %rd2, %rd11;
	st.global.u8 	[%rd12+2], %rs18;
	st.global.u8 	[%rd12+1], %rs16;
	st.global.u8 	[%rd12], %rs14;
	st.global.u8 	[%rd12+3], %rs20;
	add.s32 	%r36, %r27, %r12;
	add.s32 	%r37, %r36, %r26;
	cvt.s64.s32 	%rd13, %r37;
	add.s64 	%rd14, %rd1, %rd13;
	ld.global.nc.u8 	%rs21, [%rd14];
	cvt.u16.u8 	%rs22, %rs21;
	add.s64 	%rd15, %rd14, %rd7;
	ld.global.nc.u8 	%rs23, [%rd15];
	cvt.u16.u8 	%rs24, %rs23;
	add.s64 	%rd16, %rd15, %rd7;
	ld.global.nc.u8 	%rs25, [%rd16];
	cvt.u16.u8 	%rs26, %rs25;
	add.s64 	%rd17, %rd16, %rd7;
	ld.global.nc.u8 	%rs27, [%rd17];
	cvt.u16.u8 	%rs28, %rs27;
	add.s32 	%r38, %r33, %r15;
	add.s32 	%r39, %r38, %r32;
	cvt.s64.s32 	%rd18, %r39;
	add.s64 	%rd19, %rd2, %rd18;
	st.global.u8 	[%rd19+3], %rs28;
	st.global.u8 	[%rd19+2], %rs26;
	st.global.u8 	[%rd19+1], %rs24;
	st.global.u8 	[%rd19], %rs22;
	add.s32 	%r40, %r27, %r13;
	add.s32 	%r41, %r40, %r26;
	cvt.s64.s32 	%rd20, %r41;
	add.s64 	%rd21, %rd1, %rd20;
	ld.global.nc.u8 	%rs29, [%rd21];
	cvt.u16.u8 	%rs53, %rs29;
	add.s64 	%rd22, %rd21, %rd7;
	ld.global.nc.u8 	%rs30, [%rd22];
	cvt.u16.u8 	%rs54, %rs30;
	add.s64 	%rd23, %rd22, %rd7;
	ld.global.nc.u8 	%rs31, [%rd23];
	cvt.u16.u8 	%rs55, %rs31;
	add.s64 	%rd24, %rd23, %rd7;
	ld.global.nc.u8 	%rs32, [%rd24];
	cvt.u16.u8 	%rs56, %rs32;
	add.s32 	%r42, %r33, %r16;
	add.s32 	%r61, %r42, %r32;
LBB12_3:                                // %after_bb
	cvt.s64.s32 	%rd45, %r61;
	add.s64 	%rd46, %rd2, %rd45;
	st.global.u8 	[%rd46+2], %rs55;
	st.global.u8 	[%rd46+1], %rs54;
	st.global.u8 	[%rd46], %rs53;
	st.global.u8 	[%rd46+3], %rs56;
	ret;
                                        // -- End function
}


add_temp_object_file: /tmp/rglOUc/camera_pipe_classic_auto_schedule.a.o
Module.compile(): temporary object_name /tmp/rglOUc/camera_pipe_classic_auto_schedule.a.o
emit_file.Compiling to native code...
Module.compile(): static_library_name ./bin/camera_pipe_classic_auto_schedule.a
file_unlink: /tmp/rglOUc/camera_pipe_classic_auto_schedule.a.o
dir_rmdir: /tmp/rglOUc
Module.compile(): assembly_name ./bin/camera_pipe_classic_auto_schedule.s
emit_file.Compiling to native code...
Module.compile(): c_header_name ./bin/camera_pipe_classic_auto_schedule.h
