Generator harris has base_path ./bin/harris_auto_schedule
Creating initial loop nests...
Injecting realization of { output }
Inlining harris
Inlining Iyy
Inlining Ixy
Injecting realization of { Iy }
Inlining Ixx
Injecting realization of { Ix }
Injecting realization of { gray }
Skipping injecting memoization...
Injecting tracing...
Adding checks for parameters
Computing bounds of each function's value
Adding checks for images
Performing computation bounds inference...
Removing extern loops...
Performing sliding window optimization...
Simplifying correlated differences...
Performing allocation bounds inference...
Removing code that depends on undef values...
Uniquifying variable names...
Simplifying...
Performing storage folding optimization...
Injecting debug_to_file calls...
Injecting prefetches...
Dynamically skipping stages...
Forking asynchronous producers...
Destructuring tuple-valued realizations...
Canonicalizing GPU var names...
Performing storage flattening...
Unpacking buffer arguments...
Skipping rewriting memoized allocations...
Selecting a GPU API for GPU loops...
Injecting host <-> dev buffer copies...
Selecting a GPU API for extern stages...
Simplifying...
Reduce prefetch dimension...
Simplifying correlated differences...
Unrolling...
Vectorizing...
Injecting per-block gpu synchronization...
Detecting vector interleavings...
Partitioning loops to simplify boundary conditions...
Trimming loops to the region over which they do something...
Injecting early frees...
Simplifying correlated differences...
Bounding small allocations...
Injecting warp shuffles...
Simplifying...
Lowering unsafe promises...
Lowering after final simplification:
assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.type = _halide_buffer_get_type(input.buffer)
let input.dimensions = _halide_buffer_get_dimensions(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.extent.0 = _halide_buffer_get_extent(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.extent.1 = _halide_buffer_get_extent(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let input.min.2 = _halide_buffer_get_min(input.buffer, 2)
let input.extent.2 = _halide_buffer_get_extent(input.buffer, 2)
let input.stride.2 = _halide_buffer_get_stride(input.buffer, 2)
let output = _halide_buffer_get_host(output.buffer)
let output.type = _halide_buffer_get_type(output.buffer)
let output.dimensions = _halide_buffer_get_dimensions(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
let input.stride.2.required = ((output.extent.0 + 4)*(output.extent.1 + 4))
let output.extent.0.required.s = (min((((output.extent.0 + -1)/16)*16), (output.extent.0 + -16)) - min(output.extent.0, 16))
let output.extent.1.required.s = (min((((output.extent.1 + -1)/12)*12), (output.extent.1 + -12)) - min(output.extent.1, 12))
if (_halide_buffer_is_bounds_query(input.buffer)) {
  _halide_buffer_init(input.buffer, _halide_buffer_get_shape(input.buffer), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 2, 32, 3, make_struct((halide_dimension_t *), output.min.0, (output.extent.0 + 4), 1, 0, output.min.1, (output.extent.1 + 4), (output.extent.0 + 4), 0, 0, 3, input.stride.2.required, 0), (uint64)0)
}
if (_halide_buffer_is_bounds_query(output.buffer)) {
  _halide_buffer_init(output.buffer, _halide_buffer_get_shape(output.buffer), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 2, 32, 2, make_struct((halide_dimension_t *), ((min(output.extent.0, 16) + output.min.0) + -16), (output.extent.0.required.s + 32), 1, 0, ((min(output.extent.1, 12) + output.min.1) + -12), (output.extent.1.required.s + 24), (output.extent.0.required.s + 32), 0), (uint64)0)
}
if (!(_halide_buffer_is_bounds_query(input.buffer) || _halide_buffer_is_bounds_query(output.buffer))) {
  assert((input.type == (uint32)73730), halide_error_bad_type("Input buffer input", input.type, (uint32)73730))
  assert((input.dimensions == 3), halide_error_bad_dimensions("Input buffer input", input.dimensions, 3))
  assert((output.type == (uint32)73730), halide_error_bad_type("Output buffer output", output.type, (uint32)73730))
  assert((output.dimensions == 2), halide_error_bad_dimensions("Output buffer output", output.dimensions, 2))
  assert(((input.min.0 <= output.min.0) && (((output.extent.0 + output.min.0) + 4) <= (input.extent.0 + input.min.0))), halide_error_access_out_of_bounds("Input buffer input", 0, output.min.0, ((output.extent.0 + output.min.0) + 3), input.min.0, ((input.extent.0 + input.min.0) + -1)))
  assert((0 <= input.extent.0), halide_error_buffer_extents_negative("Input buffer input", 0, input.extent.0))
  assert(((input.min.1 <= output.min.1) && (((output.extent.1 + output.min.1) + 4) <= (input.extent.1 + input.min.1))), halide_error_access_out_of_bounds("Input buffer input", 1, output.min.1, ((output.extent.1 + output.min.1) + 3), input.min.1, ((input.extent.1 + input.min.1) + -1)))
  assert((0 <= input.extent.1), halide_error_buffer_extents_negative("Input buffer input", 1, input.extent.1))
  assert(((input.min.2 <= 0) && (3 <= (input.extent.2 + input.min.2))), halide_error_access_out_of_bounds("Input buffer input", 2, 0, 2, input.min.2, ((input.extent.2 + input.min.2) + -1)))
  assert((0 <= input.extent.2), halide_error_buffer_extents_negative("Input buffer input", 2, input.extent.2))
  assert(((16 <= output.extent.0) && ((((min(output.extent.0, 16) + output.min.0) + output.extent.0.required.s) + 16) <= (output.extent.0 + output.min.0))), halide_error_access_out_of_bounds("Output buffer output", 0, ((min(output.extent.0, 16) + output.min.0) + -16), (((min(output.extent.0, 16) + output.min.0) + output.extent.0.required.s) + 15), output.min.0, ((output.extent.0 + output.min.0) + -1)))
  assert(((12 <= output.extent.1) && ((((min(output.extent.1, 12) + output.min.1) + output.extent.1.required.s) + 12) <= (output.extent.1 + output.min.1))), halide_error_access_out_of_bounds("Output buffer output", 1, ((min(output.extent.1, 12) + output.min.1) + -12), (((min(output.extent.1, 12) + output.min.1) + output.extent.1.required.s) + 11), output.min.1, ((output.extent.1 + output.min.1) + -1)))
  assert((input.stride.0 == 1), halide_error_constraint_violated("input.stride.0", input.stride.0, "1", 1))
  assert((output.stride.0 == 1), halide_error_constraint_violated("output.stride.0", output.stride.0, "1", 1))
  let input.total_extent.1 = (int64(input.extent.1)*int64(input.extent.0))
  let input.total_extent.2 = (input.total_extent.1*int64(input.extent.2))
  let output.total_extent.1 = (int64(output.extent.1)*int64(output.extent.0))
  assert((abs(int64(input.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("input", abs(int64(input.extent.0)), (uint64)2147483647))
  assert((abs((int64(input.extent.1)*int64(input.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("input", abs((int64(input.extent.1)*int64(input.stride.1))), (uint64)2147483647))
  assert((input.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("input", input.total_extent.1, (int64)2147483647))
  assert((abs((int64(input.extent.2)*int64(input.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("input", abs((int64(input.extent.2)*int64(input.stride.2))), (uint64)2147483647))
  assert((input.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("input", input.total_extent.2, (int64)2147483647))
  assert((abs(int64(output.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("output", abs(int64(output.extent.0)), (uint64)2147483647))
  assert((abs((int64(output.extent.1)*int64(output.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("output", abs((int64(output.extent.1)*int64(output.stride.1))), (uint64)2147483647))
  assert((output.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("output", output.total_extent.1, (int64)2147483647))
  produce output {
    let halide_copy_to_device_result = halide_copy_to_device(input.buffer, halide_cuda_device_interface())
    assert((halide_copy_to_device_result == 0), halide_copy_to_device_result)
    let halide_copy_to_device_result$1 = halide_copy_to_device(output.buffer, halide_cuda_device_interface())
    assert((halide_copy_to_device_result$1 == 0), halide_copy_to_device_result$1)
    let t23883 = (0 - (output.min.1*output.stride.1))
    let t23941 = ((output.extent.1 + 11)/12)
    let t23942 = ((output.extent.0 + 15)/16)
    let t23945 = (input.min.2*input.stride.2)
    let t23946 = (input.min.1*input.stride.1)
    let t23947 = ((input.stride.2*2) + output.min.0)
    let t23943 = (output.extent.1 + -12)
    let t23944 = (output.extent.0 + -16)
    let t23948 = (input.stride.2 + output.min.0)
    gpu_block<CUDA> (output.s0.y.y_o.__block_id_y, 0, t23941) {
      gpu_block<CUDA> (output.s0.x.x_o.__block_id_x, 0, t23942) {
        allocate __shared[uint8 * 3296] in GPUShared
        gpu_thread<CUDA> (.__thread_id_y, 0, 16) {
          gpu_thread<CUDA> (.__thread_id_x, 0, 20) {
            let output.s0.y.y_i.base.s = min((output.s0.y.y_o.__block_id_y*12), t23943)
            let output.s0.x.x_i.base.s = min((output.s0.x.x_o.__block_id_x*16), t23944)
            produce gray {
              __shared[((.__thread_id_y*20) + .__thread_id_x)] = ((input[(((((output.min.1 + output.s0.y.y_i.base.s) + .__thread_id_y)*input.stride.1) + ((((t23947 - t23945) - t23946) - input.min.0) + output.s0.x.x_i.base.s)) + .__thread_id_x)]*0.114000f) + ((input[(((((output.min.1 + output.s0.y.y_i.base.s) + .__thread_id_y)*input.stride.1) + ((((output.min.0 - t23945) - t23946) - input.min.0) + output.s0.x.x_i.base.s)) + .__thread_id_x)]*0.299000f) + (input[(((((output.min.1 + output.s0.y.y_i.base.s) + .__thread_id_y)*input.stride.1) + ((((t23948 - t23945) - t23946) - input.min.0) + output.s0.x.x_i.base.s)) + .__thread_id_x)]*0.587000f)))
            }
            gpu_thread_barrier()
            produce Ix {
              consume gray {
                if ((.__thread_id_y < 14)) {
                  if ((.__thread_id_x < 18)) {
                    __shared[(((.__thread_id_y*18) + .__thread_id_x) + 320)] = ((__shared[(((.__thread_id_y*20) + .__thread_id_x) + 42)]*0.083333f) + (((__shared[(((.__thread_id_y*20) + .__thread_id_x) + 22)]*0.166667f) + (((__shared[(((.__thread_id_y*20) + .__thread_id_x) + 2)] - __shared[((.__thread_id_y*20) + .__thread_id_x)])*0.083333f) - (__shared[(((.__thread_id_y*20) + .__thread_id_x) + 20)]*0.166667f))) - (__shared[(((.__thread_id_y*20) + .__thread_id_x) + 40)]*0.083333f)))
                  }
                }
              }
            }
            gpu_thread_barrier()
            produce Iy {
              consume gray {
                if ((.__thread_id_y < 14)) {
                  if ((.__thread_id_x < 18)) {
                    __shared[(((.__thread_id_y*18) + .__thread_id_x) + 572)] = ((__shared[(((.__thread_id_y*20) + .__thread_id_x) + 42)]*0.083333f) + (((__shared[(((.__thread_id_y*20) + .__thread_id_x) + 41)]*0.166667f) + (((__shared[(((.__thread_id_y*20) + .__thread_id_x) + 40)] - __shared[((.__thread_id_y*20) + .__thread_id_x)])*0.083333f) - (__shared[(((.__thread_id_y*20) + .__thread_id_x) + 1)]*0.166667f))) - (__shared[(((.__thread_id_y*20) + .__thread_id_x) + 2)]*0.083333f)))
                  }
                }
              }
            }
            gpu_thread_barrier()
            consume Iy {
              consume Ix {
                if ((.__thread_id_y < 12)) {
                  if ((.__thread_id_x < 16)) {
                    output[(((((output.min.1 + output.s0.y.y_i.base.s) + .__thread_id_y)*output.stride.1) + (output.s0.x.x_i.base.s + t23883)) + .__thread_id_x)] = (let t23919 = __shared[(((.__thread_id_y*18) + .__thread_id_x) + 320)] in (let t23920 = __shared[(((.__thread_id_y*18) + .__thread_id_x) + 338)] in (let t23921 = __shared[(((.__thread_id_y*18) + .__thread_id_x) + 356)] in (let t23922 = __shared[(((.__thread_id_y*18) + .__thread_id_x) + 321)] in (let t23923 = __shared[(((.__thread_id_y*18) + .__thread_id_x) + 339)] in (let t23924 = __shared[(((.__thread_id_y*18) + .__thread_id_x) + 357)] in (let t23925 = __shared[(((.__thread_id_y*18) + .__thread_id_x) + 322)] in (let t23926 = __shared[(((.__thread_id_y*18) + .__thread_id_x) + 340)] in (let t23927 = __shared[(((.__thread_id_y*18) + .__thread_id_x) + 358)] in (let t23928 = ((t23927*t23927) + ((t23926*t23926) + ((t23925*t23925) + ((t23924*t23924) + ((t23923*t23923) + ((t23922*t23922) + ((t23921*t23921) + ((t23919*t23919) + (t23920*t23920))))))))) in (let t23929 = __shared[(((.__thread_id_y*18) + .__thread_id_x) + 572)] in (let t23930 = __shared[(((.__thread_id_y*18) + .__thread_id_x) + 590)] in (let t23931 = __shared[(((.__thread_id_y*18) + .__thread_id_x) + 608)] in (let t23932 = __shared[(((.__thread_id_y*18) + .__thread_id_x) + 573)] in (let t23933 = __shared[(((.__thread_id_y*18) + .__thread_id_x) + 591)] in (let t23934 = __shared[(((.__thread_id_y*18) + .__thread_id_x) + 609)] in (let t23935 = __shared[(((.__thread_id_y*18) + .__thread_id_x) + 574)] in (let t23936 = __shared[(((.__thread_id_y*18) + .__thread_id_x) + 592)] in (let t23937 = __shared[(((.__thread_id_y*18) + .__thread_id_x) + 610)] in (let t23938 = ((t23937*t23937) + ((t23936*t23936) + ((t23935*t23935) + ((t23934*t23934) + ((t23933*t23933) + ((t23932*t23932) + ((t23931*t23931) + ((t23929*t23929) + (t23930*t23930))))))))) in (let t23939 = ((t23927*t23937) + ((t23926*t23936) + ((t23925*t23935) + ((t23924*t23934) + ((t23923*t23933) + ((t23922*t23932) + ((t23921*t23931) + ((t23919*t23929) + (t23920*t23930))))))))) in (((t23928*t23938) - (t23939*t23939)) - (((t23928 + t23938)*(t23928 + t23938))*0.040000f)))))))))))))))))))))))
                  }
                }
              }
            }
          }
        }
        free __shared
      }
    }
    _halide_buffer_set_device_dirty(output.buffer, (uint1)1)
  }
}


Skipping Hexagon offload...
Constructing CUDA device codegen
Target triple of initial module: x86_64--linux-gnu
Generating llvm bitcode...
Generating llvm bitcode prolog for function harris_auto_schedule...
Generating llvm bitcode for function harris_auto_schedule...
Generating llvm bitcode for kernel...
PTX kernel:
//
// Generated by LLVM NVPTX Back-End
//

.version 5.0
.target sm_61
.address_size 64

	// .globl	kernel_output_s0_y_y_o___block_id_y // -- Begin function kernel_output_s0_y_y_o___block_id_y
                                        // @kernel_output_s0_y_y_o___block_id_y
.visible .entry kernel_output_s0_y_y_o___block_id_y(
	.param .u32 kernel_output_s0_y_y_o___block_id_y_param_0,
	.param .u32 kernel_output_s0_y_y_o___block_id_y_param_1,
	.param .u32 kernel_output_s0_y_y_o___block_id_y_param_2,
	.param .u32 kernel_output_s0_y_y_o___block_id_y_param_3,
	.param .u32 kernel_output_s0_y_y_o___block_id_y_param_4,
	.param .u32 kernel_output_s0_y_y_o___block_id_y_param_5,
	.param .u32 kernel_output_s0_y_y_o___block_id_y_param_6,
	.param .u32 kernel_output_s0_y_y_o___block_id_y_param_7,
	.param .u32 kernel_output_s0_y_y_o___block_id_y_param_8,
	.param .u32 kernel_output_s0_y_y_o___block_id_y_param_9,
	.param .u32 kernel_output_s0_y_y_o___block_id_y_param_10,
	.param .u32 kernel_output_s0_y_y_o___block_id_y_param_11,
	.param .u64 kernel_output_s0_y_y_o___block_id_y_param_12,
	.param .u64 kernel_output_s0_y_y_o___block_id_y_param_13
)
{
	.reg .pred 	%p<11>;
	.reg .f32 	%f<82>;
	.reg .b32 	%r<43>;
	.reg .b64 	%rd<23>;

// %bb.0:                               // %entry
	ld.param.u32 	%r8, [kernel_output_s0_y_y_o___block_id_y_param_0];
	ld.param.u32 	%r9, [kernel_output_s0_y_y_o___block_id_y_param_1];
	ld.param.u64 	%rd4, [kernel_output_s0_y_y_o___block_id_y_param_12];
	cvta.to.global.u64 	%rd5, %rd4;
	ld.param.u32 	%r10, [kernel_output_s0_y_y_o___block_id_y_param_2];
	ld.param.u32 	%r11, [kernel_output_s0_y_y_o___block_id_y_param_3];
	mov.u32 	%r12, %ctaid.y;
	mov.u32 	%r13, %ctaid.x;
	mov.u32 	%r1, %tid.y;
	mov.u32 	%r2, %tid.x;
	ld.param.u32 	%r14, [kernel_output_s0_y_y_o___block_id_y_param_6];
	mul.lo.s32 	%r15, %r12, 12;
	ld.param.u32 	%r16, [kernel_output_s0_y_y_o___block_id_y_param_7];
	ld.param.u32 	%r17, [kernel_output_s0_y_y_o___block_id_y_param_8];
	min.s32 	%r18, %r15, %r14;
	ld.param.u32 	%r19, [kernel_output_s0_y_y_o___block_id_y_param_9];
	shl.b32 	%r20, %r13, 4;
	ld.param.u32 	%r21, [kernel_output_s0_y_y_o___block_id_y_param_10];
	ld.param.u32 	%r22, [kernel_output_s0_y_y_o___block_id_y_param_11];
	min.s32 	%r23, %r20, %r16;
	add.s32 	%r24, %r1, %r11;
	add.s32 	%r3, %r24, %r18;
	mul.lo.s32 	%r25, %r3, %r9;
	add.s32 	%r4, %r23, %r2;
	sub.s32 	%r26, %r4, %r8;
	sub.s32 	%r27, %r26, %r17;
	sub.s32 	%r28, %r27, %r19;
	add.s32 	%r29, %r28, %r21;
	add.s32 	%r30, %r29, %r25;
	mul.wide.s32 	%rd6, %r30, 4;
	add.s64 	%rd7, %rd5, %rd6;
	ld.global.nc.f32 	%f1, [%rd7];
	add.s32 	%r31, %r26, %r10;
	sub.s32 	%r32, %r31, %r17;
	sub.s32 	%r33, %r32, %r19;
	add.s32 	%r34, %r33, %r25;
	mul.wide.s32 	%rd8, %r34, 4;
	add.s64 	%rd9, %rd5, %rd8;
	ld.global.nc.f32 	%f2, [%rd9];
	add.s32 	%r35, %r28, %r22;
	add.s32 	%r36, %r35, %r25;
	mul.wide.s32 	%rd10, %r36, 4;
	add.s64 	%rd11, %rd5, %rd10;
	ld.global.nc.f32 	%f3, [%rd11];
	mul.ftz.f32 	%f4, %f3, 0f3F1645A2;
	fma.rn.ftz.f32 	%f5, %f2, 0f3E991687, %f4;
	fma.rn.ftz.f32 	%f6, %f1, 0f3DE978D5, %f5;
	mad.lo.s32 	%r5, %r1, 20, %r2;
	mul.wide.u32 	%rd2, %r5, 4;
	st.shared.f32 	[%rd2], %f6;
	bar.sync 	0;
	setp.lt.u32 	%p3, %r1, 14;
	setp.lt.u32 	%p4, %r2, 18;
	and.pred  	%p5, %p3, %p4;
	@%p5 bra 	LBB0_6;
	bra.uni 	LBB0_1;
LBB0_6:                                 // %true_bb1
	ld.shared.f32 	%f7, [%rd2+168];
	ld.shared.f32 	%f8, [%rd2+88];
	ld.shared.f32 	%f9, [%rd2+8];
	ld.shared.f32 	%f10, [%rd2];
	sub.ftz.f32 	%f11, %f9, %f10;
	ld.shared.f32 	%f12, [%rd2+80];
	mul.ftz.f32 	%f13, %f12, 0fBE2AAAAB;
	fma.rn.ftz.f32 	%f14, %f11, 0f3DAAAAAB, %f13;
	fma.rn.ftz.f32 	%f15, %f8, 0f3E2AAAAB, %f14;
	ld.shared.f32 	%f16, [%rd2+160];
	fma.rn.ftz.f32 	%f17, %f16, 0fBDAAAAAB, %f15;
	fma.rn.ftz.f32 	%f18, %f7, 0f3DAAAAAB, %f17;
	mul.lo.s32 	%r37, %r1, 18;
	cvt.u64.u32 	%rd12, %r37;
	cvt.u64.u32 	%rd13, %r2;
	add.s64 	%rd14, %rd13, %rd12;
	shl.b64 	%rd15, %rd14, 2;
	st.shared.f32 	[%rd15+1280], %f18;
	mov.pred 	%p10, -1;
	bra.uni 	LBB0_2;
LBB0_1:
	mov.pred 	%p10, 0;
LBB0_2:                                 // %after_bb
	bar.sync 	0;
	@%p10 bra 	LBB0_7;
	bra.uni 	LBB0_3;
LBB0_7:                                 // %true_bb8
	ld.shared.f32 	%f19, [%rd2+168];
	ld.shared.f32 	%f20, [%rd2+164];
	ld.shared.f32 	%f21, [%rd2+160];
	ld.shared.f32 	%f22, [%rd2];
	sub.ftz.f32 	%f23, %f21, %f22;
	ld.shared.f32 	%f24, [%rd2+4];
	mul.ftz.f32 	%f25, %f24, 0fBE2AAAAB;
	fma.rn.ftz.f32 	%f26, %f23, 0f3DAAAAAB, %f25;
	fma.rn.ftz.f32 	%f27, %f20, 0f3E2AAAAB, %f26;
	ld.shared.f32 	%f28, [%rd2+8];
	fma.rn.ftz.f32 	%f29, %f28, 0fBDAAAAAB, %f27;
	fma.rn.ftz.f32 	%f30, %f19, 0f3DAAAAAB, %f29;
	mul.lo.s32 	%r38, %r1, 18;
	cvt.u64.u32 	%rd16, %r38;
	cvt.u64.u32 	%rd17, %r2;
	add.s64 	%rd18, %rd17, %rd16;
	shl.b64 	%rd19, %rd18, 2;
	st.shared.f32 	[%rd19+2288], %f30;
LBB0_3:                                 // %after_bb7
	bar.sync 	0;
	setp.lt.u32 	%p7, %r1, 12;
	setp.lt.u32 	%p8, %r2, 16;
	and.pred  	%p9, %p7, %p8;
	@%p9 bra 	LBB0_5;
	bra.uni 	LBB0_4;
LBB0_5:                                 // %true_bb14
	ld.param.u64 	%rd3, [kernel_output_s0_y_y_o___block_id_y_param_13];
	ld.param.u32 	%r7, [kernel_output_s0_y_y_o___block_id_y_param_5];
	ld.param.u32 	%r6, [kernel_output_s0_y_y_o___block_id_y_param_4];
	cvta.to.global.u64 	%rd1, %rd3;
	shl.b32 	%r39, %r1, 1;
	sub.s32 	%r40, %r5, %r39;
	mul.wide.u32 	%rd20, %r40, 4;
	ld.shared.f32 	%f31, [%rd20+1280];
	ld.shared.f32 	%f32, [%rd20+1352];
	ld.shared.f32 	%f33, [%rd20+1424];
	ld.shared.f32 	%f34, [%rd20+1284];
	ld.shared.f32 	%f35, [%rd20+1356];
	ld.shared.f32 	%f36, [%rd20+1428];
	ld.shared.f32 	%f37, [%rd20+1288];
	ld.shared.f32 	%f38, [%rd20+1360];
	ld.shared.f32 	%f39, [%rd20+1432];
	mul.ftz.f32 	%f40, %f32, %f32;
	fma.rn.ftz.f32 	%f41, %f31, %f31, %f40;
	fma.rn.ftz.f32 	%f42, %f33, %f33, %f41;
	fma.rn.ftz.f32 	%f43, %f34, %f34, %f42;
	fma.rn.ftz.f32 	%f44, %f35, %f35, %f43;
	fma.rn.ftz.f32 	%f45, %f36, %f36, %f44;
	fma.rn.ftz.f32 	%f46, %f37, %f37, %f45;
	fma.rn.ftz.f32 	%f47, %f38, %f38, %f46;
	fma.rn.ftz.f32 	%f48, %f39, %f39, %f47;
	ld.shared.f32 	%f49, [%rd20+2288];
	ld.shared.f32 	%f50, [%rd20+2360];
	ld.shared.f32 	%f51, [%rd20+2432];
	ld.shared.f32 	%f52, [%rd20+2292];
	ld.shared.f32 	%f53, [%rd20+2364];
	ld.shared.f32 	%f54, [%rd20+2436];
	ld.shared.f32 	%f55, [%rd20+2296];
	ld.shared.f32 	%f56, [%rd20+2368];
	ld.shared.f32 	%f57, [%rd20+2440];
	mul.ftz.f32 	%f58, %f50, %f50;
	fma.rn.ftz.f32 	%f59, %f49, %f49, %f58;
	fma.rn.ftz.f32 	%f60, %f51, %f51, %f59;
	fma.rn.ftz.f32 	%f61, %f52, %f52, %f60;
	fma.rn.ftz.f32 	%f62, %f53, %f53, %f61;
	fma.rn.ftz.f32 	%f63, %f54, %f54, %f62;
	fma.rn.ftz.f32 	%f64, %f55, %f55, %f63;
	fma.rn.ftz.f32 	%f65, %f56, %f56, %f64;
	fma.rn.ftz.f32 	%f66, %f57, %f57, %f65;
	mul.ftz.f32 	%f67, %f32, %f50;
	fma.rn.ftz.f32 	%f68, %f31, %f49, %f67;
	fma.rn.ftz.f32 	%f69, %f33, %f51, %f68;
	fma.rn.ftz.f32 	%f70, %f34, %f52, %f69;
	fma.rn.ftz.f32 	%f71, %f35, %f53, %f70;
	fma.rn.ftz.f32 	%f72, %f36, %f54, %f71;
	fma.rn.ftz.f32 	%f73, %f37, %f55, %f72;
	fma.rn.ftz.f32 	%f74, %f38, %f56, %f73;
	fma.rn.ftz.f32 	%f75, %f39, %f57, %f74;
	mul.ftz.f32 	%f76, %f75, %f75;
	neg.ftz.f32 	%f77, %f76;
	fma.rn.ftz.f32 	%f78, %f48, %f66, %f77;
	add.ftz.f32 	%f79, %f48, %f66;
	mul.ftz.f32 	%f80, %f79, %f79;
	fma.rn.ftz.f32 	%f81, %f80, 0fBD23D70A, %f78;
	add.s32 	%r41, %r4, %r7;
	mad.lo.s32 	%r42, %r3, %r6, %r41;
	mul.wide.s32 	%rd21, %r42, 4;
	add.s64 	%rd22, %rd1, %rd21;
	st.global.f32 	[%rd22], %f81;
LBB0_4:                                 // %after_bb13
	ret;
}
                                        // -- End function


add_temp_object_file: /tmp/tEyoZX/harris_auto_schedule.a.o
Module.compile(): temporary object_name /tmp/tEyoZX/harris_auto_schedule.a.o
emit_file.Compiling to native code...
Module.compile(): static_library_name ./bin/harris_auto_schedule.a
file_unlink: /tmp/tEyoZX/harris_auto_schedule.a.o
dir_rmdir: /tmp/tEyoZX
Module.compile(): c_header_name ./bin/harris_auto_schedule.h
Module.compile(): registration_name ./bin/harris_auto_schedule.registration.cpp
