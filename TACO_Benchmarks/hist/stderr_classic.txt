Registering autoscheduler...
Generator hist has base_path ./bin/hist_classic_auto_schedule
Dropout seed = 1561461120
Node: output
  Symbolic region required: 
    output.x.min, output.x.max
    output.y.min, output.y.max
    output.c.min, output.c.max
  Region computed: 
    output.x.min, output.x.max
    output.y.min, output.y.max
    output.c.min, output.c.max
  Stage 0:
    x output.x.min output.x.max
    y output.y.min output.y.max
    c output.c.min output.c.max
    Featurization for type Bool
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         2
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
    Featurization for type UInt8
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     2
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        3
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 1
      Transpose:      0 0 0 1
      Broadcast:      0 0 0 1
      Slice:          0 0 0 1
    Featurization for type UInt32
     Op histogram:
      Constant:   2
      Cast:       0
      Variable:   11
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
    Featurization for type Float
     Op histogram:
      Constant:   13
      Cast:       0
      Variable:   7
      Param:      0
      Add:        5
      Sub:        2
      Mod:        0
      Mul:        4
      Div:        0
      Min:        3
      Max:        3
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   3
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
  pointwise: 0 boundary condition: 0 wrapper: 0 input: 0 output: 1
Node: equalize
  Symbolic region required: 
    equalize.x.min, equalize.x.max
    equalize.y.min, equalize.y.max
  Region computed: 
    equalize.x.min, equalize.x.max
    equalize.y.min, equalize.y.max
  Stage 0:
    x equalize.x.min equalize.x.max
    y equalize.y.min equalize.y.max
    Featurization for type UInt32
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   4
      Param:      2
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        1
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   1
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
    Featurization for type Float
     Op histogram:
      Constant:   5
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        1
      Div:        1
      Min:        2
      Max:        2
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   1
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      1 0 0 1
      Transpose:      1 0 0 1
      Broadcast:      1 0 0 1
      Slice:          1 0 0 1
  pointwise: 0 boundary condition: 0 wrapper: 0 input: 0 output: 0
Node: cdf
  Symbolic region required: 
    cdf.x.min, cdf.x.max
  Region computed: 
    min(cdf.x.min, 1), max(cdf.x.max, 255)
  Stage 0:
    x cdf.x.min cdf.x.max
    Featurization for type UInt32
     Op histogram:
      Constant:   1
      Cast:       0
      Variable:   1
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   1
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 1
      Transpose:      0 0 0 1
      Broadcast:      0 0 0 1
      Slice:          0 0 0 1
  Stage 1:
    r14$x 1 255
    Featurization for type UInt32
     Op histogram:
      Constant:   1
      Cast:       0
      Variable:   3
      Param:      0
      Add:        2
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   1
      SelfCall:   1
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      1 1 0 1
      Transpose:      1 1 0 1
      Broadcast:      1 1 0 1
      Slice:          1 1 0 1
  pointwise: 0 boundary condition: 0 wrapper: 0 input: 0 output: 0
Node: hist
  Symbolic region required: 
    hist.x.min, hist.x.max
  Region computed: 
    hist.x.min, hist.x.max
  Stage 0:
    x hist.x.min hist.x.max
    Featurization for type UInt32
     Op histogram:
      Constant:   1
      Cast:       0
      Variable:   1
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 1
      Transpose:      0 0 0 1
      Broadcast:      0 0 0 1
      Slice:          0 0 0 1
  Stage 1:
    r9$x 0 2559
    x hist.x.min hist.x.max
    Featurization for type UInt32
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   4
      Param:      0
      Add:        1
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   1
      SelfCall:   1
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      1 0 0 0
      Broadcast:      1 0 0 0
      Slice:          1 0 0 0
  pointwise: 0 boundary condition: 0 wrapper: 0 input: 0 output: 0
Node: hist_rows
  Symbolic region required: 
    hist_rows.x.min, hist_rows.x.max
    hist_rows.y.min, hist_rows.y.max
  Region computed: 
    min(hist_rows.x.min, 0), max(hist_rows.x.max, 255)
    hist_rows.y.min, hist_rows.y.max
  Stage 0:
    x hist_rows.x.min hist_rows.x.max
    y hist_rows.y.min hist_rows.y.max
    Featurization for type UInt32
     Op histogram:
      Constant:   1
      Cast:       0
      Variable:   2
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 1
      Transpose:      0 0 0 1
      Broadcast:      0 0 0 1
      Slice:          0 0 0 1
  Stage 1:
    r4$x 0 1535
    y hist_rows.y.min hist_rows.y.max
    Featurization for type UInt32
     Op histogram:
      Constant:   1
      Cast:       0
      Variable:   6
      Param:      0
      Add:        1
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   1
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
    Featurization for type Float
     Op histogram:
      Constant:   4
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        2
      Max:        2
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   2
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      2 0 0 0
      Transpose:      2 0 0 0
      Broadcast:      2 0 0 0
      Slice:          2 0 0 0
  pointwise: 0 boundary condition: 0 wrapper: 0 input: 0 output: 0
Node: Cr
  Symbolic region required: 
    Cr.x.min, Cr.x.max
    Cr.y.min, Cr.y.max
  Region computed: 
    Cr.x.min, Cr.x.max
    Cr.y.min, Cr.y.max
  Stage 0:
    x Cr.x.min Cr.x.max
    y Cr.y.min Cr.y.max
    Featurization for type UInt8
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   1
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          1 0 0 0
    Featurization for type UInt32
     Op histogram:
      Constant:   1
      Cast:       0
      Variable:   6
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
    Featurization for type Float
     Op histogram:
      Constant:   2
      Cast:       0
      Variable:   0
      Param:      0
      Add:        1
      Sub:        1
      Mod:        0
      Mul:        1
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   1
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      1 0 0 1
      Transpose:      1 0 0 1
      Broadcast:      1 0 0 1
      Slice:          1 0 0 1
  pointwise: 0 boundary condition: 0 wrapper: 0 input: 0 output: 0
Node: Cb
  Symbolic region required: 
    Cb.x.min, Cb.x.max
    Cb.y.min, Cb.y.max
  Region computed: 
    Cb.x.min, Cb.x.max
    Cb.y.min, Cb.y.max
  Stage 0:
    x Cb.x.min Cb.x.max
    y Cb.y.min Cb.y.max
    Featurization for type UInt8
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   1
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          1 0 0 0
    Featurization for type UInt32
     Op histogram:
      Constant:   1
      Cast:       0
      Variable:   6
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
    Featurization for type Float
     Op histogram:
      Constant:   2
      Cast:       0
      Variable:   0
      Param:      0
      Add:        1
      Sub:        1
      Mod:        0
      Mul:        1
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   1
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      1 0 0 1
      Transpose:      1 0 0 1
      Broadcast:      1 0 0 1
      Slice:          1 0 0 1
  pointwise: 0 boundary condition: 0 wrapper: 0 input: 0 output: 0
Node: Y
  Symbolic region required: 
    Y.x.min, Y.x.max
    Y.y.min, Y.y.max
  Region computed: 
    Y.x.min, Y.x.max
    Y.y.min, Y.y.max
  Stage 0:
    x Y.x.min Y.x.max
    y Y.y.min Y.y.max
    Featurization for type UInt8
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   3
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          3 0 0 0
    Featurization for type UInt32
     Op histogram:
      Constant:   3
      Cast:       0
      Variable:   8
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
    Featurization for type Float
     Op histogram:
      Constant:   3
      Cast:       0
      Variable:   0
      Param:      0
      Add:        2
      Sub:        0
      Mod:        0
      Mul:        3
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 1
      Transpose:      0 0 0 1
      Broadcast:      0 0 0 1
      Slice:          0 0 0 1
  pointwise: 0 boundary condition: 0 wrapper: 0 input: 0 output: 0
Node: input_im
  Symbolic region required: 
    input_im._0.min, input_im._0.max
    input_im._1.min, input_im._1.max
    input_im._2.min, input_im._2.max
  Region computed: 
    input_im._0.min, input_im._0.max
    input_im._1.min, input_im._1.max
    input_im._2.min, input_im._2.max
  Stage 0:
    _0 input_im._0.min input_im._0.max
    _1 input_im._1.min input_im._1.max
    _2 input_im._2.min input_im._2.max
    Featurization for type UInt8
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  1
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 1 1
      Transpose:      0 0 1 1
      Broadcast:      0 0 1 1
      Slice:          0 0 1 1
    Featurization for type UInt32
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   6
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
  pointwise: 1 boundary condition: 0 wrapper: 1 input: 1 output: 0
Edge: Cb -> output
  Footprint: 
    Min 0: output.x.min
    Max 0: output.x.max
    Min 1: output.y.min
    Max 1: output.y.max
  Load Jacobians:
    [ 1   0   0  ]
    [ 0   1   0  ]

Edge: Cr -> output
  Footprint: 
    Min 0: output.x.min
    Max 0: output.x.max
    Min 1: output.y.min
    Max 1: output.y.max
  Load Jacobians:
    [ 1   0   0  ]
    [ 0   1   0  ]

Edge: equalize -> output
  Footprint: 
    Min 0: output.x.min
    Max 0: output.x.max
    Min 1: output.y.min
    Max 1: output.y.max
  Load Jacobians:
    [ 1   0   0  ]
    [ 0   1   0  ]

Edge: Y -> equalize
  Footprint: 
    Min 0: equalize.x.min
    Max 0: equalize.x.max
    Min 1: equalize.y.min
    Max 1: equalize.y.max
  Load Jacobians:
    [ 1   0  ]
    [ 0   1  ]

Edge: cdf -> equalize
  Footprint: 
    Min 0: 0
    Max 0: 255
  Load Jacobians:
    [ _   _  ]

Edge: hist -> cdf
  Footprint: 
    Min 0: 0
    Max 0: 0
  Load Jacobians:
    [ 0  ]

Edge: hist -> cdf.update(0)
  Footprint: 
    Min 0: cdf.r14$x.min
    Max 0: cdf.r14$x.max
  Load Jacobians:
    [ 1  ]

Edge: hist_rows -> hist.update(0)
  Footprint: 
    Min 0: hist.x.min
    Max 0: hist.x.max
    Min 1: hist.r9$x.min
    Max 1: hist.r9$x.max
  Load Jacobians:
    [ 0   1  ]
    [ 1   0  ]

Edge: Y -> hist_rows.update(0)
  Footprint: 
    Min 0: hist_rows.r4$x.min
    Max 0: hist_rows.r4$x.max
    Min 1: hist_rows.y.min
    Max 1: hist_rows.y.max
  Load Jacobians:
  2 x
    [ 1   0  ]
    [ 0   1  ]

Edge: Y -> Cr
  Footprint: 
    Min 0: Cr.x.min
    Max 0: Cr.x.max
    Min 1: Cr.y.min
    Max 1: Cr.y.max
  Load Jacobians:
    [ 1   0  ]
    [ 0   1  ]

Edge: input_im -> Cr
  Footprint: 
    Min 0: Cr.x.min
    Max 0: Cr.x.max
    Min 1: Cr.y.min
    Max 1: Cr.y.max
    Min 2: 0
    Max 2: 0
  Load Jacobians:
    [ 1   0  ]
    [ 0   1  ]
    [ 0   0  ]

Edge: Y -> Cb
  Footprint: 
    Min 0: Cb.x.min
    Max 0: Cb.x.max
    Min 1: Cb.y.min
    Max 1: Cb.y.max
  Load Jacobians:
    [ 1   0  ]
    [ 0   1  ]

Edge: input_im -> Cb
  Footprint: 
    Min 0: Cb.x.min
    Max 0: Cb.x.max
    Min 1: Cb.y.min
    Max 1: Cb.y.max
    Min 2: 2
    Max 2: 2
  Load Jacobians:
    [ 1   0  ]
    [ 0   1  ]
    [ 0   0  ]

Edge: input_im -> Y
  Footprint: 
    Min 0: Y.x.min
    Max 0: Y.x.max
    Min 1: Y.y.min
    Max 1: Y.y.max
    Min 2: 0
    Max 2: 2
  Load Jacobians:
  3 x
    [ 1   0  ]
    [ 0   1  ]
    [ 0   0  ]


Pass 0 result:
State with cost 12.190026:
 gpu_none
realize: output [1536, 2560, 3] with 1 stages
realize: equalize [1536, 2560] with 1 stages
realize: cdf [256] with 2 stages
realize: hist [256] with 2 stages
realize: hist_rows [256, 2560c] with 2 stages
realize: Cr [1536, 2560] with 1 stages
realize: Cb [1536, 2560] with 1 stages
realize: Y [1536, 2560] with 1 stages
Y 6 160 (0, 0) t gpu_block
 Y 64c 16c (0, 0) t gpu_thread
  Y 1c 1c (0, 0) t gpu_serial
   Y 4vc 1c (0, 0) *
Cb 3 160 (0, 0) t gpu_block
 Cb 64c 16c (0, 0) t gpu_thread
  Cb 2c 1c (0, 0) t gpu_serial
   Cb 4vc 1c (0, 0) *
Cr 3 160 (0, 0) t gpu_block
 Cr 64c 16c (0, 0) t gpu_thread
  Cr 2c 1c (0, 0) t gpu_serial
   Cr 4vc 1c (0, 0) *
hist_rows 2 5c (0, 0) t gpu_block
 hist_rows 16c 64c (0, 0) t gpu_thread
  hist_rows 8c 8c (0, 0) t gpu_serial
   hist_rows 1vc 1c (0, 0) *
hist_rows 1c 5c (-1, 0) t gpu_block
 hist_rows 1c 64c (-1, 0) t gpu_thread
  hist_rows 1536c 8c (-1, 0) t *
hist 4 (0, 0) t gpu_block
 hist 64c (0, 0) t gpu_thread
  hist 1c (0, 0) t gpu_serial
   hist 1vc (0, 0) *
hist 1c 4 (1, 0) t gpu_block
 hist 1c 64c (1, 0) t gpu_thread
  hist 2560c 1c (1, 0) t gpu_serial
   hist 1c 1vc (1, 0) *
cdf 1 (0, 0) t gpu_block
 cdf 64 (0, 0) t gpu_thread
  cdf 4c (0, 0) t gpu_serial
   cdf 1vc (0, 0) *
cdf 1c (-1, 0) t gpu_block
 cdf 1c (-1, 0) t gpu_thread
  cdf 255c (-1, 0) t *
equalize 24 10 (0, 0) t gpu_block
 equalize 16c 64c (0, 0) t gpu_thread
  equalize 1c 4c (0, 0) t gpu_serial
   equalize 4vc 1c (0, 0) *
output 24 40 2 (0, 0) t gpu_block
 output 16c 64c 1c (0, 0) t gpu_thread
  output 1c 1c 2c (0, 0) t gpu_serial
   output 4vc 1c 1c (0, 0) *

Pass 1 result:
State with cost 12.171406:
 gpu_none
realize: output [1536, 2560, 3] with 1 stages
realize: equalize [1536, 2560] with 1 stages
realize: cdf [256] with 2 stages
realize: hist [256] with 2 stages
realize: hist_rows [256, 2560c] with 2 stages
realize: Cr [1536, 2560] with 1 stages
realize: Cb [1536, 2560] with 1 stages
realize: Y [1536, 2560] with 1 stages
Y 12 40 (0, 0) t gpu_block
 Y 16c 64c (0, 0) t gpu_thread
  Y 2c 1c (0, 0) t gpu_serial
   Y 4vc 1c (0, 0) *
Cb 3 160 (0, 0) t gpu_block
 Cb 64c 16c (0, 0) t gpu_thread
  Cb 2c 1c (0, 0) t gpu_serial
   Cb 4vc 1c (0, 0) *
Cr 3 80 (0, 0) t gpu_block
 Cr 32c 32c (0, 0) t gpu_thread
  Cr 4c 1c (0, 0) t gpu_serial
   Cr 4vc 1c (0, 0) *
hist_rows 8 5c (0, 0) t gpu_block
 hist_rows 16c 64c (0, 0) t gpu_thread
  hist_rows 2c 8c (0, 0) t gpu_serial
   hist_rows 1vc 1c (0, 0) *
hist_rows 1c 5c (-1, 0) t gpu_block
 hist_rows 1c 64c (-1, 0) t gpu_thread
  hist_rows 1536c 8c (-1, 0) t *
hist 4 (0, 0) t gpu_block
 hist 64c (0, 0) t gpu_thread
  hist 1c (0, 0) t gpu_serial
   hist 1vc (0, 0) *
hist 1c 4 (1, 0) t gpu_block
 hist 1c 64c (1, 0) t gpu_thread
  hist 2560c 1c (1, 0) t gpu_serial
   hist 1c 1vc (1, 0) *
cdf 4 (0, 0) t gpu_block
 cdf 64c (0, 0) t gpu_thread
  cdf 1c (0, 0) t gpu_serial
   cdf 1vc (0, 0) *
cdf 1c (-1, 0) t gpu_block
 cdf 1c (-1, 0) t gpu_thread
  cdf 255c (-1, 0) t *
equalize 24 10 (0, 0) t gpu_block
 equalize 16c 64c (0, 0) t gpu_thread
  equalize 1c 4c (0, 0) t gpu_serial
   equalize 4vc 1c (0, 0) *
output 6 320 1 (0, 0) t gpu_block
 output 64c 8c 2 (0, 0) t gpu_thread
  output 1c 1c 2c (0, 0) t gpu_serial
   output 4vc 1c 1c (0, 0) *

Pass 2 result:
State with cost 12.196565:
 gpu_none
realize: output [1536, 2560, 3] with 1 stages
realize: equalize [1536, 2560] with 1 stages
realize: cdf [256] with 2 stages
realize: hist [256] with 2 stages
realize: hist_rows [256, 2560c] with 2 stages
realize: Cr [1536, 2560] with 1 stages
realize: Cb [1536, 2560] with 1 stages
realize: Y [1536, 2560] with 1 stages
Y 6 160 (0, 0) t gpu_block
 Y 64c 16c (0, 0) t gpu_thread
  Y 1c 1c (0, 0) t gpu_serial
   Y 4vc 1c (0, 0) *
Cb 3 160 (0, 0) t gpu_block
 Cb 64c 16c (0, 0) t gpu_thread
  Cb 2c 1c (0, 0) t gpu_serial
   Cb 4vc 1c (0, 0) *
Cr 6 40 (0, 0) t gpu_block
 Cr 16c 64c (0, 0) t gpu_thread
  Cr 4c 1c (0, 0) t gpu_serial
   Cr 4vc 1c (0, 0) *
hist_rows 16 5c (0, 0) t gpu_block
 hist_rows 16c 64c (0, 0) t gpu_thread
  hist_rows 1c 8c (0, 0) t gpu_serial
   hist_rows 1vc 1c (0, 0) *
hist_rows 1c 5c (-1, 0) t gpu_block
 hist_rows 1c 64c (-1, 0) t gpu_thread
  hist_rows 1536c 8c (-1, 0) t *
hist 4 (0, 0) t gpu_block
 hist 64c (0, 0) t gpu_thread
  hist 1c (0, 0) t gpu_serial
   hist 1vc (0, 0) *
hist 1c 4 (1, 0) t gpu_block
 hist 1c 64c (1, 0) t gpu_thread
  hist 2560c 1c (1, 0) t gpu_serial
   hist 1c 1vc (1, 0) *
cdf 2 (0, 0) t gpu_block
 cdf 64c (0, 0) t gpu_thread
  cdf 2c (0, 0) t gpu_serial
   cdf 1vc (0, 0) *
cdf 1c (-1, 0) t gpu_block
 cdf 1c (-1, 0) t gpu_thread
  cdf 255c (-1, 0) t *
equalize 24 20 (0, 0) t gpu_block
 equalize 16c 64c (0, 0) t gpu_thread
  equalize 1c 2c (0, 0) t gpu_serial
   equalize 4vc 1c (0, 0) *
output 24 40 2 (0, 0) t gpu_block
 output 16c 64c 1c (0, 0) t gpu_thread
  output 1c 1c 2c (0, 0) t gpu_serial
   output 4vc 1c 1c (0, 0) *

Pass 3 result:
State with cost 12.233211:
 gpu_none
realize: output [1536, 2560, 3] with 1 stages
realize: equalize [1536, 2560] with 1 stages
realize: cdf [256] with 2 stages
realize: hist [256] with 2 stages
realize: hist_rows [256, 2560c] with 2 stages
realize: Cr [1536, 2560] with 1 stages
realize: Cb [1536, 2560] with 1 stages
realize: Y [1536, 2560] with 1 stages
Y 6 40 (0, 0) t gpu_block
 Y 64c 16c (0, 0) t gpu_thread
  Y 1c 4c (0, 0) t gpu_serial
   Y 4vc 1c (0, 0) *
Cb 3 160 (0, 0) t gpu_block
 Cb 64c 16c (0, 0) t gpu_thread
  Cb 2c 1c (0, 0) t gpu_serial
   Cb 4vc 1c (0, 0) *
Cr 6 40 (0, 0) t gpu_block
 Cr 16c 64c (0, 0) t gpu_thread
  Cr 4c 1c (0, 0) t gpu_serial
   Cr 4vc 1c (0, 0) *
hist_rows 16 5c (0, 0) t gpu_block
 hist_rows 16c 64c (0, 0) t gpu_thread
  hist_rows 1c 8c (0, 0) t gpu_serial
   hist_rows 1vc 1c (0, 0) *
hist_rows 1c 5c (-1, 0) t gpu_block
 hist_rows 1c 64c (-1, 0) t gpu_thread
  hist_rows 1536c 8c (-1, 0) t *
hist 4 (0, 0) t gpu_block
 hist 64c (0, 0) t gpu_thread
  hist 1c (0, 0) t gpu_serial
   hist 1vc (0, 0) *
hist 1c 4 (1, 0) t gpu_block
 hist 1c 64c (1, 0) t gpu_thread
  hist 2560c 1c (1, 0) t gpu_serial
   hist 1c 1vc (1, 0) *
cdf 2 (0, 0) t gpu_block
 cdf 64c (0, 0) t gpu_thread
  cdf 2c (0, 0) t gpu_serial
   cdf 1vc (0, 0) *
cdf 1c (-1, 0) t gpu_block
 cdf 1c (-1, 0) t gpu_thread
  cdf 255c (-1, 0) t *
equalize 24 20 (0, 0) t gpu_block
 equalize 16c 64c (0, 0) t gpu_thread
  equalize 1c 2c (0, 0) t gpu_serial
   equalize 4vc 1c (0, 0) *
output 24 40 2 (0, 0) t gpu_block
 output 16c 64c 1c (0, 0) t gpu_thread
  output 1c 1c 2c (0, 0) t gpu_serial
   output 4vc 1c 1c (0, 0) *

Pass 4 result:
State with cost 12.216407:
 gpu_none
realize: output [1536, 2560, 3] with 1 stages
realize: equalize [1536, 2560] with 1 stages
realize: cdf [256] with 2 stages
realize: hist [256] with 2 stages
realize: hist_rows [256, 2560c] with 2 stages
realize: Cr [1536, 2560] with 1 stages
realize: Cb [1536, 2560] with 1 stages
realize: Y [1536, 2560] with 1 stages
Y 6 80 (0, 0) t gpu_block
 Y 64c 16c (0, 0) t gpu_thread
  Y 1c 2c (0, 0) t gpu_serial
   Y 4vc 1c (0, 0) *
Cb 3 160 (0, 0) t gpu_block
 Cb 64c 16c (0, 0) t gpu_thread
  Cb 2c 1c (0, 0) t gpu_serial
   Cb 4vc 1c (0, 0) *
Cr 6 40 (0, 0) t gpu_block
 Cr 16c 64c (0, 0) t gpu_thread
  Cr 4c 1c (0, 0) t gpu_serial
   Cr 4vc 1c (0, 0) *
hist_rows 16 5c (0, 0) t gpu_block
 hist_rows 16c 64c (0, 0) t gpu_thread
  hist_rows 1c 8c (0, 0) t gpu_serial
   hist_rows 1vc 1c (0, 0) *
hist_rows 1c 5c (-1, 0) t gpu_block
 hist_rows 1c 64c (-1, 0) t gpu_thread
  hist_rows 1536c 8c (-1, 0) t *
hist 4 (0, 0) t gpu_block
 hist 64c (0, 0) t gpu_thread
  hist 1c (0, 0) t gpu_serial
   hist 1vc (0, 0) *
hist 1c 4 (1, 0) t gpu_block
 hist 1c 64c (1, 0) t gpu_thread
  hist 2560c 1c (1, 0) t gpu_serial
   hist 1c 1vc (1, 0) *
cdf 2 (0, 0) t gpu_block
 cdf 64c (0, 0) t gpu_thread
  cdf 2c (0, 0) t gpu_serial
   cdf 1vc (0, 0) *
cdf 1c (-1, 0) t gpu_block
 cdf 1c (-1, 0) t gpu_thread
  cdf 255c (-1, 0) t *
equalize 24 20 (0, 0) t gpu_block
 equalize 16c 64c (0, 0) t gpu_thread
  equalize 1c 2c (0, 0) t gpu_serial
   equalize 4vc 1c (0, 0) *
output 24 40 2 (0, 0) t gpu_block
 output 16c 64c 1c (0, 0) t gpu_thread
  output 1c 1c 2c (0, 0) t gpu_serial
   output 4vc 1c 1c (0, 0) *
Best cost: 12.171406
AutoSchedule.cpp:4446 ... AutoSchedule.cpp:4525 : 6414.246181 ms
Cost evaluated this many times: 170245
** Optimal schedule:
Schedule features for output
    num_realizations:                      1.000000
    num_productions:                       1.000000
    points_computed_per_realization:       11796480.000000
    points_computed_per_production:        15728640.000000
    points_computed_total:                 11796480.000000
    points_computed_minimum:               11796480.000000
    innermost_loop_extent:                 2.000000
    innermost_pure_loop_extent:            2.000000
    unrolled_loop_extent:                  2.000000
    inner_parallelism:                     1920.000000
    outer_parallelism:                     1.000000
    bytes_at_realization:                  11796480.000000
    bytes_at_production:                   11796480.000000
    bytes_at_root:                         11796480.000000
    innermost_bytes_at_realization:        1536.000000
    innermost_bytes_at_production:         1536.000000
    innermost_bytes_at_root:               1536.000000
    inlined_calls:                         0.000000
    unique_bytes_read_per_realization:     47185920.000000
    unique_lines_read_per_realization:     7680.000000
    allocation_bytes_read_per_realization: 47185920.000000
    working_set:                           0.000000
    vector_size:                           4.000000
    native_vector_size:                    4.000000
    num_vectors:                           2949120.000000
    num_scalars:                           0.000000
    scalar_loads_per_vector:               0.000000
    vector_loads_per_vector:               1.500000
    scalar_loads_per_scalar:               1.500000
    bytes_at_task:                         6144.000000
    innermost_bytes_at_task:               256.000000
    unique_bytes_read_per_vector:          48.000000
    unique_lines_read_per_vector:          3.000000
    unique_bytes_read_per_task:            24576.000000
    unique_lines_read_per_task:            24.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             77334528.000000
    working_set_at_realization:            77334528.000000
    working_set_at_root:                   77334528.000000
    num_warps:                             61440.000000
    block_occupancy:                       1.000000
    warp_lane_utilization:                 1.000000
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  5898240.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 0.000000
Schedule features for equalize
    num_realizations:                      1.000000
    num_productions:                       1.000000
    points_computed_per_realization:       3932160.000000
    points_computed_per_production:        3932160.000000
    points_computed_total:                 3932160.000000
    points_computed_minimum:               3932160.000000
    innermost_loop_extent:                 4.000000
    innermost_pure_loop_extent:            4.000000
    unrolled_loop_extent:                  4.000000
    inner_parallelism:                     240.000000
    outer_parallelism:                     1.000000
    bytes_at_realization:                  15728640.000000
    bytes_at_production:                   15728640.000000
    bytes_at_root:                         15728640.000000
    innermost_bytes_at_realization:        6144.000000
    innermost_bytes_at_production:         6144.000000
    innermost_bytes_at_root:               6144.000000
    inlined_calls:                         0.000000
    unique_bytes_read_per_realization:     15729664.000000
    unique_lines_read_per_realization:     2561.000000
    allocation_bytes_read_per_realization: 15729664.000000
    working_set:                           0.000000
    vector_size:                           4.000000
    native_vector_size:                    4.000000
    num_vectors:                           983040.000000
    num_scalars:                           0.000000
    scalar_loads_per_vector:               4.000000
    vector_loads_per_vector:               1.000000
    scalar_loads_per_scalar:               2.000000
    bytes_at_task:                         65536.000000
    innermost_bytes_at_task:               256.000000
    unique_bytes_read_per_vector:          15729664.000000
    unique_lines_read_per_vector:          2561.000000
    unique_bytes_read_per_task:            15729664.000000
    unique_lines_read_per_task:            2561.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             77334528.000000
    working_set_at_realization:            77334528.000000
    working_set_at_root:                   77334528.000000
    num_warps:                             7680.000000
    block_occupancy:                       1.000000
    warp_lane_utilization:                 1.000000
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  491520.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 245760.000000
Schedule features for cdf
    num_realizations:                      1.000000
    num_productions:                       1.000000
    points_computed_per_realization:       256.000000
    points_computed_per_production:        256.000000
    points_computed_total:                 256.000000
    points_computed_minimum:               256.000000
    innermost_loop_extent:                 1.000000
    innermost_pure_loop_extent:            1.000000
    unrolled_loop_extent:                  1.000000
    inner_parallelism:                     4.000000
    outer_parallelism:                     1.000000
    bytes_at_realization:                  1024.000000
    bytes_at_production:                   1024.000000
    bytes_at_root:                         1024.000000
    innermost_bytes_at_realization:        1024.000000
    innermost_bytes_at_production:         1024.000000
    innermost_bytes_at_root:               1024.000000
    inlined_calls:                         0.000000
    unique_bytes_read_per_realization:     1024.000000
    unique_lines_read_per_realization:     1.000000
    allocation_bytes_read_per_realization: 1024.000000
    working_set:                           0.000000
    vector_size:                           1.000000
    native_vector_size:                    1.000000
    num_vectors:                           0.000000
    num_scalars:                           256.000000
    scalar_loads_per_vector:               1.000000
    vector_loads_per_vector:               0.000000
    scalar_loads_per_scalar:               1.000000
    bytes_at_task:                         256.000000
    innermost_bytes_at_task:               256.000000
    unique_bytes_read_per_vector:          4.000000
    unique_lines_read_per_vector:          1.000000
    unique_bytes_read_per_task:            4.000000
    unique_lines_read_per_task:            1.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             77334528.000000
    working_set_at_realization:            77334528.000000
    working_set_at_root:                   77334528.000000
    num_warps:                             8.000000
    block_occupancy:                       0.062500
    warp_lane_utilization:                 1.000000
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  8.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 64.000000
Schedule features for cdf.update(0)
    num_realizations:                      1.000000
    num_productions:                       1.000000
    points_computed_per_realization:       255.000000
    points_computed_per_production:        255.000000
    points_computed_total:                 255.000000
    points_computed_minimum:               255.000000
    innermost_loop_extent:                 1.000000
    innermost_pure_loop_extent:            1.000000
    unrolled_loop_extent:                  1.000000
    inner_parallelism:                     1.000000
    outer_parallelism:                     1.000000
    bytes_at_realization:                  1024.000000
    bytes_at_production:                   1024.000000
    bytes_at_root:                         1024.000000
    innermost_bytes_at_realization:        1024.000000
    innermost_bytes_at_production:         1024.000000
    innermost_bytes_at_root:               1024.000000
    inlined_calls:                         0.000000
    unique_bytes_read_per_realization:     2048.000000
    unique_lines_read_per_realization:     2.000000
    allocation_bytes_read_per_realization: 2048.000000
    working_set:                           0.000000
    vector_size:                           1.000000
    native_vector_size:                    1.000000
    num_vectors:                           0.000000
    num_scalars:                           255.000000
    scalar_loads_per_vector:               1.000000
    vector_loads_per_vector:               1.000000
    scalar_loads_per_scalar:               2.000000
    bytes_at_task:                         1024.000000
    innermost_bytes_at_task:               1024.000000
    unique_bytes_read_per_vector:          1020.000000
    unique_lines_read_per_vector:          1.000000
    unique_bytes_read_per_task:            1020.000000
    unique_lines_read_per_task:            1.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             77334528.000000
    working_set_at_realization:            77334528.000000
    working_set_at_root:                   77334528.000000
    num_warps:                             1.000000
    block_occupancy:                       0.000977
    warp_lane_utilization:                 0.031250
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  1.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 1.000000
Schedule features for hist
    num_realizations:                      1.000000
    num_productions:                       1.000000
    points_computed_per_realization:       256.000000
    points_computed_per_production:        256.000000
    points_computed_total:                 256.000000
    points_computed_minimum:               256.000000
    innermost_loop_extent:                 1.000000
    innermost_pure_loop_extent:            1.000000
    unrolled_loop_extent:                  1.000000
    inner_parallelism:                     4.000000
    outer_parallelism:                     1.000000
    bytes_at_realization:                  1024.000000
    bytes_at_production:                   1024.000000
    bytes_at_root:                         1024.000000
    innermost_bytes_at_realization:        1024.000000
    innermost_bytes_at_production:         1024.000000
    innermost_bytes_at_root:               1024.000000
    inlined_calls:                         0.000000
    unique_bytes_read_per_realization:     0.000000
    unique_lines_read_per_realization:     0.000000
    allocation_bytes_read_per_realization: 0.000000
    working_set:                           0.000000
    vector_size:                           1.000000
    native_vector_size:                    1.000000
    num_vectors:                           0.000000
    num_scalars:                           256.000000
    scalar_loads_per_vector:               0.000000
    vector_loads_per_vector:               0.000000
    scalar_loads_per_scalar:               0.000000
    bytes_at_task:                         256.000000
    innermost_bytes_at_task:               256.000000
    unique_bytes_read_per_vector:          0.000000
    unique_lines_read_per_vector:          0.000000
    unique_bytes_read_per_task:            0.000000
    unique_lines_read_per_task:            0.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             77334528.000000
    working_set_at_realization:            77334528.000000
    working_set_at_root:                   77334528.000000
    num_warps:                             8.000000
    block_occupancy:                       0.062500
    warp_lane_utilization:                 1.000000
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  0.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 64.000000
Schedule features for hist.update(0)
    num_realizations:                      1.000000
    num_productions:                       1.000000
    points_computed_per_realization:       655360.000000
    points_computed_per_production:        655360.000000
    points_computed_total:                 655360.000000
    points_computed_minimum:               655360.000000
    innermost_loop_extent:                 2560.000000
    innermost_pure_loop_extent:            1.000000
    unrolled_loop_extent:                  1.000000
    inner_parallelism:                     4.000000
    outer_parallelism:                     1.000000
    bytes_at_realization:                  1024.000000
    bytes_at_production:                   1024.000000
    bytes_at_root:                         1024.000000
    innermost_bytes_at_realization:        1024.000000
    innermost_bytes_at_production:         1024.000000
    innermost_bytes_at_root:               1024.000000
    inlined_calls:                         0.000000
    unique_bytes_read_per_realization:     2622464.000000
    unique_lines_read_per_realization:     2561.000000
    allocation_bytes_read_per_realization: 2622464.000000
    working_set:                           0.000000
    vector_size:                           1.000000
    native_vector_size:                    1.000000
    num_vectors:                           0.000000
    num_scalars:                           655360.000000
    scalar_loads_per_vector:               0.000000
    vector_loads_per_vector:               2.000000
    scalar_loads_per_scalar:               2.000000
    bytes_at_task:                         256.000000
    innermost_bytes_at_task:               256.000000
    unique_bytes_read_per_vector:          4.000000
    unique_lines_read_per_vector:          1.000000
    unique_bytes_read_per_task:            655360.000000
    unique_lines_read_per_task:            2560.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             77334528.000000
    working_set_at_realization:            77334528.000000
    working_set_at_root:                   77334528.000000
    num_warps:                             8.000000
    block_occupancy:                       0.062500
    warp_lane_utilization:                 1.000000
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  64.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 64.000000
Schedule features for hist_rows
    num_realizations:                      1.000000
    num_productions:                       1.000000
    points_computed_per_realization:       655360.000000
    points_computed_per_production:        655360.000000
    points_computed_total:                 655360.000000
    points_computed_minimum:               655360.000000
    innermost_loop_extent:                 16.000000
    innermost_pure_loop_extent:            16.000000
    unrolled_loop_extent:                  16.000000
    inner_parallelism:                     40.000000
    outer_parallelism:                     1.000000
    bytes_at_realization:                  2621440.000000
    bytes_at_production:                   2621440.000000
    bytes_at_root:                         2621440.000000
    innermost_bytes_at_realization:        1024.000000
    innermost_bytes_at_production:         1024.000000
    innermost_bytes_at_root:               1024.000000
    inlined_calls:                         0.000000
    unique_bytes_read_per_realization:     0.000000
    unique_lines_read_per_realization:     0.000000
    allocation_bytes_read_per_realization: 0.000000
    working_set:                           0.000000
    vector_size:                           1.000000
    native_vector_size:                    1.000000
    num_vectors:                           0.000000
    num_scalars:                           655360.000000
    scalar_loads_per_vector:               0.000000
    vector_loads_per_vector:               0.000000
    scalar_loads_per_scalar:               0.000000
    bytes_at_task:                         65536.000000
    innermost_bytes_at_task:               128.000000
    unique_bytes_read_per_vector:          0.000000
    unique_lines_read_per_vector:          0.000000
    unique_bytes_read_per_task:            0.000000
    unique_lines_read_per_task:            0.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             77334528.000000
    working_set_at_realization:            77334528.000000
    working_set_at_root:                   77334528.000000
    num_warps:                             1280.000000
    block_occupancy:                       1.000000
    warp_lane_utilization:                 1.000000
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  0.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 20480.000000
Schedule features for hist_rows.update(0)
    num_realizations:                      1.000000
    num_productions:                       1.000000
    points_computed_per_realization:       3932160.000000
    points_computed_per_production:        3932160.000000
    points_computed_total:                 3932160.000000
    points_computed_minimum:               3932160.000000
    innermost_loop_extent:                 64.000000
    innermost_pure_loop_extent:            64.000000
    unrolled_loop_extent:                  1.000000
    inner_parallelism:                     5.000000
    outer_parallelism:                     1.000000
    bytes_at_realization:                  2621440.000000
    bytes_at_production:                   2621440.000000
    bytes_at_root:                         2621440.000000
    innermost_bytes_at_realization:        1024.000000
    innermost_bytes_at_production:         1024.000000
    innermost_bytes_at_root:               1024.000000
    inlined_calls:                         0.000000
    unique_bytes_read_per_realization:     18350080.000000
    unique_lines_read_per_realization:     5120.000000
    allocation_bytes_read_per_realization: 18350080.000000
    working_set:                           0.000000
    vector_size:                           1.000000
    native_vector_size:                    1.000000
    num_vectors:                           0.000000
    num_scalars:                           3932160.000000
    scalar_loads_per_vector:               2.000000
    vector_loads_per_vector:               1.000000
    scalar_loads_per_scalar:               3.000000
    bytes_at_task:                         524288.000000
    innermost_bytes_at_task:               1024.000000
    unique_bytes_read_per_vector:          49152.000000
    unique_lines_read_per_vector:          8.000000
    unique_bytes_read_per_task:            3145728.000000
    unique_lines_read_per_task:            512.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             77334528.000000
    working_set_at_realization:            77334528.000000
    working_set_at_root:                   77334528.000000
    num_warps:                             10.000000
    block_occupancy:                       0.062500
    warp_lane_utilization:                 1.000000
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  640.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 320.000000
Schedule features for Cr
    num_realizations:                      1.000000
    num_productions:                       1.000000
    points_computed_per_realization:       3932160.000000
    points_computed_per_production:        3932160.000000
    points_computed_total:                 3932160.000000
    points_computed_minimum:               3932160.000000
    innermost_loop_extent:                 4.000000
    innermost_pure_loop_extent:            4.000000
    unrolled_loop_extent:                  4.000000
    inner_parallelism:                     240.000000
    outer_parallelism:                     1.000000
    bytes_at_realization:                  15728640.000000
    bytes_at_production:                   15728640.000000
    bytes_at_root:                         15728640.000000
    innermost_bytes_at_realization:        6144.000000
    innermost_bytes_at_production:         6144.000000
    innermost_bytes_at_root:               6144.000000
    inlined_calls:                         0.000000
    unique_bytes_read_per_realization:     27525120.000000
    unique_lines_read_per_realization:     10240.000000
    allocation_bytes_read_per_realization: 27525120.000000
    working_set:                           0.000000
    vector_size:                           4.000000
    native_vector_size:                    4.000000
    num_vectors:                           983040.000000
    num_scalars:                           0.000000
    scalar_loads_per_vector:               0.000000
    vector_loads_per_vector:               2.000000
    scalar_loads_per_scalar:               2.000000
    bytes_at_task:                         65536.000000
    innermost_bytes_at_task:               2048.000000
    unique_bytes_read_per_vector:          28.000000
    unique_lines_read_per_vector:          4.000000
    unique_bytes_read_per_task:            114688.000000
    unique_lines_read_per_task:            128.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             77334528.000000
    working_set_at_realization:            77334528.000000
    working_set_at_root:                   77334528.000000
    num_warps:                             7680.000000
    block_occupancy:                       1.000000
    warp_lane_utilization:                 1.000000
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  245760.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 245760.000000
Schedule features for Cb
    num_realizations:                      1.000000
    num_productions:                       1.000000
    points_computed_per_realization:       3932160.000000
    points_computed_per_production:        3932160.000000
    points_computed_total:                 3932160.000000
    points_computed_minimum:               3932160.000000
    innermost_loop_extent:                 2.000000
    innermost_pure_loop_extent:            2.000000
    unrolled_loop_extent:                  2.000000
    inner_parallelism:                     480.000000
    outer_parallelism:                     1.000000
    bytes_at_realization:                  15728640.000000
    bytes_at_production:                   15728640.000000
    bytes_at_root:                         15728640.000000
    innermost_bytes_at_realization:        6144.000000
    innermost_bytes_at_production:         6144.000000
    innermost_bytes_at_root:               6144.000000
    inlined_calls:                         0.000000
    unique_bytes_read_per_realization:     27525120.000000
    unique_lines_read_per_realization:     10240.000000
    allocation_bytes_read_per_realization: 27525120.000000
    working_set:                           0.000000
    vector_size:                           4.000000
    native_vector_size:                    4.000000
    num_vectors:                           983040.000000
    num_scalars:                           0.000000
    scalar_loads_per_vector:               0.000000
    vector_loads_per_vector:               2.000000
    scalar_loads_per_scalar:               2.000000
    bytes_at_task:                         32768.000000
    innermost_bytes_at_task:               2048.000000
    unique_bytes_read_per_vector:          28.000000
    unique_lines_read_per_vector:          4.000000
    unique_bytes_read_per_task:            57344.000000
    unique_lines_read_per_task:            64.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             77334528.000000
    working_set_at_realization:            77334528.000000
    working_set_at_root:                   77334528.000000
    num_warps:                             15360.000000
    block_occupancy:                       1.000000
    warp_lane_utilization:                 1.000000
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  491520.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 491520.000000
Schedule features for Y
    num_realizations:                      1.000000
    num_productions:                       1.000000
    points_computed_per_realization:       3932160.000000
    points_computed_per_production:        3932160.000000
    points_computed_total:                 3932160.000000
    points_computed_minimum:               3932160.000000
    innermost_loop_extent:                 2.000000
    innermost_pure_loop_extent:            2.000000
    unrolled_loop_extent:                  2.000000
    inner_parallelism:                     480.000000
    outer_parallelism:                     1.000000
    bytes_at_realization:                  15728640.000000
    bytes_at_production:                   15728640.000000
    bytes_at_root:                         15728640.000000
    innermost_bytes_at_realization:        6144.000000
    innermost_bytes_at_production:         6144.000000
    innermost_bytes_at_root:               6144.000000
    inlined_calls:                         0.000000
    unique_bytes_read_per_realization:     11796480.000000
    unique_lines_read_per_realization:     7680.000000
    allocation_bytes_read_per_realization: 11796480.000000
    working_set:                           0.000000
    vector_size:                           4.000000
    native_vector_size:                    4.000000
    num_vectors:                           983040.000000
    num_scalars:                           0.000000
    scalar_loads_per_vector:               0.000000
    vector_loads_per_vector:               3.000000
    scalar_loads_per_scalar:               3.000000
    bytes_at_task:                         32768.000000
    innermost_bytes_at_task:               512.000000
    unique_bytes_read_per_vector:          12.000000
    unique_lines_read_per_vector:          3.000000
    unique_bytes_read_per_task:            24576.000000
    unique_lines_read_per_task:            192.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             77334528.000000
    working_set_at_realization:            77334528.000000
    working_set_at_root:                   77334528.000000
    num_warps:                             15360.000000
    block_occupancy:                       1.000000
    warp_lane_utilization:                 1.000000
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  0.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 491520.000000
State with cost 0.000000:
 gpu_none
realize: output [1536, 2560, 3] with 1 stages
realize: equalize [1536, 2560] with 1 stages
realize: cdf [256] with 2 stages
realize: hist [256] with 2 stages
realize: hist_rows [256, 2560c] with 2 stages
realize: Cr [1536, 2560] with 1 stages
realize: Cb [1536, 2560] with 1 stages
realize: Y [1536, 2560] with 1 stages
Y 12 40 (0, 0) t gpu_block
 Y 16c 64c (0, 0) t gpu_thread
  Y 2c 1c (0, 0) t gpu_serial
   Y 4vc 1c (0, 0) *
Cb 3 160 (0, 0) t gpu_block
 Cb 64c 16c (0, 0) t gpu_thread
  Cb 2c 1c (0, 0) t gpu_serial
   Cb 4vc 1c (0, 0) *
Cr 3 80 (0, 0) t gpu_block
 Cr 32c 32c (0, 0) t gpu_thread
  Cr 4c 1c (0, 0) t gpu_serial
   Cr 4vc 1c (0, 0) *
hist_rows 8 5c (0, 0) t gpu_block
 hist_rows 16c 64c (0, 0) t gpu_thread
  hist_rows 2c 8c (0, 0) t gpu_serial
   hist_rows 1vc 1c (0, 0) *
hist_rows 1c 5c (-1, 0) t gpu_block
 hist_rows 1c 64c (-1, 0) t gpu_thread
  hist_rows 1536c 8c (-1, 0) t *
hist 4 (0, 0) t gpu_block
 hist 64c (0, 0) t gpu_thread
  hist 1c (0, 0) t gpu_serial
   hist 1vc (0, 0) *
hist 1c 4 (1, 0) t gpu_block
 hist 1c 64c (1, 0) t gpu_thread
  hist 2560c 1c (1, 0) t gpu_serial
   hist 1c 1vc (1, 0) *
cdf 4 (0, 0) t gpu_block
 cdf 64c (0, 0) t gpu_thread
  cdf 1c (0, 0) t gpu_serial
   cdf 1vc (0, 0) *
cdf 1c (-1, 0) t gpu_block
 cdf 1c (-1, 0) t gpu_thread
  cdf 255c (-1, 0) t *
equalize 24 10 (0, 0) t gpu_block
 equalize 16c 64c (0, 0) t gpu_thread
  equalize 1c 4c (0, 0) t gpu_serial
   equalize 4vc 1c (0, 0) *
output 6 320 1 (0, 0) t gpu_block
 output 64c 8c 2 (0, 0) t gpu_thread
  output 1c 1c 2c (0, 0) t gpu_serial
   output 4vc 1c 1c (0, 0) *
Func output = get_pipeline().get_func(8);
Func equalize = get_pipeline().get_func(7);
Func cdf = get_pipeline().get_func(6);
Func hist = get_pipeline().get_func(5);
Func hist_rows = get_pipeline().get_func(4);
Func Cr = get_pipeline().get_func(3);
Func Cb = get_pipeline().get_func(2);
Func Y = get_pipeline().get_func(1);
Var c(output.get_schedule().dims()[2].var), ci("ci"), x(output.get_schedule().dims()[0].var), xi("xi"), xii("xii"), xiii("xiii"), y(output.get_schedule().dims()[1].var), yi("yi"), yii("yii");
RVar r14_x(cdf.update(0).get_schedule().dims()[0].var), r4_x(hist_rows.update(0).get_schedule().dims()[0].var), r9_x(hist.update(0).get_schedule().dims()[0].var);
output
    .split(x, x, xi, 256, TailStrategy::ShiftInwards)
    .split(y, y, yi, 8, TailStrategy::ShiftInwards)
    .split(xi, xi, xii, 4, TailStrategy::ShiftInwards)
    .split(c, c, ci, 2, TailStrategy::ShiftInwards)
    .unroll(ci)
    .vectorize(xii)
    .compute_root()
    .reorder(xii, ci, xi, yi, c, x, y)
    .gpu_blocks(y)
    .gpu_blocks(x)
    .split(xi, xi_serial_outer, xi, 64)
    .gpu_threads(xi)
    .split(yi, yi_serial_outer, yi, 8)
    .gpu_threads(yi)
    .split(c, c_serial_outer, c, 2)
    .gpu_threads(c);
equalize
    .split(x, x, xi, 64, TailStrategy::ShiftInwards)
    .split(y, y, yi, 256, TailStrategy::ShiftInwards)
    .split(xi, xi, xii, 4, TailStrategy::ShiftInwards)
    .split(yi, yi, yii, 4, TailStrategy::ShiftInwards)
    .unroll(yii)
    .vectorize(xii)
    .compute_root()
    .reorder(xii, yii, xi, yi, x, y)
    .gpu_blocks(y)
    .gpu_blocks(x)
    .split(xi, xi_serial_outer, xi, 16)
    .gpu_threads(xi)
    .split(yi, yi_serial_outer, yi, 64)
    .gpu_threads(yi);
cdf
    .split(x, x, xi, 64, TailStrategy::ShiftInwards)
    .compute_root()
    .reorder(xi, x)
    .gpu_blocks(x)
    .split(xi, xi_serial_outer, xi, 64)
    .gpu_threads(xi);
cdf.update(0)
    .reorder(r14_x);
hist
    .split(x, x, xi, 64, TailStrategy::ShiftInwards)
    .compute_root()
    .reorder(xi, x)
    .gpu_blocks(x)
    .split(xi, xi_serial_outer, xi, 64)
    .gpu_threads(xi);
hist.update(0)
    .split(x, x, xi, 64, TailStrategy::GuardWithIf)
    .reorder(r9_x, xi, x)
    .gpu_blocks(x)
    .split(xi, xi_serial_outer, xi, 64)
    .gpu_threads(xi);
hist_rows
    .split(x, x, xi, 32, TailStrategy::ShiftInwards)
    .split(y, y, yi, 512, TailStrategy::ShiftInwards)
    .split(xi, xi, xii, 2, TailStrategy::ShiftInwards)
    .split(yi, yi, yii, 8, TailStrategy::ShiftInwards)
    .unroll(xii)
    .unroll(yii)
    .compute_root()
    .reorder(xii, yii, xi, yi, x, y)
    .gpu_blocks(y)
    .gpu_blocks(x)
    .split(xi, xi_serial_outer, xi, 16)
    .gpu_threads(xi)
    .split(yi, yi_serial_outer, yi, 64)
    .gpu_threads(yi);
hist_rows.update(0)
    .split(y, y, yi, 512, TailStrategy::GuardWithIf)
    .split(yi, yi, yii, 8, TailStrategy::GuardWithIf)
    .reorder(r4_x, yii, yi, y)
    .gpu_blocks(y)
    .split(yi, yi_serial_outer, yi, 64)
    .gpu_threads(yi);
Cr
    .split(x, x, xi, 512, TailStrategy::ShiftInwards)
    .split(y, y, yi, 32, TailStrategy::ShiftInwards)
    .split(xi, xi, xii, 16, TailStrategy::ShiftInwards)
    .split(xii, xii, xiii, 4, TailStrategy::ShiftInwards)
    .unroll(xii)
    .vectorize(xiii)
    .compute_root()
    .reorder(xiii, xii, xi, yi, x, y)
    .gpu_blocks(y)
    .gpu_blocks(x)
    .split(xi, xi_serial_outer, xi, 32)
    .gpu_threads(xi)
    .split(yi, yi_serial_outer, yi, 32)
    .gpu_threads(yi);
Cb
    .split(x, x, xi, 512, TailStrategy::ShiftInwards)
    .split(y, y, yi, 16, TailStrategy::ShiftInwards)
    .split(xi, xi, xii, 8, TailStrategy::ShiftInwards)
    .split(xii, xii, xiii, 4, TailStrategy::ShiftInwards)
    .unroll(xii)
    .vectorize(xiii)
    .compute_root()
    .reorder(xiii, xii, xi, yi, x, y)
    .gpu_blocks(y)
    .gpu_blocks(x)
    .split(xi, xi_serial_outer, xi, 64)
    .gpu_threads(xi)
    .split(yi, yi_serial_outer, yi, 16)
    .gpu_threads(yi);
Y
    .split(x, x, xi, 128, TailStrategy::ShiftInwards)
    .split(y, y, yi, 64, TailStrategy::ShiftInwards)
    .split(xi, xi, xii, 8, TailStrategy::ShiftInwards)
    .split(xii, xii, xiii, 4, TailStrategy::ShiftInwards)
    .unroll(xii)
    .vectorize(xiii)
    .compute_root()
    .reorder(xiii, xii, xi, yi, x, y)
    .gpu_blocks(y)
    .gpu_blocks(x)
    .split(xi, xi_serial_outer, xi, 16)
    .gpu_threads(xi)
    .split(yi, yi_serial_outer, yi, 64)
    .gpu_threads(yi);
Creating initial loop nests...
Injecting realization of { output }
Injecting realization of { equalize }
Injecting realization of { cdf }
Injecting realization of { hist }
Injecting realization of { hist_rows }
Injecting realization of { Cr }
Injecting realization of { Cb }
Injecting realization of { Y }
Inlining input_im
Skipping injecting memoization...
Injecting tracing...
Adding checks for parameters
Computing bounds of each function's value
Adding checks for images
Performing computation bounds inference...
Removing extern loops...
Performing sliding window optimization...
Simplifying correlated differences...
Performing allocation bounds inference...
Removing code that depends on undef values...
Uniquifying variable names...
Simplifying...
Performing storage folding optimization...
Injecting debug_to_file calls...
Injecting prefetches...
Dynamically skipping stages...
Forking asynchronous producers...
Destructuring tuple-valued realizations...
Canonicalizing GPU var names...
Performing storage flattening...
Unpacking buffer arguments...
Skipping rewriting memoized allocations...
Selecting a GPU API for GPU loops...
Injecting host <-> dev buffer copies...
Selecting a GPU API for extern stages...
Simplifying...
Reduce prefetch dimension...
Lowering after reduce prefetch dimension:
assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.type = _halide_buffer_get_type(input.buffer)
let input.dimensions = _halide_buffer_get_dimensions(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.extent.0 = _halide_buffer_get_extent(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.extent.1 = _halide_buffer_get_extent(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let input.min.2 = _halide_buffer_get_min(input.buffer, 2)
let input.extent.2 = _halide_buffer_get_extent(input.buffer, 2)
let input.stride.2 = _halide_buffer_get_stride(input.buffer, 2)
let output = _halide_buffer_get_host(output.buffer)
let output.type = _halide_buffer_get_type(output.buffer)
let output.dimensions = _halide_buffer_get_dimensions(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
let output.min.2 = _halide_buffer_get_min(output.buffer, 2)
let output.extent.2 = _halide_buffer_get_extent(output.buffer, 2)
let output.stride.2 = _halide_buffer_get_stride(output.buffer, 2)
let input.extent.0.required = (max((output.extent.0 + output.min.0), (min((min(output.min.0, 0) + ((((max((output.extent.0 + output.min.0), 1536) - min(output.min.0, 0)) + -1)/128)*128)), 1408) + 128)) - min((min((min(output.extent.0, 512) + output.min.0), 512) + -512), output.min.0))
let input.min.0.required = min((min((min(output.extent.0, 512) + output.min.0), 512) + -512), output.min.0)
let input.extent.1.required = (max((output.extent.1 + output.min.1), (min((min(output.min.1, 0) + ((((max((output.extent.1 + output.min.1), 2560) - min(output.min.1, 0)) + -1)/64)*64)), 2496) + 64)) - min(min((min((min(output.extent.1, 16) + output.min.1), 16) + -16), output.min.1), ((output.extent.1 + output.min.1) + -32)))
let input.min.1.required = min(min((min((min(output.extent.1, 16) + output.min.1), 16) + -16), output.min.1), ((output.extent.1 + output.min.1) + -32))
let output.extent.0.required.s = (min((((output.extent.0 + -1)/256)*256), (output.extent.0 + -256)) - min(output.extent.0, 256))
let output.extent.1.required.s = (min((((output.extent.1 + -1)/8)*8), (output.extent.1 + -8)) - min(output.extent.1, 8))
let output.extent.2.required.s = (min((min(((output.extent.2 + -1)/2), ((((output.extent.2 + -1)/4)*2) + 1))*2), (output.extent.2 + -2)) - min(output.extent.2, 2))
let output.stride.2.required = ((output.extent.0.required.s + 512)*(output.extent.1.required.s + 16))
if (_halide_buffer_is_bounds_query(input.buffer)) {
  _halide_buffer_init(input.buffer, _halide_buffer_get_shape(input.buffer), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 1, 8, 3, make_struct((halide_dimension_t *), input.min.0.required, input.extent.0.required, 1, 0, input.min.1.required, input.extent.1.required, input.extent.0.required, 0, 0, 3, (input.extent.0.required*input.extent.1.required), 0), (uint64)0)
}
if (_halide_buffer_is_bounds_query(output.buffer)) {
  _halide_buffer_init(output.buffer, _halide_buffer_get_shape(output.buffer), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 1, 8, 3, make_struct((halide_dimension_t *), ((min(output.extent.0, 256) + output.min.0) + -256), (output.extent.0.required.s + 512), 1, 0, ((min(output.extent.1, 8) + output.min.1) + -8), (output.extent.1.required.s + 16), (output.extent.0.required.s + 512), 0, ((min(output.extent.2, 2) + output.min.2) + -2), (output.extent.2.required.s + 4), output.stride.2.required, 0), (uint64)0)
}
if (!(_halide_buffer_is_bounds_query(input.buffer) || _halide_buffer_is_bounds_query(output.buffer))) {
  assert((input.type == (uint32)67585), halide_error_bad_type("Input buffer input", input.type, (uint32)67585))
  assert((input.dimensions == 3), halide_error_bad_dimensions("Input buffer input", input.dimensions, 3))
  assert((output.type == (uint32)67585), halide_error_bad_type("Output buffer output", output.type, (uint32)67585))
  assert((output.dimensions == 3), halide_error_bad_dimensions("Output buffer output", output.dimensions, 3))
  assert(((input.min.0 <= input.min.0.required) && ((input.extent.0.required + input.min.0.required) <= (input.extent.0 + input.min.0))), halide_error_access_out_of_bounds("Input buffer input", 0, input.min.0.required, ((input.extent.0.required + input.min.0.required) + -1), input.min.0, ((input.extent.0 + input.min.0) + -1)))
  assert((0 <= input.extent.0), halide_error_buffer_extents_negative("Input buffer input", 0, input.extent.0))
  assert(((input.min.1 <= input.min.1.required) && ((input.extent.1.required + input.min.1.required) <= (input.extent.1 + input.min.1))), halide_error_access_out_of_bounds("Input buffer input", 1, input.min.1.required, ((input.extent.1.required + input.min.1.required) + -1), input.min.1, ((input.extent.1 + input.min.1) + -1)))
  assert((0 <= input.extent.1), halide_error_buffer_extents_negative("Input buffer input", 1, input.extent.1))
  assert(((input.min.2 <= 0) && (3 <= (input.extent.2 + input.min.2))), halide_error_access_out_of_bounds("Input buffer input", 2, 0, 2, input.min.2, ((input.extent.2 + input.min.2) + -1)))
  assert((0 <= input.extent.2), halide_error_buffer_extents_negative("Input buffer input", 2, input.extent.2))
  assert(((256 <= output.extent.0) && ((((min(output.extent.0, 256) + output.min.0) + output.extent.0.required.s) + 256) <= (output.extent.0 + output.min.0))), halide_error_access_out_of_bounds("Output buffer output", 0, ((min(output.extent.0, 256) + output.min.0) + -256), (((min(output.extent.0, 256) + output.min.0) + output.extent.0.required.s) + 255), output.min.0, ((output.extent.0 + output.min.0) + -1)))
  assert(((8 <= output.extent.1) && ((((min(output.extent.1, 8) + output.min.1) + output.extent.1.required.s) + 8) <= (output.extent.1 + output.min.1))), halide_error_access_out_of_bounds("Output buffer output", 1, ((min(output.extent.1, 8) + output.min.1) + -8), (((min(output.extent.1, 8) + output.min.1) + output.extent.1.required.s) + 7), output.min.1, ((output.extent.1 + output.min.1) + -1)))
  assert(((2 <= output.extent.2) && ((((min(output.extent.2, 2) + output.min.2) + output.extent.2.required.s) + 2) <= (output.extent.2 + output.min.2))), halide_error_access_out_of_bounds("Output buffer output", 2, ((min(output.extent.2, 2) + output.min.2) + -2), (((min(output.extent.2, 2) + output.min.2) + output.extent.2.required.s) + 1), output.min.2, ((output.extent.2 + output.min.2) + -1)))
  assert((input.stride.0 == 1), halide_error_constraint_violated("input.stride.0", input.stride.0, "1", 1))
  assert((output.stride.0 == 1), halide_error_constraint_violated("output.stride.0", output.stride.0, "1", 1))
  let input.total_extent.1 = (int64(input.extent.1)*int64(input.extent.0))
  let input.total_extent.2 = (input.total_extent.1*int64(input.extent.2))
  let output.total_extent.1 = (int64(output.extent.1)*int64(output.extent.0))
  let output.total_extent.2 = (output.total_extent.1*int64(output.extent.2))
  assert((abs(int64(input.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("input", abs(int64(input.extent.0)), (uint64)2147483647))
  assert((abs((int64(input.extent.1)*int64(input.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("input", abs((int64(input.extent.1)*int64(input.stride.1))), (uint64)2147483647))
  assert((input.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("input", input.total_extent.1, (int64)2147483647))
  assert((abs((int64(input.extent.2)*int64(input.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("input", abs((int64(input.extent.2)*int64(input.stride.2))), (uint64)2147483647))
  assert((input.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("input", input.total_extent.2, (int64)2147483647))
  assert((abs(int64(output.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("output", abs(int64(output.extent.0)), (uint64)2147483647))
  assert((abs((int64(output.extent.1)*int64(output.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("output", abs((int64(output.extent.1)*int64(output.stride.1))), (uint64)2147483647))
  assert((output.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("output", output.total_extent.1, (int64)2147483647))
  assert((abs((int64(output.extent.2)*int64(output.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("output", abs((int64(output.extent.2)*int64(output.stride.2))), (uint64)2147483647))
  assert((output.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("output", output.total_extent.2, (int64)2147483647))
  let Y.y.min_realized = min((min((min((min((min(output.extent.1, 16) + 16), output.extent.1) + output.min.1), 32) + 224), (output.extent.1 + output.min.1)) + -256), output.min.1)
  let Y.y.extent_realized = (max((output.extent.1 + output.min.1), 2560) - Y.y.min_realized)
  let Y.x.min_realized = input.min.0.required
  let Y.x.extent_realized = (max((output.extent.0 + output.min.0), 1536) - input.min.0.required)
  allocate Y[float32 * Y.x.extent_realized * Y.y.extent_realized] if (uint1)0
  let Y.buffer = (let t24 = make_struct((halide_dimension_t *), Y.x.min_realized, Y.x.extent_realized, 1, 0, Y.y.min_realized, Y.y.extent_realized, Y.x.extent_realized, 0) in _halide_buffer_init(alloca(size_of_halide_buffer_t()), t24, reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 2, 32, 2, t24, (uint64)0))
  register_destructor("halide_device_free_as_destructor", Y.buffer)
  let Y.s0.x.x.loop_extent.s = (max((output.extent.0 + output.min.0), 1536) - min(output.min.0, 0))
  let Y.s0.y.y.loop_extent.s = (max((output.extent.1 + output.min.1), 2560) - min(output.min.1, 0))
  produce Y {
    let halide_device_malloc_result$7 = halide_device_malloc(Y.buffer, halide_cuda_device_interface())
    assert((halide_device_malloc_result$7 == 0), halide_device_malloc_result$7)
    let halide_copy_to_device_result$1 = halide_copy_to_device(input.buffer, halide_cuda_device_interface())
    assert((halide_copy_to_device_result$1 == 0), halide_copy_to_device_result$1)
    gpu_block<CUDA> (Y.s0.y.y.__block_id_y, 0, ((Y.s0.y.y.loop_extent.s + 63)/64)) {
      let Y.s0.y.yi.base = min(likely_if_innermost((min(output.min.1, 0) + (Y.s0.y.y.__block_id_y*64))), (max((output.extent.1 + output.min.1), 2560) + -64))
      gpu_block<CUDA> (Y.s0.x.x.__block_id_x, 0, ((Y.s0.x.x.loop_extent.s + 127)/128)) {
        let Y.s0.x.xi.base = min(likely_if_innermost((min(output.min.0, 0) + (Y.s0.x.x.__block_id_x*128))), (max((output.extent.0 + output.min.0), 1536) + -128))
        gpu_thread<CUDA> (Y.s0.y.yi.yi.__thread_id_y, 0, 64) {
          gpu_thread<CUDA> (Y.s0.x.xi.xi.xi.__thread_id_x, 0, 16) {
            unrolled (Y.s0.x.xi.xii.xii, 0, 2) {
              vectorized (Y.s0.x.xi.xii.xiii, 0, 4) {
                Y[((((Y.s0.y.yi.base + Y.s0.y.yi.yi.__thread_id_y) - Y.y.min_realized)*Y.x.extent_realized) + ((((Y.s0.x.xi.xi.xi.__thread_id_x*8) + ((Y.s0.x.xi.xii.xii*4) + Y.s0.x.xi.xii.xiii)) + Y.s0.x.xi.base) - Y.x.min_realized))] = (let t11.s = ((Y.s0.x.xi.xi.xi.__thread_id_x*8) + ((Y.s0.x.xi.xii.xii*4) + Y.s0.x.xi.xii.xiii)) in ((float32(input[(((input.stride.2*2) + (((Y.s0.y.yi.base + Y.s0.y.yi.yi.__thread_id_y)*input.stride.1) + (Y.s0.x.xi.base + t11.s))) - ((input.min.2*input.stride.2) + ((input.min.1*input.stride.1) + input.min.0)))])*0.114000f) + ((float32(input[((((Y.s0.y.yi.base + Y.s0.y.yi.yi.__thread_id_y)*input.stride.1) + (Y.s0.x.xi.base + t11.s)) - ((input.min.2*input.stride.2) + ((input.min.1*input.stride.1) + input.min.0)))])*0.299000f) + (float32(input[(((((Y.s0.y.yi.base + Y.s0.y.yi.yi.__thread_id_y)*input.stride.1) + (Y.s0.x.xi.base + t11.s)) + input.stride.2) - ((input.min.2*input.stride.2) + ((input.min.1*input.stride.1) + input.min.0)))])*0.587000f))))
              }
            }
          }
        }
      }
    }
    _halide_buffer_set_device_dirty(Y.buffer, (uint1)1)
  }
  allocate Cb[float32 * max(output.extent.0, 512) * max(output.extent.1, 16)] if (uint1)0
  let Cb.buffer = (let t23 = make_struct((halide_dimension_t *), ((min(output.extent.0, 512) + output.min.0) + -512), max(output.extent.0, 512), 1, 0, ((min(output.extent.1, 16) + output.min.1) + -16), max(output.extent.1, 16), max(output.extent.0, 512), 0) in _halide_buffer_init(alloca(size_of_halide_buffer_t()), t23, reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 2, 32, 2, t23, (uint64)0))
  register_destructor("halide_device_free_as_destructor", Cb.buffer)
  produce Cb {
    consume Y {
      let halide_device_malloc_result$6 = halide_device_malloc(Cb.buffer, halide_cuda_device_interface())
      assert((halide_device_malloc_result$6 == 0), halide_device_malloc_result$6)
      gpu_block<CUDA> (Cb.s0.y.y.__block_id_y, 0, ((output.extent.1 + 15)/16)) {
        let Cb.s0.y.yi.base = min(likely_if_innermost(((Cb.s0.y.y.__block_id_y*16) + output.min.1)), ((output.extent.1 + output.min.1) + -16))
        gpu_block<CUDA> (Cb.s0.x.x.__block_id_x, 0, ((output.extent.0 + 511)/512)) {
          let Cb.s0.x.xi.base = min(likely_if_innermost(((Cb.s0.x.x.__block_id_x*512) + output.min.0)), ((output.extent.0 + output.min.0) + -512))
          gpu_thread<CUDA> (Cb.s0.y.yi.yi.__thread_id_y, 0, 16) {
            gpu_thread<CUDA> (Cb.s0.x.xi.xi.xi.__thread_id_x, 0, 64) {
              unrolled (Cb.s0.x.xi.xii.xii, 0, 2) {
                vectorized (Cb.s0.x.xi.xii.xiii, 0, 4) {
                  Cb[(((max(output.extent.0, 512)*(((Cb.s0.y.yi.base + Cb.s0.y.yi.yi.__thread_id_y) - (min(output.extent.1, 16) + output.min.1)) + 16)) + ((((Cb.s0.x.xi.xi.xi.__thread_id_x*8) + ((Cb.s0.x.xi.xii.xii*4) + Cb.s0.x.xi.xii.xiii)) + Cb.s0.x.xi.base) - (min(output.extent.0, 512) + output.min.0))) + 512)] = (let t13.s = ((Cb.s0.x.xi.xi.xi.__thread_id_x*8) + ((Cb.s0.x.xi.xii.xii*4) + Cb.s0.x.xi.xii.xiii)) in (((float32(input[(((input.stride.2*2) + (((Cb.s0.y.yi.base + Cb.s0.y.yi.yi.__thread_id_y)*input.stride.1) + (Cb.s0.x.xi.base + t13.s))) - ((input.min.2*input.stride.2) + ((input.min.1*input.stride.1) + input.min.0)))]) - Y[((((Cb.s0.y.yi.base + Cb.s0.y.yi.yi.__thread_id_y) - Y.y.min_realized)*Y.x.extent_realized) + ((Cb.s0.x.xi.base + t13.s) - Y.x.min_realized))])*0.564000f) + 128.000000f))
                }
              }
            }
          }
        }
      }
      _halide_buffer_set_device_dirty(Cb.buffer, (uint1)1)
    }
  }
  allocate Cr[float32 * max(output.extent.0, 512) * max(output.extent.1, 32)] if (uint1)0
  let Cr.buffer = (let t22 = make_struct((halide_dimension_t *), ((min(output.extent.0, 512) + output.min.0) + -512), max(output.extent.0, 512), 1, 0, ((min(output.extent.1, 32) + output.min.1) + -32), max(output.extent.1, 32), max(output.extent.0, 512), 0) in _halide_buffer_init(alloca(size_of_halide_buffer_t()), t22, reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 2, 32, 2, t22, (uint64)0))
  register_destructor("halide_device_free_as_destructor", Cr.buffer)
  produce Cr {
    consume Y {
      let halide_device_malloc_result$5 = halide_device_malloc(Cr.buffer, halide_cuda_device_interface())
      assert((halide_device_malloc_result$5 == 0), halide_device_malloc_result$5)
      gpu_block<CUDA> (Cr.s0.y.y.__block_id_y, 0, ((output.extent.1 + 31)/32)) {
        let Cr.s0.y.yi.base = min(likely_if_innermost(((Cr.s0.y.y.__block_id_y*32) + output.min.1)), ((output.extent.1 + output.min.1) + -32))
        gpu_block<CUDA> (Cr.s0.x.x.__block_id_x, 0, ((output.extent.0 + 511)/512)) {
          let Cr.s0.x.xi.base = min(likely_if_innermost(((Cr.s0.x.x.__block_id_x*512) + output.min.0)), ((output.extent.0 + output.min.0) + -512))
          gpu_thread<CUDA> (Cr.s0.y.yi.yi.__thread_id_y, 0, 32) {
            gpu_thread<CUDA> (Cr.s0.x.xi.xi.xi.__thread_id_x, 0, 32) {
              unrolled (Cr.s0.x.xi.xii.xii, 0, 4) {
                vectorized (Cr.s0.x.xi.xii.xiii, 0, 4) {
                  Cr[(((max(output.extent.0, 512)*(((Cr.s0.y.yi.base + Cr.s0.y.yi.yi.__thread_id_y) - (min(output.extent.1, 32) + output.min.1)) + 32)) + ((((Cr.s0.x.xi.xi.xi.__thread_id_x*16) + ((Cr.s0.x.xi.xii.xii*4) + Cr.s0.x.xi.xii.xiii)) + Cr.s0.x.xi.base) - (min(output.extent.0, 512) + output.min.0))) + 512)] = (let t15.s = ((Cr.s0.x.xi.xi.xi.__thread_id_x*16) + ((Cr.s0.x.xi.xii.xii*4) + Cr.s0.x.xi.xii.xiii)) in (((float32(input[((((Cr.s0.y.yi.base + Cr.s0.y.yi.yi.__thread_id_y)*input.stride.1) + (Cr.s0.x.xi.base + t15.s)) - ((input.min.2*input.stride.2) + ((input.min.1*input.stride.1) + input.min.0)))]) - Y[((((Cr.s0.y.yi.base + Cr.s0.y.yi.yi.__thread_id_y) - Y.y.min_realized)*Y.x.extent_realized) + ((Cr.s0.x.xi.base + t15.s) - Y.x.min_realized))])*0.713000f) + 128.000000f))
                }
              }
            }
          }
        }
      }
      _halide_buffer_set_device_dirty(Cr.buffer, (uint1)1)
    }
  }
  allocate hist_rows[int32 * 256 * 2560] if (uint1)0
  let hist_rows.buffer = (let t21 = make_struct((halide_dimension_t *), 0, 256, 1, 0, 0, 2560, 256, 0) in _halide_buffer_init(alloca(size_of_halide_buffer_t()), t21, reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 0, 32, 2, t21, (uint64)0))
  register_destructor("halide_device_free_as_destructor", hist_rows.buffer)
  produce hist_rows {
    consume Y {
      if (likely((uint1)1)) {
        let halide_device_malloc_result$3 = halide_device_malloc(hist_rows.buffer, halide_cuda_device_interface())
        assert((halide_device_malloc_result$3 == 0), halide_device_malloc_result$3)
        gpu_block<CUDA> (hist_rows.s0.y.y.__block_id_y, 0, 5) {
          gpu_block<CUDA> (hist_rows.s0.x.x.__block_id_x, 0, 8) {
            gpu_thread<CUDA> (hist_rows.s0.y.yi.yi.yi.__thread_id_y, 0, 64) {
              gpu_thread<CUDA> (hist_rows.s0.x.xi.xi.xi.__thread_id_x, 0, 16) {
                unrolled (hist_rows.s0.y.yi.yii, 0, 8) {
                  unrolled (hist_rows.s0.x.xi.xii, 0, 2) {
                    hist_rows[(((min(likely_if_innermost((hist_rows.s0.y.y.__block_id_y*512)), 2048) + ((hist_rows.s0.y.yi.yi.yi.__thread_id_y*8) + hist_rows.s0.y.yi.yii))*256) + (min(likely_if_innermost((hist_rows.s0.x.x.__block_id_x*32)), 224) + ((hist_rows.s0.x.xi.xi.xi.__thread_id_x*2) + hist_rows.s0.x.xi.xii)))] = 0
                  }
                }
              }
            }
          }
        }
        _halide_buffer_set_device_dirty(hist_rows.buffer, (uint1)1)
        gpu_block<CUDA> (hist_rows.s1.y.y.__block_id_x, 0, 5) {
          gpu_thread<CUDA> (hist_rows.s1.y.yi.yi.yi.__thread_id_x, 0, 64) {
            for (hist_rows.s1.y.yi.yii, 0, 8) {
              let hist_rows.s1.y.rebased = ((hist_rows.s1.y.y.__block_id_x*512) + ((hist_rows.s1.y.yi.yi.yi.__thread_id_x*8) + hist_rows.s1.y.yi.yii))
              for (hist_rows.s1.r4$x, 0, 1536) {
                hist_rows[((hist_rows.s1.y.rebased*256) + int32(max(min(Y[(((hist_rows.s1.y.rebased - Y.y.min_realized)*Y.x.extent_realized) + (hist_rows.s1.r4$x - Y.x.min_realized))], 255.000000f), 0.000000f)))] = (hist_rows[((hist_rows.s1.y.rebased*256) + int32(max(min(Y[(((hist_rows.s1.y.rebased - Y.y.min_realized)*Y.x.extent_realized) + (hist_rows.s1.r4$x - Y.x.min_realized))], 255.000000f), 0.000000f)))] + 1)
              }
            }
          }
        }
      }
    }
  }
  let hist.buffer = (let t20 = make_struct((halide_dimension_t *), 0, 256, 1, 0) in _halide_buffer_init(alloca(size_of_halide_buffer_t()), t20, reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 0, 32, 1, t20, (uint64)0))
  let halide_device_and_host_malloc_result$1 = halide_device_and_host_malloc(hist.buffer, halide_cuda_device_interface())
  assert((halide_device_and_host_malloc_result$1 == 0), halide_device_and_host_malloc_result$1)
  register_destructor("halide_device_and_host_free_as_destructor", hist.buffer)
  allocate hist[int32 * 256] in Heap
   custom_new { _halide_buffer_get_host(hist.buffer) }
   custom_delete { halide_device_host_nop_free(hist); }
  produce hist {
    let halide_device_malloc_result$2 = halide_device_malloc(hist.buffer, halide_cuda_device_interface())
    assert((halide_device_malloc_result$2 == 0), halide_device_malloc_result$2)
    gpu_block<CUDA> (hist.s0.x.x.__block_id_x, 0, 4) {
      gpu_thread<CUDA> (hist.s0.x.xi.xi.__thread_id_x, 0, 64) {
        hist[(min(likely_if_innermost((hist.s0.x.x.__block_id_x*64)), 192) + hist.s0.x.xi.xi.__thread_id_x)] = 0
      }
    }
    _halide_buffer_set_device_dirty(hist.buffer, (uint1)1)
    consume hist_rows {
      let halide_device_malloc_result$4 = halide_device_malloc(hist_rows.buffer, halide_cuda_device_interface())
      assert((halide_device_malloc_result$4 == 0), halide_device_malloc_result$4)
      gpu_block<CUDA> (hist.s1.x.x.__block_id_x, 0, 4) {
        gpu_thread<CUDA> (hist.s1.x.xi.xi.__thread_id_x, 0, 64) {
          if (likely((uint1)1)) {
            for (hist.s1.r9$x, 0, 2560) {
              hist[((hist.s1.x.x.__block_id_x*64) + hist.s1.x.xi.xi.__thread_id_x)] = (hist[((hist.s1.x.x.__block_id_x*64) + hist.s1.x.xi.xi.__thread_id_x)] + hist_rows[((hist.s1.r9$x*256) + ((hist.s1.x.x.__block_id_x*64) + hist.s1.x.xi.xi.__thread_id_x))])
            }
          }
        }
      }
      let halide_device_free_result$1 = halide_device_free(hist_rows.buffer)
      assert((halide_device_free_result$1 == 0), halide_device_free_result$1)
    }
  }
  let cdf.buffer = (let t19 = make_struct((halide_dimension_t *), 0, 256, 1, 0) in _halide_buffer_init(alloca(size_of_halide_buffer_t()), t19, reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 0, 32, 1, t19, (uint64)0))
  let halide_device_and_host_malloc_result = halide_device_and_host_malloc(cdf.buffer, halide_cuda_device_interface())
  assert((halide_device_and_host_malloc_result == 0), halide_device_and_host_malloc_result)
  register_destructor("halide_device_and_host_free_as_destructor", cdf.buffer)
  allocate cdf[int32 * 256] in Heap
   custom_new { _halide_buffer_get_host(cdf.buffer) }
   custom_delete { halide_device_host_nop_free(cdf); }
  produce cdf {
    consume hist {
      let halide_device_malloc_result$1 = halide_device_malloc(cdf.buffer, halide_cuda_device_interface())
      assert((halide_device_malloc_result$1 == 0), halide_device_malloc_result$1)
      gpu_block<CUDA> (cdf.s0.x.x.__block_id_x, 0, 4) {
        gpu_thread<CUDA> (cdf.s0.x.xi.xi.__thread_id_x, 0, 64) {
          cdf[(min(likely_if_innermost((cdf.s0.x.x.__block_id_x*64)), 192) + cdf.s0.x.xi.xi.__thread_id_x)] = hist[0]
        }
      }
      _halide_buffer_set_device_dirty(cdf.buffer, (uint1)1)
    }
    consume hist {
      let halide_copy_to_host_result = halide_copy_to_host(cdf.buffer)
      assert((halide_copy_to_host_result == 0), halide_copy_to_host_result)
      let halide_copy_to_host_result$1 = halide_copy_to_host(hist.buffer)
      assert((halide_copy_to_host_result$1 == 0), halide_copy_to_host_result$1)
      for (cdf.s1.r14$x, 1, 255) {
        cdf[cdf.s1.r14$x] = (cdf[(cdf.s1.r14$x + -1)] + hist[cdf.s1.r14$x])
      }
      let halide_device_and_host_free_result$1 = halide_device_and_host_free(hist.buffer)
      assert((halide_device_and_host_free_result$1 == 0), halide_device_and_host_free_result$1)
      _halide_buffer_set_host_dirty(cdf.buffer, (uint1)1)
    }
  }
  allocate equalize[float32 * output.extent.0 * max(output.extent.1, 256)] if (uint1)0
  let equalize.buffer = (let t18 = make_struct((halide_dimension_t *), output.min.0, output.extent.0, 1, 0, ((min(output.extent.1, 256) + output.min.1) + -256), max(output.extent.1, 256), output.extent.0, 0) in _halide_buffer_init(alloca(size_of_halide_buffer_t()), t18, reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 2, 32, 2, t18, (uint64)0))
  register_destructor("halide_device_free_as_destructor", equalize.buffer)
  produce equalize {
    consume cdf {
      consume Y {
        let halide_device_malloc_result = halide_device_malloc(equalize.buffer, halide_cuda_device_interface())
        assert((halide_device_malloc_result == 0), halide_device_malloc_result)
        let halide_copy_to_device_result = halide_copy_to_device(cdf.buffer, halide_cuda_device_interface())
        assert((halide_copy_to_device_result == 0), halide_copy_to_device_result)
        gpu_block<CUDA> (equalize.s0.y.y.__block_id_y, 0, ((output.extent.1 + 255)/256)) {
          let equalize.s0.y.yi.base = min(likely_if_innermost(((equalize.s0.y.y.__block_id_y*256) + output.min.1)), ((output.extent.1 + output.min.1) + -256))
          gpu_block<CUDA> (equalize.s0.x.x.__block_id_x, 0, ((output.extent.0 + 63)/64)) {
            let equalize.s0.x.xi.base = min(likely_if_innermost(((equalize.s0.x.x.__block_id_x*64) + output.min.0)), ((output.extent.0 + output.min.0) + -64))
            gpu_thread<CUDA> (equalize.s0.y.yi.yi.yi.__thread_id_y, 0, 64) {
              gpu_thread<CUDA> (equalize.s0.x.xi.xi.xi.__thread_id_x, 0, 16) {
                unrolled (equalize.s0.y.yi.yii, 0, 4) {
                  vectorized (equalize.s0.x.xi.xii, 0, 4) {
                    equalize[(((((((equalize.s0.y.yi.yi.yi.__thread_id_y*4) + equalize.s0.y.yi.yii) + equalize.s0.y.yi.base) - (min(output.extent.1, 256) + output.min.1)) + 256)*output.extent.0) + ((((equalize.s0.x.xi.xi.xi.__thread_id_x*4) + equalize.s0.x.xi.xii) + equalize.s0.x.xi.base) - output.min.0))] = max(min(((255.000000f/float32((input.extent.0*input.extent.1)))*float32(cdf[int32(uint8(max(min(Y[((((((equalize.s0.y.yi.yi.yi.__thread_id_y*4) + equalize.s0.y.yi.yii) + equalize.s0.y.yi.base) - Y.y.min_realized)*Y.x.extent_realized) + ((((equalize.s0.x.xi.xi.xi.__thread_id_x*4) + equalize.s0.x.xi.xii) + equalize.s0.x.xi.base) - Y.x.min_realized))], 255.000000f), 0.000000f)))])), 255.000000f), 0.000000f)
                  }
                }
              }
            }
          }
        }
        let halide_device_free_result$4 = halide_device_free(Y.buffer)
        assert((halide_device_free_result$4 == 0), halide_device_free_result$4)
        let halide_device_and_host_free_result = halide_device_and_host_free(cdf.buffer)
        assert((halide_device_and_host_free_result == 0), halide_device_and_host_free_result)
        _halide_buffer_set_device_dirty(equalize.buffer, (uint1)1)
      }
    }
  }
  produce output {
    consume equalize {
      consume Cr {
        consume Cb {
          let halide_copy_to_device_result$2 = halide_copy_to_device(output.buffer, halide_cuda_device_interface())
          assert((halide_copy_to_device_result$2 == 0), halide_copy_to_device_result$2)
          gpu_block<CUDA> (output.s0.y.y.__block_id_y, 0, ((output.extent.1 + 7)/8)) {
            let output.s0.y.yi.base = min(likely_if_innermost(((output.s0.y.y.__block_id_y*8) + output.min.1)), ((output.extent.1 + output.min.1) + -8))
            gpu_block<CUDA> (output.s0.x.x.__block_id_x, 0, ((output.extent.0 + 255)/256)) {
              let output.s0.x.xi.base = min(likely_if_innermost(((output.s0.x.x.__block_id_x*256) + output.min.0)), ((output.extent.0 + output.min.0) + -256))
              for (output.s0.c.c.c_serial_outer, 0, ((output.extent.2 + 3)/4)) {
                gpu_thread<CUDA> (output.s0.c.c.c.__thread_id_z, 0, 2) {
                  if (likely((((output.s0.c.c.c_serial_outer*2) + output.s0.c.c.c.__thread_id_z) < ((output.extent.2 + 1)/2)))) {
                    let output.s0.c.ci.base = min(likely_if_innermost(((((output.s0.c.c.c_serial_outer*2) + output.s0.c.c.c.__thread_id_z)*2) + output.min.2)), ((output.extent.2 + output.min.2) + -2))
                    gpu_thread<CUDA> (output.s0.y.yi.yi.__thread_id_y, 0, 8) {
                      gpu_thread<CUDA> (output.s0.x.xi.xi.xi.__thread_id_x, 0, 64) {
                        unrolled (output.s0.c.ci, 0, 2) {
                          vectorized (output.s0.x.xi.xii, 0, 4) {
                            output[((((output.s0.c.ci + output.s0.c.ci.base)*output.stride.2) + (((output.s0.y.yi.base + output.s0.y.yi.yi.__thread_id_y)*output.stride.1) + (((output.s0.x.xi.xi.xi.__thread_id_x*4) + output.s0.x.xi.xii) + output.s0.x.xi.base))) - ((output.min.2*output.stride.2) + ((output.min.1*output.stride.1) + output.min.0)))] = (let output.s0.t4 = equalize[(((((output.s0.y.yi.base + output.s0.y.yi.yi.__thread_id_y) - (min(output.extent.1, 256) + output.min.1)) + 256)*output.extent.0) + ((((output.s0.x.xi.xi.xi.__thread_id_x*4) + output.s0.x.xi.xii) + output.s0.x.xi.base) - output.min.0))] in (let output.s0.t5 = Cr[(((max(output.extent.0, 512)*(((output.s0.y.yi.base + output.s0.y.yi.yi.__thread_id_y) - (min(output.extent.1, 32) + output.min.1)) + 32)) + ((((output.s0.x.xi.xi.xi.__thread_id_x*4) + output.s0.x.xi.xii) + output.s0.x.xi.base) - (min(output.extent.0, 512) + output.min.0))) + 512)] in (let output.s0.t6 = Cb[(((max(output.extent.0, 512)*(((output.s0.y.yi.base + output.s0.y.yi.yi.__thread_id_y) - (min(output.extent.1, 16) + output.min.1)) + 16)) + ((((output.s0.x.xi.xi.xi.__thread_id_x*4) + output.s0.x.xi.xii) + output.s0.x.xi.base) - (min(output.extent.0, 512) + output.min.0))) + 512)] in select(((output.s0.c.ci + output.s0.c.ci.base) == 0), uint8((max(min(((output.s0.t5*1.400000f) + output.s0.t4), 434.200012f), 179.199997f) + -179.199997f)), select(((output.s0.c.ci + output.s0.c.ci.base) == 1), uint8((max(min(((output.s0.t4 - (output.s0.t6*0.343000f)) - (output.s0.t5*0.711000f)), 120.087997f), -134.912003f) + 134.912003f)), uint8((max(min(((output.s0.t6*1.765000f) + output.s0.t4), 480.919983f), 225.919998f) + -225.919998f)))))))
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          _halide_buffer_set_device_dirty(output.buffer, (uint1)1)
          let halide_device_free_result$3 = halide_device_free(Cb.buffer)
          assert((halide_device_free_result$3 == 0), halide_device_free_result$3)
          let halide_device_free_result$2 = halide_device_free(Cr.buffer)
          assert((halide_device_free_result$2 == 0), halide_device_free_result$2)
          let halide_device_free_result = halide_device_free(equalize.buffer)
          assert((halide_device_free_result == 0), halide_device_free_result)
        }
      }
    }
  }
}

Simplifying correlated differences...
Unrolling...
Vectorizing...
Injecting per-block gpu synchronization...
Detecting vector interleavings...
Partitioning loops to simplify boundary conditions...
Trimming loops to the region over which they do something...
Injecting early frees...
Simplifying correlated differences...
Bounding small allocations...
Injecting warp shuffles...
Simplifying...
Lowering unsafe promises...
Lowering after final simplification:
assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.type = _halide_buffer_get_type(input.buffer)
let input.dimensions = _halide_buffer_get_dimensions(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.extent.0 = _halide_buffer_get_extent(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.extent.1 = _halide_buffer_get_extent(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let input.min.2 = _halide_buffer_get_min(input.buffer, 2)
let input.extent.2 = _halide_buffer_get_extent(input.buffer, 2)
let input.stride.2 = _halide_buffer_get_stride(input.buffer, 2)
let output = _halide_buffer_get_host(output.buffer)
let output.type = _halide_buffer_get_type(output.buffer)
let output.dimensions = _halide_buffer_get_dimensions(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
let output.min.2 = _halide_buffer_get_min(output.buffer, 2)
let output.extent.2 = _halide_buffer_get_extent(output.buffer, 2)
let output.stride.2 = _halide_buffer_get_stride(output.buffer, 2)
let input.extent.0.required = (max((output.extent.0 + output.min.0), (min((min(output.min.0, 0) + ((((max((output.extent.0 + output.min.0), 1536) - min(output.min.0, 0)) + -1)/128)*128)), 1408) + 128)) - min((min((min(output.extent.0, 512) + output.min.0), 512) + -512), output.min.0))
let input.min.0.required = min((min((min(output.extent.0, 512) + output.min.0), 512) + -512), output.min.0)
let input.extent.1.required = (max((output.extent.1 + output.min.1), (min((min(output.min.1, 0) + ((((max((output.extent.1 + output.min.1), 2560) - min(output.min.1, 0)) + -1)/64)*64)), 2496) + 64)) - min(min((min((min(output.extent.1, 16) + output.min.1), 16) + -16), output.min.1), ((output.extent.1 + output.min.1) + -32)))
let input.min.1.required = min(min((min((min(output.extent.1, 16) + output.min.1), 16) + -16), output.min.1), ((output.extent.1 + output.min.1) + -32))
let output.extent.0.required.s = (min((((output.extent.0 + -1)/256)*256), (output.extent.0 + -256)) - min(output.extent.0, 256))
let output.extent.1.required.s = (min((((output.extent.1 + -1)/8)*8), (output.extent.1 + -8)) - min(output.extent.1, 8))
let output.extent.2.required.s = (min((min(((output.extent.2 + -1)/2), ((((output.extent.2 + -1)/4)*2) + 1))*2), (output.extent.2 + -2)) - min(output.extent.2, 2))
let output.stride.2.required = ((output.extent.0.required.s + 512)*(output.extent.1.required.s + 16))
if (_halide_buffer_is_bounds_query(input.buffer)) {
  _halide_buffer_init(input.buffer, _halide_buffer_get_shape(input.buffer), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 1, 8, 3, make_struct((halide_dimension_t *), input.min.0.required, input.extent.0.required, 1, 0, input.min.1.required, input.extent.1.required, input.extent.0.required, 0, 0, 3, (input.extent.0.required*input.extent.1.required), 0), (uint64)0)
}
if (_halide_buffer_is_bounds_query(output.buffer)) {
  _halide_buffer_init(output.buffer, _halide_buffer_get_shape(output.buffer), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 1, 8, 3, make_struct((halide_dimension_t *), ((min(output.extent.0, 256) + output.min.0) + -256), (output.extent.0.required.s + 512), 1, 0, ((min(output.extent.1, 8) + output.min.1) + -8), (output.extent.1.required.s + 16), (output.extent.0.required.s + 512), 0, ((min(output.extent.2, 2) + output.min.2) + -2), (output.extent.2.required.s + 4), output.stride.2.required, 0), (uint64)0)
}
if (!(_halide_buffer_is_bounds_query(input.buffer) || _halide_buffer_is_bounds_query(output.buffer))) {
  assert((input.type == (uint32)67585), halide_error_bad_type("Input buffer input", input.type, (uint32)67585))
  assert((input.dimensions == 3), halide_error_bad_dimensions("Input buffer input", input.dimensions, 3))
  assert((output.type == (uint32)67585), halide_error_bad_type("Output buffer output", output.type, (uint32)67585))
  assert((output.dimensions == 3), halide_error_bad_dimensions("Output buffer output", output.dimensions, 3))
  assert(((input.min.0 <= input.min.0.required) && ((input.extent.0.required + input.min.0.required) <= (input.extent.0 + input.min.0))), halide_error_access_out_of_bounds("Input buffer input", 0, input.min.0.required, ((input.extent.0.required + input.min.0.required) + -1), input.min.0, ((input.extent.0 + input.min.0) + -1)))
  assert((0 <= input.extent.0), halide_error_buffer_extents_negative("Input buffer input", 0, input.extent.0))
  assert(((input.min.1 <= input.min.1.required) && ((input.extent.1.required + input.min.1.required) <= (input.extent.1 + input.min.1))), halide_error_access_out_of_bounds("Input buffer input", 1, input.min.1.required, ((input.extent.1.required + input.min.1.required) + -1), input.min.1, ((input.extent.1 + input.min.1) + -1)))
  assert((0 <= input.extent.1), halide_error_buffer_extents_negative("Input buffer input", 1, input.extent.1))
  assert(((input.min.2 <= 0) && (3 <= (input.extent.2 + input.min.2))), halide_error_access_out_of_bounds("Input buffer input", 2, 0, 2, input.min.2, ((input.extent.2 + input.min.2) + -1)))
  assert((0 <= input.extent.2), halide_error_buffer_extents_negative("Input buffer input", 2, input.extent.2))
  assert(((256 <= output.extent.0) && ((((min(output.extent.0, 256) + output.min.0) + output.extent.0.required.s) + 256) <= (output.extent.0 + output.min.0))), halide_error_access_out_of_bounds("Output buffer output", 0, ((min(output.extent.0, 256) + output.min.0) + -256), (((min(output.extent.0, 256) + output.min.0) + output.extent.0.required.s) + 255), output.min.0, ((output.extent.0 + output.min.0) + -1)))
  assert(((8 <= output.extent.1) && ((((min(output.extent.1, 8) + output.min.1) + output.extent.1.required.s) + 8) <= (output.extent.1 + output.min.1))), halide_error_access_out_of_bounds("Output buffer output", 1, ((min(output.extent.1, 8) + output.min.1) + -8), (((min(output.extent.1, 8) + output.min.1) + output.extent.1.required.s) + 7), output.min.1, ((output.extent.1 + output.min.1) + -1)))
  assert(((2 <= output.extent.2) && ((((min(output.extent.2, 2) + output.min.2) + output.extent.2.required.s) + 2) <= (output.extent.2 + output.min.2))), halide_error_access_out_of_bounds("Output buffer output", 2, ((min(output.extent.2, 2) + output.min.2) + -2), (((min(output.extent.2, 2) + output.min.2) + output.extent.2.required.s) + 1), output.min.2, ((output.extent.2 + output.min.2) + -1)))
  assert((input.stride.0 == 1), halide_error_constraint_violated("input.stride.0", input.stride.0, "1", 1))
  assert((output.stride.0 == 1), halide_error_constraint_violated("output.stride.0", output.stride.0, "1", 1))
  let input.total_extent.1 = (int64(input.extent.1)*int64(input.extent.0))
  let input.total_extent.2 = (input.total_extent.1*int64(input.extent.2))
  let output.total_extent.1 = (int64(output.extent.1)*int64(output.extent.0))
  let output.total_extent.2 = (output.total_extent.1*int64(output.extent.2))
  assert((abs(int64(input.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("input", abs(int64(input.extent.0)), (uint64)2147483647))
  assert((abs((int64(input.extent.1)*int64(input.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("input", abs((int64(input.extent.1)*int64(input.stride.1))), (uint64)2147483647))
  assert((input.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("input", input.total_extent.1, (int64)2147483647))
  assert((abs((int64(input.extent.2)*int64(input.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("input", abs((int64(input.extent.2)*int64(input.stride.2))), (uint64)2147483647))
  assert((input.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("input", input.total_extent.2, (int64)2147483647))
  assert((abs(int64(output.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("output", abs(int64(output.extent.0)), (uint64)2147483647))
  assert((abs((int64(output.extent.1)*int64(output.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("output", abs((int64(output.extent.1)*int64(output.stride.1))), (uint64)2147483647))
  assert((output.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("output", output.total_extent.1, (int64)2147483647))
  assert((abs((int64(output.extent.2)*int64(output.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("output", abs((int64(output.extent.2)*int64(output.stride.2))), (uint64)2147483647))
  assert((output.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("output", output.total_extent.2, (int64)2147483647))
  let Y.y.min_realized = min((min((min((min((min(output.extent.1, 16) + 16), output.extent.1) + output.min.1), 32) + 224), (output.extent.1 + output.min.1)) + -256), output.min.1)
  allocate Y[float32 * (max((output.extent.0 + output.min.0), 1536) - input.min.0.required) * (max((output.extent.1 + output.min.1), 2560) - Y.y.min_realized)] if (uint1)0
  let Y.buffer = _halide_buffer_init(alloca(size_of_halide_buffer_t()), make_struct((halide_dimension_t *), input.min.0.required, (max((output.extent.0 + output.min.0), 1536) - input.min.0.required), 1, 0, Y.y.min_realized, (max((output.extent.1 + output.min.1), 2560) - Y.y.min_realized), (max((output.extent.0 + output.min.0), 1536) - input.min.0.required), 0), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 2, 32, 2, make_struct((halide_dimension_t *), input.min.0.required, (max((output.extent.0 + output.min.0), 1536) - input.min.0.required), 1, 0, Y.y.min_realized, (max((output.extent.1 + output.min.1), 2560) - Y.y.min_realized), (max((output.extent.0 + output.min.0), 1536) - input.min.0.required), 0), (uint64)0)
  register_destructor("halide_device_free_as_destructor", Y.buffer)
  let Y.s0.x.x.loop_extent.s = (max((output.extent.0 + output.min.0), 1536) - min(output.min.0, 0))
  let Y.s0.y.y.loop_extent.s = (max((output.extent.1 + output.min.1), 2560) - min(output.min.1, 0))
  produce Y {
    let halide_device_malloc_result$7 = halide_device_malloc(Y.buffer, halide_cuda_device_interface())
    assert((halide_device_malloc_result$7 == 0), halide_device_malloc_result$7)
    let halide_copy_to_device_result$1 = halide_copy_to_device(input.buffer, halide_cuda_device_interface())
    assert((halide_copy_to_device_result$1 == 0), halide_copy_to_device_result$1)
    let t25.s = min((max((output.extent.0 + output.min.0), 1536) - min(output.min.0, 0)), (Y.s0.x.x.loop_extent.s + 127))
    let t403 = max((output.extent.0 + output.min.0), 1536)
    let t390 = min(output.min.1, 0)
    let t393 = min(output.min.0, 0)
    let t388 = ((Y.s0.y.y.loop_extent.s + 63)/64)
    let t389 = ((Y.s0.x.x.loop_extent.s + 127)/128)
    let t392 = (t25.s/128)
    let t395 = ((2 - input.min.2)*input.stride.2)
    let t397 = ((1 - input.min.2)*input.stride.2)
    let t396 = (input.min.2*input.stride.2)
    let t394 = (input.min.1*input.stride.1)
    let t391 = (max((output.extent.1 + output.min.1), 2560) + -64)
    gpu_block<CUDA> (Y.s0.y.y.__block_id_y, 0, t388) {
      gpu_block<CUDA> (Y.s0.x.x.__block_id_x, 0, t389) {
        gpu_thread<CUDA> (.__thread_id_y, 0, 64) {
          gpu_thread<CUDA> (.__thread_id_x, 0, 16) {
            let Y.s0.y.yi.base = min(((Y.s0.y.y.__block_id_y*64) + t390), t391)
            if ((Y.s0.x.x.__block_id_x < t392)) {
              let Y.s0.x.xi.base = ((Y.s0.x.x.__block_id_x*128) + t393)
              Y[ramp(((.__thread_id_x*8) + (((t403 - input.min.0.required)*((Y.s0.y.yi.base - Y.y.min_realized) + .__thread_id_y)) + (Y.s0.x.xi.base - input.min.0.required))), 1, 4)] = ((float32x4(input[ramp(((.__thread_id_x*8) + (((.__thread_id_y + Y.s0.y.yi.base)*input.stride.1) + (((t395 - t394) - input.min.0) + Y.s0.x.xi.base))), 1, 4)])*x4(0.114000f)) + ((float32x4(input[ramp(((.__thread_id_x*8) + (((.__thread_id_y + Y.s0.y.yi.base)*input.stride.1) + (Y.s0.x.xi.base - ((t394 + t396) + input.min.0)))), 1, 4)])*x4(0.299000f)) + (float32x4(input[ramp(((.__thread_id_x*8) + (((.__thread_id_y + Y.s0.y.yi.base)*input.stride.1) + (((t397 - t394) - input.min.0) + Y.s0.x.xi.base))), 1, 4)])*x4(0.587000f))))
              Y[ramp((((.__thread_id_x*8) + (((t403 - input.min.0.required)*((Y.s0.y.yi.base - Y.y.min_realized) + .__thread_id_y)) + (Y.s0.x.xi.base - input.min.0.required))) + 4), 1, 4)] = ((float32x4(input[ramp((((.__thread_id_x*8) + (((.__thread_id_y + Y.s0.y.yi.base)*input.stride.1) + (((t395 - t394) - input.min.0) + Y.s0.x.xi.base))) + 4), 1, 4)])*x4(0.114000f)) + ((float32x4(input[ramp((((.__thread_id_x*8) + (((.__thread_id_y + Y.s0.y.yi.base)*input.stride.1) + (Y.s0.x.xi.base - ((t394 + t396) + input.min.0)))) + 4), 1, 4)])*x4(0.299000f)) + (float32x4(input[ramp((((.__thread_id_x*8) + (((.__thread_id_y + Y.s0.y.yi.base)*input.stride.1) + (((t397 - t394) - input.min.0) + Y.s0.x.xi.base))) + 4), 1, 4)])*x4(0.587000f))))
            } else {
              Y[ramp((((.__thread_id_x*8) + ((t403 - input.min.0.required)*(((Y.s0.y.yi.base - Y.y.min_realized) + .__thread_id_y) + 1))) + -128), 1, 4)] = ((float32x4(input[ramp((((.__thread_id_x*8) + (((.__thread_id_y + Y.s0.y.yi.base)*input.stride.1) + (((((input.stride.2*2) + t403) - t396) - t394) - input.min.0))) + -128), 1, 4)])*x4(0.114000f)) + ((float32x4(input[ramp((((.__thread_id_x*8) + (((.__thread_id_y + Y.s0.y.yi.base)*input.stride.1) + (((t403 - t396) - t394) - input.min.0))) + -128), 1, 4)])*x4(0.299000f)) + (float32x4(input[ramp((((.__thread_id_x*8) + (((.__thread_id_y + Y.s0.y.yi.base)*input.stride.1) + ((((input.stride.2 + t403) - t396) - t394) - input.min.0))) + -128), 1, 4)])*x4(0.587000f))))
              Y[ramp((((.__thread_id_x*8) + ((t403 - input.min.0.required)*(((Y.s0.y.yi.base - Y.y.min_realized) + .__thread_id_y) + 1))) + -124), 1, 4)] = ((float32x4(input[ramp((((.__thread_id_x*8) + (((.__thread_id_y + Y.s0.y.yi.base)*input.stride.1) + (((((input.stride.2*2) + t403) - t396) - t394) - input.min.0))) + -124), 1, 4)])*x4(0.114000f)) + ((float32x4(input[ramp((((.__thread_id_x*8) + (((.__thread_id_y + Y.s0.y.yi.base)*input.stride.1) + (((t403 - t396) - t394) - input.min.0))) + -124), 1, 4)])*x4(0.299000f)) + (float32x4(input[ramp((((.__thread_id_x*8) + (((.__thread_id_y + Y.s0.y.yi.base)*input.stride.1) + ((((input.stride.2 + t403) - t396) - t394) - input.min.0))) + -124), 1, 4)])*x4(0.587000f))))
            }
          }
        }
      }
    }
    _halide_buffer_set_device_dirty(Y.buffer, (uint1)1)
  }
  allocate Cb[float32 * max(output.extent.0, 512) * max(output.extent.1, 16)] if (uint1)0
  let Cb.buffer = _halide_buffer_init(alloca(size_of_halide_buffer_t()), make_struct((halide_dimension_t *), ((min(output.extent.0, 512) + output.min.0) + -512), max(output.extent.0, 512), 1, 0, ((min(output.extent.1, 16) + output.min.1) + -16), max(output.extent.1, 16), max(output.extent.0, 512), 0), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 2, 32, 2, make_struct((halide_dimension_t *), ((min(output.extent.0, 512) + output.min.0) + -512), max(output.extent.0, 512), 1, 0, ((min(output.extent.1, 16) + output.min.1) + -16), max(output.extent.1, 16), max(output.extent.0, 512), 0), (uint64)0)
  register_destructor("halide_device_free_as_destructor", Cb.buffer)
  produce Cb {
    consume Y {
      let halide_device_malloc_result$6 = halide_device_malloc(Cb.buffer, halide_cuda_device_interface())
      assert((halide_device_malloc_result$6 == 0), halide_device_malloc_result$6)
      let t166.s = ((output.extent.0 + output.min.0) - min(output.extent.0, 512))
      let t170.s = (((((input.stride.2*2) + output.extent.0) + output.min.0) - (input.min.2*input.stride.2)) - (input.min.1*input.stride.1))
      let t171.s = ((((input.stride.2*2) + output.min.0) - (input.min.2*input.stride.2)) - (input.min.1*input.stride.1))
      let t157 = (516 - min(output.extent.0, 512))
      let t152 = (512 - min(output.extent.0, 512))
      let t154 = (16 - min(output.extent.1, 16))
      let t420 = (output.extent.0 + output.min.0)
      let t421 = (output.min.0 - input.min.0.required)
      let t422 = (t166.s - output.min.0)
      let t423 = (t170.s - input.min.0)
      let t424 = (t171.s - input.min.0)
      let t412 = max(output.extent.0, 512)
      let t404 = ((output.extent.1 + 15)/16)
      let t405 = ((output.extent.0 + 511)/512)
      let t407 = (output.extent.0/512)
      let t410 = (max(t420, 1536) - input.min.0.required)
      let t411 = (output.min.1 - Y.y.min_realized)
      let t418 = (t423 + -508)
      let t416 = (t423 + -512)
      let t406 = (output.extent.1 + -16)
      gpu_block<CUDA> (Cb.s0.y.y.__block_id_y, 0, t404) {
        gpu_block<CUDA> (Cb.s0.x.x.__block_id_x, 0, t405) {
          gpu_thread<CUDA> (.__thread_id_y, 0, 16) {
            gpu_thread<CUDA> (.__thread_id_x, 0, 64) {
              let Cb.s0.y.yi.base.s = min((Cb.s0.y.y.__block_id_y*16), t406)
              if ((Cb.s0.x.x.__block_id_x < t407)) {
                Cb[ramp(((.__thread_id_x*8) + ((((Cb.s0.y.yi.base.s + t154) + .__thread_id_y)*t412) + ((Cb.s0.x.x.__block_id_x*512) + t152))), 1, 4)] = (((float32x4(input[ramp(((.__thread_id_x*8) + ((((Cb.s0.y.yi.base.s + output.min.1) + .__thread_id_y)*input.stride.1) + ((Cb.s0.x.x.__block_id_x*512) + t424))), 1, 4)]) - Y[ramp(((.__thread_id_x*8) + ((((Cb.s0.y.yi.base.s + t411) + .__thread_id_y)*t410) + ((Cb.s0.x.x.__block_id_x*512) + t421))), 1, 4)])*x4(0.564000f)) + x4(128.000000f))
                Cb[ramp(((.__thread_id_x*8) + ((((Cb.s0.y.yi.base.s + t154) + .__thread_id_y)*t412) + ((Cb.s0.x.x.__block_id_x*512) + t157))), 1, 4)] = (((float32x4(input[ramp((((.__thread_id_x*8) + ((((Cb.s0.y.yi.base.s + output.min.1) + .__thread_id_y)*input.stride.1) + ((Cb.s0.x.x.__block_id_x*512) + t424))) + 4), 1, 4)]) - Y[ramp((((.__thread_id_x*8) + ((((Cb.s0.y.yi.base.s + t411) + .__thread_id_y)*t410) + ((Cb.s0.x.x.__block_id_x*512) + t421))) + 4), 1, 4)])*x4(0.564000f)) + x4(128.000000f))
              } else {
                Cb[ramp(((.__thread_id_x*8) + ((((Cb.s0.y.yi.base.s + t154) + .__thread_id_y)*t412) + t422)), 1, 4)] = (((float32x4(input[ramp(((.__thread_id_x*8) + ((((Cb.s0.y.yi.base.s + output.min.1) + .__thread_id_y)*input.stride.1) + t416)), 1, 4)]) - Y[ramp((((.__thread_id_x*8) + (((max(t420, 1536) - input.min.0.required)*((Cb.s0.y.yi.base.s + t411) + .__thread_id_y)) + (t420 - input.min.0.required))) + -512), 1, 4)])*x4(0.564000f)) + x4(128.000000f))
                Cb[ramp((((.__thread_id_x*8) + ((((Cb.s0.y.yi.base.s + t154) + .__thread_id_y)*t412) + t422)) + 4), 1, 4)] = (((float32x4(input[ramp(((.__thread_id_x*8) + ((((Cb.s0.y.yi.base.s + output.min.1) + .__thread_id_y)*input.stride.1) + t418)), 1, 4)]) - Y[ramp((((.__thread_id_x*8) + (((max(t420, 1536) - input.min.0.required)*((Cb.s0.y.yi.base.s + t411) + .__thread_id_y)) + (t420 - input.min.0.required))) + -508), 1, 4)])*x4(0.564000f)) + x4(128.000000f))
              }
            }
          }
        }
      }
      _halide_buffer_set_device_dirty(Cb.buffer, (uint1)1)
    }
  }
  allocate Cr[float32 * max(output.extent.0, 512) * max(output.extent.1, 32)] if (uint1)0
  let Cr.buffer = _halide_buffer_init(alloca(size_of_halide_buffer_t()), make_struct((halide_dimension_t *), ((min(output.extent.0, 512) + output.min.0) + -512), max(output.extent.0, 512), 1, 0, ((min(output.extent.1, 32) + output.min.1) + -32), max(output.extent.1, 32), max(output.extent.0, 512), 0), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 2, 32, 2, make_struct((halide_dimension_t *), ((min(output.extent.0, 512) + output.min.0) + -512), max(output.extent.0, 512), 1, 0, ((min(output.extent.1, 32) + output.min.1) + -32), max(output.extent.1, 32), max(output.extent.0, 512), 0), (uint64)0)
  register_destructor("halide_device_free_as_destructor", Cr.buffer)
  produce Cr {
    consume Y {
      let halide_device_malloc_result$5 = halide_device_malloc(Cr.buffer, halide_cuda_device_interface())
      assert((halide_device_malloc_result$5 == 0), halide_device_malloc_result$5)
      let t202.s = ((output.extent.0 + output.min.0) - min(output.extent.0, 512))
      let t205.s = ((output.min.0 - (input.min.2*input.stride.2)) - (input.min.1*input.stride.1))
      let t191 = (524 - min(output.extent.0, 512))
      let t188 = (520 - min(output.extent.0, 512))
      let t185 = (516 - min(output.extent.0, 512))
      let t180 = (512 - min(output.extent.0, 512))
      let t182 = (32 - min(output.extent.1, 32))
      let t447 = (output.extent.0 + output.min.0)
      let t448 = (output.min.0 - input.min.0.required)
      let t449 = (t202.s - output.min.0)
      let t450 = (t205.s - input.min.0)
      let t433 = max(output.extent.0, 512)
      let t425 = ((output.extent.1 + 31)/32)
      let t426 = ((output.extent.0 + 511)/512)
      let t428 = (output.extent.0/512)
      let t441 = (input.min.2*input.stride.2)
      let t442 = (input.min.1*input.stride.1)
      let t431 = (max(t447, 1536) - input.min.0.required)
      let t432 = (output.min.1 - Y.y.min_realized)
      let t427 = (output.extent.1 + -32)
      gpu_block<CUDA> (Cr.s0.y.y.__block_id_y, 0, t425) {
        gpu_block<CUDA> (Cr.s0.x.x.__block_id_x, 0, t426) {
          gpu_thread<CUDA> (.__thread_id_y, 0, 32) {
            gpu_thread<CUDA> (.__thread_id_x, 0, 32) {
              let Cr.s0.y.yi.base.s = min((Cr.s0.y.y.__block_id_y*32), t427)
              if ((Cr.s0.x.x.__block_id_x < t428)) {
                Cr[ramp(((.__thread_id_x*16) + ((((Cr.s0.y.yi.base.s + t182) + .__thread_id_y)*t433) + ((Cr.s0.x.x.__block_id_x*512) + t180))), 1, 4)] = (((float32x4(input[ramp(((.__thread_id_x*16) + ((((Cr.s0.y.yi.base.s + output.min.1) + .__thread_id_y)*input.stride.1) + ((Cr.s0.x.x.__block_id_x*512) + t450))), 1, 4)]) - Y[ramp(((.__thread_id_x*16) + ((((Cr.s0.y.yi.base.s + t432) + .__thread_id_y)*t431) + ((Cr.s0.x.x.__block_id_x*512) + t448))), 1, 4)])*x4(0.713000f)) + x4(128.000000f))
                Cr[ramp(((.__thread_id_x*16) + ((((Cr.s0.y.yi.base.s + t182) + .__thread_id_y)*t433) + ((Cr.s0.x.x.__block_id_x*512) + t185))), 1, 4)] = (((float32x4(input[ramp((((.__thread_id_x*16) + ((((Cr.s0.y.yi.base.s + output.min.1) + .__thread_id_y)*input.stride.1) + ((Cr.s0.x.x.__block_id_x*512) + t450))) + 4), 1, 4)]) - Y[ramp((((.__thread_id_x*16) + ((((Cr.s0.y.yi.base.s + t432) + .__thread_id_y)*t431) + ((Cr.s0.x.x.__block_id_x*512) + t448))) + 4), 1, 4)])*x4(0.713000f)) + x4(128.000000f))
                Cr[ramp(((.__thread_id_x*16) + ((((Cr.s0.y.yi.base.s + t182) + .__thread_id_y)*t433) + ((Cr.s0.x.x.__block_id_x*512) + t188))), 1, 4)] = (((float32x4(input[ramp((((.__thread_id_x*16) + ((((Cr.s0.y.yi.base.s + output.min.1) + .__thread_id_y)*input.stride.1) + ((Cr.s0.x.x.__block_id_x*512) + t450))) + 8), 1, 4)]) - Y[ramp((((.__thread_id_x*16) + ((((Cr.s0.y.yi.base.s + t432) + .__thread_id_y)*t431) + ((Cr.s0.x.x.__block_id_x*512) + t448))) + 8), 1, 4)])*x4(0.713000f)) + x4(128.000000f))
                Cr[ramp(((.__thread_id_x*16) + ((((Cr.s0.y.yi.base.s + t182) + .__thread_id_y)*t433) + ((Cr.s0.x.x.__block_id_x*512) + t191))), 1, 4)] = (((float32x4(input[ramp((((.__thread_id_x*16) + ((((Cr.s0.y.yi.base.s + output.min.1) + .__thread_id_y)*input.stride.1) + ((Cr.s0.x.x.__block_id_x*512) + t450))) + 12), 1, 4)]) - Y[ramp((((.__thread_id_x*16) + ((((Cr.s0.y.yi.base.s + t432) + .__thread_id_y)*t431) + ((Cr.s0.x.x.__block_id_x*512) + t448))) + 12), 1, 4)])*x4(0.713000f)) + x4(128.000000f))
              } else {
                Cr[ramp(((.__thread_id_x*16) + ((((Cr.s0.y.yi.base.s + t182) + .__thread_id_y)*t433) + t449)), 1, 4)] = (((float32x4(input[ramp((((.__thread_id_x*16) + ((((Cr.s0.y.yi.base.s + output.min.1) + .__thread_id_y)*input.stride.1) + (((t447 - t441) - t442) - input.min.0))) + -512), 1, 4)]) - Y[ramp((((.__thread_id_x*16) + (((max(t447, 1536) - input.min.0.required)*((Cr.s0.y.yi.base.s + t432) + .__thread_id_y)) + (t447 - input.min.0.required))) + -512), 1, 4)])*x4(0.713000f)) + x4(128.000000f))
                Cr[ramp((((.__thread_id_x*16) + ((((Cr.s0.y.yi.base.s + t182) + .__thread_id_y)*t433) + t449)) + 4), 1, 4)] = (((float32x4(input[ramp((((.__thread_id_x*16) + ((((Cr.s0.y.yi.base.s + output.min.1) + .__thread_id_y)*input.stride.1) + (((t447 - t441) - t442) - input.min.0))) + -508), 1, 4)]) - Y[ramp((((.__thread_id_x*16) + (((max(t447, 1536) - input.min.0.required)*((Cr.s0.y.yi.base.s + t432) + .__thread_id_y)) + (t447 - input.min.0.required))) + -508), 1, 4)])*x4(0.713000f)) + x4(128.000000f))
                Cr[ramp((((.__thread_id_x*16) + ((((Cr.s0.y.yi.base.s + t182) + .__thread_id_y)*t433) + t449)) + 8), 1, 4)] = (((float32x4(input[ramp((((.__thread_id_x*16) + ((((Cr.s0.y.yi.base.s + output.min.1) + .__thread_id_y)*input.stride.1) + (((t447 - t441) - t442) - input.min.0))) + -504), 1, 4)]) - Y[ramp((((.__thread_id_x*16) + (((max(t447, 1536) - input.min.0.required)*((Cr.s0.y.yi.base.s + t432) + .__thread_id_y)) + (t447 - input.min.0.required))) + -504), 1, 4)])*x4(0.713000f)) + x4(128.000000f))
                Cr[ramp((((.__thread_id_x*16) + ((((Cr.s0.y.yi.base.s + t182) + .__thread_id_y)*t433) + t449)) + 12), 1, 4)] = (((float32x4(input[ramp((((.__thread_id_x*16) + ((((Cr.s0.y.yi.base.s + output.min.1) + .__thread_id_y)*input.stride.1) + (((t447 - t441) - t442) - input.min.0))) + -500), 1, 4)]) - Y[ramp((((.__thread_id_x*16) + (((max(t447, 1536) - input.min.0.required)*((Cr.s0.y.yi.base.s + t432) + .__thread_id_y)) + (t447 - input.min.0.required))) + -500), 1, 4)])*x4(0.713000f)) + x4(128.000000f))
              }
            }
          }
        }
      }
      _halide_buffer_set_device_dirty(Cr.buffer, (uint1)1)
    }
  }
  allocate hist_rows[int32 * 256 * 2560] if (uint1)0
  let hist_rows.buffer = _halide_buffer_init(alloca(size_of_halide_buffer_t()), make_struct((halide_dimension_t *), 0, 256, 1, 0, 0, 2560, 256, 0), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 0, 32, 2, make_struct((halide_dimension_t *), 0, 256, 1, 0, 0, 2560, 256, 0), (uint64)0)
  register_destructor("halide_device_free_as_destructor", hist_rows.buffer)
  produce hist_rows {
    consume Y {
      let halide_device_malloc_result$3 = halide_device_malloc(hist_rows.buffer, halide_cuda_device_interface())
      assert((halide_device_malloc_result$3 == 0), halide_device_malloc_result$3)
      gpu_block<CUDA> (hist_rows.s0.y.y.__block_id_y, 0, 5) {
        gpu_block<CUDA> (hist_rows.s0.x.x.__block_id_x, 0, 8) {
          gpu_thread<CUDA> (.__thread_id_y, 0, 64) {
            gpu_thread<CUDA> (.__thread_id_x, 0, 16) {
              hist_rows[(((((((hist_rows.s0.y.y.__block_id_y*64) + .__thread_id_y)*64) + hist_rows.s0.x.x.__block_id_x)*16) + .__thread_id_x)*2)] = 0
              hist_rows[((((((((hist_rows.s0.y.y.__block_id_y*64) + .__thread_id_y)*64) + hist_rows.s0.x.x.__block_id_x)*16) + .__thread_id_x)*2) + 1)] = 0
              hist_rows[((((((((hist_rows.s0.y.y.__block_id_y*64) + .__thread_id_y)*64) + hist_rows.s0.x.x.__block_id_x)*16) + .__thread_id_x)*2) + 256)] = 0
              hist_rows[((((((((hist_rows.s0.y.y.__block_id_y*64) + .__thread_id_y)*64) + hist_rows.s0.x.x.__block_id_x)*16) + .__thread_id_x)*2) + 257)] = 0
              hist_rows[((((((((hist_rows.s0.y.y.__block_id_y*64) + .__thread_id_y)*64) + hist_rows.s0.x.x.__block_id_x)*16) + .__thread_id_x)*2) + 512)] = 0
              hist_rows[((((((((hist_rows.s0.y.y.__block_id_y*64) + .__thread_id_y)*64) + hist_rows.s0.x.x.__block_id_x)*16) + .__thread_id_x)*2) + 513)] = 0
              hist_rows[((((((((hist_rows.s0.y.y.__block_id_y*64) + .__thread_id_y)*64) + hist_rows.s0.x.x.__block_id_x)*16) + .__thread_id_x)*2) + 768)] = 0
              hist_rows[((((((((hist_rows.s0.y.y.__block_id_y*64) + .__thread_id_y)*64) + hist_rows.s0.x.x.__block_id_x)*16) + .__thread_id_x)*2) + 769)] = 0
              hist_rows[((((((((hist_rows.s0.y.y.__block_id_y*64) + .__thread_id_y)*64) + hist_rows.s0.x.x.__block_id_x)*16) + .__thread_id_x)*2) + 1024)] = 0
              hist_rows[((((((((hist_rows.s0.y.y.__block_id_y*64) + .__thread_id_y)*64) + hist_rows.s0.x.x.__block_id_x)*16) + .__thread_id_x)*2) + 1025)] = 0
              hist_rows[((((((((hist_rows.s0.y.y.__block_id_y*64) + .__thread_id_y)*64) + hist_rows.s0.x.x.__block_id_x)*16) + .__thread_id_x)*2) + 1280)] = 0
              hist_rows[((((((((hist_rows.s0.y.y.__block_id_y*64) + .__thread_id_y)*64) + hist_rows.s0.x.x.__block_id_x)*16) + .__thread_id_x)*2) + 1281)] = 0
              hist_rows[((((((((hist_rows.s0.y.y.__block_id_y*64) + .__thread_id_y)*64) + hist_rows.s0.x.x.__block_id_x)*16) + .__thread_id_x)*2) + 1536)] = 0
              hist_rows[((((((((hist_rows.s0.y.y.__block_id_y*64) + .__thread_id_y)*64) + hist_rows.s0.x.x.__block_id_x)*16) + .__thread_id_x)*2) + 1537)] = 0
              hist_rows[((((((((hist_rows.s0.y.y.__block_id_y*64) + .__thread_id_y)*64) + hist_rows.s0.x.x.__block_id_x)*16) + .__thread_id_x)*2) + 1792)] = 0
              hist_rows[((((((((hist_rows.s0.y.y.__block_id_y*64) + .__thread_id_y)*64) + hist_rows.s0.x.x.__block_id_x)*16) + .__thread_id_x)*2) + 1793)] = 0
            }
          }
        }
      }
      _halide_buffer_set_device_dirty(hist_rows.buffer, (uint1)1)
      let t451 = (max((output.extent.0 + output.min.0), 1536) - input.min.0.required)
      gpu_block<CUDA> (hist_rows.s1.y.y.__block_id_x, 0, 5) {
        gpu_thread<CUDA> (.__thread_id_x, 0, 64) {
          let t454 = (((hist_rows.s1.y.y.__block_id_x*64) + .__thread_id_x)*8)
          let t452 = (t454 - Y.y.min_realized)
          for (hist_rows.s1.y.yi.yii, 0, 8) {
            let t209.s = ((hist_rows.s1.y.yi.yii + t452)*t451)
            let t455 = ((hist_rows.s1.y.yi.yii + t454)*256)
            let t456 = (t209.s - input.min.0.required)
            for (hist_rows.s1.r4$x, 0, 1536) {
              hist_rows[(t455 + int32(max(min(Y[(hist_rows.s1.r4$x + t456)], 255.000000f), 0.000000f)))] = (hist_rows[(t455 + int32(max(min(Y[(hist_rows.s1.r4$x + t456)], 255.000000f), 0.000000f)))] + 1)
            }
          }
        }
      }
    }
  }
  let hist.buffer = _halide_buffer_init(alloca(size_of_halide_buffer_t()), make_struct((halide_dimension_t *), 0, 256, 1, 0), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 0, 32, 1, make_struct((halide_dimension_t *), 0, 256, 1, 0), (uint64)0)
  let halide_device_and_host_malloc_result$1 = halide_device_and_host_malloc(hist.buffer, halide_cuda_device_interface())
  assert((halide_device_and_host_malloc_result$1 == 0), halide_device_and_host_malloc_result$1)
  register_destructor("halide_device_and_host_free_as_destructor", hist.buffer)
  allocate hist[int32 * 256] in Heap
   custom_new { _halide_buffer_get_host(hist.buffer) }
   custom_delete { halide_device_host_nop_free(hist); }
  produce hist {
    let halide_device_malloc_result$2 = halide_device_malloc(hist.buffer, halide_cuda_device_interface())
    assert((halide_device_malloc_result$2 == 0), halide_device_malloc_result$2)
    gpu_block<CUDA> (hist.s0.x.x.__block_id_x, 0, 4) {
      gpu_thread<CUDA> (.__thread_id_x, 0, 64) {
        hist[((hist.s0.x.x.__block_id_x*64) + .__thread_id_x)] = 0
      }
    }
    _halide_buffer_set_device_dirty(hist.buffer, (uint1)1)
    consume hist_rows {
      let halide_device_malloc_result$4 = halide_device_malloc(hist_rows.buffer, halide_cuda_device_interface())
      assert((halide_device_malloc_result$4 == 0), halide_device_malloc_result$4)
      gpu_block<CUDA> (hist.s1.x.x.__block_id_x, 0, 4) {
        gpu_thread<CUDA> (.__thread_id_x, 0, 64) {
          let t457 = ((hist.s1.x.x.__block_id_x*64) + .__thread_id_x)
          for (hist.s1.r9$x, 0, 2560) {
            hist[t457] = (hist[t457] + hist_rows[((hist.s1.r9$x*256) + t457)])
          }
        }
      }
      let halide_device_free_result$1 = halide_device_free(hist_rows.buffer)
      assert((halide_device_free_result$1 == 0), halide_device_free_result$1)
      free hist_rows
    }
  }
  let cdf.buffer = _halide_buffer_init(alloca(size_of_halide_buffer_t()), make_struct((halide_dimension_t *), 0, 256, 1, 0), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 0, 32, 1, make_struct((halide_dimension_t *), 0, 256, 1, 0), (uint64)0)
  let halide_device_and_host_malloc_result = halide_device_and_host_malloc(cdf.buffer, halide_cuda_device_interface())
  assert((halide_device_and_host_malloc_result == 0), halide_device_and_host_malloc_result)
  register_destructor("halide_device_and_host_free_as_destructor", cdf.buffer)
  allocate cdf[int32 * 256] in Heap
   custom_new { _halide_buffer_get_host(cdf.buffer) }
   custom_delete { halide_device_host_nop_free(cdf); }
  produce cdf {
    consume hist {
      let halide_device_malloc_result$1 = halide_device_malloc(cdf.buffer, halide_cuda_device_interface())
      assert((halide_device_malloc_result$1 == 0), halide_device_malloc_result$1)
      gpu_block<CUDA> (cdf.s0.x.x.__block_id_x, 0, 4) {
        gpu_thread<CUDA> (.__thread_id_x, 0, 64) {
          cdf[((cdf.s0.x.x.__block_id_x*64) + .__thread_id_x)] = hist[0]
        }
      }
      _halide_buffer_set_device_dirty(cdf.buffer, (uint1)1)
    }
    consume hist {
      let halide_copy_to_host_result = halide_copy_to_host(cdf.buffer)
      assert((halide_copy_to_host_result == 0), halide_copy_to_host_result)
      let halide_copy_to_host_result$1 = halide_copy_to_host(hist.buffer)
      assert((halide_copy_to_host_result$1 == 0), halide_copy_to_host_result$1)
      for (cdf.s1.r14$x, 1, 255) {
        cdf[cdf.s1.r14$x] = (cdf[(cdf.s1.r14$x + -1)] + hist[cdf.s1.r14$x])
      }
      let halide_device_and_host_free_result$1 = halide_device_and_host_free(hist.buffer)
      assert((halide_device_and_host_free_result$1 == 0), halide_device_and_host_free_result$1)
      free hist
      _halide_buffer_set_host_dirty(cdf.buffer, (uint1)1)
    }
  }
  allocate equalize[float32 * output.extent.0 * max(output.extent.1, 256)] if (uint1)0
  let equalize.buffer = _halide_buffer_init(alloca(size_of_halide_buffer_t()), make_struct((halide_dimension_t *), output.min.0, output.extent.0, 1, 0, ((min(output.extent.1, 256) + output.min.1) + -256), max(output.extent.1, 256), output.extent.0, 0), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 2, 32, 2, make_struct((halide_dimension_t *), output.min.0, output.extent.0, 1, 0, ((min(output.extent.1, 256) + output.min.1) + -256), max(output.extent.1, 256), output.extent.0, 0), (uint64)0)
  register_destructor("halide_device_free_as_destructor", equalize.buffer)
  produce equalize {
    consume cdf {
      consume Y {
        let halide_device_malloc_result = halide_device_malloc(equalize.buffer, halide_cuda_device_interface())
        assert((halide_device_malloc_result == 0), halide_device_malloc_result)
        let halide_copy_to_device_result = halide_copy_to_device(cdf.buffer, halide_cuda_device_interface())
        assert((halide_copy_to_device_result == 0), halide_copy_to_device_result)
        let t218 = (255.000000f/float32((input.extent.0*input.extent.1)))
        let t225 = (259 - min(output.extent.1, 256))
        let t223 = (258 - min(output.extent.1, 256))
        let t221 = (257 - min(output.extent.1, 256))
        let t219 = (256 - min(output.extent.1, 256))
        let t473 = (output.extent.0 + output.min.0)
        let t474 = (output.min.1 - Y.y.min_realized)
        let t458 = ((output.extent.1 + 255)/256)
        let t459 = ((output.extent.0 + 63)/64)
        let t461 = (output.extent.0/64)
        let t463 = (max(t473, 1536) - input.min.0.required)
        let t462 = (output.min.0 - input.min.0.required)
        let t460 = (output.extent.1 + -256)
        gpu_block<CUDA> (equalize.s0.y.y.__block_id_y, 0, t458) {
          gpu_block<CUDA> (equalize.s0.x.x.__block_id_x, 0, t459) {
            gpu_thread<CUDA> (.__thread_id_y, 0, 64) {
              gpu_thread<CUDA> (.__thread_id_x, 0, 16) {
                let equalize.s0.y.yi.base.s = min((equalize.s0.y.y.__block_id_y*256), t460)
                if ((equalize.s0.x.x.__block_id_x < t461)) {
                  equalize[ramp(((((.__thread_id_y*4) + (equalize.s0.y.yi.base.s + t219))*output.extent.0) + (((equalize.s0.x.x.__block_id_x*16) + .__thread_id_x)*4)), 1, 4)] = max(min((float32x4(cdf[int32x4(uint8x4(max(min(Y[ramp(((.__thread_id_x*4) + ((((.__thread_id_y*4) + (equalize.s0.y.yi.base.s + t474))*t463) + ((equalize.s0.x.x.__block_id_x*64) + t462))), 1, 4)], x4(255.000000f)), x4(0.000000f))))])*x4(t218)), x4(255.000000f)), x4(0.000000f))
                  equalize[ramp(((((.__thread_id_y*4) + (equalize.s0.y.yi.base.s + t221))*output.extent.0) + (((equalize.s0.x.x.__block_id_x*16) + .__thread_id_x)*4)), 1, 4)] = max(min((float32x4(cdf[int32x4(uint8x4(max(min(Y[ramp(((.__thread_id_x*4) + (((((.__thread_id_y*4) + (equalize.s0.y.yi.base.s + t474)) + 1)*t463) + ((equalize.s0.x.x.__block_id_x*64) + t462))), 1, 4)], x4(255.000000f)), x4(0.000000f))))])*x4(t218)), x4(255.000000f)), x4(0.000000f))
                  equalize[ramp(((((.__thread_id_y*4) + (equalize.s0.y.yi.base.s + t223))*output.extent.0) + (((equalize.s0.x.x.__block_id_x*16) + .__thread_id_x)*4)), 1, 4)] = max(min((float32x4(cdf[int32x4(uint8x4(max(min(Y[ramp(((.__thread_id_x*4) + (((((.__thread_id_y*4) + (equalize.s0.y.yi.base.s + t474)) + 2)*t463) + ((equalize.s0.x.x.__block_id_x*64) + t462))), 1, 4)], x4(255.000000f)), x4(0.000000f))))])*x4(t218)), x4(255.000000f)), x4(0.000000f))
                  equalize[ramp(((((.__thread_id_y*4) + (equalize.s0.y.yi.base.s + t225))*output.extent.0) + (((equalize.s0.x.x.__block_id_x*16) + .__thread_id_x)*4)), 1, 4)] = max(min((float32x4(cdf[int32x4(uint8x4(max(min(Y[ramp(((.__thread_id_x*4) + (((((.__thread_id_y*4) + (equalize.s0.y.yi.base.s + t474)) + 3)*t463) + ((equalize.s0.x.x.__block_id_x*64) + t462))), 1, 4)], x4(255.000000f)), x4(0.000000f))))])*x4(t218)), x4(255.000000f)), x4(0.000000f))
                } else {
                  equalize[ramp((((.__thread_id_x*4) + ((((.__thread_id_y*4) + (equalize.s0.y.yi.base.s + t219)) + 1)*output.extent.0)) + -64), 1, 4)] = max(min((float32x4(cdf[int32x4(uint8x4(max(min(Y[ramp((((.__thread_id_x*4) + (((max(t473, 1536) - input.min.0.required)*((.__thread_id_y*4) + (equalize.s0.y.yi.base.s + t474))) + (t473 - input.min.0.required))) + -64), 1, 4)], x4(255.000000f)), x4(0.000000f))))])*x4(t218)), x4(255.000000f)), x4(0.000000f))
                  equalize[ramp((((.__thread_id_x*4) + ((((.__thread_id_y*4) + (equalize.s0.y.yi.base.s + t221)) + 1)*output.extent.0)) + -64), 1, 4)] = max(min((float32x4(cdf[int32x4(uint8x4(max(min(Y[ramp((((.__thread_id_x*4) + (((max(t473, 1536) - input.min.0.required)*(((.__thread_id_y*4) + (equalize.s0.y.yi.base.s + t474)) + 1)) + (t473 - input.min.0.required))) + -64), 1, 4)], x4(255.000000f)), x4(0.000000f))))])*x4(t218)), x4(255.000000f)), x4(0.000000f))
                  equalize[ramp((((.__thread_id_x*4) + ((((.__thread_id_y*4) + (equalize.s0.y.yi.base.s + t223)) + 1)*output.extent.0)) + -64), 1, 4)] = max(min((float32x4(cdf[int32x4(uint8x4(max(min(Y[ramp((((.__thread_id_x*4) + (((max(t473, 1536) - input.min.0.required)*(((.__thread_id_y*4) + (equalize.s0.y.yi.base.s + t474)) + 2)) + (t473 - input.min.0.required))) + -64), 1, 4)], x4(255.000000f)), x4(0.000000f))))])*x4(t218)), x4(255.000000f)), x4(0.000000f))
                  equalize[ramp((((.__thread_id_x*4) + ((((.__thread_id_y*4) + (equalize.s0.y.yi.base.s + t225)) + 1)*output.extent.0)) + -64), 1, 4)] = max(min((float32x4(cdf[int32x4(uint8x4(max(min(Y[ramp((((.__thread_id_x*4) + (((max(t473, 1536) - input.min.0.required)*(((.__thread_id_y*4) + (equalize.s0.y.yi.base.s + t474)) + 3)) + (t473 - input.min.0.required))) + -64), 1, 4)], x4(255.000000f)), x4(0.000000f))))])*x4(t218)), x4(255.000000f)), x4(0.000000f))
                }
              }
            }
          }
        }
        let halide_device_free_result$4 = halide_device_free(Y.buffer)
        assert((halide_device_free_result$4 == 0), halide_device_free_result$4)
        free Y
        let halide_device_and_host_free_result = halide_device_and_host_free(cdf.buffer)
        assert((halide_device_and_host_free_result == 0), halide_device_and_host_free_result)
        free cdf
        _halide_buffer_set_device_dirty(equalize.buffer, (uint1)1)
      }
    }
  }
  produce output {
    consume equalize {
      consume Cr {
        consume Cb {
          let halide_copy_to_device_result$2 = halide_copy_to_device(output.buffer, halide_cuda_device_interface())
          assert((halide_copy_to_device_result$2 == 0), halide_copy_to_device_result$2)
          let t34.s = min((((output.extent.2 + -1)/2) - (((output.extent.2 + -1)/4)*2)), (((output.extent.2/2) - (((output.extent.2 + -1)/4)*2)) + -1))
          let t242.s = ((output.min.0 - (output.min.2*output.stride.2)) - (output.min.1*output.stride.1))
          let t238 = (512 - min(output.extent.0, 512))
          let t237 = (256 - min(output.extent.1, 256))
          let t240 = (32 - min(output.extent.1, 32))
          let t241 = (16 - min(output.extent.1, 16))
          let t486 = (output.extent.2 + 3)
          let t480 = max(output.extent.0, 512)
          let t482 = (t486/4)
          let t484 = (t486/2)
          let t475 = ((output.extent.1 + 7)/8)
          let t476 = ((output.extent.0 + 255)/256)
          let t481 = (t242.s - output.min.0)
          let t478 = (max(min(t34.s, 1), -1) + 1)
          let t485 = (output.extent.2 + -2)
          let t477 = (output.extent.1 + -8)
          gpu_block<CUDA> (output.s0.y.y.__block_id_y, 0, t475) {
            gpu_block<CUDA> (output.s0.x.x.__block_id_x, 0, t476) {
              gpu_thread<CUDA> (.__thread_id_z, 0, 2) {
                gpu_thread<CUDA> (.__thread_id_y, 0, 8) {
                  gpu_thread<CUDA> (.__thread_id_x, 0, 64) {
                    let output.s0.y.yi.base.s = min((output.s0.y.y.__block_id_y*8), t477)
                    if ((.__thread_id_z < t478)) {
                      let output.s0.x.xi.base.s = min((output.s0.x.x.__block_id_x*256), (output.extent.0 + -256))
                      let t251 = (((output.s0.y.yi.base.s + t241) + .__thread_id_y)*t480)
                      let t249 = (((output.s0.y.yi.base.s + t240) + .__thread_id_y)*t480)
                      let t247 = ((.__thread_id_x*4) + ((((output.s0.y.yi.base.s + t237) + .__thread_id_y)*output.extent.0) + output.s0.x.xi.base.s))
                      let t252 = ((.__thread_id_x*4) + ((((output.min.1 + output.s0.y.yi.base.s) + .__thread_id_y)*output.stride.1) + (output.s0.x.xi.base.s + t481)))
                      let t488 = (.__thread_id_x*4)
                      let t487 = (output.s0.x.xi.base.s + t238)
                      for (output.s0.c.c.c_serial_outer, 0, t482) {
                        output[ramp(((((((output.s0.c.c.c_serial_outer*2) + .__thread_id_z)*2) + output.min.2)*output.stride.2) + t252), 1, 4)] = (let t368 = equalize[ramp(t247, 1, 4)] in (let t370 = Cr[ramp(((t249 + t487) + t488), 1, 4)] in (let t371 = Cb[ramp(((t251 + t487) + t488), 1, 4)] in select((((((output.s0.c.c.c_serial_outer*2) + .__thread_id_z)*2) + output.min.2) == 0), uint8x4((max(min(((t370*x4(1.400000f)) + t368), x4(434.200012f)), x4(179.199997f)) + x4(-179.199997f))), select((((((output.s0.c.c.c_serial_outer*2) + .__thread_id_z)*2) + output.min.2) == 1), uint8x4((max(min(((t368 - (t371*x4(0.343000f))) - (t370*x4(0.711000f))), x4(120.087997f)), x4(-134.912003f)) + x4(134.912003f))), uint8x4((max(min(((t371*x4(1.765000f)) + t368), x4(480.919983f)), x4(225.919998f)) + x4(-225.919998f))))))))
                        output[ramp((((((((output.s0.c.c.c_serial_outer*2) + .__thread_id_z)*2) + output.min.2) + 1)*output.stride.2) + t252), 1, 4)] = (let t373 = equalize[ramp(t247, 1, 4)] in (let t375 = Cr[ramp(((t249 + t487) + t488), 1, 4)] in (let t376 = Cb[ramp(((t251 + t487) + t488), 1, 4)] in select((((((output.s0.c.c.c_serial_outer*2) + .__thread_id_z)*2) + output.min.2) == -1), uint8x4((max(min(((t375*x4(1.400000f)) + t373), x4(434.200012f)), x4(179.199997f)) + x4(-179.199997f))), select((((((output.s0.c.c.c_serial_outer*2) + .__thread_id_z)*2) + output.min.2) == 0), uint8x4((max(min(((t373 - (t376*x4(0.343000f))) - (t375*x4(0.711000f))), x4(120.087997f)), x4(-134.912003f)) + x4(134.912003f))), uint8x4((max(min(((t376*x4(1.765000f)) + t373), x4(480.919983f)), x4(225.919998f)) + x4(-225.919998f))))))))
                      }
                    } else {
                      let output.s0.x.xi.base.s = min((output.s0.x.x.__block_id_x*256), (output.extent.0 + -256))
                      let output.s0.c.c.c_serial_outer.new_max.s = min(((t484 - .__thread_id_z)/2), t482)
                      let t260 = (((output.s0.y.yi.base.s + t241) + .__thread_id_y)*t480)
                      let t258 = (((output.s0.y.yi.base.s + t240) + .__thread_id_y)*t480)
                      let t256 = ((.__thread_id_x*4) + ((((output.s0.y.yi.base.s + t237) + .__thread_id_y)*output.extent.0) + output.s0.x.xi.base.s))
                      let t261 = ((.__thread_id_x*4) + ((((output.min.1 + output.s0.y.yi.base.s) + .__thread_id_y)*output.stride.1) + (output.s0.x.xi.base.s + t481)))
                      let t491 = (.__thread_id_x*4)
                      let t490 = (output.s0.x.xi.base.s + t238)
                      for (output.s0.c.c.c_serial_outer, 0, output.s0.c.c.c_serial_outer.new_max.s) {
                        let output.s0.c.ci.base.s = min((((output.s0.c.c.c_serial_outer*2) + .__thread_id_z)*2), t485)
                        output[ramp((((output.min.2 + output.s0.c.ci.base.s)*output.stride.2) + t261), 1, 4)] = (let t378 = equalize[ramp(t256, 1, 4)] in (let t380 = Cr[ramp(((t258 + t490) + t491), 1, 4)] in (let t381 = Cb[ramp(((t260 + t490) + t491), 1, 4)] in select(((output.min.2 + output.s0.c.ci.base.s) == 0), uint8x4((max(min(((t380*x4(1.400000f)) + t378), x4(434.200012f)), x4(179.199997f)) + x4(-179.199997f))), select(((output.min.2 + output.s0.c.ci.base.s) == 1), uint8x4((max(min(((t378 - (t381*x4(0.343000f))) - (t380*x4(0.711000f))), x4(120.087997f)), x4(-134.912003f)) + x4(134.912003f))), uint8x4((max(min(((t381*x4(1.765000f)) + t378), x4(480.919983f)), x4(225.919998f)) + x4(-225.919998f))))))))
                        output[ramp(((((output.min.2 + output.s0.c.ci.base.s) + 1)*output.stride.2) + t261), 1, 4)] = (let t383 = equalize[ramp(t256, 1, 4)] in (let t385 = Cr[ramp(((t258 + t490) + t491), 1, 4)] in (let t386 = Cb[ramp(((t260 + t490) + t491), 1, 4)] in select(((output.min.2 + output.s0.c.ci.base.s) == -1), uint8x4((max(min(((t385*x4(1.400000f)) + t383), x4(434.200012f)), x4(179.199997f)) + x4(-179.199997f))), select(((output.min.2 + output.s0.c.ci.base.s) == 0), uint8x4((max(min(((t383 - (t386*x4(0.343000f))) - (t385*x4(0.711000f))), x4(120.087997f)), x4(-134.912003f)) + x4(134.912003f))), uint8x4((max(min(((t386*x4(1.765000f)) + t383), x4(480.919983f)), x4(225.919998f)) + x4(-225.919998f))))))))
                      }
                    }
                  }
                }
              }
            }
          }
          _halide_buffer_set_device_dirty(output.buffer, (uint1)1)
          let halide_device_free_result$3 = halide_device_free(Cb.buffer)
          assert((halide_device_free_result$3 == 0), halide_device_free_result$3)
          free Cb
          let halide_device_free_result$2 = halide_device_free(Cr.buffer)
          assert((halide_device_free_result$2 == 0), halide_device_free_result$2)
          free Cr
          let halide_device_free_result = halide_device_free(equalize.buffer)
          assert((halide_device_free_result == 0), halide_device_free_result)
          free equalize
        }
      }
    }
  }
}


Skipping Hexagon offload...
Module.compile(): stmt_name ./bin/hist_classic_auto_schedule.stmt
Constructing CUDA device codegen
Target triple of initial module: x86_64--linux-gnu
Generating llvm bitcode...
Generating llvm bitcode prolog for function hist_classic_auto_schedule...
Generating llvm bitcode for function hist_classic_auto_schedule...
Generating llvm bitcode for kernel...
Generating llvm bitcode for kernel...
Generating llvm bitcode for kernel...
Generating llvm bitcode for kernel...
Generating llvm bitcode for kernel...
Generating llvm bitcode for kernel...
Generating llvm bitcode for kernel...
Generating llvm bitcode for kernel...
Generating llvm bitcode for kernel...
Generating llvm bitcode for kernel...
PTX kernel:
//
// Generated by LLVM NVPTX Back-End
//

.version 3.2
.target sm_35
.address_size 64

	// .globl	kernel_Y_s0_y_y___block_id_y // -- Begin function kernel_Y_s0_y_y___block_id_y
                                        // @kernel_Y_s0_y_y___block_id_y
.visible .entry kernel_Y_s0_y_y___block_id_y(
	.param .u32 kernel_Y_s0_y_y___block_id_y_param_0,
	.param .u32 kernel_Y_s0_y_y___block_id_y_param_1,
	.param .u32 kernel_Y_s0_y_y___block_id_y_param_2,
	.param .u32 kernel_Y_s0_y_y___block_id_y_param_3,
	.param .u32 kernel_Y_s0_y_y___block_id_y_param_4,
	.param .u32 kernel_Y_s0_y_y___block_id_y_param_5,
	.param .u32 kernel_Y_s0_y_y___block_id_y_param_6,
	.param .u32 kernel_Y_s0_y_y___block_id_y_param_7,
	.param .u32 kernel_Y_s0_y_y___block_id_y_param_8,
	.param .u32 kernel_Y_s0_y_y___block_id_y_param_9,
	.param .u32 kernel_Y_s0_y_y___block_id_y_param_10,
	.param .u32 kernel_Y_s0_y_y___block_id_y_param_11,
	.param .u32 kernel_Y_s0_y_y___block_id_y_param_12,
	.param .u32 kernel_Y_s0_y_y___block_id_y_param_13,
	.param .u64 kernel_Y_s0_y_y___block_id_y_param_14,
	.param .u64 kernel_Y_s0_y_y___block_id_y_param_15
)
{
	.reg .pred 	%p<2>;
	.reg .b16 	%rs<97>;
	.reg .f32 	%f<101>;
	.reg .b32 	%r<64>;
	.reg .b64 	%rd<26>;

// %bb.0:                               // %entry
	ld.param.u32 	%r18, [kernel_Y_s0_y_y___block_id_y_param_13];
	ld.param.u32 	%r16, [kernel_Y_s0_y_y___block_id_y_param_11];
	ld.param.u32 	%r14, [kernel_Y_s0_y_y___block_id_y_param_9];
	ld.param.u32 	%r11, [kernel_Y_s0_y_y___block_id_y_param_3];
	ld.param.u32 	%r10, [kernel_Y_s0_y_y___block_id_y_param_2];
	ld.param.u32 	%r9, [kernel_Y_s0_y_y___block_id_y_param_1];
	ld.param.u32 	%r8, [kernel_Y_s0_y_y___block_id_y_param_0];
	ld.param.u64 	%rd6, [kernel_Y_s0_y_y___block_id_y_param_15];
	cvta.to.global.u64 	%rd1, %rd6;
	ld.param.u64 	%rd7, [kernel_Y_s0_y_y___block_id_y_param_14];
	cvta.to.global.u64 	%rd2, %rd7;
	mov.u32 	%r19, %ctaid.y;
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %tid.y;
	ld.param.u32 	%r20, [kernel_Y_s0_y_y___block_id_y_param_5];
	mov.u32 	%r3, %tid.x;
	ld.param.u32 	%r21, [kernel_Y_s0_y_y___block_id_y_param_6];
	shl.b32 	%r22, %r19, 6;
	ld.param.u32 	%r23, [kernel_Y_s0_y_y___block_id_y_param_7];
	add.s32 	%r24, %r22, %r20;
	min.s32 	%r4, %r24, %r21;
	setp.ge.s32 	%p1, %r1, %r23;
	@%p1 bra 	LBB0_2;
// %bb.1:                               // %true_bb
	ld.param.u32 	%r17, [kernel_Y_s0_y_y___block_id_y_param_12];
	ld.param.u32 	%r15, [kernel_Y_s0_y_y___block_id_y_param_10];
	ld.param.u32 	%r13, [kernel_Y_s0_y_y___block_id_y_param_8];
	shl.b32 	%r45, %r1, 7;
	add.s32 	%r46, %r45, %r13;
	shl.b32 	%r47, %r3, 3;
	add.s32 	%r48, %r4, %r2;
	mad.lo.s32 	%r49, %r48, %r11, %r47;
	sub.s32 	%r50, %r49, %r9;
	sub.s32 	%r51, %r50, %r14;
	add.s32 	%r52, %r51, %r15;
	add.s32 	%r53, %r52, %r46;
	cvt.s64.s32 	%rd16, %r53;
	add.s64 	%rd17, %rd1, %rd16;
	ld.global.nc.u8 	%rs49, [%rd17+2];
	cvt.u16.u8 	%rs50, %rs49;
	ld.global.nc.u8 	%rs51, [%rd17+3];
	cvt.u16.u8 	%rs52, %rs51;
	ld.global.nc.u8 	%rs53, [%rd17+1];
	cvt.u16.u8 	%rs54, %rs53;
	ld.global.nc.u8 	%rs55, [%rd17];
	cvt.u16.u8 	%rs56, %rs55;
	cvt.rn.f32.u16 	%f53, %rs56;
	cvt.rn.f32.u16 	%f54, %rs54;
	cvt.rn.f32.u16 	%f55, %rs52;
	cvt.rn.f32.u16 	%f56, %rs50;
	sub.s32 	%r54, %r51, %r16;
	add.s32 	%r55, %r54, %r46;
	cvt.s64.s32 	%rd18, %r55;
	add.s64 	%rd19, %rd1, %rd18;
	ld.global.nc.u8 	%rs57, [%rd19];
	cvt.u16.u8 	%rs58, %rs57;
	ld.global.nc.u8 	%rs59, [%rd19+1];
	cvt.u16.u8 	%rs60, %rs59;
	ld.global.nc.u8 	%rs61, [%rd19+3];
	cvt.u16.u8 	%rs62, %rs61;
	ld.global.nc.u8 	%rs63, [%rd19+2];
	cvt.u16.u8 	%rs64, %rs63;
	cvt.rn.f32.u16 	%f57, %rs64;
	cvt.rn.f32.u16 	%f58, %rs62;
	cvt.rn.f32.u16 	%f59, %rs60;
	cvt.rn.f32.u16 	%f60, %rs58;
	add.s32 	%r56, %r51, %r17;
	add.s32 	%r57, %r56, %r46;
	cvt.s64.s32 	%rd20, %r57;
	add.s64 	%rd21, %rd1, %rd20;
	ld.global.nc.u8 	%rs65, [%rd21+2];
	cvt.u16.u8 	%rs66, %rs65;
	ld.global.nc.u8 	%rs67, [%rd21+3];
	cvt.u16.u8 	%rs68, %rs67;
	ld.global.nc.u8 	%rs69, [%rd21+1];
	cvt.u16.u8 	%rs70, %rs69;
	ld.global.nc.u8 	%rs71, [%rd21];
	cvt.u16.u8 	%rs72, %rs71;
	cvt.rn.f32.u16 	%f61, %rs72;
	cvt.rn.f32.u16 	%f62, %rs70;
	cvt.rn.f32.u16 	%f63, %rs68;
	cvt.rn.f32.u16 	%f64, %rs66;
	mul.ftz.f32 	%f65, %f64, 0f3F1645A2;
	mul.ftz.f32 	%f66, %f63, 0f3F1645A2;
	mul.ftz.f32 	%f67, %f62, 0f3F1645A2;
	mul.ftz.f32 	%f68, %f61, 0f3F1645A2;
	fma.rn.ftz.f32 	%f69, %f60, 0f3E991687, %f68;
	fma.rn.ftz.f32 	%f70, %f59, 0f3E991687, %f67;
	fma.rn.ftz.f32 	%f71, %f58, 0f3E991687, %f66;
	fma.rn.ftz.f32 	%f72, %f57, 0f3E991687, %f65;
	fma.rn.ftz.f32 	%f73, %f56, 0f3DE978D5, %f72;
	fma.rn.ftz.f32 	%f74, %f55, 0f3DE978D5, %f71;
	fma.rn.ftz.f32 	%f75, %f54, 0f3DE978D5, %f70;
	fma.rn.ftz.f32 	%f76, %f53, 0f3DE978D5, %f69;
	sub.s32 	%r58, %r18, %r10;
	sub.s32 	%r59, %r48, %r8;
	add.s32 	%r60, %r47, %r46;
	sub.s32 	%r61, %r60, %r10;
	mad.lo.s32 	%r62, %r59, %r58, %r61;
	mul.wide.s32 	%rd22, %r62, 4;
	add.s64 	%rd23, %rd2, %rd22;
	st.global.f32 	[%rd23], %f76;
	st.global.f32 	[%rd23+4], %f75;
	st.global.f32 	[%rd23+12], %f74;
	st.global.f32 	[%rd23+8], %f73;
	ld.global.nc.u8 	%rs73, [%rd17+7];
	cvt.u16.u8 	%rs74, %rs73;
	ld.global.nc.u8 	%rs75, [%rd17+6];
	cvt.u16.u8 	%rs76, %rs75;
	ld.global.nc.u8 	%rs77, [%rd17+4];
	cvt.u16.u8 	%rs78, %rs77;
	ld.global.nc.u8 	%rs79, [%rd17+5];
	cvt.u16.u8 	%rs80, %rs79;
	cvt.rn.f32.u16 	%f77, %rs80;
	cvt.rn.f32.u16 	%f78, %rs78;
	cvt.rn.f32.u16 	%f79, %rs76;
	cvt.rn.f32.u16 	%f80, %rs74;
	ld.global.nc.u8 	%rs81, [%rd19+5];
	cvt.u16.u8 	%rs82, %rs81;
	ld.global.nc.u8 	%rs83, [%rd19+4];
	cvt.u16.u8 	%rs84, %rs83;
	ld.global.nc.u8 	%rs85, [%rd19+6];
	cvt.u16.u8 	%rs86, %rs85;
	ld.global.nc.u8 	%rs87, [%rd19+7];
	cvt.u16.u8 	%rs88, %rs87;
	cvt.rn.f32.u16 	%f81, %rs88;
	cvt.rn.f32.u16 	%f82, %rs86;
	cvt.rn.f32.u16 	%f83, %rs84;
	cvt.rn.f32.u16 	%f84, %rs82;
	ld.global.nc.u8 	%rs89, [%rd21+7];
	cvt.u16.u8 	%rs90, %rs89;
	ld.global.nc.u8 	%rs91, [%rd21+6];
	cvt.u16.u8 	%rs92, %rs91;
	ld.global.nc.u8 	%rs93, [%rd21+4];
	cvt.u16.u8 	%rs94, %rs93;
	ld.global.nc.u8 	%rs95, [%rd21+5];
	cvt.u16.u8 	%rs96, %rs95;
	cvt.rn.f32.u16 	%f85, %rs96;
	cvt.rn.f32.u16 	%f86, %rs94;
	cvt.rn.f32.u16 	%f87, %rs92;
	cvt.rn.f32.u16 	%f88, %rs90;
	mul.ftz.f32 	%f89, %f88, 0f3F1645A2;
	mul.ftz.f32 	%f90, %f87, 0f3F1645A2;
	mul.ftz.f32 	%f91, %f86, 0f3F1645A2;
	mul.ftz.f32 	%f92, %f85, 0f3F1645A2;
	fma.rn.ftz.f32 	%f93, %f84, 0f3E991687, %f92;
	fma.rn.ftz.f32 	%f94, %f83, 0f3E991687, %f91;
	fma.rn.ftz.f32 	%f95, %f82, 0f3E991687, %f90;
	fma.rn.ftz.f32 	%f96, %f81, 0f3E991687, %f89;
	fma.rn.ftz.f32 	%f100, %f80, 0f3DE978D5, %f96;
	fma.rn.ftz.f32 	%f99, %f79, 0f3DE978D5, %f95;
	fma.rn.ftz.f32 	%f97, %f78, 0f3DE978D5, %f94;
	fma.rn.ftz.f32 	%f98, %f77, 0f3DE978D5, %f93;
	st.global.f32 	[%rd23+20], %f98;
	st.global.f32 	[%rd23+16], %f97;
	add.s32 	%r63, %r62, 6;
	bra.uni 	LBB0_3;
LBB0_2:                                 // %false_bb
	ld.param.u32 	%r12, [kernel_Y_s0_y_y___block_id_y_param_4];
	shl.b32 	%r25, %r3, 3;
	add.s32 	%r26, %r4, %r2;
	shl.b32 	%r27, %r12, 1;
	mad.lo.s32 	%r28, %r26, %r11, %r25;
	sub.s32 	%r29, %r28, %r9;
	add.s32 	%r30, %r29, %r27;
	sub.s32 	%r31, %r30, %r14;
	sub.s32 	%r32, %r31, %r16;
	add.s32 	%r33, %r32, %r18;
	cvt.s64.s32 	%rd8, %r33;
	add.s64 	%rd9, %rd1, %rd8;
	ld.global.nc.u8 	%rs1, [%rd9+-126];
	cvt.u16.u8 	%rs2, %rs1;
	ld.global.nc.u8 	%rs3, [%rd9+-125];
	cvt.u16.u8 	%rs4, %rs3;
	ld.global.nc.u8 	%rs5, [%rd9+-127];
	cvt.u16.u8 	%rs6, %rs5;
	ld.global.nc.u8 	%rs7, [%rd9+-128];
	cvt.u16.u8 	%rs8, %rs7;
	cvt.rn.f32.u16 	%f7, %rs8;
	cvt.rn.f32.u16 	%f8, %rs6;
	cvt.rn.f32.u16 	%f9, %rs4;
	cvt.rn.f32.u16 	%f10, %rs2;
	sub.s32 	%r34, %r29, %r14;
	sub.s32 	%r35, %r34, %r16;
	add.s32 	%r36, %r35, %r18;
	cvt.s64.s32 	%rd10, %r36;
	add.s64 	%rd11, %rd1, %rd10;
	ld.global.nc.u8 	%rs9, [%rd11+-128];
	cvt.u16.u8 	%rs10, %rs9;
	ld.global.nc.u8 	%rs11, [%rd11+-127];
	cvt.u16.u8 	%rs12, %rs11;
	ld.global.nc.u8 	%rs13, [%rd11+-125];
	cvt.u16.u8 	%rs14, %rs13;
	ld.global.nc.u8 	%rs15, [%rd11+-126];
	cvt.u16.u8 	%rs16, %rs15;
	cvt.rn.f32.u16 	%f11, %rs16;
	cvt.rn.f32.u16 	%f12, %rs14;
	cvt.rn.f32.u16 	%f13, %rs12;
	cvt.rn.f32.u16 	%f14, %rs10;
	add.s32 	%r37, %r29, %r12;
	sub.s32 	%r38, %r37, %r14;
	sub.s32 	%r39, %r38, %r16;
	add.s32 	%r40, %r39, %r18;
	cvt.s64.s32 	%rd12, %r40;
	add.s64 	%rd13, %rd1, %rd12;
	ld.global.nc.u8 	%rs17, [%rd13+-126];
	cvt.u16.u8 	%rs18, %rs17;
	ld.global.nc.u8 	%rs19, [%rd13+-125];
	cvt.u16.u8 	%rs20, %rs19;
	ld.global.nc.u8 	%rs21, [%rd13+-127];
	cvt.u16.u8 	%rs22, %rs21;
	ld.global.nc.u8 	%rs23, [%rd13+-128];
	cvt.u16.u8 	%rs24, %rs23;
	cvt.rn.f32.u16 	%f15, %rs24;
	cvt.rn.f32.u16 	%f16, %rs22;
	cvt.rn.f32.u16 	%f17, %rs20;
	cvt.rn.f32.u16 	%f18, %rs18;
	mul.ftz.f32 	%f19, %f18, 0f3F1645A2;
	mul.ftz.f32 	%f20, %f17, 0f3F1645A2;
	mul.ftz.f32 	%f21, %f16, 0f3F1645A2;
	mul.ftz.f32 	%f22, %f15, 0f3F1645A2;
	fma.rn.ftz.f32 	%f23, %f14, 0f3E991687, %f22;
	fma.rn.ftz.f32 	%f24, %f13, 0f3E991687, %f21;
	fma.rn.ftz.f32 	%f25, %f12, 0f3E991687, %f20;
	fma.rn.ftz.f32 	%f26, %f11, 0f3E991687, %f19;
	fma.rn.ftz.f32 	%f27, %f10, 0f3DE978D5, %f26;
	fma.rn.ftz.f32 	%f28, %f9, 0f3DE978D5, %f25;
	fma.rn.ftz.f32 	%f29, %f8, 0f3DE978D5, %f24;
	fma.rn.ftz.f32 	%f30, %f7, 0f3DE978D5, %f23;
	sub.s32 	%r41, %r18, %r10;
	add.s32 	%r42, %r26, 1;
	sub.s32 	%r43, %r42, %r8;
	mad.lo.s32 	%r44, %r43, %r41, %r25;
	mul.wide.s32 	%rd14, %r44, 4;
	add.s64 	%rd15, %rd2, %rd14;
	st.global.f32 	[%rd15+-512], %f30;
	st.global.f32 	[%rd15+-508], %f29;
	st.global.f32 	[%rd15+-500], %f28;
	st.global.f32 	[%rd15+-504], %f27;
	ld.global.nc.u8 	%rs25, [%rd9+-121];
	cvt.u16.u8 	%rs26, %rs25;
	ld.global.nc.u8 	%rs27, [%rd9+-122];
	cvt.u16.u8 	%rs28, %rs27;
	ld.global.nc.u8 	%rs29, [%rd9+-124];
	cvt.u16.u8 	%rs30, %rs29;
	ld.global.nc.u8 	%rs31, [%rd9+-123];
	cvt.u16.u8 	%rs32, %rs31;
	cvt.rn.f32.u16 	%f31, %rs32;
	cvt.rn.f32.u16 	%f32, %rs30;
	cvt.rn.f32.u16 	%f33, %rs28;
	cvt.rn.f32.u16 	%f34, %rs26;
	ld.global.nc.u8 	%rs33, [%rd11+-123];
	cvt.u16.u8 	%rs34, %rs33;
	ld.global.nc.u8 	%rs35, [%rd11+-124];
	cvt.u16.u8 	%rs36, %rs35;
	ld.global.nc.u8 	%rs37, [%rd11+-122];
	cvt.u16.u8 	%rs38, %rs37;
	ld.global.nc.u8 	%rs39, [%rd11+-121];
	cvt.u16.u8 	%rs40, %rs39;
	cvt.rn.f32.u16 	%f35, %rs40;
	cvt.rn.f32.u16 	%f36, %rs38;
	cvt.rn.f32.u16 	%f37, %rs36;
	cvt.rn.f32.u16 	%f38, %rs34;
	ld.global.nc.u8 	%rs41, [%rd13+-121];
	cvt.u16.u8 	%rs42, %rs41;
	ld.global.nc.u8 	%rs43, [%rd13+-122];
	cvt.u16.u8 	%rs44, %rs43;
	ld.global.nc.u8 	%rs45, [%rd13+-124];
	cvt.u16.u8 	%rs46, %rs45;
	ld.global.nc.u8 	%rs47, [%rd13+-123];
	cvt.u16.u8 	%rs48, %rs47;
	cvt.rn.f32.u16 	%f39, %rs48;
	cvt.rn.f32.u16 	%f40, %rs46;
	cvt.rn.f32.u16 	%f41, %rs44;
	cvt.rn.f32.u16 	%f42, %rs42;
	mul.ftz.f32 	%f43, %f42, 0f3F1645A2;
	mul.ftz.f32 	%f44, %f41, 0f3F1645A2;
	mul.ftz.f32 	%f45, %f40, 0f3F1645A2;
	mul.ftz.f32 	%f46, %f39, 0f3F1645A2;
	fma.rn.ftz.f32 	%f47, %f38, 0f3E991687, %f46;
	fma.rn.ftz.f32 	%f48, %f37, 0f3E991687, %f45;
	fma.rn.ftz.f32 	%f49, %f36, 0f3E991687, %f44;
	fma.rn.ftz.f32 	%f50, %f35, 0f3E991687, %f43;
	fma.rn.ftz.f32 	%f100, %f34, 0f3DE978D5, %f50;
	fma.rn.ftz.f32 	%f99, %f33, 0f3DE978D5, %f49;
	fma.rn.ftz.f32 	%f51, %f32, 0f3DE978D5, %f48;
	fma.rn.ftz.f32 	%f52, %f31, 0f3DE978D5, %f47;
	st.global.f32 	[%rd15+-492], %f52;
	st.global.f32 	[%rd15+-496], %f51;
	add.s32 	%r63, %r44, -122;
LBB0_3:                                 // %after_bb
	mul.wide.s32 	%rd24, %r63, 4;
	add.s64 	%rd25, %rd2, %rd24;
	st.global.f32 	[%rd25+4], %f100;
	st.global.f32 	[%rd25], %f99;
	ret;
                                        // -- End function
}
	// .globl	kernel_Cb_s0_y_y___block_id_y // -- Begin function kernel_Cb_s0_y_y___block_id_y
.visible .entry kernel_Cb_s0_y_y___block_id_y(
	.param .u32 kernel_Cb_s0_y_y___block_id_y_param_0,
	.param .u32 kernel_Cb_s0_y_y___block_id_y_param_1,
	.param .u32 kernel_Cb_s0_y_y___block_id_y_param_2,
	.param .u32 kernel_Cb_s0_y_y___block_id_y_param_3,
	.param .u32 kernel_Cb_s0_y_y___block_id_y_param_4,
	.param .u32 kernel_Cb_s0_y_y___block_id_y_param_5,
	.param .u32 kernel_Cb_s0_y_y___block_id_y_param_6,
	.param .u32 kernel_Cb_s0_y_y___block_id_y_param_7,
	.param .u32 kernel_Cb_s0_y_y___block_id_y_param_8,
	.param .u32 kernel_Cb_s0_y_y___block_id_y_param_9,
	.param .u32 kernel_Cb_s0_y_y___block_id_y_param_10,
	.param .u32 kernel_Cb_s0_y_y___block_id_y_param_11,
	.param .u32 kernel_Cb_s0_y_y___block_id_y_param_12,
	.param .u32 kernel_Cb_s0_y_y___block_id_y_param_13,
	.param .u32 kernel_Cb_s0_y_y___block_id_y_param_14,
	.param .u32 kernel_Cb_s0_y_y___block_id_y_param_15,
	.param .u32 kernel_Cb_s0_y_y___block_id_y_param_16,
	.param .u64 kernel_Cb_s0_y_y___block_id_y_param_17,
	.param .u64 kernel_Cb_s0_y_y___block_id_y_param_18,
	.param .u64 kernel_Cb_s0_y_y___block_id_y_param_19
)                                       // @kernel_Cb_s0_y_y___block_id_y
{
	.reg .pred 	%p<2>;
	.reg .b16 	%rs<33>;
	.reg .f32 	%f<69>;
	.reg .b32 	%r<57>;
	.reg .b64 	%rd<28>;

// %bb.0:                               // %entry
	ld.param.u32 	%r18, [kernel_Cb_s0_y_y___block_id_y_param_13];
	ld.param.u32 	%r15, [kernel_Cb_s0_y_y___block_id_y_param_8];
	ld.param.u32 	%r14, [kernel_Cb_s0_y_y___block_id_y_param_7];
	ld.param.u32 	%r21, [kernel_Cb_s0_y_y___block_id_y_param_0];
	ld.param.u64 	%rd7, [kernel_Cb_s0_y_y___block_id_y_param_19];
	cvta.to.global.u64 	%rd1, %rd7;
	ld.param.u64 	%rd8, [kernel_Cb_s0_y_y___block_id_y_param_18];
	cvta.to.global.u64 	%rd2, %rd8;
	ld.param.u64 	%rd9, [kernel_Cb_s0_y_y___block_id_y_param_17];
	cvta.to.global.u64 	%rd3, %rd9;
	mov.u32 	%r22, %ctaid.y;
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r23, %tid.y;
	mov.u32 	%r24, %tid.x;
	shl.b32 	%r25, %r22, 4;
	ld.param.u32 	%r26, [kernel_Cb_s0_y_y___block_id_y_param_11];
	min.s32 	%r27, %r25, %r26;
	ld.param.u32 	%r28, [kernel_Cb_s0_y_y___block_id_y_param_10];
	setp.ge.s32 	%p1, %r1, %r28;
	shl.b32 	%r2, %r24, 3;
	add.s32 	%r3, %r27, %r23;
	ld.param.u32 	%r29, [kernel_Cb_s0_y_y___block_id_y_param_15];
	add.s32 	%r30, %r3, %r29;
	mul.lo.s32 	%r4, %r30, %r21;
	@%p1 bra 	LBB1_2;
// %bb.1:                               // %true_bb
	ld.param.u32 	%r19, [kernel_Cb_s0_y_y___block_id_y_param_14];
	ld.param.u32 	%r17, [kernel_Cb_s0_y_y___block_id_y_param_12];
	ld.param.u32 	%r16, [kernel_Cb_s0_y_y___block_id_y_param_9];
	ld.param.u32 	%r10, [kernel_Cb_s0_y_y___block_id_y_param_3];
	ld.param.u32 	%r8, [kernel_Cb_s0_y_y___block_id_y_param_1];
	shl.b32 	%r43, %r1, 9;
	add.s32 	%r44, %r2, %r43;
	add.s32 	%r45, %r44, %r8;
	add.s32 	%r46, %r45, %r4;
	cvt.s64.s32 	%rd18, %r46;
	add.s64 	%rd19, %rd1, %rd18;
	ld.global.nc.u8 	%rs17, [%rd19];
	cvt.u16.u8 	%rs18, %rs17;
	ld.global.nc.u8 	%rs19, [%rd19+1];
	cvt.u16.u8 	%rs20, %rs19;
	ld.global.nc.u8 	%rs21, [%rd19+3];
	cvt.u16.u8 	%rs22, %rs21;
	ld.global.nc.u8 	%rs23, [%rd19+2];
	cvt.u16.u8 	%rs24, %rs23;
	cvt.rn.f32.u16 	%f37, %rs24;
	cvt.rn.f32.u16 	%f38, %rs22;
	cvt.rn.f32.u16 	%f39, %rs20;
	cvt.rn.f32.u16 	%f40, %rs18;
	add.s32 	%r47, %r3, %r15;
	add.s32 	%r48, %r44, %r10;
	mad.lo.s32 	%r49, %r47, %r16, %r48;
	mul.wide.s32 	%rd20, %r49, 4;
	add.s64 	%rd21, %rd2, %rd20;
	ld.global.nc.f32 	%f41, [%rd21+4];
	ld.global.nc.f32 	%f42, [%rd21];
	ld.global.nc.f32 	%f43, [%rd21+8];
	ld.global.nc.f32 	%f44, [%rd21+12];
	sub.ftz.f32 	%f45, %f40, %f42;
	sub.ftz.f32 	%f46, %f39, %f41;
	sub.ftz.f32 	%f47, %f38, %f44;
	sub.ftz.f32 	%f48, %f37, %f43;
	fma.rn.ftz.f32 	%f49, %f48, 0f3F10624E, 0f43000000;
	fma.rn.ftz.f32 	%f50, %f47, 0f3F10624E, 0f43000000;
	fma.rn.ftz.f32 	%f51, %f46, 0f3F10624E, 0f43000000;
	fma.rn.ftz.f32 	%f52, %f45, 0f3F10624E, 0f43000000;
	add.s32 	%r50, %r3, %r18;
	mul.lo.s32 	%r51, %r50, %r14;
	add.s32 	%r52, %r44, %r19;
	add.s32 	%r53, %r52, %r51;
	mul.wide.s32 	%rd22, %r53, 4;
	add.s64 	%rd23, %rd3, %rd22;
	st.global.f32 	[%rd23], %f52;
	st.global.f32 	[%rd23+4], %f51;
	st.global.f32 	[%rd23+12], %f50;
	st.global.f32 	[%rd23+8], %f49;
	ld.global.nc.u8 	%rs25, [%rd19+5];
	cvt.u16.u8 	%rs26, %rs25;
	ld.global.nc.u8 	%rs27, [%rd19+4];
	cvt.u16.u8 	%rs28, %rs27;
	ld.global.nc.u8 	%rs29, [%rd19+6];
	cvt.u16.u8 	%rs30, %rs29;
	ld.global.nc.u8 	%rs31, [%rd19+7];
	cvt.u16.u8 	%rs32, %rs31;
	cvt.rn.f32.u16 	%f53, %rs32;
	cvt.rn.f32.u16 	%f54, %rs30;
	cvt.rn.f32.u16 	%f55, %rs28;
	cvt.rn.f32.u16 	%f56, %rs26;
	ld.global.nc.f32 	%f57, [%rd21+16];
	ld.global.nc.f32 	%f58, [%rd21+20];
	ld.global.nc.f32 	%f59, [%rd21+28];
	ld.global.nc.f32 	%f60, [%rd21+24];
	sub.ftz.f32 	%f61, %f56, %f58;
	sub.ftz.f32 	%f62, %f55, %f57;
	sub.ftz.f32 	%f63, %f54, %f60;
	sub.ftz.f32 	%f64, %f53, %f59;
	fma.rn.ftz.f32 	%f68, %f64, 0f3F10624E, 0f43000000;
	fma.rn.ftz.f32 	%f67, %f63, 0f3F10624E, 0f43000000;
	fma.rn.ftz.f32 	%f65, %f62, 0f3F10624E, 0f43000000;
	fma.rn.ftz.f32 	%f66, %f61, 0f3F10624E, 0f43000000;
	add.s32 	%r54, %r44, %r17;
	add.s32 	%r55, %r54, %r51;
	mul.wide.s32 	%rd24, %r55, 4;
	add.s64 	%rd25, %rd3, %rd24;
	st.global.f32 	[%rd25+4], %f66;
	st.global.f32 	[%rd25], %f65;
	add.s32 	%r56, %r55, 2;
	bra.uni 	LBB1_3;
LBB1_2:                                 // %false_bb
	ld.param.u32 	%r20, [kernel_Cb_s0_y_y___block_id_y_param_16];
	ld.param.u32 	%r13, [kernel_Cb_s0_y_y___block_id_y_param_6];
	ld.param.u32 	%r12, [kernel_Cb_s0_y_y___block_id_y_param_5];
	ld.param.u32 	%r11, [kernel_Cb_s0_y_y___block_id_y_param_4];
	ld.param.u32 	%r9, [kernel_Cb_s0_y_y___block_id_y_param_2];
	add.s32 	%r31, %r4, %r2;
	add.s32 	%r32, %r31, %r13;
	cvt.s64.s32 	%rd10, %r32;
	add.s64 	%rd11, %rd1, %rd10;
	ld.global.nc.u8 	%rs1, [%rd11];
	cvt.u16.u8 	%rs2, %rs1;
	ld.global.nc.u8 	%rs3, [%rd11+1];
	cvt.u16.u8 	%rs4, %rs3;
	ld.global.nc.u8 	%rs5, [%rd11+3];
	cvt.u16.u8 	%rs6, %rs5;
	ld.global.nc.u8 	%rs7, [%rd11+2];
	cvt.u16.u8 	%rs8, %rs7;
	cvt.rn.f32.u16 	%f7, %rs8;
	cvt.rn.f32.u16 	%f8, %rs6;
	cvt.rn.f32.u16 	%f9, %rs4;
	cvt.rn.f32.u16 	%f10, %rs2;
	max.s32 	%r33, %r11, 1536;
	sub.s32 	%r34, %r33, %r20;
	add.s32 	%r35, %r3, %r15;
	sub.s32 	%r36, %r11, %r20;
	add.s32 	%r37, %r36, %r2;
	mad.lo.s32 	%r38, %r35, %r34, %r37;
	mul.wide.s32 	%rd12, %r38, 4;
	add.s64 	%rd13, %rd2, %rd12;
	ld.global.nc.f32 	%f11, [%rd13+-2044];
	ld.global.nc.f32 	%f12, [%rd13+-2048];
	ld.global.nc.f32 	%f13, [%rd13+-2040];
	ld.global.nc.f32 	%f14, [%rd13+-2036];
	sub.ftz.f32 	%f15, %f10, %f12;
	sub.ftz.f32 	%f16, %f9, %f11;
	sub.ftz.f32 	%f17, %f8, %f14;
	sub.ftz.f32 	%f18, %f7, %f13;
	fma.rn.ftz.f32 	%f19, %f18, 0f3F10624E, 0f43000000;
	fma.rn.ftz.f32 	%f20, %f17, 0f3F10624E, 0f43000000;
	fma.rn.ftz.f32 	%f21, %f16, 0f3F10624E, 0f43000000;
	fma.rn.ftz.f32 	%f22, %f15, 0f3F10624E, 0f43000000;
	add.s32 	%r39, %r3, %r18;
	add.s32 	%r40, %r2, %r9;
	mad.lo.s32 	%r41, %r39, %r14, %r40;
	mul.wide.s32 	%rd14, %r41, 4;
	add.s64 	%rd15, %rd3, %rd14;
	st.global.f32 	[%rd15], %f22;
	st.global.f32 	[%rd15+4], %f21;
	st.global.f32 	[%rd15+12], %f20;
	st.global.f32 	[%rd15+8], %f19;
	add.s32 	%r42, %r31, %r12;
	cvt.s64.s32 	%rd16, %r42;
	add.s64 	%rd17, %rd1, %rd16;
	ld.global.nc.u8 	%rs9, [%rd17+1];
	cvt.u16.u8 	%rs10, %rs9;
	ld.global.nc.u8 	%rs11, [%rd17];
	cvt.u16.u8 	%rs12, %rs11;
	ld.global.nc.u8 	%rs13, [%rd17+2];
	cvt.u16.u8 	%rs14, %rs13;
	ld.global.nc.u8 	%rs15, [%rd17+3];
	cvt.u16.u8 	%rs16, %rs15;
	cvt.rn.f32.u16 	%f23, %rs16;
	cvt.rn.f32.u16 	%f24, %rs14;
	cvt.rn.f32.u16 	%f25, %rs12;
	cvt.rn.f32.u16 	%f26, %rs10;
	ld.global.nc.f32 	%f27, [%rd13+-2032];
	ld.global.nc.f32 	%f28, [%rd13+-2028];
	ld.global.nc.f32 	%f29, [%rd13+-2020];
	ld.global.nc.f32 	%f30, [%rd13+-2024];
	sub.ftz.f32 	%f31, %f26, %f28;
	sub.ftz.f32 	%f32, %f25, %f27;
	sub.ftz.f32 	%f33, %f24, %f30;
	sub.ftz.f32 	%f34, %f23, %f29;
	fma.rn.ftz.f32 	%f68, %f34, 0f3F10624E, 0f43000000;
	fma.rn.ftz.f32 	%f67, %f33, 0f3F10624E, 0f43000000;
	fma.rn.ftz.f32 	%f35, %f32, 0f3F10624E, 0f43000000;
	fma.rn.ftz.f32 	%f36, %f31, 0f3F10624E, 0f43000000;
	st.global.f32 	[%rd15+20], %f36;
	st.global.f32 	[%rd15+16], %f35;
	add.s32 	%r56, %r41, 6;
LBB1_3:                                 // %after_bb
	mul.wide.s32 	%rd26, %r56, 4;
	add.s64 	%rd27, %rd3, %rd26;
	st.global.f32 	[%rd27+4], %f68;
	st.global.f32 	[%rd27], %f67;
	ret;
                                        // -- End function
}
	// .globl	kernel_Cr_s0_y_y___block_id_y // -- Begin function kernel_Cr_s0_y_y___block_id_y
.visible .entry kernel_Cr_s0_y_y___block_id_y(
	.param .u32 kernel_Cr_s0_y_y___block_id_y_param_0,
	.param .u32 kernel_Cr_s0_y_y___block_id_y_param_1,
	.param .u32 kernel_Cr_s0_y_y___block_id_y_param_2,
	.param .u32 kernel_Cr_s0_y_y___block_id_y_param_3,
	.param .u32 kernel_Cr_s0_y_y___block_id_y_param_4,
	.param .u32 kernel_Cr_s0_y_y___block_id_y_param_5,
	.param .u32 kernel_Cr_s0_y_y___block_id_y_param_6,
	.param .u32 kernel_Cr_s0_y_y___block_id_y_param_7,
	.param .u32 kernel_Cr_s0_y_y___block_id_y_param_8,
	.param .u32 kernel_Cr_s0_y_y___block_id_y_param_9,
	.param .u32 kernel_Cr_s0_y_y___block_id_y_param_10,
	.param .u32 kernel_Cr_s0_y_y___block_id_y_param_11,
	.param .u32 kernel_Cr_s0_y_y___block_id_y_param_12,
	.param .u32 kernel_Cr_s0_y_y___block_id_y_param_13,
	.param .u32 kernel_Cr_s0_y_y___block_id_y_param_14,
	.param .u32 kernel_Cr_s0_y_y___block_id_y_param_15,
	.param .u32 kernel_Cr_s0_y_y___block_id_y_param_16,
	.param .u32 kernel_Cr_s0_y_y___block_id_y_param_17,
	.param .u32 kernel_Cr_s0_y_y___block_id_y_param_18,
	.param .u32 kernel_Cr_s0_y_y___block_id_y_param_19,
	.param .u64 kernel_Cr_s0_y_y___block_id_y_param_20,
	.param .u64 kernel_Cr_s0_y_y___block_id_y_param_21,
	.param .u64 kernel_Cr_s0_y_y___block_id_y_param_22
)                                       // @kernel_Cr_s0_y_y___block_id_y
{
	.reg .pred 	%p<2>;
	.reg .b16 	%rs<65>;
	.reg .f32 	%f<133>;
	.reg .b32 	%r<66>;
	.reg .b64 	%rd<30>;

// %bb.0:                               // %entry
	ld.param.u32 	%r21, [kernel_Cr_s0_y_y___block_id_y_param_15];
	ld.param.u32 	%r16, [kernel_Cr_s0_y_y___block_id_y_param_8];
	ld.param.u32 	%r15, [kernel_Cr_s0_y_y___block_id_y_param_7];
	ld.param.u64 	%rd7, [kernel_Cr_s0_y_y___block_id_y_param_22];
	cvta.to.global.u64 	%rd1, %rd7;
	ld.param.u64 	%rd8, [kernel_Cr_s0_y_y___block_id_y_param_21];
	cvta.to.global.u64 	%rd2, %rd8;
	ld.param.u64 	%rd9, [kernel_Cr_s0_y_y___block_id_y_param_20];
	cvta.to.global.u64 	%rd3, %rd9;
	mov.u32 	%r24, %ctaid.y;
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r25, %tid.y;
	mov.u32 	%r26, %tid.x;
	shl.b32 	%r27, %r24, 5;
	ld.param.u32 	%r28, [kernel_Cr_s0_y_y___block_id_y_param_11];
	min.s32 	%r29, %r27, %r28;
	ld.param.u32 	%r30, [kernel_Cr_s0_y_y___block_id_y_param_10];
	setp.ge.s32 	%p1, %r1, %r30;
	shl.b32 	%r2, %r26, 4;
	add.s32 	%r3, %r29, %r25;
	ld.param.u32 	%r31, [kernel_Cr_s0_y_y___block_id_y_param_17];
	add.s32 	%r32, %r3, %r31;
	ld.param.u32 	%r33, [kernel_Cr_s0_y_y___block_id_y_param_18];
	mul.lo.s32 	%r4, %r32, %r33;
	@%p1 bra 	LBB2_2;
// %bb.1:                               // %true_bb
	ld.param.u32 	%r22, [kernel_Cr_s0_y_y___block_id_y_param_16];
	ld.param.u32 	%r20, [kernel_Cr_s0_y_y___block_id_y_param_14];
	ld.param.u32 	%r19, [kernel_Cr_s0_y_y___block_id_y_param_13];
	ld.param.u32 	%r18, [kernel_Cr_s0_y_y___block_id_y_param_12];
	ld.param.u32 	%r17, [kernel_Cr_s0_y_y___block_id_y_param_9];
	ld.param.u32 	%r11, [kernel_Cr_s0_y_y___block_id_y_param_3];
	ld.param.u32 	%r9, [kernel_Cr_s0_y_y___block_id_y_param_1];
	shl.b32 	%r48, %r1, 9;
	add.s32 	%r49, %r2, %r48;
	add.s32 	%r50, %r49, %r9;
	add.s32 	%r51, %r50, %r4;
	cvt.s64.s32 	%rd16, %r51;
	add.s64 	%rd17, %rd1, %rd16;
	ld.global.nc.u8 	%rs33, [%rd17+1];
	cvt.u16.u8 	%rs34, %rs33;
	ld.global.nc.u8 	%rs35, [%rd17];
	cvt.u16.u8 	%rs36, %rs35;
	ld.global.nc.u8 	%rs37, [%rd17+3];
	cvt.u16.u8 	%rs38, %rs37;
	ld.global.nc.u8 	%rs39, [%rd17+2];
	cvt.u16.u8 	%rs40, %rs39;
	cvt.rn.f32.u16 	%f69, %rs40;
	cvt.rn.f32.u16 	%f70, %rs38;
	cvt.rn.f32.u16 	%f71, %rs36;
	cvt.rn.f32.u16 	%f72, %rs34;
	add.s32 	%r52, %r3, %r16;
	add.s32 	%r53, %r49, %r11;
	mad.lo.s32 	%r54, %r52, %r17, %r53;
	mul.wide.s32 	%rd18, %r54, 4;
	add.s64 	%rd19, %rd2, %rd18;
	ld.global.nc.f32 	%f73, [%rd19];
	ld.global.nc.f32 	%f74, [%rd19+4];
	ld.global.nc.f32 	%f75, [%rd19+8];
	ld.global.nc.f32 	%f76, [%rd19+12];
	sub.ftz.f32 	%f77, %f72, %f74;
	sub.ftz.f32 	%f78, %f71, %f73;
	sub.ftz.f32 	%f79, %f70, %f76;
	sub.ftz.f32 	%f80, %f69, %f75;
	fma.rn.ftz.f32 	%f81, %f80, 0f3F36872B, 0f43000000;
	fma.rn.ftz.f32 	%f82, %f79, 0f3F36872B, 0f43000000;
	fma.rn.ftz.f32 	%f83, %f78, 0f3F36872B, 0f43000000;
	fma.rn.ftz.f32 	%f84, %f77, 0f3F36872B, 0f43000000;
	add.s32 	%r55, %r3, %r21;
	mul.lo.s32 	%r56, %r55, %r15;
	add.s32 	%r57, %r49, %r22;
	add.s32 	%r58, %r57, %r56;
	mul.wide.s32 	%rd20, %r58, 4;
	add.s64 	%rd21, %rd3, %rd20;
	st.global.f32 	[%rd21+4], %f84;
	st.global.f32 	[%rd21], %f83;
	st.global.f32 	[%rd21+12], %f82;
	st.global.f32 	[%rd21+8], %f81;
	ld.global.nc.u8 	%rs41, [%rd17+5];
	cvt.u16.u8 	%rs42, %rs41;
	ld.global.nc.u8 	%rs43, [%rd17+4];
	cvt.u16.u8 	%rs44, %rs43;
	ld.global.nc.u8 	%rs45, [%rd17+7];
	cvt.u16.u8 	%rs46, %rs45;
	ld.global.nc.u8 	%rs47, [%rd17+6];
	cvt.u16.u8 	%rs48, %rs47;
	cvt.rn.f32.u16 	%f85, %rs48;
	cvt.rn.f32.u16 	%f86, %rs46;
	cvt.rn.f32.u16 	%f87, %rs44;
	cvt.rn.f32.u16 	%f88, %rs42;
	ld.global.nc.f32 	%f89, [%rd19+16];
	ld.global.nc.f32 	%f90, [%rd19+20];
	ld.global.nc.f32 	%f91, [%rd19+24];
	ld.global.nc.f32 	%f92, [%rd19+28];
	sub.ftz.f32 	%f93, %f88, %f90;
	sub.ftz.f32 	%f94, %f87, %f89;
	sub.ftz.f32 	%f95, %f86, %f92;
	sub.ftz.f32 	%f96, %f85, %f91;
	fma.rn.ftz.f32 	%f97, %f96, 0f3F36872B, 0f43000000;
	fma.rn.ftz.f32 	%f98, %f95, 0f3F36872B, 0f43000000;
	fma.rn.ftz.f32 	%f99, %f94, 0f3F36872B, 0f43000000;
	fma.rn.ftz.f32 	%f100, %f93, 0f3F36872B, 0f43000000;
	add.s32 	%r59, %r49, %r20;
	add.s32 	%r60, %r59, %r56;
	mul.wide.s32 	%rd22, %r60, 4;
	add.s64 	%rd23, %rd3, %rd22;
	st.global.f32 	[%rd23+4], %f100;
	st.global.f32 	[%rd23], %f99;
	st.global.f32 	[%rd23+12], %f98;
	st.global.f32 	[%rd23+8], %f97;
	ld.global.nc.u8 	%rs49, [%rd17+8];
	cvt.u16.u8 	%rs50, %rs49;
	ld.global.nc.u8 	%rs51, [%rd17+9];
	cvt.u16.u8 	%rs52, %rs51;
	ld.global.nc.u8 	%rs53, [%rd17+11];
	cvt.u16.u8 	%rs54, %rs53;
	ld.global.nc.u8 	%rs55, [%rd17+10];
	cvt.u16.u8 	%rs56, %rs55;
	cvt.rn.f32.u16 	%f101, %rs56;
	cvt.rn.f32.u16 	%f102, %rs54;
	cvt.rn.f32.u16 	%f103, %rs52;
	cvt.rn.f32.u16 	%f104, %rs50;
	ld.global.nc.f32 	%f105, [%rd19+36];
	ld.global.nc.f32 	%f106, [%rd19+32];
	ld.global.nc.f32 	%f107, [%rd19+40];
	ld.global.nc.f32 	%f108, [%rd19+44];
	sub.ftz.f32 	%f109, %f104, %f106;
	sub.ftz.f32 	%f110, %f103, %f105;
	sub.ftz.f32 	%f111, %f102, %f108;
	sub.ftz.f32 	%f112, %f101, %f107;
	fma.rn.ftz.f32 	%f113, %f112, 0f3F36872B, 0f43000000;
	fma.rn.ftz.f32 	%f114, %f111, 0f3F36872B, 0f43000000;
	fma.rn.ftz.f32 	%f115, %f110, 0f3F36872B, 0f43000000;
	fma.rn.ftz.f32 	%f116, %f109, 0f3F36872B, 0f43000000;
	add.s32 	%r61, %r49, %r19;
	add.s32 	%r62, %r61, %r56;
	mul.wide.s32 	%rd24, %r62, 4;
	add.s64 	%rd25, %rd3, %rd24;
	st.global.f32 	[%rd25], %f116;
	st.global.f32 	[%rd25+4], %f115;
	st.global.f32 	[%rd25+12], %f114;
	st.global.f32 	[%rd25+8], %f113;
	ld.global.nc.u8 	%rs57, [%rd17+13];
	cvt.u16.u8 	%rs58, %rs57;
	ld.global.nc.u8 	%rs59, [%rd17+12];
	cvt.u16.u8 	%rs60, %rs59;
	ld.global.nc.u8 	%rs61, [%rd17+14];
	cvt.u16.u8 	%rs62, %rs61;
	ld.global.nc.u8 	%rs63, [%rd17+15];
	cvt.u16.u8 	%rs64, %rs63;
	cvt.rn.f32.u16 	%f117, %rs64;
	cvt.rn.f32.u16 	%f118, %rs62;
	cvt.rn.f32.u16 	%f119, %rs60;
	cvt.rn.f32.u16 	%f120, %rs58;
	ld.global.nc.f32 	%f121, [%rd19+48];
	ld.global.nc.f32 	%f122, [%rd19+52];
	ld.global.nc.f32 	%f123, [%rd19+60];
	ld.global.nc.f32 	%f124, [%rd19+56];
	sub.ftz.f32 	%f125, %f120, %f122;
	sub.ftz.f32 	%f126, %f119, %f121;
	sub.ftz.f32 	%f127, %f118, %f124;
	sub.ftz.f32 	%f128, %f117, %f123;
	fma.rn.ftz.f32 	%f132, %f128, 0f3F36872B, 0f43000000;
	fma.rn.ftz.f32 	%f131, %f127, 0f3F36872B, 0f43000000;
	fma.rn.ftz.f32 	%f129, %f126, 0f3F36872B, 0f43000000;
	fma.rn.ftz.f32 	%f130, %f125, 0f3F36872B, 0f43000000;
	add.s32 	%r63, %r49, %r18;
	add.s32 	%r64, %r63, %r56;
	mul.wide.s32 	%rd26, %r64, 4;
	add.s64 	%rd27, %rd3, %rd26;
	st.global.f32 	[%rd27+4], %f130;
	st.global.f32 	[%rd27], %f129;
	add.s32 	%r65, %r64, 2;
	bra.uni 	LBB2_3;
LBB2_2:                                 // %false_bb
	ld.param.u32 	%r23, [kernel_Cr_s0_y_y___block_id_y_param_19];
	ld.param.u32 	%r14, [kernel_Cr_s0_y_y___block_id_y_param_6];
	ld.param.u32 	%r13, [kernel_Cr_s0_y_y___block_id_y_param_5];
	ld.param.u32 	%r12, [kernel_Cr_s0_y_y___block_id_y_param_4];
	ld.param.u32 	%r10, [kernel_Cr_s0_y_y___block_id_y_param_2];
	ld.param.u32 	%r8, [kernel_Cr_s0_y_y___block_id_y_param_0];
	add.s32 	%r34, %r4, %r2;
	add.s32 	%r35, %r34, %r12;
	sub.s32 	%r36, %r35, %r13;
	sub.s32 	%r37, %r36, %r14;
	sub.s32 	%r38, %r37, %r23;
	cvt.s64.s32 	%rd10, %r38;
	add.s64 	%rd11, %rd1, %rd10;
	ld.global.nc.u8 	%rs1, [%rd11+-511];
	cvt.u16.u8 	%rs2, %rs1;
	ld.global.nc.u8 	%rs3, [%rd11+-512];
	cvt.u16.u8 	%rs4, %rs3;
	ld.global.nc.u8 	%rs5, [%rd11+-509];
	cvt.u16.u8 	%rs6, %rs5;
	ld.global.nc.u8 	%rs7, [%rd11+-510];
	cvt.u16.u8 	%rs8, %rs7;
	cvt.rn.f32.u16 	%f7, %rs8;
	cvt.rn.f32.u16 	%f8, %rs6;
	cvt.rn.f32.u16 	%f9, %rs4;
	cvt.rn.f32.u16 	%f10, %rs2;
	max.s32 	%r39, %r12, 1536;
	sub.s32 	%r40, %r39, %r8;
	add.s32 	%r41, %r3, %r16;
	sub.s32 	%r42, %r12, %r8;
	add.s32 	%r43, %r42, %r2;
	mad.lo.s32 	%r44, %r41, %r40, %r43;
	mul.wide.s32 	%rd12, %r44, 4;
	add.s64 	%rd13, %rd2, %rd12;
	ld.global.nc.f32 	%f11, [%rd13+-2048];
	ld.global.nc.f32 	%f12, [%rd13+-2044];
	ld.global.nc.f32 	%f13, [%rd13+-2040];
	ld.global.nc.f32 	%f14, [%rd13+-2036];
	sub.ftz.f32 	%f15, %f10, %f12;
	sub.ftz.f32 	%f16, %f9, %f11;
	sub.ftz.f32 	%f17, %f8, %f14;
	sub.ftz.f32 	%f18, %f7, %f13;
	fma.rn.ftz.f32 	%f19, %f18, 0f3F36872B, 0f43000000;
	fma.rn.ftz.f32 	%f20, %f17, 0f3F36872B, 0f43000000;
	fma.rn.ftz.f32 	%f21, %f16, 0f3F36872B, 0f43000000;
	fma.rn.ftz.f32 	%f22, %f15, 0f3F36872B, 0f43000000;
	add.s32 	%r45, %r3, %r21;
	add.s32 	%r46, %r2, %r10;
	mad.lo.s32 	%r47, %r45, %r15, %r46;
	mul.wide.s32 	%rd14, %r47, 4;
	add.s64 	%rd15, %rd3, %rd14;
	st.global.f32 	[%rd15+4], %f22;
	st.global.f32 	[%rd15], %f21;
	st.global.f32 	[%rd15+12], %f20;
	st.global.f32 	[%rd15+8], %f19;
	ld.global.nc.u8 	%rs9, [%rd11+-507];
	cvt.u16.u8 	%rs10, %rs9;
	ld.global.nc.u8 	%rs11, [%rd11+-508];
	cvt.u16.u8 	%rs12, %rs11;
	ld.global.nc.u8 	%rs13, [%rd11+-505];
	cvt.u16.u8 	%rs14, %rs13;
	ld.global.nc.u8 	%rs15, [%rd11+-506];
	cvt.u16.u8 	%rs16, %rs15;
	cvt.rn.f32.u16 	%f23, %rs16;
	cvt.rn.f32.u16 	%f24, %rs14;
	cvt.rn.f32.u16 	%f25, %rs12;
	cvt.rn.f32.u16 	%f26, %rs10;
	ld.global.nc.f32 	%f27, [%rd13+-2032];
	ld.global.nc.f32 	%f28, [%rd13+-2028];
	ld.global.nc.f32 	%f29, [%rd13+-2024];
	ld.global.nc.f32 	%f30, [%rd13+-2020];
	sub.ftz.f32 	%f31, %f26, %f28;
	sub.ftz.f32 	%f32, %f25, %f27;
	sub.ftz.f32 	%f33, %f24, %f30;
	sub.ftz.f32 	%f34, %f23, %f29;
	fma.rn.ftz.f32 	%f35, %f34, 0f3F36872B, 0f43000000;
	fma.rn.ftz.f32 	%f36, %f33, 0f3F36872B, 0f43000000;
	fma.rn.ftz.f32 	%f37, %f32, 0f3F36872B, 0f43000000;
	fma.rn.ftz.f32 	%f38, %f31, 0f3F36872B, 0f43000000;
	st.global.f32 	[%rd15+20], %f38;
	st.global.f32 	[%rd15+16], %f37;
	st.global.f32 	[%rd15+28], %f36;
	st.global.f32 	[%rd15+24], %f35;
	ld.global.nc.u8 	%rs17, [%rd11+-504];
	cvt.u16.u8 	%rs18, %rs17;
	ld.global.nc.u8 	%rs19, [%rd11+-503];
	cvt.u16.u8 	%rs20, %rs19;
	ld.global.nc.u8 	%rs21, [%rd11+-501];
	cvt.u16.u8 	%rs22, %rs21;
	ld.global.nc.u8 	%rs23, [%rd11+-502];
	cvt.u16.u8 	%rs24, %rs23;
	cvt.rn.f32.u16 	%f39, %rs24;
	cvt.rn.f32.u16 	%f40, %rs22;
	cvt.rn.f32.u16 	%f41, %rs20;
	cvt.rn.f32.u16 	%f42, %rs18;
	ld.global.nc.f32 	%f43, [%rd13+-2012];
	ld.global.nc.f32 	%f44, [%rd13+-2016];
	ld.global.nc.f32 	%f45, [%rd13+-2008];
	ld.global.nc.f32 	%f46, [%rd13+-2004];
	sub.ftz.f32 	%f47, %f42, %f44;
	sub.ftz.f32 	%f48, %f41, %f43;
	sub.ftz.f32 	%f49, %f40, %f46;
	sub.ftz.f32 	%f50, %f39, %f45;
	fma.rn.ftz.f32 	%f51, %f50, 0f3F36872B, 0f43000000;
	fma.rn.ftz.f32 	%f52, %f49, 0f3F36872B, 0f43000000;
	fma.rn.ftz.f32 	%f53, %f48, 0f3F36872B, 0f43000000;
	fma.rn.ftz.f32 	%f54, %f47, 0f3F36872B, 0f43000000;
	st.global.f32 	[%rd15+32], %f54;
	st.global.f32 	[%rd15+36], %f53;
	st.global.f32 	[%rd15+44], %f52;
	st.global.f32 	[%rd15+40], %f51;
	ld.global.nc.u8 	%rs25, [%rd11+-499];
	cvt.u16.u8 	%rs26, %rs25;
	ld.global.nc.u8 	%rs27, [%rd11+-500];
	cvt.u16.u8 	%rs28, %rs27;
	ld.global.nc.u8 	%rs29, [%rd11+-498];
	cvt.u16.u8 	%rs30, %rs29;
	ld.global.nc.u8 	%rs31, [%rd11+-497];
	cvt.u16.u8 	%rs32, %rs31;
	cvt.rn.f32.u16 	%f55, %rs32;
	cvt.rn.f32.u16 	%f56, %rs30;
	cvt.rn.f32.u16 	%f57, %rs28;
	cvt.rn.f32.u16 	%f58, %rs26;
	ld.global.nc.f32 	%f59, [%rd13+-2000];
	ld.global.nc.f32 	%f60, [%rd13+-1996];
	ld.global.nc.f32 	%f61, [%rd13+-1988];
	ld.global.nc.f32 	%f62, [%rd13+-1992];
	sub.ftz.f32 	%f63, %f58, %f60;
	sub.ftz.f32 	%f64, %f57, %f59;
	sub.ftz.f32 	%f65, %f56, %f62;
	sub.ftz.f32 	%f66, %f55, %f61;
	fma.rn.ftz.f32 	%f132, %f66, 0f3F36872B, 0f43000000;
	fma.rn.ftz.f32 	%f131, %f65, 0f3F36872B, 0f43000000;
	fma.rn.ftz.f32 	%f67, %f64, 0f3F36872B, 0f43000000;
	fma.rn.ftz.f32 	%f68, %f63, 0f3F36872B, 0f43000000;
	st.global.f32 	[%rd15+52], %f68;
	st.global.f32 	[%rd15+48], %f67;
	add.s32 	%r65, %r47, 14;
LBB2_3:                                 // %after_bb
	mul.wide.s32 	%rd28, %r65, 4;
	add.s64 	%rd29, %rd3, %rd28;
	st.global.f32 	[%rd29+4], %f132;
	st.global.f32 	[%rd29], %f131;
	ret;
                                        // -- End function
}
	// .globl	kernel_hist_rows_s0_y_y___block_id_y // -- Begin function kernel_hist_rows_s0_y_y___block_id_y
.visible .entry kernel_hist_rows_s0_y_y___block_id_y(
	.param .u64 kernel_hist_rows_s0_y_y___block_id_y_param_0
)                                       // @kernel_hist_rows_s0_y_y___block_id_y
{
	.reg .b32 	%r<13>;
	.reg .b64 	%rd<5>;

// %bb.0:                               // %entry
	ld.param.u64 	%rd1, [kernel_hist_rows_s0_y_y___block_id_y_param_0];
	cvta.to.global.u64 	%rd2, %rd1;
	mov.u32 	%r1, %ctaid.y;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %tid.y;
	mov.u32 	%r4, %tid.x;
	shl.b32 	%r5, %r1, 6;
	add.s32 	%r6, %r3, %r5;
	shl.b32 	%r7, %r6, 6;
	add.s32 	%r8, %r7, %r2;
	shl.b32 	%r9, %r8, 4;
	add.s32 	%r10, %r9, %r4;
	shl.b32 	%r11, %r10, 1;
	mul.wide.s32 	%rd3, %r11, 4;
	add.s64 	%rd4, %rd2, %rd3;
	mov.u32 	%r12, 0;
	st.global.u32 	[%rd4], %r12;
	st.global.u32 	[%rd4+4], %r12;
	st.global.u32 	[%rd4+1024], %r12;
	st.global.u32 	[%rd4+1028], %r12;
	st.global.u32 	[%rd4+2048], %r12;
	st.global.u32 	[%rd4+2052], %r12;
	st.global.u32 	[%rd4+3072], %r12;
	st.global.u32 	[%rd4+3076], %r12;
	st.global.u32 	[%rd4+4096], %r12;
	st.global.u32 	[%rd4+4100], %r12;
	st.global.u32 	[%rd4+5120], %r12;
	st.global.u32 	[%rd4+5124], %r12;
	st.global.u32 	[%rd4+6144], %r12;
	st.global.u32 	[%rd4+6148], %r12;
	st.global.u32 	[%rd4+7168], %r12;
	st.global.u32 	[%rd4+7172], %r12;
	ret;
                                        // -- End function
}
	// .globl	kernel_hist_rows_s1_y_y___block_id_x // -- Begin function kernel_hist_rows_s1_y_y___block_id_x
.visible .entry kernel_hist_rows_s1_y_y___block_id_x(
	.param .u32 kernel_hist_rows_s1_y_y___block_id_x_param_0,
	.param .u32 kernel_hist_rows_s1_y_y___block_id_x_param_1,
	.param .u32 kernel_hist_rows_s1_y_y___block_id_x_param_2,
	.param .u64 kernel_hist_rows_s1_y_y___block_id_x_param_3,
	.param .u64 kernel_hist_rows_s1_y_y___block_id_x_param_4
)                                       // @kernel_hist_rows_s1_y_y___block_id_x
{
	.reg .pred 	%p<9>;
	.reg .f32 	%f<97>;
	.reg .b32 	%r<167>;
	.reg .b64 	%rd<142>;

// %bb.0:                               // %entry
	ld.param.u32 	%r34, [kernel_hist_rows_s1_y_y___block_id_x_param_2];
	ld.param.u32 	%r33, [kernel_hist_rows_s1_y_y___block_id_x_param_1];
	ld.param.u32 	%r36, [kernel_hist_rows_s1_y_y___block_id_x_param_0];
	ld.param.u64 	%rd4, [kernel_hist_rows_s1_y_y___block_id_x_param_4];
	cvta.to.global.u64 	%rd1, %rd4;
	ld.param.u64 	%rd5, [kernel_hist_rows_s1_y_y___block_id_x_param_3];
	cvta.to.global.u64 	%rd2, %rd5;
	mov.u32 	%r37, %ctaid.x;
	mov.u32 	%r38, %tid.x;
	shl.b32 	%r39, %r37, 6;
	add.s32 	%r40, %r39, %r38;
	shl.b32 	%r41, %r40, 3;
	sub.s32 	%r42, %r41, %r36;
	mul.lo.s32 	%r1, %r42, %r34;
	shl.b32 	%r2, %r40, 11;
	sub.s32 	%r3, %r1, %r33;
	mov.u32 	%r159, 0;
LBB4_1:                                 // %"for hist_rows.s1.r4$x"
                                        // =>This Inner Loop Header: Depth=1
	add.s32 	%r43, %r3, %r159;
	mul.wide.s32 	%rd6, %r43, 4;
	add.s64 	%rd7, %rd2, %rd6;
	ld.global.nc.f32 	%f1, [%rd7];
	min.ftz.f32 	%f2, %f1, 0f437F0000;
	max.ftz.f32 	%f3, %f2, 0f00000000;
	cvt.rzi.ftz.s32.f32 	%r44, %f3;
	add.s32 	%r45, %r2, %r44;
	mul.wide.s32 	%rd8, %r45, 4;
	add.s64 	%rd9, %rd1, %rd8;
	ld.global.u32 	%r46, [%rd9];
	add.s32 	%r47, %r46, 1;
	st.global.u32 	[%rd9], %r47;
	ld.global.nc.f32 	%f4, [%rd7+4];
	min.ftz.f32 	%f5, %f4, 0f437F0000;
	max.ftz.f32 	%f6, %f5, 0f00000000;
	cvt.rzi.ftz.s32.f32 	%r48, %f6;
	add.s32 	%r49, %r2, %r48;
	mul.wide.s32 	%rd10, %r49, 4;
	add.s64 	%rd11, %rd1, %rd10;
	ld.global.u32 	%r50, [%rd11];
	add.s32 	%r51, %r50, 1;
	st.global.u32 	[%rd11], %r51;
	ld.global.nc.f32 	%f7, [%rd7+8];
	min.ftz.f32 	%f8, %f7, 0f437F0000;
	max.ftz.f32 	%f9, %f8, 0f00000000;
	cvt.rzi.ftz.s32.f32 	%r52, %f9;
	add.s32 	%r53, %r2, %r52;
	mul.wide.s32 	%rd12, %r53, 4;
	add.s64 	%rd13, %rd1, %rd12;
	ld.global.u32 	%r54, [%rd13];
	add.s32 	%r55, %r54, 1;
	st.global.u32 	[%rd13], %r55;
	ld.global.nc.f32 	%f10, [%rd7+12];
	min.ftz.f32 	%f11, %f10, 0f437F0000;
	max.ftz.f32 	%f12, %f11, 0f00000000;
	cvt.rzi.ftz.s32.f32 	%r56, %f12;
	add.s32 	%r57, %r2, %r56;
	mul.wide.s32 	%rd14, %r57, 4;
	add.s64 	%rd15, %rd1, %rd14;
	ld.global.u32 	%r58, [%rd15];
	add.s32 	%r59, %r58, 1;
	st.global.u32 	[%rd15], %r59;
	add.s32 	%r159, %r159, 4;
	setp.ne.s32 	%p1, %r159, 1536;
	@%p1 bra 	LBB4_1;
// %bb.2:                               // %"end for hist_rows.s1.r4$x"
	add.s32 	%r6, %r1, %r34;
	sub.s32 	%r7, %r6, %r33;
	mov.u32 	%r160, 0;
LBB4_3:                                 // %"for hist_rows.s1.r4$x.1"
                                        // =>This Inner Loop Header: Depth=1
	add.s32 	%r61, %r7, %r160;
	mul.wide.s32 	%rd16, %r61, 4;
	add.s64 	%rd17, %rd2, %rd16;
	ld.global.nc.f32 	%f13, [%rd17];
	min.ftz.f32 	%f14, %f13, 0f437F0000;
	max.ftz.f32 	%f15, %f14, 0f00000000;
	cvt.rzi.ftz.s32.f32 	%r62, %f15;
	cvt.s64.s32 	%rd18, %r62;
	cvt.s64.s32 	%rd3, %r2;
	add.s64 	%rd19, %rd3, %rd18;
	shl.b64 	%rd20, %rd19, 2;
	add.s64 	%rd21, %rd1, %rd20;
	ld.global.u32 	%r63, [%rd21+1024];
	add.s32 	%r64, %r63, 1;
	st.global.u32 	[%rd21+1024], %r64;
	ld.global.nc.f32 	%f16, [%rd17+4];
	min.ftz.f32 	%f17, %f16, 0f437F0000;
	max.ftz.f32 	%f18, %f17, 0f00000000;
	cvt.rzi.ftz.s32.f32 	%r65, %f18;
	cvt.s64.s32 	%rd22, %r65;
	add.s64 	%rd23, %rd3, %rd22;
	shl.b64 	%rd24, %rd23, 2;
	add.s64 	%rd25, %rd1, %rd24;
	ld.global.u32 	%r66, [%rd25+1024];
	add.s32 	%r67, %r66, 1;
	st.global.u32 	[%rd25+1024], %r67;
	ld.global.nc.f32 	%f19, [%rd17+8];
	min.ftz.f32 	%f20, %f19, 0f437F0000;
	max.ftz.f32 	%f21, %f20, 0f00000000;
	cvt.rzi.ftz.s32.f32 	%r68, %f21;
	cvt.s64.s32 	%rd26, %r68;
	add.s64 	%rd27, %rd3, %rd26;
	shl.b64 	%rd28, %rd27, 2;
	add.s64 	%rd29, %rd1, %rd28;
	ld.global.u32 	%r69, [%rd29+1024];
	add.s32 	%r70, %r69, 1;
	st.global.u32 	[%rd29+1024], %r70;
	ld.global.nc.f32 	%f22, [%rd17+12];
	min.ftz.f32 	%f23, %f22, 0f437F0000;
	max.ftz.f32 	%f24, %f23, 0f00000000;
	cvt.rzi.ftz.s32.f32 	%r71, %f24;
	cvt.s64.s32 	%rd30, %r71;
	add.s64 	%rd31, %rd3, %rd30;
	shl.b64 	%rd32, %rd31, 2;
	add.s64 	%rd33, %rd1, %rd32;
	ld.global.u32 	%r72, [%rd33+1024];
	add.s32 	%r73, %r72, 1;
	st.global.u32 	[%rd33+1024], %r73;
	add.s32 	%r160, %r160, 4;
	setp.ne.s32 	%p2, %r160, 1536;
	@%p2 bra 	LBB4_3;
// %bb.4:                               // %"end for hist_rows.s1.r4$x.1"
	add.s32 	%r10, %r6, %r34;
	sub.s32 	%r11, %r10, %r33;
	mov.u32 	%r161, 0;
LBB4_5:                                 // %"for hist_rows.s1.r4$x.2"
                                        // =>This Inner Loop Header: Depth=1
	add.s32 	%r75, %r11, %r161;
	mul.wide.s32 	%rd34, %r75, 4;
	add.s64 	%rd35, %rd2, %rd34;
	ld.global.nc.f32 	%f25, [%rd35];
	min.ftz.f32 	%f26, %f25, 0f437F0000;
	max.ftz.f32 	%f27, %f26, 0f00000000;
	cvt.rzi.ftz.s32.f32 	%r76, %f27;
	cvt.s64.s32 	%rd36, %r76;
	add.s64 	%rd37, %rd3, %rd36;
	shl.b64 	%rd38, %rd37, 2;
	add.s64 	%rd39, %rd1, %rd38;
	ld.global.u32 	%r77, [%rd39+2048];
	add.s32 	%r78, %r77, 1;
	st.global.u32 	[%rd39+2048], %r78;
	ld.global.nc.f32 	%f28, [%rd35+4];
	min.ftz.f32 	%f29, %f28, 0f437F0000;
	max.ftz.f32 	%f30, %f29, 0f00000000;
	cvt.rzi.ftz.s32.f32 	%r79, %f30;
	cvt.s64.s32 	%rd40, %r79;
	add.s64 	%rd41, %rd3, %rd40;
	shl.b64 	%rd42, %rd41, 2;
	add.s64 	%rd43, %rd1, %rd42;
	ld.global.u32 	%r80, [%rd43+2048];
	add.s32 	%r81, %r80, 1;
	st.global.u32 	[%rd43+2048], %r81;
	ld.global.nc.f32 	%f31, [%rd35+8];
	min.ftz.f32 	%f32, %f31, 0f437F0000;
	max.ftz.f32 	%f33, %f32, 0f00000000;
	cvt.rzi.ftz.s32.f32 	%r82, %f33;
	cvt.s64.s32 	%rd44, %r82;
	add.s64 	%rd45, %rd3, %rd44;
	shl.b64 	%rd46, %rd45, 2;
	add.s64 	%rd47, %rd1, %rd46;
	ld.global.u32 	%r83, [%rd47+2048];
	add.s32 	%r84, %r83, 1;
	st.global.u32 	[%rd47+2048], %r84;
	ld.global.nc.f32 	%f34, [%rd35+12];
	min.ftz.f32 	%f35, %f34, 0f437F0000;
	max.ftz.f32 	%f36, %f35, 0f00000000;
	cvt.rzi.ftz.s32.f32 	%r85, %f36;
	cvt.s64.s32 	%rd48, %r85;
	add.s64 	%rd49, %rd3, %rd48;
	shl.b64 	%rd50, %rd49, 2;
	add.s64 	%rd51, %rd1, %rd50;
	ld.global.u32 	%r86, [%rd51+2048];
	add.s32 	%r87, %r86, 1;
	st.global.u32 	[%rd51+2048], %r87;
	add.s32 	%r161, %r161, 4;
	setp.ne.s32 	%p3, %r161, 1536;
	@%p3 bra 	LBB4_5;
// %bb.6:                               // %"end for hist_rows.s1.r4$x.2"
	add.s32 	%r14, %r10, %r34;
	sub.s32 	%r15, %r14, %r33;
	mov.u32 	%r162, 0;
LBB4_7:                                 // %"for hist_rows.s1.r4$x.3"
                                        // =>This Inner Loop Header: Depth=1
	add.s32 	%r89, %r15, %r162;
	mul.wide.s32 	%rd52, %r89, 4;
	add.s64 	%rd53, %rd2, %rd52;
	ld.global.nc.f32 	%f37, [%rd53];
	min.ftz.f32 	%f38, %f37, 0f437F0000;
	max.ftz.f32 	%f39, %f38, 0f00000000;
	cvt.rzi.ftz.s32.f32 	%r90, %f39;
	cvt.s64.s32 	%rd54, %r90;
	add.s64 	%rd55, %rd3, %rd54;
	shl.b64 	%rd56, %rd55, 2;
	add.s64 	%rd57, %rd1, %rd56;
	ld.global.u32 	%r91, [%rd57+3072];
	add.s32 	%r92, %r91, 1;
	st.global.u32 	[%rd57+3072], %r92;
	ld.global.nc.f32 	%f40, [%rd53+4];
	min.ftz.f32 	%f41, %f40, 0f437F0000;
	max.ftz.f32 	%f42, %f41, 0f00000000;
	cvt.rzi.ftz.s32.f32 	%r93, %f42;
	cvt.s64.s32 	%rd58, %r93;
	add.s64 	%rd59, %rd3, %rd58;
	shl.b64 	%rd60, %rd59, 2;
	add.s64 	%rd61, %rd1, %rd60;
	ld.global.u32 	%r94, [%rd61+3072];
	add.s32 	%r95, %r94, 1;
	st.global.u32 	[%rd61+3072], %r95;
	ld.global.nc.f32 	%f43, [%rd53+8];
	min.ftz.f32 	%f44, %f43, 0f437F0000;
	max.ftz.f32 	%f45, %f44, 0f00000000;
	cvt.rzi.ftz.s32.f32 	%r96, %f45;
	cvt.s64.s32 	%rd62, %r96;
	add.s64 	%rd63, %rd3, %rd62;
	shl.b64 	%rd64, %rd63, 2;
	add.s64 	%rd65, %rd1, %rd64;
	ld.global.u32 	%r97, [%rd65+3072];
	add.s32 	%r98, %r97, 1;
	st.global.u32 	[%rd65+3072], %r98;
	ld.global.nc.f32 	%f46, [%rd53+12];
	min.ftz.f32 	%f47, %f46, 0f437F0000;
	max.ftz.f32 	%f48, %f47, 0f00000000;
	cvt.rzi.ftz.s32.f32 	%r99, %f48;
	cvt.s64.s32 	%rd66, %r99;
	add.s64 	%rd67, %rd3, %rd66;
	shl.b64 	%rd68, %rd67, 2;
	add.s64 	%rd69, %rd1, %rd68;
	ld.global.u32 	%r100, [%rd69+3072];
	add.s32 	%r101, %r100, 1;
	st.global.u32 	[%rd69+3072], %r101;
	add.s32 	%r162, %r162, 4;
	setp.ne.s32 	%p4, %r162, 1536;
	@%p4 bra 	LBB4_7;
// %bb.8:                               // %"end for hist_rows.s1.r4$x.3"
	add.s32 	%r18, %r14, %r34;
	sub.s32 	%r19, %r18, %r33;
	mov.u32 	%r163, 0;
LBB4_9:                                 // %"for hist_rows.s1.r4$x.4"
                                        // =>This Inner Loop Header: Depth=1
	add.s32 	%r103, %r19, %r163;
	mul.wide.s32 	%rd70, %r103, 4;
	add.s64 	%rd71, %rd2, %rd70;
	ld.global.nc.f32 	%f49, [%rd71];
	min.ftz.f32 	%f50, %f49, 0f437F0000;
	max.ftz.f32 	%f51, %f50, 0f00000000;
	cvt.rzi.ftz.s32.f32 	%r104, %f51;
	cvt.s64.s32 	%rd72, %r104;
	add.s64 	%rd73, %rd3, %rd72;
	shl.b64 	%rd74, %rd73, 2;
	add.s64 	%rd75, %rd1, %rd74;
	ld.global.u32 	%r105, [%rd75+4096];
	add.s32 	%r106, %r105, 1;
	st.global.u32 	[%rd75+4096], %r106;
	ld.global.nc.f32 	%f52, [%rd71+4];
	min.ftz.f32 	%f53, %f52, 0f437F0000;
	max.ftz.f32 	%f54, %f53, 0f00000000;
	cvt.rzi.ftz.s32.f32 	%r107, %f54;
	cvt.s64.s32 	%rd76, %r107;
	add.s64 	%rd77, %rd3, %rd76;
	shl.b64 	%rd78, %rd77, 2;
	add.s64 	%rd79, %rd1, %rd78;
	ld.global.u32 	%r108, [%rd79+4096];
	add.s32 	%r109, %r108, 1;
	st.global.u32 	[%rd79+4096], %r109;
	ld.global.nc.f32 	%f55, [%rd71+8];
	min.ftz.f32 	%f56, %f55, 0f437F0000;
	max.ftz.f32 	%f57, %f56, 0f00000000;
	cvt.rzi.ftz.s32.f32 	%r110, %f57;
	cvt.s64.s32 	%rd80, %r110;
	add.s64 	%rd81, %rd3, %rd80;
	shl.b64 	%rd82, %rd81, 2;
	add.s64 	%rd83, %rd1, %rd82;
	ld.global.u32 	%r111, [%rd83+4096];
	add.s32 	%r112, %r111, 1;
	st.global.u32 	[%rd83+4096], %r112;
	ld.global.nc.f32 	%f58, [%rd71+12];
	min.ftz.f32 	%f59, %f58, 0f437F0000;
	max.ftz.f32 	%f60, %f59, 0f00000000;
	cvt.rzi.ftz.s32.f32 	%r113, %f60;
	cvt.s64.s32 	%rd84, %r113;
	add.s64 	%rd85, %rd3, %rd84;
	shl.b64 	%rd86, %rd85, 2;
	add.s64 	%rd87, %rd1, %rd86;
	ld.global.u32 	%r114, [%rd87+4096];
	add.s32 	%r115, %r114, 1;
	st.global.u32 	[%rd87+4096], %r115;
	add.s32 	%r163, %r163, 4;
	setp.ne.s32 	%p5, %r163, 1536;
	@%p5 bra 	LBB4_9;
// %bb.10:                              // %"end for hist_rows.s1.r4$x.4"
	add.s32 	%r22, %r18, %r34;
	sub.s32 	%r23, %r22, %r33;
	mov.u32 	%r164, 0;
LBB4_11:                                // %"for hist_rows.s1.r4$x.5"
                                        // =>This Inner Loop Header: Depth=1
	add.s32 	%r117, %r23, %r164;
	mul.wide.s32 	%rd88, %r117, 4;
	add.s64 	%rd89, %rd2, %rd88;
	ld.global.nc.f32 	%f61, [%rd89];
	min.ftz.f32 	%f62, %f61, 0f437F0000;
	max.ftz.f32 	%f63, %f62, 0f00000000;
	cvt.rzi.ftz.s32.f32 	%r118, %f63;
	cvt.s64.s32 	%rd90, %r118;
	add.s64 	%rd91, %rd3, %rd90;
	shl.b64 	%rd92, %rd91, 2;
	add.s64 	%rd93, %rd1, %rd92;
	ld.global.u32 	%r119, [%rd93+5120];
	add.s32 	%r120, %r119, 1;
	st.global.u32 	[%rd93+5120], %r120;
	ld.global.nc.f32 	%f64, [%rd89+4];
	min.ftz.f32 	%f65, %f64, 0f437F0000;
	max.ftz.f32 	%f66, %f65, 0f00000000;
	cvt.rzi.ftz.s32.f32 	%r121, %f66;
	cvt.s64.s32 	%rd94, %r121;
	add.s64 	%rd95, %rd3, %rd94;
	shl.b64 	%rd96, %rd95, 2;
	add.s64 	%rd97, %rd1, %rd96;
	ld.global.u32 	%r122, [%rd97+5120];
	add.s32 	%r123, %r122, 1;
	st.global.u32 	[%rd97+5120], %r123;
	ld.global.nc.f32 	%f67, [%rd89+8];
	min.ftz.f32 	%f68, %f67, 0f437F0000;
	max.ftz.f32 	%f69, %f68, 0f00000000;
	cvt.rzi.ftz.s32.f32 	%r124, %f69;
	cvt.s64.s32 	%rd98, %r124;
	add.s64 	%rd99, %rd3, %rd98;
	shl.b64 	%rd100, %rd99, 2;
	add.s64 	%rd101, %rd1, %rd100;
	ld.global.u32 	%r125, [%rd101+5120];
	add.s32 	%r126, %r125, 1;
	st.global.u32 	[%rd101+5120], %r126;
	ld.global.nc.f32 	%f70, [%rd89+12];
	min.ftz.f32 	%f71, %f70, 0f437F0000;
	max.ftz.f32 	%f72, %f71, 0f00000000;
	cvt.rzi.ftz.s32.f32 	%r127, %f72;
	cvt.s64.s32 	%rd102, %r127;
	add.s64 	%rd103, %rd3, %rd102;
	shl.b64 	%rd104, %rd103, 2;
	add.s64 	%rd105, %rd1, %rd104;
	ld.global.u32 	%r128, [%rd105+5120];
	add.s32 	%r129, %r128, 1;
	st.global.u32 	[%rd105+5120], %r129;
	add.s32 	%r164, %r164, 4;
	setp.ne.s32 	%p6, %r164, 1536;
	@%p6 bra 	LBB4_11;
// %bb.12:                              // %"end for hist_rows.s1.r4$x.5"
	add.s32 	%r26, %r22, %r34;
	sub.s32 	%r27, %r26, %r33;
	mov.u32 	%r165, 0;
LBB4_13:                                // %"for hist_rows.s1.r4$x.6"
                                        // =>This Inner Loop Header: Depth=1
	add.s32 	%r131, %r27, %r165;
	mul.wide.s32 	%rd106, %r131, 4;
	add.s64 	%rd107, %rd2, %rd106;
	ld.global.nc.f32 	%f73, [%rd107];
	min.ftz.f32 	%f74, %f73, 0f437F0000;
	max.ftz.f32 	%f75, %f74, 0f00000000;
	cvt.rzi.ftz.s32.f32 	%r132, %f75;
	cvt.s64.s32 	%rd108, %r132;
	add.s64 	%rd109, %rd3, %rd108;
	shl.b64 	%rd110, %rd109, 2;
	add.s64 	%rd111, %rd1, %rd110;
	ld.global.u32 	%r133, [%rd111+6144];
	add.s32 	%r134, %r133, 1;
	st.global.u32 	[%rd111+6144], %r134;
	ld.global.nc.f32 	%f76, [%rd107+4];
	min.ftz.f32 	%f77, %f76, 0f437F0000;
	max.ftz.f32 	%f78, %f77, 0f00000000;
	cvt.rzi.ftz.s32.f32 	%r135, %f78;
	cvt.s64.s32 	%rd112, %r135;
	add.s64 	%rd113, %rd3, %rd112;
	shl.b64 	%rd114, %rd113, 2;
	add.s64 	%rd115, %rd1, %rd114;
	ld.global.u32 	%r136, [%rd115+6144];
	add.s32 	%r137, %r136, 1;
	st.global.u32 	[%rd115+6144], %r137;
	ld.global.nc.f32 	%f79, [%rd107+8];
	min.ftz.f32 	%f80, %f79, 0f437F0000;
	max.ftz.f32 	%f81, %f80, 0f00000000;
	cvt.rzi.ftz.s32.f32 	%r138, %f81;
	cvt.s64.s32 	%rd116, %r138;
	add.s64 	%rd117, %rd3, %rd116;
	shl.b64 	%rd118, %rd117, 2;
	add.s64 	%rd119, %rd1, %rd118;
	ld.global.u32 	%r139, [%rd119+6144];
	add.s32 	%r140, %r139, 1;
	st.global.u32 	[%rd119+6144], %r140;
	ld.global.nc.f32 	%f82, [%rd107+12];
	min.ftz.f32 	%f83, %f82, 0f437F0000;
	max.ftz.f32 	%f84, %f83, 0f00000000;
	cvt.rzi.ftz.s32.f32 	%r141, %f84;
	cvt.s64.s32 	%rd120, %r141;
	add.s64 	%rd121, %rd3, %rd120;
	shl.b64 	%rd122, %rd121, 2;
	add.s64 	%rd123, %rd1, %rd122;
	ld.global.u32 	%r142, [%rd123+6144];
	add.s32 	%r143, %r142, 1;
	st.global.u32 	[%rd123+6144], %r143;
	add.s32 	%r165, %r165, 4;
	setp.ne.s32 	%p7, %r165, 1536;
	@%p7 bra 	LBB4_13;
// %bb.14:                              // %"end for hist_rows.s1.r4$x.6"
	add.s32 	%r145, %r26, %r34;
	sub.s32 	%r30, %r145, %r33;
	mov.u32 	%r166, 0;
LBB4_15:                                // %"for hist_rows.s1.r4$x.7"
                                        // =>This Inner Loop Header: Depth=1
	add.s32 	%r146, %r30, %r166;
	mul.wide.s32 	%rd124, %r146, 4;
	add.s64 	%rd125, %rd2, %rd124;
	ld.global.nc.f32 	%f85, [%rd125];
	min.ftz.f32 	%f86, %f85, 0f437F0000;
	max.ftz.f32 	%f87, %f86, 0f00000000;
	cvt.rzi.ftz.s32.f32 	%r147, %f87;
	cvt.s64.s32 	%rd126, %r147;
	add.s64 	%rd127, %rd3, %rd126;
	shl.b64 	%rd128, %rd127, 2;
	add.s64 	%rd129, %rd1, %rd128;
	ld.global.u32 	%r148, [%rd129+7168];
	add.s32 	%r149, %r148, 1;
	st.global.u32 	[%rd129+7168], %r149;
	ld.global.nc.f32 	%f88, [%rd125+4];
	min.ftz.f32 	%f89, %f88, 0f437F0000;
	max.ftz.f32 	%f90, %f89, 0f00000000;
	cvt.rzi.ftz.s32.f32 	%r150, %f90;
	cvt.s64.s32 	%rd130, %r150;
	add.s64 	%rd131, %rd3, %rd130;
	shl.b64 	%rd132, %rd131, 2;
	add.s64 	%rd133, %rd1, %rd132;
	ld.global.u32 	%r151, [%rd133+7168];
	add.s32 	%r152, %r151, 1;
	st.global.u32 	[%rd133+7168], %r152;
	ld.global.nc.f32 	%f91, [%rd125+8];
	min.ftz.f32 	%f92, %f91, 0f437F0000;
	max.ftz.f32 	%f93, %f92, 0f00000000;
	cvt.rzi.ftz.s32.f32 	%r153, %f93;
	cvt.s64.s32 	%rd134, %r153;
	add.s64 	%rd135, %rd3, %rd134;
	shl.b64 	%rd136, %rd135, 2;
	add.s64 	%rd137, %rd1, %rd136;
	ld.global.u32 	%r154, [%rd137+7168];
	add.s32 	%r155, %r154, 1;
	st.global.u32 	[%rd137+7168], %r155;
	ld.global.nc.f32 	%f94, [%rd125+12];
	min.ftz.f32 	%f95, %f94, 0f437F0000;
	max.ftz.f32 	%f96, %f95, 0f00000000;
	cvt.rzi.ftz.s32.f32 	%r156, %f96;
	cvt.s64.s32 	%rd138, %r156;
	add.s64 	%rd139, %rd3, %rd138;
	shl.b64 	%rd140, %rd139, 2;
	add.s64 	%rd141, %rd1, %rd140;
	ld.global.u32 	%r157, [%rd141+7168];
	add.s32 	%r158, %r157, 1;
	st.global.u32 	[%rd141+7168], %r158;
	add.s32 	%r166, %r166, 4;
	setp.ne.s32 	%p8, %r166, 1536;
	@%p8 bra 	LBB4_15;
// %bb.16:                              // %"end for hist_rows.s1.r4$x.7"
	ret;
                                        // -- End function
}
	// .globl	kernel_hist_s0_x_x___block_id_x // -- Begin function kernel_hist_s0_x_x___block_id_x
.visible .entry kernel_hist_s0_x_x___block_id_x(
	.param .u64 kernel_hist_s0_x_x___block_id_x_param_0
)                                       // @kernel_hist_s0_x_x___block_id_x
{
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<5>;

// %bb.0:                               // %entry
	ld.param.u64 	%rd1, [kernel_hist_s0_x_x___block_id_x_param_0];
	cvta.to.global.u64 	%rd2, %rd1;
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %tid.x;
	shl.b32 	%r3, %r1, 6;
	add.s32 	%r4, %r3, %r2;
	mul.wide.u32 	%rd3, %r4, 4;
	add.s64 	%rd4, %rd2, %rd3;
	mov.u32 	%r5, 0;
	st.global.u32 	[%rd4], %r5;
	ret;
                                        // -- End function
}
	// .globl	kernel_hist_s1_x_x___block_id_x // -- Begin function kernel_hist_s1_x_x___block_id_x
.visible .entry kernel_hist_s1_x_x___block_id_x(
	.param .u64 kernel_hist_s1_x_x___block_id_x_param_0,
	.param .u64 kernel_hist_s1_x_x___block_id_x_param_1
)                                       // @kernel_hist_s1_x_x___block_id_x
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<41>;
	.reg .b64 	%rd<30>;

// %bb.0:                               // %entry
	ld.param.u64 	%rd6, [kernel_hist_s1_x_x___block_id_x_param_0];
	ld.param.u64 	%rd7, [kernel_hist_s1_x_x___block_id_x_param_1];
	cvta.to.global.u64 	%rd1, %rd7;
	mov.u32 	%r8, %ctaid.x;
	mov.u32 	%r9, %tid.x;
	shl.b32 	%r10, %r8, 6;
	add.s32 	%r1, %r10, %r9;
	mul.wide.u32 	%rd8, %r1, 4;
	add.s64 	%rd9, %rd1, %rd8;
	cvta.to.global.u64 	%rd10, %rd6;
	add.s64 	%rd2, %rd10, %rd8;
	ld.global.u32 	%r40, [%rd2];
	add.s64 	%rd29, %rd9, 1024;
	mov.u32 	%r39, 0;
LBB6_1:                                 // %"for hist.s1.r9$x"
                                        // =>This Inner Loop Header: Depth=1
	add.s32 	%r11, %r1, %r39;
	mul.wide.u32 	%rd11, %r11, 4;
	add.s64 	%rd12, %rd1, %rd11;
	ld.global.nc.u32 	%r12, [%rd12];
	add.s32 	%r13, %r12, %r40;
	ld.global.nc.u32 	%r14, [%rd29];
	add.s32 	%r15, %r14, %r13;
	add.s32 	%r16, %r11, 512;
	mul.wide.u32 	%rd13, %r16, 4;
	add.s64 	%rd14, %rd1, %rd13;
	ld.global.nc.u32 	%r17, [%rd14];
	add.s32 	%r18, %r17, %r15;
	add.s32 	%r19, %r11, 768;
	mul.wide.u32 	%rd15, %r19, 4;
	add.s64 	%rd16, %rd1, %rd15;
	ld.global.nc.u32 	%r20, [%rd16];
	add.s32 	%r21, %r20, %r18;
	add.s32 	%r22, %r11, 1024;
	mul.wide.u32 	%rd17, %r22, 4;
	add.s64 	%rd18, %rd1, %rd17;
	ld.global.nc.u32 	%r23, [%rd18];
	add.s32 	%r24, %r23, %r21;
	add.s32 	%r25, %r11, 1280;
	mul.wide.u32 	%rd19, %r25, 4;
	add.s64 	%rd20, %rd1, %rd19;
	ld.global.nc.u32 	%r26, [%rd20];
	add.s32 	%r27, %r26, %r24;
	add.s32 	%r28, %r11, 1536;
	mul.wide.u32 	%rd21, %r28, 4;
	add.s64 	%rd22, %rd1, %rd21;
	ld.global.nc.u32 	%r29, [%rd22];
	add.s32 	%r30, %r29, %r27;
	add.s32 	%r31, %r11, 1792;
	mul.wide.u32 	%rd23, %r31, 4;
	add.s64 	%rd24, %rd1, %rd23;
	ld.global.nc.u32 	%r32, [%rd24];
	add.s32 	%r33, %r32, %r30;
	add.s32 	%r34, %r11, 2048;
	mul.wide.u32 	%rd25, %r34, 4;
	add.s64 	%rd26, %rd1, %rd25;
	ld.global.nc.u32 	%r35, [%rd26];
	add.s32 	%r36, %r35, %r33;
	add.s32 	%r37, %r11, 2304;
	mul.wide.u32 	%rd27, %r37, 4;
	add.s64 	%rd28, %rd1, %rd27;
	ld.global.nc.u32 	%r38, [%rd28];
	add.s32 	%r40, %r38, %r36;
	add.s32 	%r39, %r39, 2560;
	add.s64 	%rd29, %rd29, 10240;
	setp.ne.s32 	%p1, %r39, 655360;
	@%p1 bra 	LBB6_1;
// %bb.2:                               // %"end for hist.s1.r9$x"
	st.global.u32 	[%rd2], %r40;
	ret;
                                        // -- End function
}
	// .globl	kernel_cdf_s0_x_x___block_id_x // -- Begin function kernel_cdf_s0_x_x___block_id_x
.visible .entry kernel_cdf_s0_x_x___block_id_x(
	.param .u64 kernel_cdf_s0_x_x___block_id_x_param_0,
	.param .u64 kernel_cdf_s0_x_x___block_id_x_param_1
)                                       // @kernel_cdf_s0_x_x___block_id_x
{
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<7>;

// %bb.0:                               // %entry
	ld.param.u64 	%rd1, [kernel_cdf_s0_x_x___block_id_x_param_0];
	ld.param.u64 	%rd2, [kernel_cdf_s0_x_x___block_id_x_param_1];
	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %tid.x;
	ld.global.nc.u32 	%r3, [%rd3];
	shl.b32 	%r4, %r1, 6;
	add.s32 	%r5, %r4, %r2;
	mul.wide.u32 	%rd5, %r5, 4;
	add.s64 	%rd6, %rd4, %rd5;
	st.global.u32 	[%rd6], %r3;
	ret;
                                        // -- End function
}
	// .globl	kernel_equalize_s0_y_y___block_id_y // -- Begin function kernel_equalize_s0_y_y___block_id_y
.visible .entry kernel_equalize_s0_y_y___block_id_y(
	.param .u32 kernel_equalize_s0_y_y___block_id_y_param_0,
	.param .u32 kernel_equalize_s0_y_y___block_id_y_param_1,
	.param .f32 kernel_equalize_s0_y_y___block_id_y_param_2,
	.param .u32 kernel_equalize_s0_y_y___block_id_y_param_3,
	.param .u32 kernel_equalize_s0_y_y___block_id_y_param_4,
	.param .u32 kernel_equalize_s0_y_y___block_id_y_param_5,
	.param .u32 kernel_equalize_s0_y_y___block_id_y_param_6,
	.param .u32 kernel_equalize_s0_y_y___block_id_y_param_7,
	.param .u32 kernel_equalize_s0_y_y___block_id_y_param_8,
	.param .u32 kernel_equalize_s0_y_y___block_id_y_param_9,
	.param .u32 kernel_equalize_s0_y_y___block_id_y_param_10,
	.param .u32 kernel_equalize_s0_y_y___block_id_y_param_11,
	.param .u32 kernel_equalize_s0_y_y___block_id_y_param_12,
	.param .u64 kernel_equalize_s0_y_y___block_id_y_param_13,
	.param .u64 kernel_equalize_s0_y_y___block_id_y_param_14,
	.param .u64 kernel_equalize_s0_y_y___block_id_y_param_15
)                                       // @kernel_equalize_s0_y_y___block_id_y
{
	.reg .pred 	%p<2>;
	.reg .b16 	%rs<33>;
	.reg .f32 	%f<230>;
	.reg .b32 	%r<129>;
	.reg .b64 	%rd<108>;

// %bb.0:                               // %entry
	ld.param.u32 	%r18, [kernel_equalize_s0_y_y___block_id_y_param_12];
	ld.param.u32 	%r14, [kernel_equalize_s0_y_y___block_id_y_param_6];
	ld.param.u32 	%r13, [kernel_equalize_s0_y_y___block_id_y_param_5];
	ld.param.u32 	%r12, [kernel_equalize_s0_y_y___block_id_y_param_4];
	ld.param.u32 	%r11, [kernel_equalize_s0_y_y___block_id_y_param_3];
	ld.param.f32 	%f7, [kernel_equalize_s0_y_y___block_id_y_param_2];
	ld.param.u32 	%r10, [kernel_equalize_s0_y_y___block_id_y_param_1];
	ld.param.u64 	%rd7, [kernel_equalize_s0_y_y___block_id_y_param_15];
	cvta.to.global.u64 	%rd1, %rd7;
	ld.param.u64 	%rd8, [kernel_equalize_s0_y_y___block_id_y_param_14];
	cvta.to.global.u64 	%rd2, %rd8;
	ld.param.u64 	%rd9, [kernel_equalize_s0_y_y___block_id_y_param_13];
	cvta.to.global.u64 	%rd3, %rd9;
	mov.u32 	%r19, %ctaid.y;
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %tid.y;
	mov.u32 	%r3, %tid.x;
	ld.param.u32 	%r20, [kernel_equalize_s0_y_y___block_id_y_param_7];
	shl.b32 	%r21, %r19, 8;
	ld.param.u32 	%r22, [kernel_equalize_s0_y_y___block_id_y_param_8];
	min.s32 	%r4, %r21, %r20;
	setp.ge.s32 	%p1, %r1, %r22;
	shl.b32 	%r5, %r3, 2;
	@%p1 bra 	LBB8_2;
// %bb.1:                               // %true_bb
	ld.param.u32 	%r16, [kernel_equalize_s0_y_y___block_id_y_param_10];
	ld.param.u32 	%r15, [kernel_equalize_s0_y_y___block_id_y_param_9];
	shl.b32 	%r75, %r2, 2;
	add.s32 	%r76, %r75, %r4;
	add.s32 	%r77, %r76, %r18;
	shl.b32 	%r78, %r1, 6;
	add.s32 	%r79, %r78, %r15;
	add.s32 	%r80, %r5, %r79;
	mad.lo.s32 	%r81, %r77, %r16, %r80;
	mul.wide.s32 	%rd58, %r81, 4;
	add.s64 	%rd59, %rd3, %rd58;
	ld.global.nc.f32 	%f118, [%rd59+4];
	ld.global.nc.f32 	%f119, [%rd59];
	ld.global.nc.f32 	%f120, [%rd59+12];
	ld.global.nc.f32 	%f121, [%rd59+8];
	min.ftz.f32 	%f122, %f119, 0f437F0000;
	min.ftz.f32 	%f123, %f118, 0f437F0000;
	min.ftz.f32 	%f124, %f121, 0f437F0000;
	min.ftz.f32 	%f125, %f120, 0f437F0000;
	max.ftz.f32 	%f126, %f125, 0f00000000;
	max.ftz.f32 	%f127, %f124, 0f00000000;
	max.ftz.f32 	%f128, %f123, 0f00000000;
	max.ftz.f32 	%f129, %f122, 0f00000000;
	cvt.rzi.ftz.u16.f32 	%rs17, %f129;
	cvt.rzi.ftz.u16.f32 	%rs18, %f128;
	cvt.rzi.ftz.u16.f32 	%rs19, %f127;
	cvt.rzi.ftz.u16.f32 	%rs20, %f126;
	cvt.u32.u16 	%r82, %rs20;
	cvt.u32.u16 	%r83, %rs19;
	cvt.u32.u16 	%r84, %rs18;
	cvt.u32.u16 	%r85, %rs17;
	mul.wide.u32 	%rd60, %r85, 4;
	add.s64 	%rd61, %rd2, %rd60;
	ld.global.nc.u32 	%r86, [%rd61];
	mul.wide.u32 	%rd62, %r84, 4;
	add.s64 	%rd63, %rd2, %rd62;
	ld.global.nc.u32 	%r87, [%rd63];
	mul.wide.u32 	%rd64, %r83, 4;
	add.s64 	%rd65, %rd2, %rd64;
	ld.global.nc.u32 	%r88, [%rd65];
	mul.wide.u32 	%rd66, %r82, 4;
	add.s64 	%rd67, %rd2, %rd66;
	ld.global.nc.u32 	%r89, [%rd67];
	cvt.rn.f32.s32 	%f130, %r87;
	cvt.rn.f32.s32 	%f131, %r86;
	cvt.rn.f32.s32 	%f132, %r89;
	cvt.rn.f32.s32 	%f133, %r88;
	mul.ftz.f32 	%f134, %f7, %f133;
	mul.ftz.f32 	%f135, %f7, %f132;
	mul.ftz.f32 	%f136, %f7, %f131;
	mul.ftz.f32 	%f137, %f7, %f130;
	min.ftz.f32 	%f138, %f137, 0f437F0000;
	min.ftz.f32 	%f139, %f136, 0f437F0000;
	min.ftz.f32 	%f140, %f135, 0f437F0000;
	min.ftz.f32 	%f141, %f134, 0f437F0000;
	max.ftz.f32 	%f142, %f141, 0f00000000;
	max.ftz.f32 	%f143, %f140, 0f00000000;
	max.ftz.f32 	%f144, %f139, 0f00000000;
	max.ftz.f32 	%f145, %f138, 0f00000000;
	add.s32 	%r90, %r76, %r11;
	shl.b32 	%r91, %r1, 4;
	add.s32 	%r92, %r3, %r91;
	shl.b32 	%r93, %r92, 2;
	mad.lo.s32 	%r94, %r90, %r10, %r93;
	mul.wide.s32 	%rd68, %r94, 4;
	add.s64 	%rd69, %rd1, %rd68;
	st.global.f32 	[%rd69+4], %f145;
	st.global.f32 	[%rd69], %f144;
	st.global.f32 	[%rd69+12], %f143;
	st.global.f32 	[%rd69+8], %f142;
	add.s32 	%r95, %r81, %r16;
	mul.wide.s32 	%rd70, %r95, 4;
	add.s64 	%rd71, %rd3, %rd70;
	ld.global.nc.f32 	%f146, [%rd71+4];
	ld.global.nc.f32 	%f147, [%rd71];
	ld.global.nc.f32 	%f148, [%rd71+12];
	ld.global.nc.f32 	%f149, [%rd71+8];
	min.ftz.f32 	%f150, %f147, 0f437F0000;
	min.ftz.f32 	%f151, %f146, 0f437F0000;
	min.ftz.f32 	%f152, %f149, 0f437F0000;
	min.ftz.f32 	%f153, %f148, 0f437F0000;
	max.ftz.f32 	%f154, %f153, 0f00000000;
	max.ftz.f32 	%f155, %f152, 0f00000000;
	max.ftz.f32 	%f156, %f151, 0f00000000;
	max.ftz.f32 	%f157, %f150, 0f00000000;
	cvt.rzi.ftz.u16.f32 	%rs21, %f157;
	cvt.rzi.ftz.u16.f32 	%rs22, %f156;
	cvt.rzi.ftz.u16.f32 	%rs23, %f155;
	cvt.rzi.ftz.u16.f32 	%rs24, %f154;
	cvt.u32.u16 	%r96, %rs24;
	cvt.u32.u16 	%r97, %rs23;
	cvt.u32.u16 	%r98, %rs22;
	cvt.u32.u16 	%r99, %rs21;
	mul.wide.u32 	%rd72, %r99, 4;
	add.s64 	%rd73, %rd2, %rd72;
	ld.global.nc.u32 	%r100, [%rd73];
	mul.wide.u32 	%rd74, %r98, 4;
	add.s64 	%rd75, %rd2, %rd74;
	ld.global.nc.u32 	%r101, [%rd75];
	mul.wide.u32 	%rd76, %r97, 4;
	add.s64 	%rd77, %rd2, %rd76;
	ld.global.nc.u32 	%r102, [%rd77];
	mul.wide.u32 	%rd78, %r96, 4;
	add.s64 	%rd79, %rd2, %rd78;
	ld.global.nc.u32 	%r103, [%rd79];
	cvt.rn.f32.s32 	%f158, %r101;
	cvt.rn.f32.s32 	%f159, %r100;
	cvt.rn.f32.s32 	%f160, %r103;
	cvt.rn.f32.s32 	%f161, %r102;
	mul.ftz.f32 	%f162, %f7, %f161;
	mul.ftz.f32 	%f163, %f7, %f160;
	mul.ftz.f32 	%f164, %f7, %f159;
	mul.ftz.f32 	%f165, %f7, %f158;
	min.ftz.f32 	%f166, %f165, 0f437F0000;
	min.ftz.f32 	%f167, %f164, 0f437F0000;
	min.ftz.f32 	%f168, %f163, 0f437F0000;
	min.ftz.f32 	%f169, %f162, 0f437F0000;
	max.ftz.f32 	%f170, %f169, 0f00000000;
	max.ftz.f32 	%f171, %f168, 0f00000000;
	max.ftz.f32 	%f172, %f167, 0f00000000;
	max.ftz.f32 	%f173, %f166, 0f00000000;
	add.s32 	%r104, %r76, %r12;
	mad.lo.s32 	%r105, %r104, %r10, %r93;
	mul.wide.s32 	%rd80, %r105, 4;
	add.s64 	%rd81, %rd1, %rd80;
	st.global.f32 	[%rd81+4], %f173;
	st.global.f32 	[%rd81], %f172;
	st.global.f32 	[%rd81+12], %f171;
	st.global.f32 	[%rd81+8], %f170;
	add.s32 	%r106, %r95, %r16;
	mul.wide.s32 	%rd82, %r106, 4;
	add.s64 	%rd83, %rd3, %rd82;
	ld.global.nc.f32 	%f174, [%rd83+4];
	ld.global.nc.f32 	%f175, [%rd83];
	ld.global.nc.f32 	%f176, [%rd83+12];
	ld.global.nc.f32 	%f177, [%rd83+8];
	min.ftz.f32 	%f178, %f175, 0f437F0000;
	min.ftz.f32 	%f179, %f174, 0f437F0000;
	min.ftz.f32 	%f180, %f177, 0f437F0000;
	min.ftz.f32 	%f181, %f176, 0f437F0000;
	max.ftz.f32 	%f182, %f181, 0f00000000;
	max.ftz.f32 	%f183, %f180, 0f00000000;
	max.ftz.f32 	%f184, %f179, 0f00000000;
	max.ftz.f32 	%f185, %f178, 0f00000000;
	cvt.rzi.ftz.u16.f32 	%rs25, %f185;
	cvt.rzi.ftz.u16.f32 	%rs26, %f184;
	cvt.rzi.ftz.u16.f32 	%rs27, %f183;
	cvt.rzi.ftz.u16.f32 	%rs28, %f182;
	cvt.u32.u16 	%r107, %rs28;
	cvt.u32.u16 	%r108, %rs27;
	cvt.u32.u16 	%r109, %rs26;
	cvt.u32.u16 	%r110, %rs25;
	mul.wide.u32 	%rd84, %r110, 4;
	add.s64 	%rd85, %rd2, %rd84;
	ld.global.nc.u32 	%r111, [%rd85];
	mul.wide.u32 	%rd86, %r109, 4;
	add.s64 	%rd87, %rd2, %rd86;
	ld.global.nc.u32 	%r112, [%rd87];
	mul.wide.u32 	%rd88, %r108, 4;
	add.s64 	%rd89, %rd2, %rd88;
	ld.global.nc.u32 	%r113, [%rd89];
	mul.wide.u32 	%rd90, %r107, 4;
	add.s64 	%rd91, %rd2, %rd90;
	ld.global.nc.u32 	%r114, [%rd91];
	cvt.rn.f32.s32 	%f186, %r112;
	cvt.rn.f32.s32 	%f187, %r111;
	cvt.rn.f32.s32 	%f188, %r114;
	cvt.rn.f32.s32 	%f189, %r113;
	mul.ftz.f32 	%f190, %f7, %f189;
	mul.ftz.f32 	%f191, %f7, %f188;
	mul.ftz.f32 	%f192, %f7, %f187;
	mul.ftz.f32 	%f193, %f7, %f186;
	min.ftz.f32 	%f194, %f193, 0f437F0000;
	min.ftz.f32 	%f195, %f192, 0f437F0000;
	min.ftz.f32 	%f196, %f191, 0f437F0000;
	min.ftz.f32 	%f197, %f190, 0f437F0000;
	max.ftz.f32 	%f198, %f197, 0f00000000;
	max.ftz.f32 	%f199, %f196, 0f00000000;
	max.ftz.f32 	%f200, %f195, 0f00000000;
	max.ftz.f32 	%f201, %f194, 0f00000000;
	add.s32 	%r115, %r76, %r13;
	mad.lo.s32 	%r116, %r115, %r10, %r93;
	mul.wide.s32 	%rd92, %r116, 4;
	add.s64 	%rd93, %rd1, %rd92;
	st.global.f32 	[%rd93+4], %f201;
	st.global.f32 	[%rd93], %f200;
	st.global.f32 	[%rd93+12], %f199;
	st.global.f32 	[%rd93+8], %f198;
	add.s32 	%r117, %r106, %r16;
	mul.wide.s32 	%rd94, %r117, 4;
	add.s64 	%rd95, %rd3, %rd94;
	ld.global.nc.f32 	%f202, [%rd95+4];
	ld.global.nc.f32 	%f203, [%rd95];
	ld.global.nc.f32 	%f204, [%rd95+12];
	ld.global.nc.f32 	%f205, [%rd95+8];
	min.ftz.f32 	%f206, %f203, 0f437F0000;
	min.ftz.f32 	%f207, %f202, 0f437F0000;
	min.ftz.f32 	%f208, %f205, 0f437F0000;
	min.ftz.f32 	%f209, %f204, 0f437F0000;
	max.ftz.f32 	%f210, %f209, 0f00000000;
	max.ftz.f32 	%f211, %f208, 0f00000000;
	max.ftz.f32 	%f212, %f207, 0f00000000;
	max.ftz.f32 	%f213, %f206, 0f00000000;
	cvt.rzi.ftz.u16.f32 	%rs29, %f213;
	cvt.rzi.ftz.u16.f32 	%rs30, %f212;
	cvt.rzi.ftz.u16.f32 	%rs31, %f211;
	cvt.rzi.ftz.u16.f32 	%rs32, %f210;
	cvt.u32.u16 	%r118, %rs32;
	cvt.u32.u16 	%r119, %rs31;
	cvt.u32.u16 	%r120, %rs30;
	cvt.u32.u16 	%r121, %rs29;
	mul.wide.u32 	%rd96, %r121, 4;
	add.s64 	%rd97, %rd2, %rd96;
	ld.global.nc.u32 	%r122, [%rd97];
	mul.wide.u32 	%rd98, %r120, 4;
	add.s64 	%rd99, %rd2, %rd98;
	ld.global.nc.u32 	%r123, [%rd99];
	mul.wide.u32 	%rd100, %r119, 4;
	add.s64 	%rd101, %rd2, %rd100;
	ld.global.nc.u32 	%r124, [%rd101];
	mul.wide.u32 	%rd102, %r118, 4;
	add.s64 	%rd103, %rd2, %rd102;
	ld.global.nc.u32 	%r125, [%rd103];
	cvt.rn.f32.s32 	%f214, %r123;
	cvt.rn.f32.s32 	%f215, %r122;
	cvt.rn.f32.s32 	%f216, %r124;
	cvt.rn.f32.s32 	%f217, %r125;
	mul.ftz.f32 	%f218, %f7, %f217;
	mul.ftz.f32 	%f219, %f7, %f216;
	mul.ftz.f32 	%f220, %f7, %f215;
	mul.ftz.f32 	%f221, %f7, %f214;
	min.ftz.f32 	%f222, %f221, 0f437F0000;
	min.ftz.f32 	%f223, %f220, 0f437F0000;
	min.ftz.f32 	%f224, %f219, 0f437F0000;
	min.ftz.f32 	%f225, %f218, 0f437F0000;
	max.ftz.f32 	%f229, %f225, 0f00000000;
	max.ftz.f32 	%f228, %f224, 0f00000000;
	max.ftz.f32 	%f226, %f223, 0f00000000;
	max.ftz.f32 	%f227, %f222, 0f00000000;
	add.s32 	%r126, %r76, %r14;
	mad.lo.s32 	%r127, %r126, %r10, %r93;
	mul.wide.s32 	%rd104, %r127, 4;
	add.s64 	%rd105, %rd1, %rd104;
	st.global.f32 	[%rd105+4], %f227;
	st.global.f32 	[%rd105], %f226;
	add.s32 	%r128, %r127, 2;
	bra.uni 	LBB8_3;
LBB8_2:                                 // %false_bb
	ld.param.u32 	%r17, [kernel_equalize_s0_y_y___block_id_y_param_11];
	ld.param.u32 	%r9, [kernel_equalize_s0_y_y___block_id_y_param_0];
	max.s32 	%r23, %r17, 1536;
	sub.s32 	%r24, %r23, %r9;
	shl.b32 	%r25, %r2, 2;
	add.s32 	%r26, %r25, %r4;
	add.s32 	%r27, %r26, %r18;
	sub.s32 	%r28, %r17, %r9;
	add.s32 	%r29, %r5, %r28;
	mad.lo.s32 	%r30, %r27, %r24, %r29;
	mul.wide.s32 	%rd10, %r30, 4;
	add.s64 	%rd11, %rd3, %rd10;
	ld.global.nc.f32 	%f8, [%rd11+-252];
	ld.global.nc.f32 	%f9, [%rd11+-256];
	ld.global.nc.f32 	%f10, [%rd11+-244];
	ld.global.nc.f32 	%f11, [%rd11+-248];
	min.ftz.f32 	%f12, %f9, 0f437F0000;
	min.ftz.f32 	%f13, %f8, 0f437F0000;
	min.ftz.f32 	%f14, %f11, 0f437F0000;
	min.ftz.f32 	%f15, %f10, 0f437F0000;
	max.ftz.f32 	%f16, %f15, 0f00000000;
	max.ftz.f32 	%f17, %f14, 0f00000000;
	max.ftz.f32 	%f18, %f13, 0f00000000;
	max.ftz.f32 	%f19, %f12, 0f00000000;
	cvt.rzi.ftz.u16.f32 	%rs1, %f19;
	cvt.rzi.ftz.u16.f32 	%rs2, %f18;
	cvt.rzi.ftz.u16.f32 	%rs3, %f17;
	cvt.rzi.ftz.u16.f32 	%rs4, %f16;
	cvt.u32.u16 	%r31, %rs4;
	cvt.u32.u16 	%r32, %rs3;
	cvt.u32.u16 	%r33, %rs2;
	cvt.u32.u16 	%r34, %rs1;
	mul.wide.u32 	%rd12, %r34, 4;
	add.s64 	%rd13, %rd2, %rd12;
	ld.global.nc.u32 	%r35, [%rd13];
	mul.wide.u32 	%rd14, %r33, 4;
	add.s64 	%rd15, %rd2, %rd14;
	ld.global.nc.u32 	%r36, [%rd15];
	mul.wide.u32 	%rd16, %r32, 4;
	add.s64 	%rd17, %rd2, %rd16;
	ld.global.nc.u32 	%r37, [%rd17];
	mul.wide.u32 	%rd18, %r31, 4;
	add.s64 	%rd19, %rd2, %rd18;
	ld.global.nc.u32 	%r38, [%rd19];
	cvt.rn.f32.s32 	%f20, %r36;
	cvt.rn.f32.s32 	%f21, %r35;
	cvt.rn.f32.s32 	%f22, %r38;
	cvt.rn.f32.s32 	%f23, %r37;
	mul.ftz.f32 	%f24, %f7, %f23;
	mul.ftz.f32 	%f25, %f7, %f22;
	mul.ftz.f32 	%f26, %f7, %f21;
	mul.ftz.f32 	%f27, %f7, %f20;
	min.ftz.f32 	%f28, %f27, 0f437F0000;
	min.ftz.f32 	%f29, %f26, 0f437F0000;
	min.ftz.f32 	%f30, %f25, 0f437F0000;
	min.ftz.f32 	%f31, %f24, 0f437F0000;
	max.ftz.f32 	%f32, %f31, 0f00000000;
	max.ftz.f32 	%f33, %f30, 0f00000000;
	max.ftz.f32 	%f34, %f29, 0f00000000;
	max.ftz.f32 	%f35, %f28, 0f00000000;
	add.s32 	%r39, %r26, 1;
	add.s32 	%r40, %r39, %r11;
	mad.lo.s32 	%r41, %r40, %r10, %r5;
	mul.wide.s32 	%rd20, %r41, 4;
	add.s64 	%rd21, %rd1, %rd20;
	st.global.f32 	[%rd21+-252], %f35;
	st.global.f32 	[%rd21+-256], %f34;
	st.global.f32 	[%rd21+-244], %f33;
	st.global.f32 	[%rd21+-248], %f32;
	add.s32 	%r42, %r30, %r24;
	mul.wide.s32 	%rd22, %r42, 4;
	add.s64 	%rd23, %rd3, %rd22;
	ld.global.nc.f32 	%f36, [%rd23+-252];
	ld.global.nc.f32 	%f37, [%rd23+-256];
	ld.global.nc.f32 	%f38, [%rd23+-244];
	ld.global.nc.f32 	%f39, [%rd23+-248];
	min.ftz.f32 	%f40, %f37, 0f437F0000;
	min.ftz.f32 	%f41, %f36, 0f437F0000;
	min.ftz.f32 	%f42, %f39, 0f437F0000;
	min.ftz.f32 	%f43, %f38, 0f437F0000;
	max.ftz.f32 	%f44, %f43, 0f00000000;
	max.ftz.f32 	%f45, %f42, 0f00000000;
	max.ftz.f32 	%f46, %f41, 0f00000000;
	max.ftz.f32 	%f47, %f40, 0f00000000;
	cvt.rzi.ftz.u16.f32 	%rs5, %f47;
	cvt.rzi.ftz.u16.f32 	%rs6, %f46;
	cvt.rzi.ftz.u16.f32 	%rs7, %f45;
	cvt.rzi.ftz.u16.f32 	%rs8, %f44;
	cvt.u32.u16 	%r43, %rs8;
	cvt.u32.u16 	%r44, %rs7;
	cvt.u32.u16 	%r45, %rs6;
	cvt.u32.u16 	%r46, %rs5;
	mul.wide.u32 	%rd24, %r46, 4;
	add.s64 	%rd25, %rd2, %rd24;
	ld.global.nc.u32 	%r47, [%rd25];
	mul.wide.u32 	%rd26, %r45, 4;
	add.s64 	%rd27, %rd2, %rd26;
	ld.global.nc.u32 	%r48, [%rd27];
	mul.wide.u32 	%rd28, %r44, 4;
	add.s64 	%rd29, %rd2, %rd28;
	ld.global.nc.u32 	%r49, [%rd29];
	mul.wide.u32 	%rd30, %r43, 4;
	add.s64 	%rd31, %rd2, %rd30;
	ld.global.nc.u32 	%r50, [%rd31];
	cvt.rn.f32.s32 	%f48, %r48;
	cvt.rn.f32.s32 	%f49, %r47;
	cvt.rn.f32.s32 	%f50, %r50;
	cvt.rn.f32.s32 	%f51, %r49;
	mul.ftz.f32 	%f52, %f7, %f51;
	mul.ftz.f32 	%f53, %f7, %f50;
	mul.ftz.f32 	%f54, %f7, %f49;
	mul.ftz.f32 	%f55, %f7, %f48;
	min.ftz.f32 	%f56, %f55, 0f437F0000;
	min.ftz.f32 	%f57, %f54, 0f437F0000;
	min.ftz.f32 	%f58, %f53, 0f437F0000;
	min.ftz.f32 	%f59, %f52, 0f437F0000;
	max.ftz.f32 	%f60, %f59, 0f00000000;
	max.ftz.f32 	%f61, %f58, 0f00000000;
	max.ftz.f32 	%f62, %f57, 0f00000000;
	max.ftz.f32 	%f63, %f56, 0f00000000;
	add.s32 	%r51, %r39, %r12;
	mad.lo.s32 	%r52, %r51, %r10, %r5;
	mul.wide.s32 	%rd32, %r52, 4;
	add.s64 	%rd33, %rd1, %rd32;
	st.global.f32 	[%rd33+-252], %f63;
	st.global.f32 	[%rd33+-256], %f62;
	st.global.f32 	[%rd33+-244], %f61;
	st.global.f32 	[%rd33+-248], %f60;
	add.s32 	%r53, %r42, %r24;
	mul.wide.s32 	%rd34, %r53, 4;
	add.s64 	%rd35, %rd3, %rd34;
	ld.global.nc.f32 	%f64, [%rd35+-252];
	ld.global.nc.f32 	%f65, [%rd35+-256];
	ld.global.nc.f32 	%f66, [%rd35+-244];
	ld.global.nc.f32 	%f67, [%rd35+-248];
	min.ftz.f32 	%f68, %f65, 0f437F0000;
	min.ftz.f32 	%f69, %f64, 0f437F0000;
	min.ftz.f32 	%f70, %f67, 0f437F0000;
	min.ftz.f32 	%f71, %f66, 0f437F0000;
	max.ftz.f32 	%f72, %f71, 0f00000000;
	max.ftz.f32 	%f73, %f70, 0f00000000;
	max.ftz.f32 	%f74, %f69, 0f00000000;
	max.ftz.f32 	%f75, %f68, 0f00000000;
	cvt.rzi.ftz.u16.f32 	%rs9, %f75;
	cvt.rzi.ftz.u16.f32 	%rs10, %f74;
	cvt.rzi.ftz.u16.f32 	%rs11, %f73;
	cvt.rzi.ftz.u16.f32 	%rs12, %f72;
	cvt.u32.u16 	%r54, %rs12;
	cvt.u32.u16 	%r55, %rs11;
	cvt.u32.u16 	%r56, %rs10;
	cvt.u32.u16 	%r57, %rs9;
	mul.wide.u32 	%rd36, %r57, 4;
	add.s64 	%rd37, %rd2, %rd36;
	ld.global.nc.u32 	%r58, [%rd37];
	mul.wide.u32 	%rd38, %r56, 4;
	add.s64 	%rd39, %rd2, %rd38;
	ld.global.nc.u32 	%r59, [%rd39];
	mul.wide.u32 	%rd40, %r55, 4;
	add.s64 	%rd41, %rd2, %rd40;
	ld.global.nc.u32 	%r60, [%rd41];
	mul.wide.u32 	%rd42, %r54, 4;
	add.s64 	%rd43, %rd2, %rd42;
	ld.global.nc.u32 	%r61, [%rd43];
	cvt.rn.f32.s32 	%f76, %r59;
	cvt.rn.f32.s32 	%f77, %r58;
	cvt.rn.f32.s32 	%f78, %r61;
	cvt.rn.f32.s32 	%f79, %r60;
	mul.ftz.f32 	%f80, %f7, %f79;
	mul.ftz.f32 	%f81, %f7, %f78;
	mul.ftz.f32 	%f82, %f7, %f77;
	mul.ftz.f32 	%f83, %f7, %f76;
	min.ftz.f32 	%f84, %f83, 0f437F0000;
	min.ftz.f32 	%f85, %f82, 0f437F0000;
	min.ftz.f32 	%f86, %f81, 0f437F0000;
	min.ftz.f32 	%f87, %f80, 0f437F0000;
	max.ftz.f32 	%f88, %f87, 0f00000000;
	max.ftz.f32 	%f89, %f86, 0f00000000;
	max.ftz.f32 	%f90, %f85, 0f00000000;
	max.ftz.f32 	%f91, %f84, 0f00000000;
	add.s32 	%r62, %r39, %r13;
	mad.lo.s32 	%r63, %r62, %r10, %r5;
	mul.wide.s32 	%rd44, %r63, 4;
	add.s64 	%rd45, %rd1, %rd44;
	st.global.f32 	[%rd45+-252], %f91;
	st.global.f32 	[%rd45+-256], %f90;
	st.global.f32 	[%rd45+-244], %f89;
	st.global.f32 	[%rd45+-248], %f88;
	add.s32 	%r64, %r53, %r24;
	mul.wide.s32 	%rd46, %r64, 4;
	add.s64 	%rd47, %rd3, %rd46;
	ld.global.nc.f32 	%f92, [%rd47+-252];
	ld.global.nc.f32 	%f93, [%rd47+-256];
	ld.global.nc.f32 	%f94, [%rd47+-244];
	ld.global.nc.f32 	%f95, [%rd47+-248];
	min.ftz.f32 	%f96, %f93, 0f437F0000;
	min.ftz.f32 	%f97, %f92, 0f437F0000;
	min.ftz.f32 	%f98, %f95, 0f437F0000;
	min.ftz.f32 	%f99, %f94, 0f437F0000;
	max.ftz.f32 	%f100, %f99, 0f00000000;
	max.ftz.f32 	%f101, %f98, 0f00000000;
	max.ftz.f32 	%f102, %f97, 0f00000000;
	max.ftz.f32 	%f103, %f96, 0f00000000;
	cvt.rzi.ftz.u16.f32 	%rs13, %f103;
	cvt.rzi.ftz.u16.f32 	%rs14, %f102;
	cvt.rzi.ftz.u16.f32 	%rs15, %f101;
	cvt.rzi.ftz.u16.f32 	%rs16, %f100;
	cvt.u32.u16 	%r65, %rs16;
	cvt.u32.u16 	%r66, %rs15;
	cvt.u32.u16 	%r67, %rs14;
	cvt.u32.u16 	%r68, %rs13;
	mul.wide.u32 	%rd48, %r68, 4;
	add.s64 	%rd49, %rd2, %rd48;
	ld.global.nc.u32 	%r69, [%rd49];
	mul.wide.u32 	%rd50, %r67, 4;
	add.s64 	%rd51, %rd2, %rd50;
	ld.global.nc.u32 	%r70, [%rd51];
	mul.wide.u32 	%rd52, %r66, 4;
	add.s64 	%rd53, %rd2, %rd52;
	ld.global.nc.u32 	%r71, [%rd53];
	mul.wide.u32 	%rd54, %r65, 4;
	add.s64 	%rd55, %rd2, %rd54;
	ld.global.nc.u32 	%r72, [%rd55];
	cvt.rn.f32.s32 	%f104, %r70;
	cvt.rn.f32.s32 	%f105, %r69;
	cvt.rn.f32.s32 	%f106, %r71;
	cvt.rn.f32.s32 	%f107, %r72;
	mul.ftz.f32 	%f108, %f7, %f107;
	mul.ftz.f32 	%f109, %f7, %f106;
	mul.ftz.f32 	%f110, %f7, %f105;
	mul.ftz.f32 	%f111, %f7, %f104;
	min.ftz.f32 	%f112, %f111, 0f437F0000;
	min.ftz.f32 	%f113, %f110, 0f437F0000;
	min.ftz.f32 	%f114, %f109, 0f437F0000;
	min.ftz.f32 	%f115, %f108, 0f437F0000;
	max.ftz.f32 	%f229, %f115, 0f00000000;
	max.ftz.f32 	%f228, %f114, 0f00000000;
	max.ftz.f32 	%f116, %f113, 0f00000000;
	max.ftz.f32 	%f117, %f112, 0f00000000;
	add.s32 	%r73, %r39, %r14;
	mad.lo.s32 	%r74, %r73, %r10, %r5;
	mul.wide.s32 	%rd56, %r74, 4;
	add.s64 	%rd57, %rd1, %rd56;
	st.global.f32 	[%rd57+-252], %f117;
	st.global.f32 	[%rd57+-256], %f116;
	add.s32 	%r128, %r74, -62;
LBB8_3:                                 // %after_bb
	mul.wide.s32 	%rd106, %r128, 4;
	add.s64 	%rd107, %rd1, %rd106;
	st.global.f32 	[%rd107+4], %f229;
	st.global.f32 	[%rd107], %f228;
	ret;
                                        // -- End function
}
	// .globl	kernel_output_s0_y_y___block_id_y // -- Begin function kernel_output_s0_y_y___block_id_y
.visible .entry kernel_output_s0_y_y___block_id_y(
	.param .u32 kernel_output_s0_y_y___block_id_y_param_0,
	.param .u32 kernel_output_s0_y_y___block_id_y_param_1,
	.param .u32 kernel_output_s0_y_y___block_id_y_param_2,
	.param .u32 kernel_output_s0_y_y___block_id_y_param_3,
	.param .u32 kernel_output_s0_y_y___block_id_y_param_4,
	.param .u32 kernel_output_s0_y_y___block_id_y_param_5,
	.param .u32 kernel_output_s0_y_y___block_id_y_param_6,
	.param .u32 kernel_output_s0_y_y___block_id_y_param_7,
	.param .u32 kernel_output_s0_y_y___block_id_y_param_8,
	.param .u32 kernel_output_s0_y_y___block_id_y_param_9,
	.param .u32 kernel_output_s0_y_y___block_id_y_param_10,
	.param .u32 kernel_output_s0_y_y___block_id_y_param_11,
	.param .u32 kernel_output_s0_y_y___block_id_y_param_12,
	.param .u32 kernel_output_s0_y_y___block_id_y_param_13,
	.param .u32 kernel_output_s0_y_y___block_id_y_param_14,
	.param .u32 kernel_output_s0_y_y___block_id_y_param_15,
	.param .u64 kernel_output_s0_y_y___block_id_y_param_16,
	.param .u64 kernel_output_s0_y_y___block_id_y_param_17,
	.param .u64 kernel_output_s0_y_y___block_id_y_param_18,
	.param .u64 kernel_output_s0_y_y___block_id_y_param_19
)                                       // @kernel_output_s0_y_y___block_id_y
{
	.reg .pred 	%p<28>;
	.reg .b16 	%rs<49>;
	.reg .f32 	%f<225>;
	.reg .b32 	%r<155>;
	.reg .b64 	%rd<45>;

// %bb.0:                               // %entry
	ld.param.u32 	%r65, [kernel_output_s0_y_y___block_id_y_param_15];
	ld.param.u32 	%r64, [kernel_output_s0_y_y___block_id_y_param_14];
	ld.param.u32 	%r63, [kernel_output_s0_y_y___block_id_y_param_13];
	ld.param.u32 	%r62, [kernel_output_s0_y_y___block_id_y_param_12];
	ld.param.u32 	%r61, [kernel_output_s0_y_y___block_id_y_param_11];
	ld.param.u32 	%r60, [kernel_output_s0_y_y___block_id_y_param_10];
	ld.param.u32 	%r59, [kernel_output_s0_y_y___block_id_y_param_9];
	ld.param.u32 	%r58, [kernel_output_s0_y_y___block_id_y_param_8];
	ld.param.u32 	%r57, [kernel_output_s0_y_y___block_id_y_param_5];
	ld.param.u32 	%r56, [kernel_output_s0_y_y___block_id_y_param_4];
	ld.param.u32 	%r55, [kernel_output_s0_y_y___block_id_y_param_3];
	ld.param.u32 	%r52, [kernel_output_s0_y_y___block_id_y_param_0];
	ld.param.u64 	%rd5, [kernel_output_s0_y_y___block_id_y_param_19];
	cvta.to.global.u64 	%rd1, %rd5;
	ld.param.u64 	%rd6, [kernel_output_s0_y_y___block_id_y_param_18];
	cvta.to.global.u64 	%rd2, %rd6;
	ld.param.u64 	%rd7, [kernel_output_s0_y_y___block_id_y_param_17];
	cvta.to.global.u64 	%rd3, %rd7;
	ld.param.u64 	%rd8, [kernel_output_s0_y_y___block_id_y_param_16];
	cvta.to.global.u64 	%rd4, %rd8;
	mov.u32 	%r66, %ctaid.y;
	mov.u32 	%r67, %ctaid.x;
	ld.param.u32 	%r68, [kernel_output_s0_y_y___block_id_y_param_6];
	mov.u32 	%r1, %tid.z;
	ld.param.u32 	%r69, [kernel_output_s0_y_y___block_id_y_param_7];
	mov.u32 	%r2, %tid.y;
	mov.u32 	%r3, %tid.x;
	shl.b32 	%r70, %r66, 3;
	min.s32 	%r4, %r70, %r69;
	setp.ge.s32 	%p1, %r1, %r68;
	shl.b32 	%r5, %r67, 8;
	add.s32 	%r71, %r65, -256;
	min.s32 	%r6, %r5, %r71;
	@%p1 bra 	LBB9_7;
// %bb.1:                               // %true_bb
	setp.lt.s32 	%p15, %r55, 1;
	@%p15 bra 	LBB9_13;
// %bb.2:                               // %"for output.s0.c.c.c_serial_outer.preheader"
	shl.b32 	%r7, %r3, 2;
	add.s32 	%r8, %r2, %r4;
	add.s32 	%r104, %r8, %r61;
	add.s32 	%r9, %r7, %r6;
	mad.lo.s32 	%r10, %r104, %r65, %r9;
	add.s32 	%r105, %r8, %r52;
	mul.lo.s32 	%r11, %r105, %r63;
	add.s32 	%r108, %r8, %r59;
	add.s32 	%r109, %r8, %r58;
	mul.wide.s32 	%rd27, %r10, 4;
	add.s64 	%rd28, %rd2, %rd27;
	ld.global.nc.f32 	%f125, [%rd28+4];
	ld.global.nc.f32 	%f126, [%rd28];
	ld.global.nc.f32 	%f127, [%rd28+12];
	ld.global.nc.f32 	%f128, [%rd28+8];
	add.s32 	%r110, %r9, %r60;
	mad.lo.s32 	%r111, %r108, %r57, %r110;
	mul.wide.s32 	%rd29, %r111, 4;
	add.s64 	%rd30, %rd3, %rd29;
	ld.global.nc.f32 	%f129, [%rd30+4];
	ld.global.nc.f32 	%f130, [%rd30];
	ld.global.nc.f32 	%f131, [%rd30+12];
	ld.global.nc.f32 	%f132, [%rd30+8];
	mad.lo.s32 	%r112, %r109, %r57, %r110;
	mul.wide.s32 	%rd31, %r112, 4;
	add.s64 	%rd32, %rd4, %rd31;
	ld.global.nc.f32 	%f133, [%rd32];
	ld.global.nc.f32 	%f134, [%rd32+4];
	ld.global.nc.f32 	%f135, [%rd32+8];
	ld.global.nc.f32 	%f136, [%rd32+12];
	fma.rn.ftz.f32 	%f137, %f130, 0f3FB33333, %f126;
	fma.rn.ftz.f32 	%f138, %f129, 0f3FB33333, %f125;
	fma.rn.ftz.f32 	%f139, %f132, 0f3FB33333, %f128;
	fma.rn.ftz.f32 	%f140, %f131, 0f3FB33333, %f127;
	min.ftz.f32 	%f141, %f140, 0f43D9199A;
	min.ftz.f32 	%f142, %f139, 0f43D9199A;
	min.ftz.f32 	%f143, %f138, 0f43D9199A;
	min.ftz.f32 	%f144, %f137, 0f43D9199A;
	max.ftz.f32 	%f145, %f144, 0f43333333;
	max.ftz.f32 	%f146, %f143, 0f43333333;
	max.ftz.f32 	%f147, %f142, 0f43333333;
	max.ftz.f32 	%f148, %f141, 0f43333333;
	add.ftz.f32 	%f4, %f148, 0fC3333333;
	add.ftz.f32 	%f3, %f147, 0fC3333333;
	add.ftz.f32 	%f2, %f146, 0fC3333333;
	add.ftz.f32 	%f1, %f145, 0fC3333333;
	fma.rn.ftz.f32 	%f149, %f136, 0fBEAF9DB2, %f127;
	fma.rn.ftz.f32 	%f150, %f135, 0fBEAF9DB2, %f128;
	fma.rn.ftz.f32 	%f151, %f134, 0fBEAF9DB2, %f125;
	fma.rn.ftz.f32 	%f152, %f133, 0fBEAF9DB2, %f126;
	fma.rn.ftz.f32 	%f153, %f130, 0fBF360419, %f152;
	fma.rn.ftz.f32 	%f154, %f129, 0fBF360419, %f151;
	fma.rn.ftz.f32 	%f155, %f132, 0fBF360419, %f150;
	fma.rn.ftz.f32 	%f156, %f131, 0fBF360419, %f149;
	min.ftz.f32 	%f157, %f156, 0f42F02D0E;
	min.ftz.f32 	%f158, %f155, 0f42F02D0E;
	min.ftz.f32 	%f159, %f154, 0f42F02D0E;
	min.ftz.f32 	%f160, %f153, 0f42F02D0E;
	max.ftz.f32 	%f161, %f160, 0fC306E979;
	max.ftz.f32 	%f162, %f159, 0fC306E979;
	max.ftz.f32 	%f163, %f158, 0fC306E979;
	max.ftz.f32 	%f164, %f157, 0fC306E979;
	add.ftz.f32 	%f8, %f164, 0f4306E979;
	add.ftz.f32 	%f7, %f163, 0f4306E979;
	add.ftz.f32 	%f6, %f162, 0f4306E979;
	add.ftz.f32 	%f5, %f161, 0f4306E979;
	fma.rn.ftz.f32 	%f165, %f133, 0f3FE1EB85, %f126;
	fma.rn.ftz.f32 	%f166, %f134, 0f3FE1EB85, %f125;
	fma.rn.ftz.f32 	%f167, %f135, 0f3FE1EB85, %f128;
	fma.rn.ftz.f32 	%f168, %f136, 0f3FE1EB85, %f127;
	min.ftz.f32 	%f169, %f168, 0f43F075C2;
	min.ftz.f32 	%f170, %f167, 0f43F075C2;
	min.ftz.f32 	%f171, %f166, 0f43F075C2;
	min.ftz.f32 	%f172, %f165, 0f43F075C2;
	max.ftz.f32 	%f173, %f172, 0f4361EB85;
	max.ftz.f32 	%f174, %f171, 0f4361EB85;
	max.ftz.f32 	%f175, %f170, 0f4361EB85;
	max.ftz.f32 	%f176, %f169, 0f4361EB85;
	add.ftz.f32 	%f12, %f176, 0fC361EB85;
	add.ftz.f32 	%f11, %f175, 0fC361EB85;
	add.ftz.f32 	%f10, %f174, 0fC361EB85;
	add.ftz.f32 	%f9, %f173, 0fC361EB85;
	and.b32  	%r13, %r55, 1;
	setp.eq.s32 	%p16, %r55, 1;
	mov.u32 	%r151, 0;
	@%p16 bra 	LBB9_5;
// %bb.3:                               // %"for output.s0.c.c.c_serial_outer.preheader.new"
	mov.u32 	%r114, -5;
	sub.s32 	%r115, %r114, %r64;
	shl.b32 	%r116, %r1, 1;
	sub.s32 	%r150, %r115, %r116;
	add.s32 	%r117, %r56, %r11;
	add.s32 	%r118, %r64, %r116;
	add.s32 	%r119, %r118, 5;
	mad.lo.s32 	%r120, %r62, %r119, %r117;
	add.s32 	%r121, %r120, -1;
	not.b32 	%r122, %r5;
	mov.u32 	%r123, 255;
	sub.s32 	%r124, %r123, %r65;
	max.s32 	%r125, %r122, %r124;
	sub.s32 	%r149, %r121, %r125;
	shl.b32 	%r16, %r62, 3;
	add.s32 	%r126, %r118, 4;
	mad.lo.s32 	%r127, %r62, %r126, %r117;
	add.s32 	%r128, %r127, -1;
	sub.s32 	%r148, %r128, %r125;
	add.s32 	%r129, %r118, 1;
	mad.lo.s32 	%r130, %r62, %r129, %r117;
	add.s32 	%r131, %r130, -1;
	sub.s32 	%r147, %r131, %r125;
	mad.lo.s32 	%r132, %r62, %r118, %r117;
	add.s32 	%r133, %r132, -1;
	sub.s32 	%r146, %r133, %r125;
	sub.s32 	%r145, %r13, %r55;
	mov.u32 	%r151, 0;
LBB9_4:                                 // %"for output.s0.c.c.c_serial_outer"
                                        // =>This Inner Loop Header: Depth=1
	setp.eq.s32 	%p17, %r150, -5;
	setp.eq.s32 	%p18, %r150, -6;
	selp.f32 	%f177, %f8, %f12, %p18;
	selp.f32 	%f178, %f7, %f11, %p18;
	selp.f32 	%f179, %f5, %f9, %p18;
	selp.f32 	%f180, %f6, %f10, %p18;
	selp.f32 	%f181, %f2, %f180, %p17;
	selp.f32 	%f182, %f1, %f179, %p17;
	selp.f32 	%f183, %f3, %f178, %p17;
	selp.f32 	%f184, %f4, %f177, %p17;
	cvt.rzi.ftz.u16.f32 	%rs25, %f184;
	cvt.rzi.ftz.u16.f32 	%rs26, %f183;
	cvt.rzi.ftz.u16.f32 	%rs27, %f182;
	cvt.rzi.ftz.u16.f32 	%rs28, %f181;
	add.s32 	%r134, %r7, %r146;
	cvt.s64.s32 	%rd33, %r134;
	add.s64 	%rd34, %rd1, %rd33;
	st.global.u8 	[%rd34+1], %rs28;
	st.global.u8 	[%rd34], %rs27;
	st.global.u8 	[%rd34+2], %rs26;
	st.global.u8 	[%rd34+3], %rs25;
	setp.eq.s32 	%p19, %r150, -4;
	selp.f32 	%f185, %f5, %f9, %p17;
	selp.f32 	%f186, %f6, %f10, %p17;
	selp.f32 	%f187, %f7, %f11, %p17;
	selp.f32 	%f188, %f8, %f12, %p17;
	selp.f32 	%f189, %f4, %f188, %p19;
	selp.f32 	%f190, %f3, %f187, %p19;
	selp.f32 	%f191, %f2, %f186, %p19;
	selp.f32 	%f192, %f1, %f185, %p19;
	cvt.rzi.ftz.u16.f32 	%rs29, %f192;
	cvt.rzi.ftz.u16.f32 	%rs30, %f191;
	cvt.rzi.ftz.u16.f32 	%rs31, %f190;
	cvt.rzi.ftz.u16.f32 	%rs32, %f189;
	add.s32 	%r135, %r7, %r147;
	cvt.s64.s32 	%rd35, %r135;
	add.s64 	%rd36, %rd1, %rd35;
	st.global.u8 	[%rd36+3], %rs32;
	st.global.u8 	[%rd36+2], %rs31;
	st.global.u8 	[%rd36+1], %rs30;
	st.global.u8 	[%rd36], %rs29;
	setp.eq.s32 	%p20, %r150, -1;
	setp.eq.s32 	%p21, %r150, -2;
	selp.f32 	%f193, %f8, %f12, %p21;
	selp.f32 	%f194, %f5, %f9, %p21;
	selp.f32 	%f195, %f6, %f10, %p21;
	selp.f32 	%f196, %f7, %f11, %p21;
	selp.f32 	%f197, %f3, %f196, %p20;
	selp.f32 	%f198, %f2, %f195, %p20;
	selp.f32 	%f199, %f1, %f194, %p20;
	selp.f32 	%f200, %f4, %f193, %p20;
	cvt.rzi.ftz.u16.f32 	%rs33, %f200;
	cvt.rzi.ftz.u16.f32 	%rs34, %f199;
	cvt.rzi.ftz.u16.f32 	%rs35, %f198;
	cvt.rzi.ftz.u16.f32 	%rs36, %f197;
	add.s32 	%r136, %r7, %r148;
	cvt.s64.s32 	%rd37, %r136;
	add.s64 	%rd38, %rd1, %rd37;
	st.global.u8 	[%rd38+2], %rs36;
	st.global.u8 	[%rd38+1], %rs35;
	st.global.u8 	[%rd38], %rs34;
	st.global.u8 	[%rd38+3], %rs33;
	setp.eq.s32 	%p22, %r150, 0;
	selp.f32 	%f201, %f8, %f12, %p20;
	selp.f32 	%f202, %f5, %f9, %p20;
	selp.f32 	%f203, %f6, %f10, %p20;
	selp.f32 	%f204, %f7, %f11, %p20;
	selp.f32 	%f205, %f3, %f204, %p22;
	selp.f32 	%f206, %f2, %f203, %p22;
	selp.f32 	%f207, %f1, %f202, %p22;
	selp.f32 	%f208, %f4, %f201, %p22;
	cvt.rzi.ftz.u16.f32 	%rs37, %f208;
	cvt.rzi.ftz.u16.f32 	%rs38, %f207;
	cvt.rzi.ftz.u16.f32 	%rs39, %f206;
	cvt.rzi.ftz.u16.f32 	%rs40, %f205;
	add.s32 	%r137, %r7, %r149;
	cvt.s64.s32 	%rd39, %r137;
	add.s64 	%rd40, %rd1, %rd39;
	st.global.u8 	[%rd40+2], %rs40;
	st.global.u8 	[%rd40+1], %rs39;
	st.global.u8 	[%rd40], %rs38;
	st.global.u8 	[%rd40+3], %rs37;
	add.s32 	%r151, %r151, 4;
	add.s32 	%r150, %r150, -8;
	add.s32 	%r149, %r149, %r16;
	add.s32 	%r148, %r148, %r16;
	add.s32 	%r147, %r147, %r16;
	add.s32 	%r146, %r146, %r16;
	add.s32 	%r145, %r145, 2;
	setp.eq.s32 	%p23, %r145, 0;
	@%p23 bra 	LBB9_5;
	bra.uni 	LBB9_4;
LBB9_5:                                 // %after_bb.loopexit.unr-lcssa
	setp.eq.s32 	%p24, %r13, 0;
	@%p24 bra 	LBB9_13;
// %bb.6:                               // %"for output.s0.c.c.c_serial_outer.epil"
	add.s32 	%r106, %r9, %r56;
	add.s32 	%r12, %r106, %r11;
	add.s32 	%r138, %r151, %r1;
	shl.b32 	%r139, %r138, 1;
	add.s32 	%r140, %r139, %r64;
	setp.eq.s32 	%p25, %r140, 0;
	setp.eq.s32 	%p26, %r140, 1;
	selp.f32 	%f209, %f5, %f9, %p26;
	selp.f32 	%f210, %f6, %f10, %p26;
	selp.f32 	%f211, %f7, %f11, %p26;
	selp.f32 	%f212, %f8, %f12, %p26;
	selp.f32 	%f213, %f4, %f212, %p25;
	selp.f32 	%f214, %f3, %f211, %p25;
	selp.f32 	%f215, %f2, %f210, %p25;
	selp.f32 	%f216, %f1, %f209, %p25;
	cvt.rzi.ftz.u16.f32 	%rs41, %f216;
	cvt.rzi.ftz.u16.f32 	%rs42, %f215;
	cvt.rzi.ftz.u16.f32 	%rs43, %f214;
	cvt.rzi.ftz.u16.f32 	%rs44, %f213;
	mad.lo.s32 	%r141, %r140, %r62, %r12;
	cvt.s64.s32 	%rd41, %r141;
	add.s64 	%rd42, %rd1, %rd41;
	st.global.u8 	[%rd42+3], %rs44;
	st.global.u8 	[%rd42+2], %rs43;
	st.global.u8 	[%rd42+1], %rs42;
	st.global.u8 	[%rd42], %rs41;
	setp.eq.s32 	%p27, %r140, -1;
	selp.f32 	%f217, %f5, %f9, %p25;
	selp.f32 	%f218, %f6, %f10, %p25;
	selp.f32 	%f219, %f7, %f11, %p25;
	selp.f32 	%f220, %f8, %f12, %p25;
	selp.f32 	%f221, %f4, %f220, %p27;
	selp.f32 	%f222, %f3, %f219, %p27;
	selp.f32 	%f223, %f2, %f218, %p27;
	selp.f32 	%f224, %f1, %f217, %p27;
	cvt.rzi.ftz.u16.f32 	%rs45, %f224;
	cvt.rzi.ftz.u16.f32 	%rs46, %f223;
	cvt.rzi.ftz.u16.f32 	%rs47, %f222;
	cvt.rzi.ftz.u16.f32 	%rs48, %f221;
	add.s32 	%r142, %r141, %r62;
	cvt.s64.s32 	%rd43, %r142;
	add.s64 	%rd44, %rd1, %rd43;
	st.global.u8 	[%rd44+3], %rs48;
	st.global.u8 	[%rd44+2], %rs47;
	st.global.u8 	[%rd44+1], %rs46;
	st.global.u8 	[%rd44], %rs45;
	bra.uni 	LBB9_13;
LBB9_7:                                 // %false_bb
	ld.param.u32 	%r54, [kernel_output_s0_y_y___block_id_y_param_2];
	sub.s32 	%r72, %r54, %r1;
	shr.s32 	%r21, %r72, 1;
	min.s32 	%r22, %r21, %r55;
	setp.lt.s32 	%p2, %r22, 1;
	@%p2 bra 	LBB9_13;
// %bb.8:                               // %"for output.s0.c.c.c_serial_outer2.preheader"
	ld.param.u32 	%r53, [kernel_output_s0_y_y___block_id_y_param_1];
	shl.b32 	%r73, %r3, 2;
	add.s32 	%r23, %r2, %r4;
	add.s32 	%r74, %r23, %r61;
	add.s32 	%r24, %r73, %r6;
	mad.lo.s32 	%r25, %r74, %r65, %r24;
	add.s32 	%r75, %r23, %r52;
	add.s32 	%r76, %r24, %r56;
	mad.lo.s32 	%r26, %r75, %r63, %r76;
	add.s32 	%r78, %r23, %r59;
	add.s32 	%r79, %r23, %r58;
	mul.wide.s32 	%rd9, %r25, 4;
	add.s64 	%rd10, %rd2, %rd9;
	ld.global.nc.f32 	%f25, [%rd10+4];
	ld.global.nc.f32 	%f26, [%rd10];
	ld.global.nc.f32 	%f27, [%rd10+12];
	ld.global.nc.f32 	%f28, [%rd10+8];
	add.s32 	%r80, %r24, %r60;
	mad.lo.s32 	%r81, %r78, %r57, %r80;
	mul.wide.s32 	%rd11, %r81, 4;
	add.s64 	%rd12, %rd3, %rd11;
	ld.global.nc.f32 	%f29, [%rd12+4];
	ld.global.nc.f32 	%f30, [%rd12];
	ld.global.nc.f32 	%f31, [%rd12+12];
	ld.global.nc.f32 	%f32, [%rd12+8];
	mad.lo.s32 	%r82, %r79, %r57, %r80;
	mul.wide.s32 	%rd13, %r82, 4;
	add.s64 	%rd14, %rd4, %rd13;
	ld.global.nc.f32 	%f33, [%rd14];
	ld.global.nc.f32 	%f34, [%rd14+4];
	ld.global.nc.f32 	%f35, [%rd14+8];
	ld.global.nc.f32 	%f36, [%rd14+12];
	fma.rn.ftz.f32 	%f37, %f30, 0f3FB33333, %f26;
	fma.rn.ftz.f32 	%f38, %f29, 0f3FB33333, %f25;
	fma.rn.ftz.f32 	%f39, %f32, 0f3FB33333, %f28;
	fma.rn.ftz.f32 	%f40, %f31, 0f3FB33333, %f27;
	min.ftz.f32 	%f41, %f40, 0f43D9199A;
	min.ftz.f32 	%f42, %f39, 0f43D9199A;
	min.ftz.f32 	%f43, %f38, 0f43D9199A;
	min.ftz.f32 	%f44, %f37, 0f43D9199A;
	max.ftz.f32 	%f45, %f44, 0f43333333;
	max.ftz.f32 	%f46, %f43, 0f43333333;
	max.ftz.f32 	%f47, %f42, 0f43333333;
	max.ftz.f32 	%f48, %f41, 0f43333333;
	add.ftz.f32 	%f16, %f48, 0fC3333333;
	add.ftz.f32 	%f15, %f47, 0fC3333333;
	add.ftz.f32 	%f14, %f46, 0fC3333333;
	add.ftz.f32 	%f13, %f45, 0fC3333333;
	fma.rn.ftz.f32 	%f49, %f36, 0fBEAF9DB2, %f27;
	fma.rn.ftz.f32 	%f50, %f35, 0fBEAF9DB2, %f28;
	fma.rn.ftz.f32 	%f51, %f34, 0fBEAF9DB2, %f25;
	fma.rn.ftz.f32 	%f52, %f33, 0fBEAF9DB2, %f26;
	fma.rn.ftz.f32 	%f53, %f30, 0fBF360419, %f52;
	fma.rn.ftz.f32 	%f54, %f29, 0fBF360419, %f51;
	fma.rn.ftz.f32 	%f55, %f32, 0fBF360419, %f50;
	fma.rn.ftz.f32 	%f56, %f31, 0fBF360419, %f49;
	min.ftz.f32 	%f57, %f56, 0f42F02D0E;
	min.ftz.f32 	%f58, %f55, 0f42F02D0E;
	min.ftz.f32 	%f59, %f54, 0f42F02D0E;
	min.ftz.f32 	%f60, %f53, 0f42F02D0E;
	max.ftz.f32 	%f61, %f60, 0fC306E979;
	max.ftz.f32 	%f62, %f59, 0fC306E979;
	max.ftz.f32 	%f63, %f58, 0fC306E979;
	max.ftz.f32 	%f64, %f57, 0fC306E979;
	add.ftz.f32 	%f20, %f64, 0f4306E979;
	add.ftz.f32 	%f19, %f63, 0f4306E979;
	add.ftz.f32 	%f18, %f62, 0f4306E979;
	add.ftz.f32 	%f17, %f61, 0f4306E979;
	fma.rn.ftz.f32 	%f65, %f33, 0f3FE1EB85, %f26;
	fma.rn.ftz.f32 	%f66, %f34, 0f3FE1EB85, %f25;
	fma.rn.ftz.f32 	%f67, %f35, 0f3FE1EB85, %f28;
	fma.rn.ftz.f32 	%f68, %f36, 0f3FE1EB85, %f27;
	min.ftz.f32 	%f69, %f68, 0f43F075C2;
	min.ftz.f32 	%f70, %f67, 0f43F075C2;
	min.ftz.f32 	%f71, %f66, 0f43F075C2;
	min.ftz.f32 	%f72, %f65, 0f43F075C2;
	max.ftz.f32 	%f73, %f72, 0f4361EB85;
	max.ftz.f32 	%f74, %f71, 0f4361EB85;
	max.ftz.f32 	%f75, %f70, 0f4361EB85;
	max.ftz.f32 	%f76, %f69, 0f4361EB85;
	add.ftz.f32 	%f24, %f76, 0fC361EB85;
	add.ftz.f32 	%f23, %f75, 0fC361EB85;
	add.ftz.f32 	%f22, %f74, 0fC361EB85;
	add.ftz.f32 	%f21, %f73, 0fC361EB85;
	and.b32  	%r27, %r22, 1;
	setp.eq.s32 	%p3, %r22, 1;
	mov.u32 	%r154, 0;
	@%p3 bra 	LBB9_11;
// %bb.9:                               // %"for output.s0.c.c.c_serial_outer2.preheader.new"
	shl.b32 	%r84, %r1, 1;
	add.s32 	%r153, %r84, 4;
	not.b32 	%r85, %r21;
	not.b32 	%r86, %r55;
	max.s32 	%r87, %r85, %r86;
	add.s32 	%r88, %r87, %r27;
	add.s32 	%r152, %r88, 1;
	mov.u32 	%r154, 0;
LBB9_10:                                // %"for output.s0.c.c.c_serial_outer2"
                                        // =>This Inner Loop Header: Depth=1
	add.s32 	%r89, %r153, -4;
	min.s32 	%r90, %r89, %r53;
	add.s32 	%r91, %r90, %r64;
	setp.eq.s32 	%p4, %r91, 0;
	setp.eq.s32 	%p5, %r91, 1;
	selp.f32 	%f77, %f17, %f21, %p5;
	selp.f32 	%f78, %f18, %f22, %p5;
	selp.f32 	%f79, %f19, %f23, %p5;
	selp.f32 	%f80, %f20, %f24, %p5;
	selp.f32 	%f81, %f16, %f80, %p4;
	selp.f32 	%f82, %f15, %f79, %p4;
	selp.f32 	%f83, %f14, %f78, %p4;
	selp.f32 	%f84, %f13, %f77, %p4;
	cvt.rzi.ftz.u16.f32 	%rs1, %f84;
	cvt.rzi.ftz.u16.f32 	%rs2, %f83;
	cvt.rzi.ftz.u16.f32 	%rs3, %f82;
	cvt.rzi.ftz.u16.f32 	%rs4, %f81;
	mad.lo.s32 	%r92, %r91, %r62, %r26;
	cvt.s64.s32 	%rd15, %r92;
	add.s64 	%rd16, %rd1, %rd15;
	st.global.u8 	[%rd16+3], %rs4;
	st.global.u8 	[%rd16+2], %rs3;
	st.global.u8 	[%rd16+1], %rs2;
	st.global.u8 	[%rd16], %rs1;
	setp.eq.s32 	%p6, %r91, -1;
	selp.f32 	%f85, %f17, %f21, %p4;
	selp.f32 	%f86, %f18, %f22, %p4;
	selp.f32 	%f87, %f19, %f23, %p4;
	selp.f32 	%f88, %f20, %f24, %p4;
	selp.f32 	%f89, %f16, %f88, %p6;
	selp.f32 	%f90, %f15, %f87, %p6;
	selp.f32 	%f91, %f14, %f86, %p6;
	selp.f32 	%f92, %f13, %f85, %p6;
	cvt.rzi.ftz.u16.f32 	%rs5, %f92;
	cvt.rzi.ftz.u16.f32 	%rs6, %f91;
	cvt.rzi.ftz.u16.f32 	%rs7, %f90;
	cvt.rzi.ftz.u16.f32 	%rs8, %f89;
	add.s32 	%r93, %r92, %r62;
	cvt.s64.s32 	%rd17, %r93;
	add.s64 	%rd18, %rd1, %rd17;
	st.global.u8 	[%rd18+3], %rs8;
	st.global.u8 	[%rd18+2], %rs7;
	st.global.u8 	[%rd18+1], %rs6;
	st.global.u8 	[%rd18], %rs5;
	min.s32 	%r94, %r153, %r53;
	add.s32 	%r95, %r94, %r64;
	setp.eq.s32 	%p7, %r95, 0;
	setp.eq.s32 	%p8, %r95, 1;
	selp.f32 	%f93, %f20, %f24, %p8;
	selp.f32 	%f94, %f17, %f21, %p8;
	selp.f32 	%f95, %f18, %f22, %p8;
	selp.f32 	%f96, %f19, %f23, %p8;
	selp.f32 	%f97, %f15, %f96, %p7;
	selp.f32 	%f98, %f14, %f95, %p7;
	selp.f32 	%f99, %f13, %f94, %p7;
	selp.f32 	%f100, %f16, %f93, %p7;
	cvt.rzi.ftz.u16.f32 	%rs9, %f100;
	cvt.rzi.ftz.u16.f32 	%rs10, %f99;
	cvt.rzi.ftz.u16.f32 	%rs11, %f98;
	cvt.rzi.ftz.u16.f32 	%rs12, %f97;
	mad.lo.s32 	%r96, %r95, %r62, %r26;
	cvt.s64.s32 	%rd19, %r96;
	add.s64 	%rd20, %rd1, %rd19;
	st.global.u8 	[%rd20+2], %rs12;
	st.global.u8 	[%rd20+1], %rs11;
	st.global.u8 	[%rd20], %rs10;
	st.global.u8 	[%rd20+3], %rs9;
	setp.eq.s32 	%p9, %r95, -1;
	selp.f32 	%f101, %f20, %f24, %p7;
	selp.f32 	%f102, %f17, %f21, %p7;
	selp.f32 	%f103, %f18, %f22, %p7;
	selp.f32 	%f104, %f19, %f23, %p7;
	selp.f32 	%f105, %f15, %f104, %p9;
	selp.f32 	%f106, %f14, %f103, %p9;
	selp.f32 	%f107, %f13, %f102, %p9;
	selp.f32 	%f108, %f16, %f101, %p9;
	cvt.rzi.ftz.u16.f32 	%rs13, %f108;
	cvt.rzi.ftz.u16.f32 	%rs14, %f107;
	cvt.rzi.ftz.u16.f32 	%rs15, %f106;
	cvt.rzi.ftz.u16.f32 	%rs16, %f105;
	add.s32 	%r97, %r96, %r62;
	cvt.s64.s32 	%rd21, %r97;
	add.s64 	%rd22, %rd1, %rd21;
	st.global.u8 	[%rd22+2], %rs16;
	st.global.u8 	[%rd22+1], %rs15;
	st.global.u8 	[%rd22], %rs14;
	st.global.u8 	[%rd22+3], %rs13;
	add.s32 	%r154, %r154, 4;
	add.s32 	%r153, %r153, 8;
	add.s32 	%r152, %r152, 2;
	setp.eq.s32 	%p10, %r152, 0;
	@%p10 bra 	LBB9_11;
	bra.uni 	LBB9_10;
LBB9_11:                                // %after_bb.loopexit16.unr-lcssa
	setp.eq.s32 	%p11, %r27, 0;
	@%p11 bra 	LBB9_13;
// %bb.12:                              // %"for output.s0.c.c.c_serial_outer2.epil"
	add.s32 	%r98, %r154, %r1;
	shl.b32 	%r99, %r98, 1;
	min.s32 	%r100, %r99, %r53;
	add.s32 	%r101, %r100, %r64;
	setp.eq.s32 	%p12, %r101, 0;
	setp.eq.s32 	%p13, %r101, 1;
	selp.f32 	%f109, %f17, %f21, %p13;
	selp.f32 	%f110, %f18, %f22, %p13;
	selp.f32 	%f111, %f19, %f23, %p13;
	selp.f32 	%f112, %f20, %f24, %p13;
	selp.f32 	%f113, %f16, %f112, %p12;
	selp.f32 	%f114, %f15, %f111, %p12;
	selp.f32 	%f115, %f14, %f110, %p12;
	selp.f32 	%f116, %f13, %f109, %p12;
	cvt.rzi.ftz.u16.f32 	%rs17, %f116;
	cvt.rzi.ftz.u16.f32 	%rs18, %f115;
	cvt.rzi.ftz.u16.f32 	%rs19, %f114;
	cvt.rzi.ftz.u16.f32 	%rs20, %f113;
	mad.lo.s32 	%r102, %r101, %r62, %r26;
	cvt.s64.s32 	%rd23, %r102;
	add.s64 	%rd24, %rd1, %rd23;
	st.global.u8 	[%rd24+3], %rs20;
	st.global.u8 	[%rd24+2], %rs19;
	st.global.u8 	[%rd24+1], %rs18;
	st.global.u8 	[%rd24], %rs17;
	setp.eq.s32 	%p14, %r101, -1;
	selp.f32 	%f117, %f17, %f21, %p12;
	selp.f32 	%f118, %f18, %f22, %p12;
	selp.f32 	%f119, %f19, %f23, %p12;
	selp.f32 	%f120, %f20, %f24, %p12;
	selp.f32 	%f121, %f16, %f120, %p14;
	selp.f32 	%f122, %f15, %f119, %p14;
	selp.f32 	%f123, %f14, %f118, %p14;
	selp.f32 	%f124, %f13, %f117, %p14;
	cvt.rzi.ftz.u16.f32 	%rs21, %f124;
	cvt.rzi.ftz.u16.f32 	%rs22, %f123;
	cvt.rzi.ftz.u16.f32 	%rs23, %f122;
	cvt.rzi.ftz.u16.f32 	%rs24, %f121;
	add.s32 	%r103, %r102, %r62;
	cvt.s64.s32 	%rd25, %r103;
	add.s64 	%rd26, %rd1, %rd25;
	st.global.u8 	[%rd26+3], %rs24;
	st.global.u8 	[%rd26+2], %rs23;
	st.global.u8 	[%rd26+1], %rs22;
	st.global.u8 	[%rd26], %rs21;
LBB9_13:                                // %after_bb
	ret;
                                        // -- End function
}


add_temp_object_file: /tmp/mAyKA4/hist_classic_auto_schedule.a.o
Module.compile(): temporary object_name /tmp/mAyKA4/hist_classic_auto_schedule.a.o
emit_file.Compiling to native code...
Module.compile(): static_library_name ./bin/hist_classic_auto_schedule.a
file_unlink: /tmp/mAyKA4/hist_classic_auto_schedule.a.o
dir_rmdir: /tmp/mAyKA4
Module.compile(): assembly_name ./bin/hist_classic_auto_schedule.s
emit_file.Compiling to native code...
Module.compile(): c_header_name ./bin/hist_classic_auto_schedule.h
