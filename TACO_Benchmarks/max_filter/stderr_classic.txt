Registering autoscheduler...
Generator max_filter has base_path ./bin/max_filter_classic_auto_schedule
Dropout seed = 1561461889
Node: output
  Symbolic region required: 
    output.x.min, output.x.max
    output.y.min, output.y.max
    output.c.min, output.c.max
  Region computed: 
    output.x.min, output.x.max
    output.y.min, output.y.max
    output.c.min, output.c.max
  Stage 0:
    x output.x.min output.x.max
    y output.y.min output.y.max
    c output.c.min output.c.max
    Featurization for type UInt32
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   6
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
    Featurization for type Float
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   1
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      1 0 0 1
      Transpose:      1 0 0 1
      Broadcast:      1 0 0 1
      Slice:          1 0 0 1
  pointwise: 1 boundary condition: 0 wrapper: 1 input: 0 output: 1
Node: maximum
  Symbolic region required: 
    maximum.x.min, maximum.x.max
    maximum.y.min, maximum.y.max
    maximum.c.min, maximum.c.max
  Region computed: 
    maximum.x.min, maximum.x.max
    maximum.y.min, maximum.y.max
    maximum.c.min, maximum.c.max
  Stage 0:
    x maximum.x.min maximum.x.max
    y maximum.y.min maximum.y.max
    c maximum.c.min maximum.c.max
    Featurization for type UInt32
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   3
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
    Featurization for type Float
     Op histogram:
      Constant:   1
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 1
      Transpose:      0 0 0 1
      Broadcast:      0 0 0 1
      Slice:          0 0 0 1
  Stage 1:
    r22$x -26 26
    x maximum.x.min maximum.x.max
    y maximum.y.min maximum.y.max
    c maximum.c.min maximum.c.max
    Featurization for type UInt32
     Op histogram:
      Constant:   2
      Cast:       0
      Variable:   11
      Param:      0
      Add:        1
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        1
      Max:        1
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   1
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
    Featurization for type Float
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        1
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   1
      SelfCall:   1
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
  pointwise: 0 boundary condition: 0 wrapper: 0 input: 0 output: 0
Node: vert
  Symbolic region required: 
    vert.x.min, vert.x.max
    vert.y.min, vert.y.max
    vert.c.min, vert.c.max
    vert.t.min, vert.t.max
  Region computed: 
    vert.x.min, vert.x.max
    vert.y.min, vert.y.max
    vert.c.min, vert.c.max
    vert.t.min, vert.t.max
  Stage 0:
    x vert.x.min vert.x.max
    y vert.y.min vert.y.max
    c vert.c.min vert.c.max
    t vert.t.min vert.t.max
    Featurization for type UInt32
     Op histogram:
      Constant:   6
      Cast:       0
      Variable:   16
      Param:      0
      Add:        2
      Sub:        2
      Mod:        0
      Mul:        0
      Div:        0
      Min:        2
      Max:        2
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   1
      SelfCall:   0
      ExternCall: 1
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
    Featurization for type Float
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        1
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   2
      SelfCall:   0
      ExternCall: 0
      Let:        1
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 1
      Transpose:      0 0 0 1
      Broadcast:      0 0 0 1
      Slice:          0 0 0 1
  pointwise: 0 boundary condition: 0 wrapper: 0 input: 0 output: 0
Node: vert_log
  Symbolic region required: 
    vert_log.x.min, vert_log.x.max
    vert_log.y.min, vert_log.y.max
    vert_log.c.min, vert_log.c.max
    vert_log.t.min, vert_log.t.max
  Region computed: 
    vert_log.x.min, vert_log.x.max
    min(vert_log.y.min, -26), max(vert_log.y.max, 2559)
    vert_log.c.min, vert_log.c.max
    min(vert_log.t.min, 1), max(vert_log.t.max, 5)
  Stage 0:
    x vert_log.x.min vert_log.x.max
    y vert_log.y.min vert_log.y.max
    c vert_log.c.min vert_log.c.max
    t vert_log.t.min vert_log.t.max
    Featurization for type UInt32
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   7
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
    Featurization for type Float
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   1
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 1
      Transpose:      0 0 0 1
      Broadcast:      0 0 0 1
      Slice:          0 0 0 1
  Stage 1:
    r4$x -26 2559
    r4$y 1 5
    x vert_log.x.min vert_log.x.max
    c vert_log.c.min vert_log.c.max
    Featurization for type UInt32
     Op histogram:
      Constant:   6
      Cast:       0
      Variable:   13
      Param:      0
      Add:        4
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        1
      Max:        1
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 1
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
    Featurization for type Float
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        1
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   2
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 1 0 1
      Broadcast:      0 1 0 1
      Slice:          0 1 0 1
  pointwise: 0 boundary condition: 0 wrapper: 0 input: 0 output: 0
Node: repeat_edge
  Symbolic region required: 
    repeat_edge._0.min, repeat_edge._0.max
    repeat_edge._1.min, repeat_edge._1.max
    repeat_edge._2.min, repeat_edge._2.max
  Region computed: 
    repeat_edge._0.min, repeat_edge._0.max
    repeat_edge._1.min, repeat_edge._1.max
    repeat_edge._2.min, repeat_edge._2.max
  Stage 0:
    _0 repeat_edge._0.min repeat_edge._0.max
    _1 repeat_edge._1.min repeat_edge._1.max
    _2 repeat_edge._2.min repeat_edge._2.max
    Featurization for type UInt32
     Op histogram:
      Constant:   3
      Cast:       0
      Variable:   6
      Param:      9
      Add:        6
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        3
      Max:        3
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 3
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
    Featurization for type Float
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   1
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 1
      Transpose:      0 0 0 1
      Broadcast:      0 0 0 1
      Slice:          0 0 0 1
  pointwise: 0 boundary condition: 1 wrapper: 0 input: 0 output: 0
Node: lambda_0
  Symbolic region required: 
    lambda_0._0.min, lambda_0._0.max
    lambda_0._1.min, lambda_0._1.max
    lambda_0._2.min, lambda_0._2.max
  Region computed: 
    lambda_0._0.min, lambda_0._0.max
    lambda_0._1.min, lambda_0._1.max
    lambda_0._2.min, lambda_0._2.max
  Stage 0:
    _0 lambda_0._0.min lambda_0._0.max
    _1 lambda_0._1.min lambda_0._1.max
    _2 lambda_0._2.min lambda_0._2.max
    Featurization for type UInt32
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   6
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
    Featurization for type Float
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   1
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      1 0 0 1
      Transpose:      1 0 0 1
      Broadcast:      1 0 0 1
      Slice:          1 0 0 1
  pointwise: 1 boundary condition: 0 wrapper: 1 input: 0 output: 0
Node: input_im
  Symbolic region required: 
    input_im._0.min, input_im._0.max
    input_im._1.min, input_im._1.max
    input_im._2.min, input_im._2.max
  Region computed: 
    input_im._0.min, input_im._0.max
    input_im._1.min, input_im._1.max
    input_im._2.min, input_im._2.max
  Stage 0:
    _0 input_im._0.min input_im._0.max
    _1 input_im._1.min input_im._1.max
    _2 input_im._2.min input_im._2.max
    Featurization for type UInt32
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   6
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
    Featurization for type Float
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  1
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 1 1
      Transpose:      0 0 1 1
      Broadcast:      0 0 1 1
      Slice:          0 0 1 1
  pointwise: 1 boundary condition: 0 wrapper: 1 input: 1 output: 0
Node: slice_for_radius
  Symbolic region required: 
    slice_for_radius.t.min, slice_for_radius.t.max
  Region computed: 
    slice_for_radius.t.min, slice_for_radius.t.max
  Stage 0:
    t slice_for_radius.t.min slice_for_radius.t.max
    Featurization for type UInt32
     Op histogram:
      Constant:   2
      Cast:       0
      Variable:   2
      Param:      0
      Add:        1
      Sub:        0
      Mod:        0
      Mul:        1
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 1
      Transpose:      0 0 0 1
      Broadcast:      0 0 0 1
      Slice:          0 0 0 1
    Featurization for type Float
     Op histogram:
      Constant:   1
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        1
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 2
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
  pointwise: 1 boundary condition: 0 wrapper: 0 input: 0 output: 0
Node: filter_height
  Symbolic region required: 
    filter_height.x.min, filter_height.x.max
  Region computed: 
    filter_height.x.min, filter_height.x.max
  Stage 0:
    x filter_height.x.min filter_height.x.max
    Featurization for type UInt32
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   2
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   1
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      1 0 0 1
      Transpose:      1 0 0 1
      Broadcast:      1 0 0 1
      Slice:          1 0 0 1
  pointwise: 1 boundary condition: 0 wrapper: 1 input: 0 output: 0
Node: sum
  Symbolic region required: 
    sum.x.min, sum.x.max
  Region computed: 
    sum.x.min, sum.x.max
  Stage 0:
    x sum.x.min sum.x.max
    Featurization for type UInt32
     Op histogram:
      Constant:   1
      Cast:       0
      Variable:   1
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 1
      Transpose:      0 0 0 1
      Broadcast:      0 0 0 1
      Slice:          0 0 0 1
  Stage 1:
    r9$x 0 26
    x sum.x.min sum.x.max
    Featurization for type Bool
     Op histogram:
      Constant:   0
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         1
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
    Featurization for type UInt32
     Op histogram:
      Constant:   2
      Cast:       0
      Variable:   6
      Param:      0
      Add:        2
      Sub:        0
      Mod:        0
      Mul:        2
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     1
      ImageCall:  0
      FuncCall:   0
      SelfCall:   1
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
    Featurization for type Float
     Op histogram:
      Constant:   1
      Cast:       0
      Variable:   0
      Param:      0
      Add:        0
      Sub:        0
      Mod:        0
      Mul:        0
      Div:        0
      Min:        0
      Max:        0
      EQ:         0
      NE:         0
      LT:         0
      LE:         0
      And:        0
      Or:         0
      Not:        0
      Select:     0
      ImageCall:  0
      FuncCall:   0
      SelfCall:   0
      ExternCall: 0
      Let:        0
     Memory access patterns. Columns are calls to other Funcs, self-calls, input image access, and stores
      Pointwise:      0 0 0 0
      Transpose:      0 0 0 0
      Broadcast:      0 0 0 0
      Slice:          0 0 0 0
  pointwise: 0 boundary condition: 0 wrapper: 0 input: 0 output: 0
Edge: maximum -> output
  Footprint: 
    Min 0: output.x.min
    Max 0: output.x.max
    Min 1: output.y.min
    Max 1: output.y.max
    Min 2: output.c.min
    Max 2: output.c.max
  Load Jacobians:
    [ 1   0   0  ]
    [ 0   1   0  ]
    [ 0   0   1  ]

Edge: filter_height -> maximum.update(0)
  Footprint: 
    Min 0: maximum.r22$x.min
    Max 0: maximum.r22$x.max
  Load Jacobians:
    [ 1   0   0   0  ]

Edge: vert -> maximum.update(0)
  Footprint: 
    Min 0: (maximum.r22$x.min + maximum.x.min)
    Max 0: (maximum.r22$x.max + maximum.x.max)
    Min 1: maximum.y.min
    Max 1: maximum.y.max
    Min 2: maximum.c.min
    Max 2: maximum.c.max
    Min 3: 0
    Max 3: 27
  Load Jacobians:
    [ 1   1   0   0  ]
    [ 0   0   1   0  ]
    [ 0   0   0   1  ]
    [ _   0   0   0  ]

Edge: slice_for_radius -> vert
  Footprint: 
    Min 0: vert.t.min
    Max 0: vert.t.max
  Load Jacobians:
    [ 0   0   0   1  ]

Edge: vert_log -> vert
  Footprint: 
    Min 0: vert.x.min
    Max 0: vert.x.max
    Min 1: min((vert.y.min - vert.t.max), ((vert.t.min + vert.y.min) + -51))
    Max 1: max((vert.y.max - vert.t.min), (vert.t.max + vert.y.max))
    Min 2: vert.c.min
    Max 2: vert.c.max
    Min 3: 0
    Max 3: 6
  Load Jacobians:
    [ 1   0   0   0  ]
    [ 0   1   0   -1  ]
    [ 0   0   1   0  ]
    [ 0   0   0   _  ]

    [ 1   0   0   0  ]
    [ 0   1   0   _  ]
    [ 0   0   1   0  ]
    [ 0   0   0   _  ]

Edge: repeat_edge -> vert_log
  Footprint: 
    Min 0: vert_log.x.min
    Max 0: vert_log.x.max
    Min 1: vert_log.y.min
    Max 1: vert_log.y.max
    Min 2: vert_log.c.min
    Max 2: vert_log.c.max
  Load Jacobians:
    [ 1   0   0   0  ]
    [ 0   1   0   0  ]
    [ 0   0   1   0  ]

Edge: lambda_0 -> repeat_edge
  Footprint: 
    Min 0: max(min(repeat_edge._0.min, 1535), 0)
    Max 0: max(min(repeat_edge._0.max, 1535), 0)
    Min 1: max(min(repeat_edge._1.min, 2559), 0)
    Max 1: max(min(repeat_edge._1.max, 2559), 0)
    Min 2: max(min(repeat_edge._2.min, 2), 0)
    Max 2: max(min(repeat_edge._2.max, 2), 0)
  Load Jacobians:
    [ _   0   0  ]
    [ 0   _   0  ]
    [ 0   0   _  ]

Edge: input_im -> lambda_0
  Footprint: 
    Min 0: lambda_0._0.min
    Max 0: lambda_0._0.max
    Min 1: lambda_0._1.min
    Max 1: lambda_0._1.max
    Min 2: lambda_0._2.min
    Max 2: lambda_0._2.max
  Load Jacobians:
    [ 1   0   0  ]
    [ 0   1   0  ]
    [ 0   0   1  ]

Edge: sum -> filter_height
  Footprint: 
    Min 0: filter_height.x.min
    Max 0: filter_height.x.max
  Load Jacobians:
    [ 1  ]

Warning: Huge number of states generated (442727).
Warning: Huge number of states generated (434880).

Pass 0 result:
State with cost 100000000000000007629769841091887003294964970946560.000000:
 gpu_none
realize: output [1536, 2560, 3] with 1 stages
realize: maximum [1536, 2560, 3] with 2 stages
realize: vert [1588, 2560, 3, 28] with 1 stages
realize: vert_log [1588, 2638, 3, 7] with 2 stages
realize: slice_for_radius [28] with 1 stages
realize: filter_height [53c] with 1 stages
realize: sum [53c] with 2 stages
sum 2c (0, 0) t gpu_block
 sum 27c (0, 0) t gpu_thread
  sum 1c (0, 0) t gpu_serial
   sum 1vc (0, 0) *
sum 1c 2c (1, 0) t gpu_block
 sum 1c 27c (1, 0) t gpu_thread
  sum 27c 1c (1, 0) t gpu_serial
   sum 1c 1vc (1, 0) *
filter_height 1c (0, 0) t gpu_block
 filter_height 7c (0, 0) t gpu_thread
  filter_height 8c (0, 0) t gpu_serial
   filter_height 1vc (0, 0) *
slice_for_radius 1 (0, 0) t gpu_block
 slice_for_radius 28 (0, 0) t gpu_thread
  slice_for_radius 1c (0, 0) t gpu_serial
   slice_for_radius 1vc (0, 0) *
vert_log 25 330 1 1 (3, 3) t gpu_block
 vert_log 64c 1c 2 7 (3, 3) t gpu_thread
  vert_log 1c 8c 2c 1c (3, 3) t gpu_serial
   vert_log 1c 1c 1c 1vc (3, 3) *
    inlined: repeat_edge 1
    inlined: lambda_0 1
vert_log 1c 1c 25 1 (-1, 3) t gpu_block
 vert_log 1c 1c 64c 2 (-1, 3) t gpu_thread
  vert_log 2586c 5c 1c 2c (-1, 3) t *
vert 794 40 1 1 (2, 2) t gpu_block
 vert 1c 64c 3 4 (2, 2) t gpu_thread
  vert 2c 1c 1c 7c (2, 2) t gpu_serial
   vert 1c 1c 1vc 1c (2, 2) *
maximum 48 5 2 (0, 0) t gpu_block
 maximum 16c 64c 1c (0, 0) t gpu_thread
  maximum 2c 8c 2c (0, 0) t gpu_serial
   maximum 1vc 1c 1c (0, 0) *
maximum 1c 48 5 2 (1, 0) t gpu_block
 maximum 1c 16c 64c 1c (1, 0) t gpu_thread
  maximum 53c 2c 8c 2c (1, 0) t gpu_serial
   maximum 1c 1vc 1c 1c (1, 0) *
output 24 160 1 (0, 0) t gpu_block
 output 64c 16c 1 (0, 0) t gpu_thread
  output 1c 1c 3 (0, 0) t gpu_serial
   output 1vc 1c 1c (0, 0) *
Warning: Huge number of states generated (442727).
Warning: Huge number of states generated (434880).

Pass 1 result:
State with cost 1100000000000000125465843120289378064488585314172928.000000:
 gpu_none
realize: output [1536, 2560, 3] with 1 stages
realize: maximum [1536, 2560, 3] with 2 stages
realize: vert [1588, 2560, 3, 28] with 1 stages
realize: vert_log [1588, 2638, 3, 7] with 2 stages
realize: repeat_edge [1588, 2638, 3] with 1 stages
realize: filter_height [53c] with 1 stages
realize: sum [53c] with 2 stages
sum 4c (0, 0) t gpu_block
 sum 14c (0, 0) t gpu_thread
  sum 1c (0, 0) t gpu_serial
   sum 1vc (0, 0) *
sum 1c 4c (1, 0) t gpu_block
 sum 1c 14c (1, 0) t gpu_thread
  sum 27c 1c (1, 0) t gpu_serial
   sum 1c 1vc (1, 0) *
filter_height 2c (0, 0) t gpu_block
 filter_height 14c (0, 0) t gpu_thread
  filter_height 2c (0, 0) t gpu_serial
   filter_height 1vc (0, 0) *
repeat_edge 25 42 3 (1, 1) t gpu_block
 repeat_edge 16c 63c 1c (1, 1) t gpu_thread
  repeat_edge 4c 1c 1c (1, 1) t gpu_serial
   repeat_edge 1c 1vc 1c (1, 1) *
    inlined: lambda_0 1
vert_log 25 165 1 4 (2, 2) t gpu_block
 vert_log 64c 4c 3 1c (2, 2) t gpu_thread
  vert_log 1c 4c 1c 2c (2, 2) t gpu_serial
   vert_log 1c 1c 1vc 1c (2, 2) *
vert_log 1c 1c 25 1 (3, 2) t gpu_block
 vert_log 1c 1c 64c 3 (3, 2) t gpu_thread
  vert_log 2586c 5c 1c 1c (3, 2) t gpu_serial
   vert_log 1c 1c 1c 1vc (3, 2) *
vert 199 20 1 4 (2, 2) t gpu_block
 vert 8c 64c 2 1c (2, 2) t gpu_thread
  vert 1c 2c 2c 7c (2, 2) t gpu_serial
   vert 1c 1c 1vc 1c (2, 2) *
    inlined: slice_for_radius 1
maximum 12 20 1 (2, 2) t gpu_block
 maximum 16c 64c 1 (2, 2) t gpu_thread
  maximum 8c 2c 3 (2, 2) t gpu_serial
   maximum 1c 1c 1vc (2, 2) *
maximum 1c 12 20 1 (3, 2) t gpu_block
 maximum 1c 16c 64c 1 (3, 2) t gpu_thread
  maximum 53c 8c 2c 3 (3, 2) t gpu_serial
   maximum 1c 1c 1c 1vc (3, 2) *
output 96 40 2 (0, 0) t gpu_block
 output 16c 32c 2c (0, 0) t gpu_thread
  output 1c 2c 1c (0, 0) t gpu_serial
   output 1vc 1c 1c (0, 0) *
Warning: Huge number of states generated (442727).
Warning: Huge number of states generated (434880).

Pass 2 result:
State with cost 100000000000000007629769841091887003294964970946560.000000:
 gpu_none
realize: output [1536, 2560, 3] with 1 stages
realize: maximum [1536, 2560, 3] with 2 stages
realize: vert [1588, 2560, 3, 28] with 1 stages
realize: vert_log [1588, 2638, 3, 7] with 2 stages
realize: repeat_edge [1588, 2638, 3] with 1 stages
realize: filter_height [53c] with 1 stages
realize: sum [53c] with 2 stages
sum 2c (0, 0) t gpu_block
 sum 27c (0, 0) t gpu_thread
  sum 1c (0, 0) t gpu_serial
   sum 1vc (0, 0) *
sum 1c 2c (1, 0) t gpu_block
 sum 1c 27c (1, 0) t gpu_thread
  sum 27c 1c (1, 0) t gpu_serial
   sum 1c 1vc (1, 0) *
filter_height 1c (0, 0) t gpu_block
 filter_height 7c (0, 0) t gpu_thread
  filter_height 8c (0, 0) t gpu_serial
   filter_height 1vc (0, 0) *
repeat_edge 199 21 1 (2, 2) t gpu_block
 repeat_edge 8c 63c 2 (2, 2) t gpu_thread
  repeat_edge 1c 2c 2c (2, 2) t gpu_serial
   repeat_edge 1c 1c 1vc (2, 2) *
    inlined: lambda_0 1
vert_log 25 1319 1 2 (2, 2) t gpu_block
 vert_log 64c 1c 3 4c (2, 2) t gpu_thread
  vert_log 1c 2c 1c 1c (2, 2) t gpu_serial
   vert_log 1c 1c 1vc 1c (2, 2) *
vert_log 1c 1c 25 1 (3, 2) t gpu_block
 vert_log 1c 1c 64c 3 (3, 2) t gpu_thread
  vert_log 2586c 5c 1c 1c (3, 2) t gpu_serial
   vert_log 1c 1c 1c 1vc (3, 2) *
vert 199 20 1 7 (2, 2) t gpu_block
 vert 8c 64c 2 1c (2, 2) t gpu_thread
  vert 1c 2c 2c 4c (2, 2) t gpu_serial
   vert 1c 1c 1vc 1c (2, 2) *
    inlined: slice_for_radius 1
maximum 3 20 1 (2, 2) t gpu_block
 maximum 64c 16c 1 (2, 2) t gpu_thread
  maximum 8c 8c 3 (2, 2) t gpu_serial
   maximum 1c 1c 1vc (2, 2) *
maximum 1c 3 20 1 (3, 2) t gpu_block
 maximum 1c 64c 16c 1 (3, 2) t gpu_thread
  maximum 53c 8c 8c 3 (3, 2) t gpu_serial
   maximum 1c 1c 1c 1vc (3, 2) *
output 24 80 2 (0, 0) t gpu_block
 output 64c 16c 1c (0, 0) t gpu_thread
  output 1c 2c 2c (0, 0) t gpu_serial
   output 1vc 1c 1c (0, 0) *
Warning: Huge number of states generated (442727).
Warning: Huge number of states generated (434880).

Pass 3 result:
State with cost 1100000000000000125465843120289378064488585314172928.000000:
 gpu_none
realize: output [1536, 2560, 3] with 1 stages
realize: maximum [1536, 2560, 3] with 2 stages
realize: vert [1588, 2560, 3, 28] with 1 stages
realize: vert_log [1588, 2638, 3, 7] with 2 stages
realize: slice_for_radius [28] with 1 stages
realize: filter_height [53c] with 1 stages
realize: sum [53c] with 2 stages
sum 4c (0, 0) t gpu_block
 sum 14c (0, 0) t gpu_thread
  sum 1c (0, 0) t gpu_serial
   sum 1vc (0, 0) *
sum 1c 4c (1, 0) t gpu_block
 sum 1c 14c (1, 0) t gpu_thread
  sum 27c 1c (1, 0) t gpu_serial
   sum 1c 1vc (1, 0) *
filter_height 1c (0, 0) t gpu_block
 filter_height 7c (0, 0) t gpu_thread
  filter_height 8c (0, 0) t gpu_serial
   filter_height 1vc (0, 0) *
slice_for_radius 1 (0, 0) t gpu_block
 slice_for_radius 4 (0, 0) t gpu_thread
  slice_for_radius 7c (0, 0) t gpu_serial
   slice_for_radius 1vc (0, 0) *
vert_log 25 330 1 2 (2, 2) t gpu_block
 vert_log 64c 8c 2 1c (2, 2) t gpu_thread
  vert_log 1c 1c 2c 4c (2, 2) t gpu_serial
   vert_log 1c 1c 1vc 1c (2, 2) *
    inlined: repeat_edge 1
    inlined: lambda_0 1
vert_log 1c 1c 25 1 (3, 2) t gpu_block
 vert_log 1c 1c 64c 2 (3, 2) t gpu_thread
  vert_log 2586c 5c 1c 2c (3, 2) t gpu_serial
   vert_log 1c 1c 1c 1vc (3, 2) *
vert 199 20 1 7 (2, 2) t gpu_block
 vert 8c 64c 2 1c (2, 2) t gpu_thread
  vert 1c 2c 2c 4c (2, 2) t gpu_serial
   vert 1c 1c 1vc 1c (2, 2) *
maximum 3 20 1 (2, 2) t gpu_block
 maximum 64c 16c 1 (2, 2) t gpu_thread
  maximum 8c 8c 3 (2, 2) t gpu_serial
   maximum 1c 1c 1vc (2, 2) *
maximum 1c 3 20 1 (3, 2) t gpu_block
 maximum 1c 64c 16c 1 (3, 2) t gpu_thread
  maximum 53c 8c 8c 3 (3, 2) t gpu_serial
   maximum 1c 1c 1c 1vc (3, 2) *
output 24 80 2 (0, 0) t gpu_block
 output 64c 8c 2c (0, 0) t gpu_thread
  output 1c 4c 1c (0, 0) t gpu_serial
   output 1vc 1c 1c (0, 0) *
Warning: Huge number of states generated (442727).
Warning: Huge number of states generated (434880).

Pass 4 result:
State with cost 100000000000000007629769841091887003294964970946560.000000:
 gpu_none
realize: output [1536, 2560, 3] with 1 stages
realize: maximum [1536, 2560, 3] with 2 stages
realize: vert [1588, 2560, 3, 28] with 1 stages
realize: vert_log [1588, 2638, 3, 7] with 2 stages
realize: slice_for_radius [28] with 1 stages
realize: filter_height [53c] with 1 stages
realize: sum [53c] with 2 stages
sum 2c (0, 0) t gpu_block
 sum 27c (0, 0) t gpu_thread
  sum 1c (0, 0) t gpu_serial
   sum 1vc (0, 0) *
sum 1c 2c (1, 0) t gpu_block
 sum 1c 27c (1, 0) t gpu_thread
  sum 27c 1c (1, 0) t gpu_serial
   sum 1c 1vc (1, 0) *
filter_height 2c (0, 0) t gpu_block
 filter_height 14c (0, 0) t gpu_thread
  filter_height 2c (0, 0) t gpu_serial
   filter_height 1vc (0, 0) *
slice_for_radius 1 (0, 0) t gpu_block
 slice_for_radius 7 (0, 0) t gpu_thread
  slice_for_radius 4c (0, 0) t gpu_serial
   slice_for_radius 1vc (0, 0) *
vert_log 25 330 1 2 (2, 2) t gpu_block
 vert_log 32c 4c 3 1c (2, 2) t gpu_thread
  vert_log 2c 2c 1c 4c (2, 2) t gpu_serial
   vert_log 1c 1c 1vc 1c (2, 2) *
    inlined: repeat_edge 1
    inlined: lambda_0 1
vert_log 1c 1c 25 1 (3, 2) t gpu_block
 vert_log 1c 1c 32c 3 (3, 2) t gpu_thread
  vert_log 2586c 5c 2c 1c (3, 2) t gpu_serial
   vert_log 1c 1c 1c 1vc (3, 2) *
vert 199 20 1 7 (2, 2) t gpu_block
 vert 8c 64c 2 1c (2, 2) t gpu_thread
  vert 1c 2c 2c 4c (2, 2) t gpu_serial
   vert 1c 1c 1vc 1c (2, 2) *
maximum 3 20 1 (2, 2) t gpu_block
 maximum 64c 16c 1 (2, 2) t gpu_thread
  maximum 8c 8c 3 (2, 2) t gpu_serial
   maximum 1c 1c 1vc (2, 2) *
maximum 1c 3 20 1 (3, 2) t gpu_block
 maximum 1c 64c 16c 1 (3, 2) t gpu_thread
  maximum 53c 8c 8c 3 (3, 2) t gpu_serial
   maximum 1c 1c 1c 1vc (3, 2) *
output 24 80 2 (0, 0) t gpu_block
 output 64c 8c 2c (0, 0) t gpu_thread
  output 1c 4c 1c (0, 0) t gpu_serial
   output 1vc 1c 1c (0, 0) *
Best cost: 100000000000000007629769841091887003294964970946560.000000
AutoSchedule.cpp:4446 ... AutoSchedule.cpp:4525 : 161476.343295 ms
Cost evaluated this many times: 4748339
** Optimal schedule:
Schedule features for output
    num_realizations:                      1.000000
    num_productions:                       1.000000
    points_computed_per_realization:       11796480.000000
    points_computed_per_production:        11796480.000000
    points_computed_total:                 11796480.000000
    points_computed_minimum:               11796480.000000
    innermost_loop_extent:                 3.000000
    innermost_pure_loop_extent:            3.000000
    unrolled_loop_extent:                  1.000000
    inner_parallelism:                     3840.000000
    outer_parallelism:                     1.000000
    bytes_at_realization:                  47185920.000000
    bytes_at_production:                   47185920.000000
    bytes_at_root:                         47185920.000000
    innermost_bytes_at_realization:        6144.000000
    innermost_bytes_at_production:         6144.000000
    innermost_bytes_at_root:               6144.000000
    inlined_calls:                         0.000000
    unique_bytes_read_per_realization:     47185920.000000
    unique_lines_read_per_realization:     7680.000000
    allocation_bytes_read_per_realization: 47185920.000000
    working_set:                           0.000000
    vector_size:                           1.000000
    native_vector_size:                    1.000000
    num_vectors:                           0.000000
    num_scalars:                           11796480.000000
    scalar_loads_per_vector:               0.000000
    vector_loads_per_vector:               1.000000
    scalar_loads_per_scalar:               1.000000
    bytes_at_task:                         12288.000000
    innermost_bytes_at_task:               256.000000
    unique_bytes_read_per_vector:          4.000000
    unique_lines_read_per_vector:          1.000000
    unique_bytes_read_per_task:            12288.000000
    unique_lines_read_per_task:            48.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             1812194552.000000
    working_set_at_realization:            1812194552.000000
    working_set_at_root:                   1812194552.000000
    num_warps:                             122880.000000
    block_occupancy:                       1.000000
    warp_lane_utilization:                 1.000000
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  983040.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 983040.000000
Schedule features for maximum
    num_realizations:                      1.000000
    num_productions:                       1.000000
    points_computed_per_realization:       11796480.000000
    points_computed_per_production:        15728640.000000
    points_computed_total:                 11796480.000000
    points_computed_minimum:               11796480.000000
    innermost_loop_extent:                 32.000000
    innermost_pure_loop_extent:            32.000000
    unrolled_loop_extent:                  1.000000
    inner_parallelism:                     480.000000
    outer_parallelism:                     1.000000
    bytes_at_realization:                  47185920.000000
    bytes_at_production:                   47185920.000000
    bytes_at_root:                         47185920.000000
    innermost_bytes_at_realization:        6144.000000
    innermost_bytes_at_production:         6144.000000
    innermost_bytes_at_root:               6144.000000
    inlined_calls:                         0.000000
    unique_bytes_read_per_realization:     0.000000
    unique_lines_read_per_realization:     0.000000
    allocation_bytes_read_per_realization: 0.000000
    working_set:                           0.000000
    vector_size:                           1.000000
    native_vector_size:                    1.000000
    num_vectors:                           0.000000
    num_scalars:                           11796480.000000
    scalar_loads_per_vector:               0.000000
    vector_loads_per_vector:               0.000000
    scalar_loads_per_scalar:               0.000000
    bytes_at_task:                         65536.000000
    innermost_bytes_at_task:               128.000000
    unique_bytes_read_per_vector:          0.000000
    unique_lines_read_per_vector:          0.000000
    unique_bytes_read_per_task:            0.000000
    unique_lines_read_per_task:            0.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             1812194552.000000
    working_set_at_realization:            1812194552.000000
    working_set_at_root:                   1812194552.000000
    num_warps:                             15360.000000
    block_occupancy:                       1.000000
    warp_lane_utilization:                 1.000000
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  0.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 245760.000000
Schedule features for maximum.update(0)
    num_realizations:                      1.000000
    num_productions:                       1.000000
    points_computed_per_realization:       625213440.000000
    points_computed_per_production:        833617920.000000
    points_computed_total:                 625213440.000000
    points_computed_minimum:               625213440.000000
    innermost_loop_extent:                 1696.000000
    innermost_pure_loop_extent:            32.000000
    unrolled_loop_extent:                  1.000000
    inner_parallelism:                     480.000000
    outer_parallelism:                     1.000000
    bytes_at_realization:                  47185920.000000
    bytes_at_production:                   47185920.000000
    bytes_at_root:                         47185920.000000
    innermost_bytes_at_realization:        6144.000000
    innermost_bytes_at_production:         6144.000000
    innermost_bytes_at_root:               6144.000000
    inlined_calls:                         0.000000
    unique_bytes_read_per_realization:     1413120212.000000
    unique_lines_read_per_realization:     113835521.000000
    allocation_bytes_read_per_realization: 1413120212.000000
    working_set:                           0.000000
    vector_size:                           1.000000
    native_vector_size:                    1.000000
    num_vectors:                           0.000000
    num_scalars:                           625213440.000000
    scalar_loads_per_vector:               2.000000
    vector_loads_per_vector:               1.000000
    scalar_loads_per_scalar:               3.000000
    bytes_at_task:                         65536.000000
    innermost_bytes_at_task:               128.000000
    unique_bytes_read_per_vector:          116.000000
    unique_lines_read_per_vector:          29.000000
    unique_bytes_read_per_task:            9634004.000000
    unique_lines_read_per_task:            1204225.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             1812194552.000000
    working_set_at_realization:            1812194552.000000
    working_set_at_root:                   1812194552.000000
    num_warps:                             15360.000000
    block_occupancy:                       1.000000
    warp_lane_utilization:                 1.000000
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  261120.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 245760.000000
Schedule features for vert
    num_realizations:                      1.000000
    num_productions:                       1.000000
    points_computed_per_realization:       341483520.000000
    points_computed_per_production:        341483520.000000
    points_computed_total:                 341483520.000000
    points_computed_minimum:               341483520.000000
    innermost_loop_extent:                 14.000000
    innermost_pure_loop_extent:            14.000000
    unrolled_loop_extent:                  14.000000
    inner_parallelism:                     31760.000000
    outer_parallelism:                     1.000000
    bytes_at_realization:                  1365934080.000000
    bytes_at_production:                   1365934080.000000
    bytes_at_root:                         1365934080.000000
    innermost_bytes_at_realization:        12.000000
    innermost_bytes_at_production:         12.000000
    innermost_bytes_at_root:               12.000000
    inlined_calls:                         0.000000
    unique_bytes_read_per_realization:     351888208.000000
    unique_lines_read_per_realization:     12567433.000000
    allocation_bytes_read_per_realization: 351888208.000000
    working_set:                           0.000000
    vector_size:                           1.000000
    native_vector_size:                    1.000000
    num_vectors:                           0.000000
    num_scalars:                           341483520.000000
    scalar_loads_per_vector:               2.500000
    vector_loads_per_vector:               0.000000
    scalar_loads_per_scalar:               2.500000
    bytes_at_task:                         43008.000000
    innermost_bytes_at_task:               12.000000
    unique_bytes_read_per_vector:          1460.000000
    unique_lines_read_per_vector:          53.000000
    unique_bytes_read_per_task:            23968.000000
    unique_lines_read_per_task:            853.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             1812194552.000000
    working_set_at_realization:            1812194552.000000
    working_set_at_root:                   1812194552.000000
    num_warps:                             762240.000000
    block_occupancy:                       0.750000
    warp_lane_utilization:                 1.000000
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  48783384.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 24391680.000000
Schedule features for vert_log
    num_realizations:                      1.000000
    num_productions:                       1.000000
    points_computed_per_realization:       87972024.000000
    points_computed_per_production:        118272000.000000
    points_computed_total:                 87972024.000000
    points_computed_minimum:               87972024.000000
    innermost_loop_extent:                 16.000000
    innermost_pure_loop_extent:            16.000000
    unrolled_loop_extent:                  16.000000
    inner_parallelism:                     8250.000000
    outer_parallelism:                     1.000000
    bytes_at_realization:                  351888096.000000
    bytes_at_production:                   351888096.000000
    bytes_at_root:                         351888096.000000
    innermost_bytes_at_realization:        28.000000
    innermost_bytes_at_production:         28.000000
    innermost_bytes_at_root:               28.000000
    inlined_calls:                         0.000000
    unique_bytes_read_per_realization:     47185920.000000
    unique_lines_read_per_realization:     7680.000000
    allocation_bytes_read_per_realization: 47185920.000000
    working_set:                           0.000000
    vector_size:                           1.000000
    native_vector_size:                    1.000000
    num_vectors:                           0.000000
    num_scalars:                           87972024.000000
    scalar_loads_per_vector:               1.000000
    vector_loads_per_vector:               0.000000
    scalar_loads_per_scalar:               1.000000
    bytes_at_task:                         37044.000000
    innermost_bytes_at_task:               28.000000
    unique_bytes_read_per_vector:          4.000000
    unique_lines_read_per_vector:          1.000000
    unique_bytes_read_per_task:            6144.000000
    unique_lines_read_per_task:            24.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             1812194552.000000
    working_set_at_realization:            1812194552.000000
    working_set_at_root:                   1812194552.000000
    num_warps:                             231000.000000
    block_occupancy:                       0.875000
    warp_lane_utilization:                 1.000000
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  0.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 7392000.000000
Schedule features for vert_log.update(0)
    num_realizations:                      1.000000
    num_productions:                       1.000000
    points_computed_per_realization:       61598520.000000
    points_computed_per_production:        82752000.000000
    points_computed_total:                 61598520.000000
    points_computed_minimum:               61598520.000000
    innermost_loop_extent:                 128.000000
    innermost_pure_loop_extent:            128.000000
    unrolled_loop_extent:                  1.000000
    inner_parallelism:                     25.000000
    outer_parallelism:                     1.000000
    bytes_at_realization:                  351888096.000000
    bytes_at_production:                   351888096.000000
    bytes_at_root:                         351888096.000000
    innermost_bytes_at_realization:        28.000000
    innermost_bytes_at_production:         28.000000
    innermost_bytes_at_root:               28.000000
    inlined_calls:                         0.000000
    unique_bytes_read_per_realization:     351888096.000000
    unique_lines_read_per_realization:     12567432.000000
    allocation_bytes_read_per_realization: 351888096.000000
    working_set:                           0.000000
    vector_size:                           1.000000
    native_vector_size:                    1.000000
    num_vectors:                           0.000000
    num_scalars:                           61598520.000000
    scalar_loads_per_vector:               0.000000
    vector_loads_per_vector:               1.000000
    scalar_loads_per_scalar:               1.000000
    bytes_at_task:                         13960296.000000
    innermost_bytes_at_task:               28.000000
    unique_bytes_read_per_vector:          0.000000
    unique_lines_read_per_vector:          0.000000
    unique_bytes_read_per_task:            0.000000
    unique_lines_read_per_task:            0.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             1812194552.000000
    working_set_at_realization:            1812194552.000000
    working_set_at_root:                   1812194552.000000
    num_warps:                             100.000000
    block_occupancy:                       0.125000
    warp_lane_utilization:                 1.000000
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  0.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 3200.000000
Schedule features for repeat_edge
    num_realizations:                      0.000000
    num_productions:                       0.000000
    points_computed_per_realization:       0.000000
    points_computed_per_production:        0.000000
    points_computed_total:                 0.000000
    points_computed_minimum:               12567432.000000
    innermost_loop_extent:                 0.000000
    innermost_pure_loop_extent:            16.000000
    unrolled_loop_extent:                  0.000000
    inner_parallelism:                     1.000000
    outer_parallelism:                     8250.000000
    bytes_at_realization:                  0.000000
    bytes_at_production:                   0.000000
    bytes_at_root:                         50269728.000000
    innermost_bytes_at_realization:        0.000000
    innermost_bytes_at_production:         0.000000
    innermost_bytes_at_root:               6352.000000
    inlined_calls:                         118272000.000000
    unique_bytes_read_per_realization:     0.000000
    unique_lines_read_per_realization:     0.000000
    allocation_bytes_read_per_realization: 0.000000
    working_set:                           0.000000
    vector_size:                           1.000000
    native_vector_size:                    1.000000
    num_vectors:                           0.000000
    num_scalars:                           87972024.000000
    scalar_loads_per_vector:               0.000000
    vector_loads_per_vector:               0.000000
    scalar_loads_per_scalar:               0.000000
    bytes_at_task:                         0.000000
    innermost_bytes_at_task:               0.000000
    unique_bytes_read_per_vector:          0.000000
    unique_lines_read_per_vector:          0.000000
    unique_bytes_read_per_task:            0.000000
    unique_lines_read_per_task:            0.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             0.000000
    working_set_at_realization:            0.000000
    working_set_at_root:                   1812194552.000000
    num_warps:                             0.000000
    block_occupancy:                       0.000000
    warp_lane_utilization:                 0.000000
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  0.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 0.000000
Schedule features for lambda_0
    num_realizations:                      0.000000
    num_productions:                       0.000000
    points_computed_per_realization:       0.000000
    points_computed_per_production:        0.000000
    points_computed_total:                 0.000000
    points_computed_minimum:               11796480.000000
    innermost_loop_extent:                 0.000000
    innermost_pure_loop_extent:            16.000000
    unrolled_loop_extent:                  0.000000
    inner_parallelism:                     1.000000
    outer_parallelism:                     8250.000000
    bytes_at_realization:                  0.000000
    bytes_at_production:                   0.000000
    bytes_at_root:                         47185920.000000
    innermost_bytes_at_realization:        0.000000
    innermost_bytes_at_production:         0.000000
    innermost_bytes_at_root:               6144.000000
    inlined_calls:                         118272000.000000
    unique_bytes_read_per_realization:     0.000000
    unique_lines_read_per_realization:     0.000000
    allocation_bytes_read_per_realization: 0.000000
    working_set:                           0.000000
    vector_size:                           1.000000
    native_vector_size:                    1.000000
    num_vectors:                           0.000000
    num_scalars:                           87972024.000000
    scalar_loads_per_vector:               0.000000
    vector_loads_per_vector:               0.000000
    scalar_loads_per_scalar:               0.000000
    bytes_at_task:                         0.000000
    innermost_bytes_at_task:               0.000000
    unique_bytes_read_per_vector:          0.000000
    unique_lines_read_per_vector:          0.000000
    unique_bytes_read_per_task:            0.000000
    unique_lines_read_per_task:            0.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             0.000000
    working_set_at_realization:            0.000000
    working_set_at_root:                   1812194552.000000
    num_warps:                             0.000000
    block_occupancy:                       0.000000
    warp_lane_utilization:                 0.000000
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  0.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 0.000000
Schedule features for slice_for_radius
    num_realizations:                      1.000000
    num_productions:                       1.000000
    points_computed_per_realization:       28.000000
    points_computed_per_production:        28.000000
    points_computed_total:                 28.000000
    points_computed_minimum:               28.000000
    innermost_loop_extent:                 1.000000
    innermost_pure_loop_extent:            1.000000
    unrolled_loop_extent:                  1.000000
    inner_parallelism:                     1.000000
    outer_parallelism:                     1.000000
    bytes_at_realization:                  112.000000
    bytes_at_production:                   112.000000
    bytes_at_root:                         112.000000
    innermost_bytes_at_realization:        112.000000
    innermost_bytes_at_production:         112.000000
    innermost_bytes_at_root:               112.000000
    inlined_calls:                         0.000000
    unique_bytes_read_per_realization:     0.000000
    unique_lines_read_per_realization:     0.000000
    allocation_bytes_read_per_realization: 0.000000
    working_set:                           0.000000
    vector_size:                           1.000000
    native_vector_size:                    1.000000
    num_vectors:                           0.000000
    num_scalars:                           28.000000
    scalar_loads_per_vector:               0.000000
    vector_loads_per_vector:               0.000000
    scalar_loads_per_scalar:               0.000000
    bytes_at_task:                         112.000000
    innermost_bytes_at_task:               112.000000
    unique_bytes_read_per_vector:          0.000000
    unique_lines_read_per_vector:          0.000000
    unique_bytes_read_per_task:            0.000000
    unique_lines_read_per_task:            0.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             1812194552.000000
    working_set_at_realization:            1812194552.000000
    working_set_at_root:                   1812194552.000000
    num_warps:                             1.000000
    block_occupancy:                       0.027344
    warp_lane_utilization:                 0.875000
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  0.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 7.000000
Schedule features for filter_height
    num_realizations:                      1.000000
    num_productions:                       1.000000
    points_computed_per_realization:       53.000000
    points_computed_per_production:        56.000000
    points_computed_total:                 53.000000
    points_computed_minimum:               53.000000
    innermost_loop_extent:                 8.000000
    innermost_pure_loop_extent:            8.000000
    unrolled_loop_extent:                  8.000000
    inner_parallelism:                     1.000000
    outer_parallelism:                     1.000000
    bytes_at_realization:                  212.000000
    bytes_at_production:                   212.000000
    bytes_at_root:                         212.000000
    innermost_bytes_at_realization:        212.000000
    innermost_bytes_at_production:         212.000000
    innermost_bytes_at_root:               212.000000
    inlined_calls:                         0.000000
    unique_bytes_read_per_realization:     212.000000
    unique_lines_read_per_realization:     1.000000
    allocation_bytes_read_per_realization: 212.000000
    working_set:                           0.000000
    vector_size:                           1.000000
    native_vector_size:                    1.000000
    num_vectors:                           0.000000
    num_scalars:                           53.000000
    scalar_loads_per_vector:               0.000000
    vector_loads_per_vector:               1.000000
    scalar_loads_per_scalar:               1.000000
    bytes_at_task:                         212.000000
    innermost_bytes_at_task:               212.000000
    unique_bytes_read_per_vector:          4.000000
    unique_lines_read_per_vector:          1.000000
    unique_bytes_read_per_task:            212.000000
    unique_lines_read_per_task:            1.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             1812194552.000000
    working_set_at_realization:            1812194552.000000
    working_set_at_root:                   1812194552.000000
    num_warps:                             1.000000
    block_occupancy:                       0.006836
    warp_lane_utilization:                 0.218750
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  7.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 7.000000
Schedule features for sum
    num_realizations:                      1.000000
    num_productions:                       1.000000
    points_computed_per_realization:       53.000000
    points_computed_per_production:        54.000000
    points_computed_total:                 53.000000
    points_computed_minimum:               53.000000
    innermost_loop_extent:                 1.000000
    innermost_pure_loop_extent:            1.000000
    unrolled_loop_extent:                  1.000000
    inner_parallelism:                     2.000000
    outer_parallelism:                     1.000000
    bytes_at_realization:                  212.000000
    bytes_at_production:                   212.000000
    bytes_at_root:                         212.000000
    innermost_bytes_at_realization:        212.000000
    innermost_bytes_at_production:         212.000000
    innermost_bytes_at_root:               212.000000
    inlined_calls:                         0.000000
    unique_bytes_read_per_realization:     0.000000
    unique_lines_read_per_realization:     0.000000
    allocation_bytes_read_per_realization: 0.000000
    working_set:                           0.000000
    vector_size:                           1.000000
    native_vector_size:                    1.000000
    num_vectors:                           0.000000
    num_scalars:                           53.000000
    scalar_loads_per_vector:               0.000000
    vector_loads_per_vector:               0.000000
    scalar_loads_per_scalar:               0.000000
    bytes_at_task:                         104.000000
    innermost_bytes_at_task:               104.000000
    unique_bytes_read_per_vector:          0.000000
    unique_lines_read_per_vector:          0.000000
    unique_bytes_read_per_task:            0.000000
    unique_lines_read_per_task:            0.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             1812194552.000000
    working_set_at_realization:            1812194552.000000
    working_set_at_root:                   1812194552.000000
    num_warps:                             2.000000
    block_occupancy:                       0.026367
    warp_lane_utilization:                 0.843750
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  0.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 14.000000
Schedule features for sum.update(0)
    num_realizations:                      1.000000
    num_productions:                       1.000000
    points_computed_per_realization:       1431.000000
    points_computed_per_production:        1458.000000
    points_computed_total:                 1431.000000
    points_computed_minimum:               1431.000000
    innermost_loop_extent:                 27.000000
    innermost_pure_loop_extent:            1.000000
    unrolled_loop_extent:                  1.000000
    inner_parallelism:                     2.000000
    outer_parallelism:                     1.000000
    bytes_at_realization:                  212.000000
    bytes_at_production:                   212.000000
    bytes_at_root:                         212.000000
    innermost_bytes_at_realization:        212.000000
    innermost_bytes_at_production:         212.000000
    innermost_bytes_at_root:               212.000000
    inlined_calls:                         0.000000
    unique_bytes_read_per_realization:     212.000000
    unique_lines_read_per_realization:     1.000000
    allocation_bytes_read_per_realization: 212.000000
    working_set:                           0.000000
    vector_size:                           1.000000
    native_vector_size:                    1.000000
    num_vectors:                           0.000000
    num_scalars:                           1431.000000
    scalar_loads_per_vector:               0.000000
    vector_loads_per_vector:               1.000000
    scalar_loads_per_scalar:               1.000000
    bytes_at_task:                         104.000000
    innermost_bytes_at_task:               104.000000
    unique_bytes_read_per_vector:          0.000000
    unique_lines_read_per_vector:          0.000000
    unique_bytes_read_per_task:            0.000000
    unique_lines_read_per_task:            0.000000
    working_set_at_task:                   0.000000
    working_set_at_production:             1812194552.000000
    working_set_at_realization:            1812194552.000000
    working_set_at_root:                   1812194552.000000
    num_warps:                             2.000000
    block_occupancy:                       0.026367
    warp_lane_utilization:                 0.843750
    num_shared_mem_loads:                  0.000000
    num_global_mem_loads:                  0.000000
    num_shared_mem_stores:                 0.000000
    num_global_mem_stores:                 14.000000
State with cost 100000000000000007629769841091887003294964970946560.000000:
 gpu_none
realize: output [1536, 2560, 3] with 1 stages
realize: maximum [1536, 2560, 3] with 2 stages
realize: vert [1588, 2560, 3, 28] with 1 stages
realize: vert_log [1588, 2638, 3, 7] with 2 stages
realize: slice_for_radius [28] with 1 stages
realize: filter_height [53c] with 1 stages
realize: sum [53c] with 2 stages
sum 2c (0, 0) t gpu_block
 sum 27c (0, 0) t gpu_thread
  sum 1c (0, 0) t gpu_serial
   sum 1vc (0, 0) *
sum 1c 2c (1, 0) t gpu_block
 sum 1c 27c (1, 0) t gpu_thread
  sum 27c 1c (1, 0) t gpu_serial
   sum 1c 1vc (1, 0) *
filter_height 1c (0, 0) t gpu_block
 filter_height 7c (0, 0) t gpu_thread
  filter_height 8c (0, 0) t gpu_serial
   filter_height 1vc (0, 0) *
slice_for_radius 1 (0, 0) t gpu_block
 slice_for_radius 28 (0, 0) t gpu_thread
  slice_for_radius 1c (0, 0) t gpu_serial
   slice_for_radius 1vc (0, 0) *
vert_log 25 330 1 1 (3, 3) t gpu_block
 vert_log 64c 1c 2 7 (3, 3) t gpu_thread
  vert_log 1c 8c 2c 1c (3, 3) t gpu_serial
   vert_log 1c 1c 1c 1vc (3, 3) *
    inlined: repeat_edge 1
    inlined: lambda_0 1
vert_log 1c 1c 25 1 (-1, 3) t gpu_block
 vert_log 1c 1c 64c 2 (-1, 3) t gpu_thread
  vert_log 2586c 5c 1c 2c (-1, 3) t *
vert 794 40 1 1 (2, 2) t gpu_block
 vert 1c 64c 3 4 (2, 2) t gpu_thread
  vert 2c 1c 1c 7c (2, 2) t gpu_serial
   vert 1c 1c 1vc 1c (2, 2) *
maximum 48 5 2 (0, 0) t gpu_block
 maximum 16c 64c 1c (0, 0) t gpu_thread
  maximum 2c 8c 2c (0, 0) t gpu_serial
   maximum 1vc 1c 1c (0, 0) *
maximum 1c 48 5 2 (1, 0) t gpu_block
 maximum 1c 16c 64c 1c (1, 0) t gpu_thread
  maximum 53c 2c 8c 2c (1, 0) t gpu_serial
   maximum 1c 1vc 1c 1c (1, 0) *
output 24 160 1 (0, 0) t gpu_block
 output 64c 16c 1 (0, 0) t gpu_thread
  output 1c 1c 3 (0, 0) t gpu_serial
   output 1vc 1c 1c (0, 0) *
Func output = get_pipeline().get_func(9);
Func maximum = get_pipeline().get_func(8);
Func vert = get_pipeline().get_func(7);
Func vert_log = get_pipeline().get_func(6);
Func repeat_edge = get_pipeline().get_func(5);
Func lambda_0 = get_pipeline().get_func(4);
Func slice_for_radius = get_pipeline().get_func(2);
Func filter_height = get_pipeline().get_func(1);
Func sum = get_pipeline().get_func(0);
Var c(output.get_schedule().dims()[2].var), ci("ci"), t(vert.get_schedule().dims()[3].var), ti("ti"), x(output.get_schedule().dims()[0].var), xi("xi"), xii("xii"), y(output.get_schedule().dims()[1].var), yi("yi"), yii("yii");
RVar r22_x(maximum.update(0).get_schedule().dims()[0].var), r4_x(vert_log.update(0).get_schedule().dims()[0].var), r4_y(vert_log.update(0).get_schedule().dims()[1].var), r9_x(sum.update(0).get_schedule().dims()[0].var);
output
    .split(x, x, xi, 64, TailStrategy::ShiftInwards)
    .split(y, y, yi, 16, TailStrategy::ShiftInwards)
    .compute_root()
    .reorder(c, xi, yi, x, y)
    .gpu_blocks(y)
    .gpu_blocks(x)
    .split(xi, xi_serial_outer, xi, 64)
    .gpu_threads(xi)
    .split(yi, yi_serial_outer, yi, 16)
    .gpu_threads(yi);
maximum
    .split(x, x, xi, 32, TailStrategy::ShiftInwards)
    .split(y, y, yi, 512, TailStrategy::ShiftInwards)
    .split(c, c, ci, 2, TailStrategy::ShiftInwards)
    .split(xi, xi, xii, 2, TailStrategy::ShiftInwards)
    .split(yi, yi, yii, 8, TailStrategy::ShiftInwards)
    .compute_root()
    .reorder(xii, yii, ci, xi, yi, x, y, c)
    .gpu_blocks(c)
    .gpu_blocks(y)
    .gpu_blocks(x)
    .split(xi, xi_serial_outer, xi, 16)
    .gpu_threads(xi)
    .split(yi, yi_serial_outer, yi, 64)
    .gpu_threads(yi);
maximum.update(0)
    .split(x, x, xi, 32, TailStrategy::GuardWithIf)
    .split(y, y, yi, 512, TailStrategy::GuardWithIf)
    .split(c, c, ci, 2, TailStrategy::GuardWithIf)
    .split(xi, xi, xii, 2, TailStrategy::GuardWithIf)
    .split(yi, yi, yii, 8, TailStrategy::GuardWithIf)
    .reorder(r22_x, xii, yii, ci, xi, yi, x, y, c)
    .gpu_blocks(c)
    .gpu_blocks(y)
    .gpu_blocks(x)
    .split(xi, xi_serial_outer, xi, 16)
    .gpu_threads(xi)
    .split(yi, yi_serial_outer, yi, 64)
    .gpu_threads(yi);
vert
    .split(x, x, xi, 2, TailStrategy::ShiftInwards)
    .split(y, y, yi, 64, TailStrategy::ShiftInwards)
    .split(t, t, ti, 7, TailStrategy::ShiftInwards)
    .unroll(xi)
    .unroll(ti)
    .compute_root()
    .reorder(xi, ti, c, yi, t, x, y)
    .gpu_blocks(y)
    .gpu_blocks(x)
    .reorder_storage(c, x, y, t)
    .split(c, c_serial_outer, c, 3)
    .gpu_threads(c)
    .split(yi, yi_serial_outer, yi, 64)
    .gpu_threads(yi)
    .split(t, t_serial_outer, t, 4)
    .gpu_threads(t);
vert_log
    .split(x, x, xi, 64, TailStrategy::ShiftInwards)
    .split(y, y, yi, 8, TailStrategy::ShiftInwards)
    .split(c, c, ci, 2, TailStrategy::ShiftInwards)
    .unroll(yi)
    .unroll(ci)
    .compute_root()
    .reorder(yi, ci, t, xi, c, x, y)
    .gpu_blocks(y)
    .gpu_blocks(x)
    .reorder_storage(t, x, y, c)
    .split(t, t_serial_outer, t, 7)
    .gpu_threads(t)
    .split(xi, xi_serial_outer, xi, 64)
    .gpu_threads(xi)
    .split(c, c_serial_outer, c, 2)
    .gpu_threads(c);
vert_log.update(0)
    .split(x, x, xi, 64, TailStrategy::GuardWithIf)
    .split(c, c, ci, 2, TailStrategy::GuardWithIf)
    .reorder(r4_x, r4_y, ci, xi, c, x)
    .gpu_blocks(x)
    .split(xi, xi_serial_outer, xi, 64)
    .gpu_threads(xi)
    .split(c, c_serial_outer, c, 2)
    .gpu_threads(c);
slice_for_radius
    .compute_root()
    .reorder(t)
    .split(t, t_serial_outer, t, 28)
    .gpu_threads(t)
    .reorder(t, t_outer, __outermost)
    .gpu_blocks(t_outer);
filter_height
    .split(x, x, xi, 8, TailStrategy::ShiftInwards)
    .unroll(xi)
    .compute_root()
    .reorder(xi, x)
    .split(x, x_serial_outer, x, 7)
    .gpu_threads(x)
    .reorder(xi, x, x_outer, __outermost)
    .gpu_blocks(x_outer);
sum
    .split(x, x, xi, 27, TailStrategy::ShiftInwards)
    .compute_root()
    .reorder(xi, x)
    .gpu_blocks(x)
    .split(xi, xi_serial_outer, xi, 27)
    .gpu_threads(xi);
sum.update(0)
    .split(x, x, xi, 27, TailStrategy::GuardWithIf)
    .reorder(r9_x, xi, x)
    .gpu_blocks(x)
    .split(xi, xi_serial_outer, xi, 27)
    .gpu_threads(xi);
Creating initial loop nests...
Injecting realization of { output }
Injecting realization of { maximum }
Injecting realization of { vert }
Injecting realization of { vert_log }
Inlining repeat_edge
Inlining lambda_0
Inlining input_im
Injecting realization of { slice_for_radius }
Injecting realization of { filter_height }
Injecting realization of { sum }
Skipping injecting memoization...
Injecting tracing...
Adding checks for parameters
Computing bounds of each function's value
Adding checks for images
Performing computation bounds inference...
Removing extern loops...
Performing sliding window optimization...
Simplifying correlated differences...
Performing allocation bounds inference...
Removing code that depends on undef values...
Uniquifying variable names...
Simplifying...
Performing storage folding optimization...
Injecting debug_to_file calls...
Injecting prefetches...
Dynamically skipping stages...
Forking asynchronous producers...
Destructuring tuple-valued realizations...
Canonicalizing GPU var names...
Performing storage flattening...
Unpacking buffer arguments...
Skipping rewriting memoized allocations...
Selecting a GPU API for GPU loops...
Injecting host <-> dev buffer copies...
Selecting a GPU API for extern stages...
Simplifying...
Reduce prefetch dimension...
Lowering after reduce prefetch dimension:
assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.type = _halide_buffer_get_type(input.buffer)
let input.dimensions = _halide_buffer_get_dimensions(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.extent.0 = _halide_buffer_get_extent(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.extent.1 = _halide_buffer_get_extent(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let input.min.2 = _halide_buffer_get_min(input.buffer, 2)
let input.extent.2 = _halide_buffer_get_extent(input.buffer, 2)
let input.stride.2 = _halide_buffer_get_stride(input.buffer, 2)
let output = _halide_buffer_get_host(output.buffer)
let output.type = _halide_buffer_get_type(output.buffer)
let output.dimensions = _halide_buffer_get_dimensions(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
let output.min.2 = _halide_buffer_get_min(output.buffer, 2)
let output.extent.2 = _halide_buffer_get_extent(output.buffer, 2)
let output.stride.2 = _halide_buffer_get_stride(output.buffer, 2)
let vert_log.s0.y.max.s = max((output.extent.1 + output.min.1), (input.extent.1 + 25))
let input.extent.0.required = (max(min(((output.extent.0 + output.min.0) + 26), (input.extent.0 + input.min.0)), (input.min.0 + 1)) - max((min((min(output.extent.0, 12) + output.min.0), ((input.extent.0 + input.min.0) + 37)) + -38), input.min.0))
let input.min.0.required = max((min((min(output.extent.0, 12) + output.min.0), ((input.extent.0 + input.min.0) + 37)) + -38), input.min.0)
let input.extent.1.required.s = (max((min(min((min(output.min.1, 25) + ((((vert_log.s0.y.max.s - min(output.min.1, 25)) + 77)/8)*8)), (vert_log.s0.y.max.s + 70)), ((input.extent.1 + input.min.1) + 43)) + -44), input.min.1) - max((min(min(min((vert_log.s0.y.max.s + 70), output.min.1), ((input.extent.1 + input.min.1) + 50)), 25) + -51), input.min.1))
let input.min.1.required = max((min(min(min((vert_log.s0.y.max.s + 70), output.min.1), ((input.extent.1 + input.min.1) + 50)), 25) + -51), input.min.1)
let input.extent.2.required = (max(min(((min((min(((output.extent.2 + -1)/2), ((((output.extent.2 + -1)/4)*2) + 1))*2), (output.extent.2 + -2)) + output.min.2) + 2), (input.extent.2 + input.min.2)), (input.min.2 + 1)) - max((min((min(output.extent.2, 2) + output.min.2), ((input.extent.2 + input.min.2) + 1)) + -2), input.min.2))
let input.min.2.required = max((min((min(output.extent.2, 2) + output.min.2), ((input.extent.2 + input.min.2) + 1)) + -2), input.min.2)
let output.extent.0.required.s = (min((((output.extent.0 + -1)/64)*64), (output.extent.0 + -64)) - min(output.extent.0, 64))
let output.extent.1.required.s = (min((((output.extent.1 + -1)/16)*16), (output.extent.1 + -16)) - min(output.extent.1, 16))
let output.stride.2.required = ((output.extent.0.required.s + 128)*(output.extent.1.required.s + 32))
if (_halide_buffer_is_bounds_query(input.buffer)) {
  _halide_buffer_init(input.buffer, _halide_buffer_get_shape(input.buffer), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 2, 32, 3, make_struct((halide_dimension_t *), input.min.0.required, input.extent.0.required, 1, 0, input.min.1.required, (input.extent.1.required.s + 1), input.extent.0.required, 0, input.min.2.required, input.extent.2.required, ((input.extent.1.required.s + 1)*input.extent.0.required), 0), (uint64)0)
}
if (_halide_buffer_is_bounds_query(output.buffer)) {
  _halide_buffer_init(output.buffer, _halide_buffer_get_shape(output.buffer), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 2, 32, 3, make_struct((halide_dimension_t *), ((min(output.extent.0, 64) + output.min.0) + -64), (output.extent.0.required.s + 128), 1, 0, ((min(output.extent.1, 16) + output.min.1) + -16), (output.extent.1.required.s + 32), (output.extent.0.required.s + 128), 0, output.min.2, output.extent.2, output.stride.2.required, 0), (uint64)0)
}
if (!(_halide_buffer_is_bounds_query(input.buffer) || _halide_buffer_is_bounds_query(output.buffer))) {
  assert((input.type == (uint32)73730), halide_error_bad_type("Input buffer input", input.type, (uint32)73730))
  assert((input.dimensions == 3), halide_error_bad_dimensions("Input buffer input", input.dimensions, 3))
  assert((output.type == (uint32)73730), halide_error_bad_type("Output buffer output", output.type, (uint32)73730))
  assert((output.dimensions == 3), halide_error_bad_dimensions("Output buffer output", output.dimensions, 3))
  assert(((input.min.0 <= input.min.0.required) && ((input.extent.0.required + input.min.0.required) <= (input.extent.0 + input.min.0))), halide_error_access_out_of_bounds("Input buffer input", 0, input.min.0.required, ((input.extent.0.required + input.min.0.required) + -1), input.min.0, ((input.extent.0 + input.min.0) + -1)))
  assert((0 <= input.extent.0), halide_error_buffer_extents_negative("Input buffer input", 0, input.extent.0))
  assert(((input.min.1 <= input.min.1.required) && (((input.extent.1.required.s + input.min.1.required) + 1) <= (input.extent.1 + input.min.1))), halide_error_access_out_of_bounds("Input buffer input", 1, input.min.1.required, (input.extent.1.required.s + input.min.1.required), input.min.1, ((input.extent.1 + input.min.1) + -1)))
  assert((0 <= input.extent.1), halide_error_buffer_extents_negative("Input buffer input", 1, input.extent.1))
  assert(((input.min.2 <= input.min.2.required) && ((input.extent.2.required + input.min.2.required) <= (input.extent.2 + input.min.2))), halide_error_access_out_of_bounds("Input buffer input", 2, input.min.2.required, ((input.extent.2.required + input.min.2.required) + -1), input.min.2, ((input.extent.2 + input.min.2) + -1)))
  assert((0 <= input.extent.2), halide_error_buffer_extents_negative("Input buffer input", 2, input.extent.2))
  assert(((64 <= output.extent.0) && ((((min(output.extent.0, 64) + output.min.0) + output.extent.0.required.s) + 64) <= (output.extent.0 + output.min.0))), halide_error_access_out_of_bounds("Output buffer output", 0, ((min(output.extent.0, 64) + output.min.0) + -64), (((min(output.extent.0, 64) + output.min.0) + output.extent.0.required.s) + 63), output.min.0, ((output.extent.0 + output.min.0) + -1)))
  assert(((16 <= output.extent.1) && ((((min(output.extent.1, 16) + output.min.1) + output.extent.1.required.s) + 16) <= (output.extent.1 + output.min.1))), halide_error_access_out_of_bounds("Output buffer output", 1, ((min(output.extent.1, 16) + output.min.1) + -16), (((min(output.extent.1, 16) + output.min.1) + output.extent.1.required.s) + 15), output.min.1, ((output.extent.1 + output.min.1) + -1)))
  assert((0 <= output.extent.2), halide_error_buffer_extents_negative("Output buffer output", 2, output.extent.2))
  assert((input.stride.0 == 1), halide_error_constraint_violated("input.stride.0", input.stride.0, "1", 1))
  assert((output.stride.0 == 1), halide_error_constraint_violated("output.stride.0", output.stride.0, "1", 1))
  let input.total_extent.1 = (int64(input.extent.1)*int64(input.extent.0))
  let input.total_extent.2 = (input.total_extent.1*int64(input.extent.2))
  let output.total_extent.1 = (int64(output.extent.1)*int64(output.extent.0))
  let output.total_extent.2 = (output.total_extent.1*int64(output.extent.2))
  assert((abs(int64(input.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("input", abs(int64(input.extent.0)), (uint64)2147483647))
  assert((abs((int64(input.extent.1)*int64(input.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("input", abs((int64(input.extent.1)*int64(input.stride.1))), (uint64)2147483647))
  assert((input.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("input", input.total_extent.1, (int64)2147483647))
  assert((abs((int64(input.extent.2)*int64(input.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("input", abs((int64(input.extent.2)*int64(input.stride.2))), (uint64)2147483647))
  assert((input.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("input", input.total_extent.2, (int64)2147483647))
  assert((abs(int64(output.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("output", abs(int64(output.extent.0)), (uint64)2147483647))
  assert((abs((int64(output.extent.1)*int64(output.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("output", abs((int64(output.extent.1)*int64(output.stride.1))), (uint64)2147483647))
  assert((output.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("output", output.total_extent.1, (int64)2147483647))
  assert((abs((int64(output.extent.2)*int64(output.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("output", abs((int64(output.extent.2)*int64(output.stride.2))), (uint64)2147483647))
  assert((output.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("output", output.total_extent.2, (int64)2147483647))
  allocate sum[int32 * 53] if (uint1)0
  let sum.buffer = (let t22 = make_struct((halide_dimension_t *), -26, 53, 1, 0) in _halide_buffer_init(alloca(size_of_halide_buffer_t()), t22, reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 0, 32, 1, t22, (uint64)0))
  register_destructor("halide_device_free_as_destructor", sum.buffer)
  produce sum {
    if (likely((uint1)1)) {
      let halide_device_malloc_result$7 = halide_device_malloc(sum.buffer, halide_cuda_device_interface())
      assert((halide_device_malloc_result$7 == 0), halide_device_malloc_result$7)
      gpu_block<CUDA> (sum.s0.x.x.__block_id_x, 0, 2) {
        gpu_thread<CUDA> (sum.s0.x.xi.xi.__thread_id_x, 0, 27) {
          sum[((min(likely_if_innermost(((sum.s0.x.x.__block_id_x*27) + -26)), 0) + sum.s0.x.xi.xi.__thread_id_x) + 26)] = 0
        }
      }
      _halide_buffer_set_device_dirty(sum.buffer, (uint1)1)
      gpu_block<CUDA> (sum.s1.x.x.__block_id_x, 0, 2) {
        gpu_thread<CUDA> (sum.s1.x.xi.xi.__thread_id_x, 0, 27) {
          if (likely((((sum.s1.x.x.__block_id_x*27) + sum.s1.x.xi.xi.__thread_id_x) < 53))) {
            for (sum.s1.r9$x, 0, 27) {
              sum[((sum.s1.x.x.__block_id_x*27) + sum.s1.x.xi.xi.__thread_id_x)] = (sum[((sum.s1.x.x.__block_id_x*27) + sum.s1.x.xi.xi.__thread_id_x)] + select((float32((((((sum.s1.x.x.__block_id_x*27) + sum.s1.x.xi.xi.__thread_id_x) + -26)*(((sum.s1.x.x.__block_id_x*27) + sum.s1.x.xi.xi.__thread_id_x) + -26)) + (sum.s1.r9$x*sum.s1.r9$x))) < 689.062500f), 1, 0))
            }
          }
        }
      }
    }
  }
  allocate filter_height[int32 * 53] if (uint1)0
  let filter_height.buffer = (let t21 = make_struct((halide_dimension_t *), -26, 53, 1, 0) in _halide_buffer_init(alloca(size_of_halide_buffer_t()), t21, reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 0, 32, 1, t21, (uint64)0))
  register_destructor("halide_device_free_as_destructor", filter_height.buffer)
  produce filter_height {
    consume sum {
      let halide_device_malloc_result$6 = halide_device_malloc(filter_height.buffer, halide_cuda_device_interface())
      assert((halide_device_malloc_result$6 == 0), halide_device_malloc_result$6)
      let halide_device_malloc_result$8 = halide_device_malloc(sum.buffer, halide_cuda_device_interface())
      assert((halide_device_malloc_result$8 == 0), halide_device_malloc_result$8)
      gpu_block<CUDA> (filter_height.s0.x.x.x.x_outer.__block_id_x, 0, 1) {
        gpu_thread<CUDA> (filter_height.s0.x.x.x.x.__thread_id_x, 0, 7) {
          if (likely((uint1)1)) {
            unrolled (filter_height.s0.x.xi, 0, 8) {
              filter_height[((min(likely_if_innermost(((filter_height.s0.x.x.x.x.__thread_id_x*8) + -26)), 19) + filter_height.s0.x.xi) + 26)] = sum[((min(likely_if_innermost(((filter_height.s0.x.x.x.x.__thread_id_x*8) + -26)), 19) + filter_height.s0.x.xi) + 26)]
            }
          }
        }
      }
      let halide_device_free_result$5 = halide_device_free(sum.buffer)
      assert((halide_device_free_result$5 == 0), halide_device_free_result$5)
      _halide_buffer_set_device_dirty(filter_height.buffer, (uint1)1)
    }
  }
  allocate slice_for_radius[int32 * 28] if (uint1)0
  let slice_for_radius.buffer = (let t20 = make_struct((halide_dimension_t *), 0, 28, 1, 0) in _halide_buffer_init(alloca(size_of_halide_buffer_t()), t20, reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 0, 32, 1, t20, (uint64)0))
  register_destructor("halide_device_free_as_destructor", slice_for_radius.buffer)
  produce slice_for_radius {
    if (likely((uint1)1)) {
      let halide_device_malloc_result$4 = halide_device_malloc(slice_for_radius.buffer, halide_cuda_device_interface())
      assert((halide_device_malloc_result$4 == 0), halide_device_malloc_result$4)
      gpu_block<CUDA> (slice_for_radius.s0.t.t.t_outer.__block_id_x, 0, 1) {
        gpu_thread<CUDA> (slice_for_radius.s0.t.t.t.__thread_id_x, 0, 28) {
          slice_for_radius[slice_for_radius.s0.t.t.t.__thread_id_x] = int32(floor_f32((log_f32(float32(((slice_for_radius.s0.t.t.t.__thread_id_x*2) + 1)))*1.442695f)))
        }
      }
      _halide_buffer_set_device_dirty(slice_for_radius.buffer, (uint1)1)
    }
  }
  let vert_log.y.min_realized.s = min(min(min((min((min(output.extent.1, 64) + output.min.1), 65) + 24), (min(output.extent.1, 64) + output.min.1)), (vert_log.s0.y.max.s + 134)), (min(output.min.1, 25) + 64))
  let vert_log.y.extent_realized.s = (max(min((min(output.min.1, 25) + ((((vert_log.s0.y.max.s - min(output.min.1, 25)) + 77)/8)*8)), (vert_log.s0.y.max.s + 70)), (max(max(max((output.extent.1 + output.min.1), (input.extent.1 + 52)), ((output.extent.1 + output.min.1) + 27)), input.extent.1) + 43)) - vert_log.y.min_realized.s)
  let vert_log.stride.2 = (((output.extent.0*7) + 364)*(vert_log.y.extent_realized.s + 72))
  allocate vert_log[float32 * (output.extent.0 + 52) * (vert_log.y.extent_realized.s + 72) * max(output.extent.2, 2) * 7] if (uint1)0
  let vert_log.buffer = (let t19 = make_struct((halide_dimension_t *), (output.min.0 + -26), (output.extent.0 + 52), 7, 0, (vert_log.y.min_realized.s + -115), (vert_log.y.extent_realized.s + 72), ((output.extent.0*7) + 364), 0, ((min(output.extent.2, 2) + output.min.2) + -2), max(output.extent.2, 2), vert_log.stride.2, 0, 0, 7, 1, 0) in _halide_buffer_init(alloca(size_of_halide_buffer_t()), t19, reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 2, 32, 4, t19, (uint64)0))
  register_destructor("halide_device_free_as_destructor", vert_log.buffer)
  produce vert_log {
    if (likely((uint1)1)) {
      let vert_log.s0.y.y.loop_extent.s = (vert_log.s0.y.max.s - min(output.min.1, 25))
      let halide_device_malloc_result$2 = halide_device_malloc(vert_log.buffer, halide_cuda_device_interface())
      assert((halide_device_malloc_result$2 == 0), halide_device_malloc_result$2)
      let halide_copy_to_device_result = halide_copy_to_device(input.buffer, halide_cuda_device_interface())
      assert((halide_copy_to_device_result == 0), halide_copy_to_device_result)
      gpu_block<CUDA> (vert_log.s0.y.y.__block_id_y, 0, ((vert_log.s0.y.y.loop_extent.s + 85)/8)) {
        let vert_log.s0.y.yi.base = min(likely_if_innermost(((min(output.min.1, 25) + (vert_log.s0.y.y.__block_id_y*8)) + -51)), (vert_log.s0.y.max.s + 19))
        gpu_block<CUDA> (vert_log.s0.x.x.__block_id_x, 0, ((output.extent.0 + 115)/64)) {
          let vert_log.s0.x.xi.base = min(likely_if_innermost((((vert_log.s0.x.x.__block_id_x*64) + output.min.0) + -26)), ((output.extent.0 + output.min.0) + -38))
          for (vert_log.s0.c.c.c_serial_outer, 0, ((output.extent.2 + 3)/4)) {
            gpu_thread<CUDA> (vert_log.s0.c.c.c.__thread_id_z, 0, 2) {
              if (likely((((vert_log.s0.c.c.c_serial_outer*2) + vert_log.s0.c.c.c.__thread_id_z) < ((output.extent.2 + 1)/2)))) {
                let vert_log.s0.c.ci.base = min(likely_if_innermost(((((vert_log.s0.c.c.c_serial_outer*2) + vert_log.s0.c.c.c.__thread_id_z)*2) + output.min.2)), ((output.extent.2 + output.min.2) + -2))
                gpu_thread<CUDA> (vert_log.s0.x.xi.xi.__thread_id_y, 0, 64) {
                  gpu_thread<CUDA> (vert_log.s0.t.t.__thread_id_x, 0, 7) {
                    unrolled (vert_log.s0.c.ci, 0, 2) {
                      unrolled (vert_log.s0.y.yi, 0, 8) {
                        vert_log[(((((((vert_log.s0.c.ci + vert_log.s0.c.ci.base) - (min(output.extent.2, 2) + output.min.2)) + 2)*vert_log.stride.2) + (((((vert_log.s0.y.yi + vert_log.s0.y.yi.base) - vert_log.y.min_realized.s) + 115)*((output.extent.0*7) + 364)) + (((vert_log.s0.x.xi.base + vert_log.s0.x.xi.xi.__thread_id_y) - output.min.0)*7))) + vert_log.s0.t.t.__thread_id_x) + 182)] = input[(((max(min(likely((vert_log.s0.c.ci + vert_log.s0.c.ci.base)), ((input.extent.2 + input.min.2) + -1)), input.min.2)*input.stride.2) + (max(min(likely((vert_log.s0.x.xi.base + vert_log.s0.x.xi.xi.__thread_id_y)), ((input.extent.0 + input.min.0) + -1)), input.min.0) + (max(min(likely((vert_log.s0.y.yi + vert_log.s0.y.yi.base)), ((input.extent.1 + input.min.1) + -1)), input.min.1)*input.stride.1))) - ((input.min.2*input.stride.2) + ((input.min.1*input.stride.1) + input.min.0)))]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      _halide_buffer_set_device_dirty(vert_log.buffer, (uint1)1)
      gpu_block<CUDA> (vert_log.s1.x.x.__block_id_x, 0, ((output.extent.0 + 115)/64)) {
        for (vert_log.s1.c.c.c_serial_outer, 0, ((output.extent.2 + 3)/4)) {
          gpu_thread<CUDA> (vert_log.s1.c.c.c.__thread_id_y, 0, 2) {
            if (likely((((vert_log.s1.c.c.c_serial_outer*2) + vert_log.s1.c.c.c.__thread_id_y) < ((output.extent.2 + 1)/2)))) {
              gpu_thread<CUDA> (vert_log.s1.x.xi.xi.__thread_id_x, 0, 64) {
                if (likely((((vert_log.s1.x.x.__block_id_x*64) + vert_log.s1.x.xi.xi.__thread_id_x) < (output.extent.0 + 52)))) {
                  for (vert_log.s1.c.ci, 0, 2) {
                    if (likely((((((vert_log.s1.c.c.c_serial_outer*2) + vert_log.s1.c.c.c.__thread_id_y)*2) + vert_log.s1.c.ci) < output.extent.2))) {
                      for (vert_log.s1.r4$y, 1, 5) {
                        for (vert_log.s1.r4$x, -26, (input.extent.1 + 26)) {
                          vert_log[(((((((((vert_log.s1.c.c.c_serial_outer*2) + vert_log.s1.c.c.c.__thread_id_y)*2) + vert_log.s1.c.ci) - min(output.extent.2, 2)) + 2)*vert_log.stride.2) + ((((vert_log.s1.r4$x - vert_log.y.min_realized.s) + 115)*((output.extent.0*7) + 364)) + (((vert_log.s1.x.x.__block_id_x*64) + vert_log.s1.x.xi.xi.__thread_id_x)*7))) + vert_log.s1.r4$y)] = max(vert_log[((((((((((vert_log.s1.c.c.c_serial_outer*2) + vert_log.s1.c.c.c.__thread_id_y)*2) + vert_log.s1.c.ci) - min(output.extent.2, 2)) + 2)*vert_log.stride.2) + ((((vert_log.s1.r4$x - vert_log.y.min_realized.s) + 115)*((output.extent.0*7) + 364)) + (((vert_log.s1.x.x.__block_id_x*64) + vert_log.s1.x.xi.xi.__thread_id_x)*7))) + vert_log.s1.r4$y) + -1)], vert_log[((((((((((vert_log.s1.c.c.c_serial_outer*2) + vert_log.s1.c.c.c.__thread_id_y)*2) + vert_log.s1.c.ci) - min(output.extent.2, 2)) + 2)*vert_log.stride.2) + (((((max(min(shift_left(1, (vert_log.s1.r4$y + -1)), 52), 0) + vert_log.s1.r4$x) - vert_log.y.min_realized.s) + 115)*((output.extent.0*7) + 364)) + (((vert_log.s1.x.x.__block_id_x*64) + vert_log.s1.x.xi.xi.__thread_id_x)*7))) + vert_log.s1.r4$y) + -1)])
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  let vert.stride.3 = (max(output.extent.1, 64)*((output.extent.0 + 52)*output.extent.2))
  allocate vert[float32 * (output.extent.0 + 52) * max(output.extent.1, 64) * output.extent.2 * 28] if (uint1)0
  let vert.buffer = (let t18 = make_struct((halide_dimension_t *), (output.min.0 + -26), (output.extent.0 + 52), output.extent.2, 0, ((min(output.extent.1, 64) + output.min.1) + -64), max(output.extent.1, 64), ((output.extent.0 + 52)*output.extent.2), 0, output.min.2, output.extent.2, 1, 0, 0, 28, vert.stride.3, 0) in _halide_buffer_init(alloca(size_of_halide_buffer_t()), t18, reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 2, 32, 4, t18, (uint64)0))
  register_destructor("halide_device_free_as_destructor", vert.buffer)
  produce vert {
    consume vert_log {
      consume slice_for_radius {
        let halide_device_malloc_result$1 = halide_device_malloc(vert.buffer, halide_cuda_device_interface())
        assert((halide_device_malloc_result$1 == 0), halide_device_malloc_result$1)
        let halide_device_malloc_result$3 = halide_device_malloc(vert_log.buffer, halide_cuda_device_interface())
        assert((halide_device_malloc_result$3 == 0), halide_device_malloc_result$3)
        let halide_device_malloc_result$5 = halide_device_malloc(slice_for_radius.buffer, halide_cuda_device_interface())
        assert((halide_device_malloc_result$5 == 0), halide_device_malloc_result$5)
        gpu_block<CUDA> (vert.s0.y.y.__block_id_y, 0, ((output.extent.1 + 63)/64)) {
          let vert.s0.y.yi.base = min(likely_if_innermost(((vert.s0.y.y.__block_id_y*64) + output.min.1)), ((output.extent.1 + output.min.1) + -64))
          gpu_block<CUDA> (vert.s0.x.x.__block_id_x, 0, ((output.extent.0 + 53)/2)) {
            let vert.s0.x.xi.base = min(likely_if_innermost((((vert.s0.x.x.__block_id_x*2) + output.min.0) + -26)), ((output.extent.0 + output.min.0) + 24))
            gpu_thread<CUDA> (vert.s0.t.t.t.__thread_id_z, 0, 4) {
              if (likely((uint1)1)) {
                gpu_thread<CUDA> (vert.s0.y.yi.yi.__thread_id_y, 0, 64) {
                  for (vert.s0.c.c_serial_outer, 0, ((output.extent.2 + 2)/3)) {
                    gpu_thread<CUDA> (vert.s0.c.c.__thread_id_x, 0, 3) {
                      if (likely((((vert.s0.c.c_serial_outer*3) + vert.s0.c.c.__thread_id_x) < output.extent.2))) {
                        unrolled (vert.s0.t.ti, 0, 7) {
                          unrolled (vert.s0.x.xi, 0, 2) {
                            vert[(((min(likely_if_innermost((vert.s0.t.t.t.__thread_id_z*7)), 21) + vert.s0.t.ti)*vert.stride.3) + ((((((vert.s0.x.xi + vert.s0.x.xi.base) - output.min.0) + 26)*output.extent.2) + (((output.extent.0 + 52)*output.extent.2)*(((vert.s0.y.yi.base + vert.s0.y.yi.yi.__thread_id_y) - (min(output.extent.1, 64) + output.min.1)) + 64))) + ((vert.s0.c.c_serial_outer*3) + vert.s0.c.c.__thread_id_x)))] = (let vert.s0.t10.s = slice_for_radius[(min(likely_if_innermost((vert.s0.t.t.t.__thread_id_z*7)), 21) + vert.s0.t.ti)] in max(vert_log[((max(min(vert.s0.t10.s, 6), 0) + ((((((vert.s0.c.c_serial_outer*3) + vert.s0.c.c.__thread_id_x) - min(output.extent.2, 2)) + 2)*vert_log.stride.2) + ((((((vert.s0.y.yi.base + vert.s0.y.yi.yi.__thread_id_y) - (min(likely_if_innermost((vert.s0.t.t.t.__thread_id_z*7)), 21) + vert.s0.t.ti)) - vert_log.y.min_realized.s) + 115)*((output.extent.0*7) + 364)) + (((vert.s0.x.xi + vert.s0.x.xi.base) - output.min.0)*7)))) + 182)], vert_log[(((output.extent.0*7) + (max(min(vert.s0.t10.s, 6), 0) + ((((((vert.s0.c.c_serial_outer*3) + vert.s0.c.c.__thread_id_x) - min(output.extent.2, 2)) + 2)*vert_log.stride.2) + (((((((vert.s0.y.yi.base + vert.s0.y.yi.yi.__thread_id_y) + (min(likely_if_innermost((vert.s0.t.t.t.__thread_id_z*7)), 21) + vert.s0.t.ti)) - max(min(shift_left(1, max(min(vert.s0.t10.s, 6), 0)), 52), 0)) - vert_log.y.min_realized.s) + 115)*((output.extent.0*7) + 364)) + (((vert.s0.x.xi + vert.s0.x.xi.base) - output.min.0)*7))))) + 546)]))
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        let halide_device_free_result$3 = halide_device_free(slice_for_radius.buffer)
        assert((halide_device_free_result$3 == 0), halide_device_free_result$3)
        let halide_device_free_result$2 = halide_device_free(vert_log.buffer)
        assert((halide_device_free_result$2 == 0), halide_device_free_result$2)
        _halide_buffer_set_device_dirty(vert.buffer, (uint1)1)
      }
    }
  }
  allocate maximum[float32 * output.extent.0 * max(output.extent.1, 512) * max(output.extent.2, 2)] if (uint1)0
  let maximum.buffer = (let t17 = make_struct((halide_dimension_t *), output.min.0, output.extent.0, 1, 0, ((min(output.extent.1, 512) + output.min.1) + -512), max(output.extent.1, 512), output.extent.0, 0, ((min(output.extent.2, 2) + output.min.2) + -2), max(output.extent.2, 2), (max(output.extent.1, 512)*output.extent.0), 0) in _halide_buffer_init(alloca(size_of_halide_buffer_t()), t17, reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 2, 32, 3, t17, (uint64)0))
  register_destructor("halide_device_free_as_destructor", maximum.buffer)
  produce maximum {
    let halide_device_malloc_result = halide_device_malloc(maximum.buffer, halide_cuda_device_interface())
    assert((halide_device_malloc_result == 0), halide_device_malloc_result)
    gpu_block<CUDA> (maximum.s0.c.c.__block_id_z, 0, ((output.extent.2 + 1)/2)) {
      let maximum.s0.c.ci.base = min(likely_if_innermost(((maximum.s0.c.c.__block_id_z*2) + output.min.2)), ((output.extent.2 + output.min.2) + -2))
      gpu_block<CUDA> (maximum.s0.y.y.__block_id_y, 0, ((output.extent.1 + 511)/512)) {
        let maximum.s0.y.yi.base = min(likely_if_innermost(((maximum.s0.y.y.__block_id_y*512) + output.min.1)), ((output.extent.1 + output.min.1) + -512))
        gpu_block<CUDA> (maximum.s0.x.x.__block_id_x, 0, ((output.extent.0 + 31)/32)) {
          let maximum.s0.x.xi.base = min(likely_if_innermost(((maximum.s0.x.x.__block_id_x*32) + output.min.0)), ((output.extent.0 + output.min.0) + -32))
          gpu_thread<CUDA> (maximum.s0.y.yi.yi.yi.__thread_id_y, 0, 64) {
            gpu_thread<CUDA> (maximum.s0.x.xi.xi.xi.__thread_id_x, 0, 16) {
              for (maximum.s0.c.ci, 0, 2) {
                for (maximum.s0.y.yi.yii, 0, 8) {
                  for (maximum.s0.x.xi.xii, 0, 2) {
                    maximum[(((max(output.extent.1, 512)*output.extent.0)*(((maximum.s0.c.ci + maximum.s0.c.ci.base) - (min(output.extent.2, 2) + output.min.2)) + 2)) + (((((((maximum.s0.y.yi.yi.yi.__thread_id_y*8) + maximum.s0.y.yi.yii) + maximum.s0.y.yi.base) - (min(output.extent.1, 512) + output.min.1)) + 512)*output.extent.0) + ((((maximum.s0.x.xi.xi.xi.__thread_id_x*2) + maximum.s0.x.xi.xii) + maximum.s0.x.xi.base) - output.min.0)))] = -inff
                  }
                }
              }
            }
          }
        }
      }
    }
    _halide_buffer_set_device_dirty(maximum.buffer, (uint1)1)
    consume vert {
      consume filter_height {
        gpu_block<CUDA> (maximum.s1.c.c.__block_id_z, 0, ((output.extent.2 + 1)/2)) {
          gpu_block<CUDA> (maximum.s1.y.y.__block_id_y, 0, ((output.extent.1 + 511)/512)) {
            gpu_block<CUDA> (maximum.s1.x.x.__block_id_x, 0, ((output.extent.0 + 31)/32)) {
              gpu_thread<CUDA> (maximum.s1.y.yi.yi.yi.__thread_id_y, 0, 64) {
                gpu_thread<CUDA> (maximum.s1.x.xi.xi.xi.__thread_id_x, 0, 16) {
                  for (maximum.s1.c.ci, 0, 2) {
                    if (likely((((maximum.s1.c.c.__block_id_z*2) + maximum.s1.c.ci) < output.extent.2))) {
                      for (maximum.s1.y.yi.yii, 0, 8) {
                        let maximum.s1.y.rebased = ((maximum.s1.y.y.__block_id_y*512) + ((maximum.s1.y.yi.yi.yi.__thread_id_y*8) + maximum.s1.y.yi.yii))
                        if (likely((maximum.s1.y.rebased < output.extent.1))) {
                          for (maximum.s1.x.xi.xii, 0, 2) {
                            let maximum.s1.x.rebased = ((maximum.s1.x.x.__block_id_x*32) + ((maximum.s1.x.xi.xi.xi.__thread_id_x*2) + maximum.s1.x.xi.xii))
                            if (likely((maximum.s1.x.rebased < output.extent.0))) {
                              for (maximum.s1.r22$x, -26, 53) {
                                maximum[(((max(output.extent.1, 512)*output.extent.0)*((((maximum.s1.c.c.__block_id_z*2) + maximum.s1.c.ci) - min(output.extent.2, 2)) + 2)) + ((((maximum.s1.y.rebased - min(output.extent.1, 512)) + 512)*output.extent.0) + maximum.s1.x.rebased))] = max(maximum[(((max(output.extent.1, 512)*output.extent.0)*((((maximum.s1.c.c.__block_id_z*2) + maximum.s1.c.ci) - min(output.extent.2, 2)) + 2)) + ((((maximum.s1.y.rebased - min(output.extent.1, 512)) + 512)*output.extent.0) + maximum.s1.x.rebased))], vert[((max(min(filter_height[(maximum.s1.r22$x + 26)], 27), 0)*vert.stride.3) + (((((maximum.s1.r22$x + maximum.s1.x.rebased) + 26)*output.extent.2) + (((output.extent.0 + 52)*output.extent.2)*((maximum.s1.y.rebased - min(output.extent.1, 64)) + 64))) + ((maximum.s1.c.c.__block_id_z*2) + maximum.s1.c.ci)))])
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        let halide_device_free_result$4 = halide_device_free(filter_height.buffer)
        assert((halide_device_free_result$4 == 0), halide_device_free_result$4)
        let halide_device_free_result$1 = halide_device_free(vert.buffer)
        assert((halide_device_free_result$1 == 0), halide_device_free_result$1)
      }
    }
  }
  produce output {
    consume maximum {
      let halide_copy_to_device_result$1 = halide_copy_to_device(output.buffer, halide_cuda_device_interface())
      assert((halide_copy_to_device_result$1 == 0), halide_copy_to_device_result$1)
      gpu_block<CUDA> (output.s0.y.y.__block_id_y, 0, ((output.extent.1 + 15)/16)) {
        let output.s0.y.yi.base = min(likely_if_innermost(((output.s0.y.y.__block_id_y*16) + output.min.1)), ((output.extent.1 + output.min.1) + -16))
        gpu_block<CUDA> (output.s0.x.x.__block_id_x, 0, ((output.extent.0 + 63)/64)) {
          let output.s0.x.xi.base = min(likely_if_innermost(((output.s0.x.x.__block_id_x*64) + output.min.0)), ((output.extent.0 + output.min.0) + -64))
          gpu_thread<CUDA> (output.s0.y.yi.yi.__thread_id_y, 0, 16) {
            gpu_thread<CUDA> (output.s0.x.xi.xi.__thread_id_x, 0, 64) {
              for (output.s0.c, output.min.2, output.extent.2) {
                output[(((output.s0.c*output.stride.2) + (((output.s0.y.yi.base + output.s0.y.yi.yi.__thread_id_y)*output.stride.1) + (output.s0.x.xi.base + output.s0.x.xi.xi.__thread_id_x))) - ((output.min.2*output.stride.2) + ((output.min.1*output.stride.1) + output.min.0)))] = maximum[(((max(output.extent.1, 512)*output.extent.0)*((output.s0.c - (min(output.extent.2, 2) + output.min.2)) + 2)) + (((((output.s0.y.yi.base + output.s0.y.yi.yi.__thread_id_y) - (min(output.extent.1, 512) + output.min.1)) + 512)*output.extent.0) + ((output.s0.x.xi.base + output.s0.x.xi.xi.__thread_id_x) - output.min.0)))]
              }
            }
          }
        }
      }
      _halide_buffer_set_device_dirty(output.buffer, (uint1)1)
      let halide_device_free_result = halide_device_free(maximum.buffer)
      assert((halide_device_free_result == 0), halide_device_free_result)
    }
  }
}

Simplifying correlated differences...
Unrolling...
Vectorizing...
Injecting per-block gpu synchronization...
Detecting vector interleavings...
Partitioning loops to simplify boundary conditions...
Trimming loops to the region over which they do something...
Injecting early frees...
Simplifying correlated differences...
Bounding small allocations...
Injecting warp shuffles...
Simplifying...
Lowering unsafe promises...
Lowering after final simplification:
assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.type = _halide_buffer_get_type(input.buffer)
let input.dimensions = _halide_buffer_get_dimensions(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.extent.0 = _halide_buffer_get_extent(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.extent.1 = _halide_buffer_get_extent(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let input.min.2 = _halide_buffer_get_min(input.buffer, 2)
let input.extent.2 = _halide_buffer_get_extent(input.buffer, 2)
let input.stride.2 = _halide_buffer_get_stride(input.buffer, 2)
let output = _halide_buffer_get_host(output.buffer)
let output.type = _halide_buffer_get_type(output.buffer)
let output.dimensions = _halide_buffer_get_dimensions(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
let output.min.2 = _halide_buffer_get_min(output.buffer, 2)
let output.extent.2 = _halide_buffer_get_extent(output.buffer, 2)
let output.stride.2 = _halide_buffer_get_stride(output.buffer, 2)
let vert_log.s0.y.max.s = max((output.extent.1 + output.min.1), (input.extent.1 + 25))
let input.extent.0.required = (max(min(((output.extent.0 + output.min.0) + 26), (input.extent.0 + input.min.0)), (input.min.0 + 1)) - max((min((min(output.extent.0, 12) + output.min.0), ((input.extent.0 + input.min.0) + 37)) + -38), input.min.0))
let input.min.0.required = max((min((min(output.extent.0, 12) + output.min.0), ((input.extent.0 + input.min.0) + 37)) + -38), input.min.0)
let input.extent.1.required.s = (max((min(min((min(output.min.1, 25) + ((((vert_log.s0.y.max.s - min(output.min.1, 25)) + 77)/8)*8)), (vert_log.s0.y.max.s + 70)), ((input.extent.1 + input.min.1) + 43)) + -44), input.min.1) - max((min(min(min((vert_log.s0.y.max.s + 70), output.min.1), ((input.extent.1 + input.min.1) + 50)), 25) + -51), input.min.1))
let input.min.1.required = max((min(min(min((vert_log.s0.y.max.s + 70), output.min.1), ((input.extent.1 + input.min.1) + 50)), 25) + -51), input.min.1)
let input.extent.2.required = (max(min(((min((min(((output.extent.2 + -1)/2), ((((output.extent.2 + -1)/4)*2) + 1))*2), (output.extent.2 + -2)) + output.min.2) + 2), (input.extent.2 + input.min.2)), (input.min.2 + 1)) - max((min((min(output.extent.2, 2) + output.min.2), ((input.extent.2 + input.min.2) + 1)) + -2), input.min.2))
let input.min.2.required = max((min((min(output.extent.2, 2) + output.min.2), ((input.extent.2 + input.min.2) + 1)) + -2), input.min.2)
let output.extent.0.required.s = (min((((output.extent.0 + -1)/64)*64), (output.extent.0 + -64)) - min(output.extent.0, 64))
let output.extent.1.required.s = (min((((output.extent.1 + -1)/16)*16), (output.extent.1 + -16)) - min(output.extent.1, 16))
let output.stride.2.required = ((output.extent.0.required.s + 128)*(output.extent.1.required.s + 32))
if (_halide_buffer_is_bounds_query(input.buffer)) {
  _halide_buffer_init(input.buffer, _halide_buffer_get_shape(input.buffer), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 2, 32, 3, make_struct((halide_dimension_t *), input.min.0.required, input.extent.0.required, 1, 0, input.min.1.required, (input.extent.1.required.s + 1), input.extent.0.required, 0, input.min.2.required, input.extent.2.required, ((input.extent.1.required.s + 1)*input.extent.0.required), 0), (uint64)0)
}
if (_halide_buffer_is_bounds_query(output.buffer)) {
  _halide_buffer_init(output.buffer, _halide_buffer_get_shape(output.buffer), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 2, 32, 3, make_struct((halide_dimension_t *), ((min(output.extent.0, 64) + output.min.0) + -64), (output.extent.0.required.s + 128), 1, 0, ((min(output.extent.1, 16) + output.min.1) + -16), (output.extent.1.required.s + 32), (output.extent.0.required.s + 128), 0, output.min.2, output.extent.2, output.stride.2.required, 0), (uint64)0)
}
if (!(_halide_buffer_is_bounds_query(input.buffer) || _halide_buffer_is_bounds_query(output.buffer))) {
  assert((input.type == (uint32)73730), halide_error_bad_type("Input buffer input", input.type, (uint32)73730))
  assert((input.dimensions == 3), halide_error_bad_dimensions("Input buffer input", input.dimensions, 3))
  assert((output.type == (uint32)73730), halide_error_bad_type("Output buffer output", output.type, (uint32)73730))
  assert((output.dimensions == 3), halide_error_bad_dimensions("Output buffer output", output.dimensions, 3))
  assert(((input.min.0 <= input.min.0.required) && ((input.extent.0.required + input.min.0.required) <= (input.extent.0 + input.min.0))), halide_error_access_out_of_bounds("Input buffer input", 0, input.min.0.required, ((input.extent.0.required + input.min.0.required) + -1), input.min.0, ((input.extent.0 + input.min.0) + -1)))
  assert((0 <= input.extent.0), halide_error_buffer_extents_negative("Input buffer input", 0, input.extent.0))
  assert(((input.min.1 <= input.min.1.required) && (((input.extent.1.required.s + input.min.1.required) + 1) <= (input.extent.1 + input.min.1))), halide_error_access_out_of_bounds("Input buffer input", 1, input.min.1.required, (input.extent.1.required.s + input.min.1.required), input.min.1, ((input.extent.1 + input.min.1) + -1)))
  assert((0 <= input.extent.1), halide_error_buffer_extents_negative("Input buffer input", 1, input.extent.1))
  assert(((input.min.2 <= input.min.2.required) && ((input.extent.2.required + input.min.2.required) <= (input.extent.2 + input.min.2))), halide_error_access_out_of_bounds("Input buffer input", 2, input.min.2.required, ((input.extent.2.required + input.min.2.required) + -1), input.min.2, ((input.extent.2 + input.min.2) + -1)))
  assert((0 <= input.extent.2), halide_error_buffer_extents_negative("Input buffer input", 2, input.extent.2))
  assert(((64 <= output.extent.0) && ((((min(output.extent.0, 64) + output.min.0) + output.extent.0.required.s) + 64) <= (output.extent.0 + output.min.0))), halide_error_access_out_of_bounds("Output buffer output", 0, ((min(output.extent.0, 64) + output.min.0) + -64), (((min(output.extent.0, 64) + output.min.0) + output.extent.0.required.s) + 63), output.min.0, ((output.extent.0 + output.min.0) + -1)))
  assert(((16 <= output.extent.1) && ((((min(output.extent.1, 16) + output.min.1) + output.extent.1.required.s) + 16) <= (output.extent.1 + output.min.1))), halide_error_access_out_of_bounds("Output buffer output", 1, ((min(output.extent.1, 16) + output.min.1) + -16), (((min(output.extent.1, 16) + output.min.1) + output.extent.1.required.s) + 15), output.min.1, ((output.extent.1 + output.min.1) + -1)))
  assert((0 <= output.extent.2), halide_error_buffer_extents_negative("Output buffer output", 2, output.extent.2))
  assert((input.stride.0 == 1), halide_error_constraint_violated("input.stride.0", input.stride.0, "1", 1))
  assert((output.stride.0 == 1), halide_error_constraint_violated("output.stride.0", output.stride.0, "1", 1))
  let input.total_extent.1 = (int64(input.extent.1)*int64(input.extent.0))
  let input.total_extent.2 = (input.total_extent.1*int64(input.extent.2))
  let output.total_extent.1 = (int64(output.extent.1)*int64(output.extent.0))
  let output.total_extent.2 = (output.total_extent.1*int64(output.extent.2))
  assert((abs(int64(input.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("input", abs(int64(input.extent.0)), (uint64)2147483647))
  assert((abs((int64(input.extent.1)*int64(input.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("input", abs((int64(input.extent.1)*int64(input.stride.1))), (uint64)2147483647))
  assert((input.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("input", input.total_extent.1, (int64)2147483647))
  assert((abs((int64(input.extent.2)*int64(input.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("input", abs((int64(input.extent.2)*int64(input.stride.2))), (uint64)2147483647))
  assert((input.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("input", input.total_extent.2, (int64)2147483647))
  assert((abs(int64(output.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("output", abs(int64(output.extent.0)), (uint64)2147483647))
  assert((abs((int64(output.extent.1)*int64(output.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("output", abs((int64(output.extent.1)*int64(output.stride.1))), (uint64)2147483647))
  assert((output.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("output", output.total_extent.1, (int64)2147483647))
  assert((abs((int64(output.extent.2)*int64(output.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("output", abs((int64(output.extent.2)*int64(output.stride.2))), (uint64)2147483647))
  assert((output.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("output", output.total_extent.2, (int64)2147483647))
  allocate sum[int32 * 53] if (uint1)0
  let sum.buffer = _halide_buffer_init(alloca(size_of_halide_buffer_t()), make_struct((halide_dimension_t *), -26, 53, 1, 0), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 0, 32, 1, make_struct((halide_dimension_t *), -26, 53, 1, 0), (uint64)0)
  register_destructor("halide_device_free_as_destructor", sum.buffer)
  produce sum {
    let halide_device_malloc_result$7 = halide_device_malloc(sum.buffer, halide_cuda_device_interface())
    assert((halide_device_malloc_result$7 == 0), halide_device_malloc_result$7)
    gpu_block<CUDA> (sum.s0.x.x.__block_id_x, 0, 2) {
      gpu_thread<CUDA> (.__thread_id_x, 0, 27) {
        if ((sum.s0.x.x.__block_id_x < 1)) {
          sum[.__thread_id_x] = 0
        } else {
          sum[(.__thread_id_x + 26)] = 0
        }
      }
    }
    _halide_buffer_set_device_dirty(sum.buffer, (uint1)1)
    gpu_block<CUDA> (sum.s1.x.x.__block_id_x, 0, 2) {
      gpu_thread<CUDA> (.__thread_id_x, 0, 27) {
        if ((sum.s1.x.x.__block_id_x < 1)) {
          let t1221 = ((.__thread_id_x + -26)*(.__thread_id_x + -26))
          for (sum.s1.r9$x, 0, 27) {
            sum[.__thread_id_x] = (sum[.__thread_id_x] + select((float32(((sum.s1.r9$x*sum.s1.r9$x) + t1221)) < 689.062500f), 1, 0))
          }
        } else if ((.__thread_id_x < 26)) {
          let t1224 = ((.__thread_id_x + 1)*(.__thread_id_x + 1))
          let t1778 = (.__thread_id_x + 27)
          for (sum.s1.r9$x, 0, 27) {
            sum[t1778] = (sum[t1778] + select((float32(((sum.s1.r9$x*sum.s1.r9$x) + t1224)) < 689.062500f), 1, 0))
          }
        }
      }
    }
  }
  allocate filter_height[int32 * 53] if (uint1)0
  let filter_height.buffer = _halide_buffer_init(alloca(size_of_halide_buffer_t()), make_struct((halide_dimension_t *), -26, 53, 1, 0), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 0, 32, 1, make_struct((halide_dimension_t *), -26, 53, 1, 0), (uint64)0)
  register_destructor("halide_device_free_as_destructor", filter_height.buffer)
  produce filter_height {
    consume sum {
      let halide_device_malloc_result$6 = halide_device_malloc(filter_height.buffer, halide_cuda_device_interface())
      assert((halide_device_malloc_result$6 == 0), halide_device_malloc_result$6)
      let halide_device_malloc_result$8 = halide_device_malloc(sum.buffer, halide_cuda_device_interface())
      assert((halide_device_malloc_result$8 == 0), halide_device_malloc_result$8)
      gpu_block<CUDA> (filter_height.s0.x.x.x.x_outer.__block_id_x, 0, 1) {
        gpu_thread<CUDA> (.__thread_id_x, 0, 7) {
          if ((.__thread_id_x < 6)) {
            filter_height[(.__thread_id_x*8)] = sum[(.__thread_id_x*8)]
            filter_height[((.__thread_id_x*8) + 1)] = sum[((.__thread_id_x*8) + 1)]
            filter_height[((.__thread_id_x*8) + 2)] = sum[((.__thread_id_x*8) + 2)]
            filter_height[((.__thread_id_x*8) + 3)] = sum[((.__thread_id_x*8) + 3)]
            filter_height[((.__thread_id_x*8) + 4)] = sum[((.__thread_id_x*8) + 4)]
            filter_height[((.__thread_id_x*8) + 5)] = sum[((.__thread_id_x*8) + 5)]
            filter_height[((.__thread_id_x*8) + 6)] = sum[((.__thread_id_x*8) + 6)]
            filter_height[((.__thread_id_x*8) + 7)] = sum[((.__thread_id_x*8) + 7)]
          } else {
            filter_height[45] = sum[45]
            filter_height[46] = sum[46]
            filter_height[47] = sum[47]
            filter_height[48] = sum[48]
            filter_height[49] = sum[49]
            filter_height[50] = sum[50]
            filter_height[51] = sum[51]
            filter_height[52] = sum[52]
          }
        }
      }
      let halide_device_free_result$5 = halide_device_free(sum.buffer)
      assert((halide_device_free_result$5 == 0), halide_device_free_result$5)
      free sum
      _halide_buffer_set_device_dirty(filter_height.buffer, (uint1)1)
    }
  }
  allocate slice_for_radius[int32 * 28] if (uint1)0
  let slice_for_radius.buffer = _halide_buffer_init(alloca(size_of_halide_buffer_t()), make_struct((halide_dimension_t *), 0, 28, 1, 0), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 0, 32, 1, make_struct((halide_dimension_t *), 0, 28, 1, 0), (uint64)0)
  register_destructor("halide_device_free_as_destructor", slice_for_radius.buffer)
  produce slice_for_radius {
    let halide_device_malloc_result$4 = halide_device_malloc(slice_for_radius.buffer, halide_cuda_device_interface())
    assert((halide_device_malloc_result$4 == 0), halide_device_malloc_result$4)
    gpu_block<CUDA> (slice_for_radius.s0.t.t.t_outer.__block_id_x, 0, 1) {
      gpu_thread<CUDA> (.__thread_id_x, 0, 28) {
        slice_for_radius[.__thread_id_x] = int32(floor_f32((log_f32(float32(((.__thread_id_x*2) + 1)))*1.442695f)))
      }
    }
    _halide_buffer_set_device_dirty(slice_for_radius.buffer, (uint1)1)
  }
  let vert_log.y.min_realized.s = min(min(min((min((min(output.extent.1, 64) + output.min.1), 65) + 24), (min(output.extent.1, 64) + output.min.1)), (vert_log.s0.y.max.s + 134)), (min(output.min.1, 25) + 64))
  let vert_log.y.extent_realized.s.s = max(min((min(output.min.1, 25) + ((((vert_log.s0.y.max.s - min(output.min.1, 25)) + 77)/8)*8)), (vert_log.s0.y.max.s + 70)), (max(max(max((output.extent.1 + output.min.1), (input.extent.1 + 52)), ((output.extent.1 + output.min.1) + 27)), input.extent.1) + 43))
  let vert_log.stride.2 = (((output.extent.0*7) + 364)*((vert_log.y.extent_realized.s.s - vert_log.y.min_realized.s) + 72))
  allocate vert_log[float32 * (output.extent.0 + 52) * ((vert_log.y.extent_realized.s.s - vert_log.y.min_realized.s) + 72) * max(output.extent.2, 2) * 7] if (uint1)0
  let vert_log.buffer = _halide_buffer_init(alloca(size_of_halide_buffer_t()), make_struct((halide_dimension_t *), (output.min.0 + -26), (output.extent.0 + 52), 7, 0, (vert_log.y.min_realized.s + -115), ((vert_log.y.extent_realized.s.s - vert_log.y.min_realized.s) + 72), ((output.extent.0*7) + 364), 0, ((min(output.extent.2, 2) + output.min.2) + -2), max(output.extent.2, 2), vert_log.stride.2, 0, 0, 7, 1, 0), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 2, 32, 4, make_struct((halide_dimension_t *), (output.min.0 + -26), (output.extent.0 + 52), 7, 0, (vert_log.y.min_realized.s + -115), ((vert_log.y.extent_realized.s.s - vert_log.y.min_realized.s) + 72), ((output.extent.0*7) + 364), 0, ((min(output.extent.2, 2) + output.min.2) + -2), max(output.extent.2, 2), vert_log.stride.2, 0, 0, 7, 1, 0), (uint64)0)
  register_destructor("halide_device_free_as_destructor", vert_log.buffer)
  produce vert_log {
    let vert_log.s0.y.y.loop_extent.s = (vert_log.s0.y.max.s - min(output.min.1, 25))
    let halide_device_malloc_result$2 = halide_device_malloc(vert_log.buffer, halide_cuda_device_interface())
    assert((halide_device_malloc_result$2 == 0), halide_device_malloc_result$2)
    let halide_copy_to_device_result = halide_copy_to_device(input.buffer, halide_cuda_device_interface())
    assert((halide_copy_to_device_result == 0), halide_copy_to_device_result)
    let vert_log.s0.y.y.__block_id_y.prologue = min(max((((input.min.1 - min(output.min.1, 25)) + 58)/8), 0), ((vert_log.s0.y.y.loop_extent.s + 85)/8))
    let vert_log.s0.y.y.__block_id_y.epilogue = (let t1704 = ((input.extent.1 + input.min.1) - min(output.min.1, 25)) in (let t1705 = (vert_log.s0.y.max.s - min(output.min.1, 25)) in max(min(max((((input.min.1 - min(output.min.1, 25)) + 58)/8), 0), ((vert_log.s0.y.y.loop_extent.s + 85)/8)), ((min(min(min(min(min(min(min(min(min(min(min((min((t1705 + 22), t1704) + 5), t1704), (t1704 + 1)), ((min((vert_log.s0.y.max.s + 20), (input.extent.1 + input.min.1)) - min(output.min.1, 25)) + 7)), (min((t1705 + 21), t1704) + 6)), (min((t1705 + 23), t1704) + 4)), (min((t1705 + 24), t1704) + 3)), (min((t1705 + 25), t1704) + 2)), (min((t1705 + 26), t1704) + 1)), t1704), (t1705 + 27)), (vert_log.s0.y.y.loop_extent.s + 34)) + 51)/8))))
    let t590 = min(max((((input.min.0 - output.min.0) + 89)/64), 0), ((output.extent.0 + 115)/64))
    let t591 = max(min(max((((input.min.0 - output.min.0) + 89)/64), 0), ((output.extent.0 + 115)/64)), ((min(min(((input.extent.0 + input.min.0) - output.min.0), (min((((input.extent.0 + input.min.0) - output.min.0) + 37), output.extent.0) + 26)), (output.extent.0 + 89)) + 26)/64))
    let t593.s = (let t1708 = min(((input.extent.2 + input.min.2) - output.min.2), output.extent.2) in max(min((((input.min.2 - output.min.2) + 1)/2), 2), (min(min(min((((output.extent.2 + -1)/2) - (((output.extent.2 + -1)/4)*2)), (min(min((min((((input.extent.2 + input.min.2) - output.min.2) + 1), output.extent.2)/2), ((t1708/2) - (((output.extent.2 + -1)/4)*2))), (t1708/2)) + -1)), (((((input.extent.2 + input.min.2) - output.min.2) + -1)/2) - (((output.extent.2 + -1)/4)*2))), 1) + 1)))
    let t1245 = (3 - min(output.extent.2, 2))
    let t1236 = (2 - min(output.extent.2, 2))
    let t1233.s = ((output.min.0 - (input.min.2*input.stride.2)) - (input.min.1*input.stride.1))
    let t1251.s = ((input.min.2*input.stride.2) + (input.min.1*input.stride.1))
    let t1812 = (input.extent.2 + input.min.2)
    let t1813 = (input.extent.1 + input.min.1)
    let t1814 = (output.extent.2 + 3)
    let t1783 = max(min((((input.min.2 - output.min.2) + 1)/2), 2), 0)
    let t1784 = max(t593.s, 0)
    let t1781 = min(output.min.1, 25)
    let t1779 = ((vert_log.s0.y.y.loop_extent.s + 85)/8)
    let t1795 = (t1814/4)
    let t1797 = (t1814/2)
    let t1780 = ((output.extent.0 + 115)/64)
    let t1785 = (t1233.s - input.min.0)
    let t1786 = (71 - vert_log.y.min_realized.s)
    let t1788 = (70 - vert_log.y.min_realized.s)
    let t1789 = (69 - vert_log.y.min_realized.s)
    let t1790 = (68 - vert_log.y.min_realized.s)
    let t1791 = (67 - vert_log.y.min_realized.s)
    let t1792 = (66 - vert_log.y.min_realized.s)
    let t1793 = (65 - vert_log.y.min_realized.s)
    let t1794 = (64 - vert_log.y.min_realized.s)
    let t1787 = ((output.extent.0*7) + 364)
    let t1811 = (t1813 + 50)
    let t1810 = (t1813 + 49)
    let t1809 = (t1813 + 48)
    let t1808 = (t1813 + 47)
    let t1807 = (t1813 + 46)
    let t1806 = (t1813 + 45)
    let t1805 = (t1813 + 44)
    let t1804 = (t1813 + 43)
    let t1802 = ((input.extent.0 + input.min.0) + 37)
    let t1782 = (vert_log.s0.y.max.s + 70)
    let t1798 = (output.extent.2 + -2)
    let t1803 = (input.min.0 + t1251.s)
    gpu_block<CUDA> (vert_log.s0.y.y.__block_id_y, 0, t1779) {
      gpu_block<CUDA> (vert_log.s0.x.x.__block_id_x, 0, t1780) {
        gpu_thread<CUDA> (.__thread_id_z, 0, 2) {
          gpu_thread<CUDA> (.__thread_id_y, 0, 64) {
            gpu_thread<CUDA> (.__thread_id_x, 0, 7) {
              if (((vert_log.s0.y.y.__block_id_y.prologue <= vert_log.s0.y.y.__block_id_y) && (vert_log.s0.y.y.__block_id_y < vert_log.s0.y.y.__block_id_y.epilogue))) {
                let vert_log.s0.y.yi.base.s = min(((vert_log.s0.y.y.__block_id_y*8) + t1781), t1782)
                if (((t590 <= vert_log.s0.x.x.__block_id_x) && (vert_log.s0.x.x.__block_id_x < t591))) {
                  if (((t1783 <= .__thread_id_z) && (.__thread_id_z < t1784))) {
                    let vert_log.s0.x.xi.base.s = min(((vert_log.s0.x.x.__block_id_x*64) + 12), output.extent.0)
                    let t1281.s = (((vert_log.s0.y.yi.base.s + -44)*input.stride.1) + t1785)
                    let t1279.s = (((vert_log.s0.y.yi.base.s + -45)*input.stride.1) + t1785)
                    let t1277.s = (((vert_log.s0.y.yi.base.s + -46)*input.stride.1) + t1785)
                    let t1275.s = (((vert_log.s0.y.yi.base.s + -47)*input.stride.1) + t1785)
                    let t1273.s = (((vert_log.s0.y.yi.base.s + -48)*input.stride.1) + t1785)
                    let t1271.s = (((vert_log.s0.y.yi.base.s + -49)*input.stride.1) + t1785)
                    let t1269.s = (((vert_log.s0.y.yi.base.s + -50)*input.stride.1) + t1785)
                    let t1267.s = (((vert_log.s0.y.yi.base.s + -51)*input.stride.1) + t1785)
                    let t1282.s = (((t1786 + vert_log.s0.y.yi.base.s)*t1787) + ((.__thread_id_y + vert_log.s0.x.xi.base.s)*7))
                    let t1280.s = (((t1788 + vert_log.s0.y.yi.base.s)*t1787) + ((.__thread_id_y + vert_log.s0.x.xi.base.s)*7))
                    let t1278.s = (((t1789 + vert_log.s0.y.yi.base.s)*t1787) + ((.__thread_id_y + vert_log.s0.x.xi.base.s)*7))
                    let t1276.s = (((t1790 + vert_log.s0.y.yi.base.s)*t1787) + ((.__thread_id_y + vert_log.s0.x.xi.base.s)*7))
                    let t1274.s = (((t1791 + vert_log.s0.y.yi.base.s)*t1787) + ((.__thread_id_y + vert_log.s0.x.xi.base.s)*7))
                    let t1272.s = (((t1792 + vert_log.s0.y.yi.base.s)*t1787) + ((.__thread_id_y + vert_log.s0.x.xi.base.s)*7))
                    let t1270.s = (((t1793 + vert_log.s0.y.yi.base.s)*t1787) + ((.__thread_id_y + vert_log.s0.x.xi.base.s)*7))
                    let t1268.s = (((t1794 + vert_log.s0.y.yi.base.s)*t1787) + ((.__thread_id_y + vert_log.s0.x.xi.base.s)*7))
                    let t1829 = (((t1281.s + vert_log.s0.x.xi.base.s) + .__thread_id_y) + -38)
                    let t1827 = (((t1279.s + vert_log.s0.x.xi.base.s) + .__thread_id_y) + -38)
                    let t1825 = (((t1277.s + vert_log.s0.x.xi.base.s) + .__thread_id_y) + -38)
                    let t1823 = (((t1275.s + vert_log.s0.x.xi.base.s) + .__thread_id_y) + -38)
                    let t1821 = (((t1273.s + vert_log.s0.x.xi.base.s) + .__thread_id_y) + -38)
                    let t1819 = (((t1271.s + vert_log.s0.x.xi.base.s) + .__thread_id_y) + -38)
                    let t1817 = (((t1269.s + vert_log.s0.x.xi.base.s) + .__thread_id_y) + -38)
                    let t1815 = (((t1267.s + vert_log.s0.x.xi.base.s) + .__thread_id_y) + -38)
                    let t1830 = ((.__thread_id_x + t1282.s) + -84)
                    let t1828 = ((.__thread_id_x + t1280.s) + -84)
                    let t1826 = ((.__thread_id_x + t1278.s) + -84)
                    let t1824 = ((.__thread_id_x + t1276.s) + -84)
                    let t1822 = ((.__thread_id_x + t1274.s) + -84)
                    let t1820 = ((.__thread_id_x + t1272.s) + -84)
                    let t1818 = ((.__thread_id_x + t1270.s) + -84)
                    let t1816 = ((.__thread_id_x + t1268.s) + -84)
                    for (vert_log.s0.c.c.c_serial_outer, 0, t1795) {
                      vert_log[((((((vert_log.s0.c.c.c_serial_outer*2) + .__thread_id_z)*2) + t1236)*vert_log.stride.2) + t1816)] = input[((((((vert_log.s0.c.c.c_serial_outer*2) + .__thread_id_z)*2) + output.min.2)*input.stride.2) + t1815)]
                      vert_log[((((((vert_log.s0.c.c.c_serial_outer*2) + .__thread_id_z)*2) + t1236)*vert_log.stride.2) + t1818)] = input[((((((vert_log.s0.c.c.c_serial_outer*2) + .__thread_id_z)*2) + output.min.2)*input.stride.2) + t1817)]
                      vert_log[((((((vert_log.s0.c.c.c_serial_outer*2) + .__thread_id_z)*2) + t1236)*vert_log.stride.2) + t1820)] = input[((((((vert_log.s0.c.c.c_serial_outer*2) + .__thread_id_z)*2) + output.min.2)*input.stride.2) + t1819)]
                      vert_log[((((((vert_log.s0.c.c.c_serial_outer*2) + .__thread_id_z)*2) + t1236)*vert_log.stride.2) + t1822)] = input[((((((vert_log.s0.c.c.c_serial_outer*2) + .__thread_id_z)*2) + output.min.2)*input.stride.2) + t1821)]
                      vert_log[((((((vert_log.s0.c.c.c_serial_outer*2) + .__thread_id_z)*2) + t1236)*vert_log.stride.2) + t1824)] = input[((((((vert_log.s0.c.c.c_serial_outer*2) + .__thread_id_z)*2) + output.min.2)*input.stride.2) + t1823)]
                      vert_log[((((((vert_log.s0.c.c.c_serial_outer*2) + .__thread_id_z)*2) + t1236)*vert_log.stride.2) + t1826)] = input[((((((vert_log.s0.c.c.c_serial_outer*2) + .__thread_id_z)*2) + output.min.2)*input.stride.2) + t1825)]
                      vert_log[((((((vert_log.s0.c.c.c_serial_outer*2) + .__thread_id_z)*2) + t1236)*vert_log.stride.2) + t1828)] = input[((((((vert_log.s0.c.c.c_serial_outer*2) + .__thread_id_z)*2) + output.min.2)*input.stride.2) + t1827)]
                      vert_log[((((((vert_log.s0.c.c.c_serial_outer*2) + .__thread_id_z)*2) + t1236)*vert_log.stride.2) + t1830)] = input[((((((vert_log.s0.c.c.c_serial_outer*2) + .__thread_id_z)*2) + output.min.2)*input.stride.2) + t1829)]
                      vert_log[((((((vert_log.s0.c.c.c_serial_outer*2) + .__thread_id_z)*2) + t1245)*vert_log.stride.2) + t1816)] = input[(((((((vert_log.s0.c.c.c_serial_outer*2) + .__thread_id_z)*2) + output.min.2) + 1)*input.stride.2) + t1815)]
                      vert_log[((((((vert_log.s0.c.c.c_serial_outer*2) + .__thread_id_z)*2) + t1245)*vert_log.stride.2) + t1818)] = input[(((((((vert_log.s0.c.c.c_serial_outer*2) + .__thread_id_z)*2) + output.min.2) + 1)*input.stride.2) + t1817)]
                      vert_log[((((((vert_log.s0.c.c.c_serial_outer*2) + .__thread_id_z)*2) + t1245)*vert_log.stride.2) + t1820)] = input[(((((((vert_log.s0.c.c.c_serial_outer*2) + .__thread_id_z)*2) + output.min.2) + 1)*input.stride.2) + t1819)]
                      vert_log[((((((vert_log.s0.c.c.c_serial_outer*2) + .__thread_id_z)*2) + t1245)*vert_log.stride.2) + t1822)] = input[(((((((vert_log.s0.c.c.c_serial_outer*2) + .__thread_id_z)*2) + output.min.2) + 1)*input.stride.2) + t1821)]
                      vert_log[((((((vert_log.s0.c.c.c_serial_outer*2) + .__thread_id_z)*2) + t1245)*vert_log.stride.2) + t1824)] = input[(((((((vert_log.s0.c.c.c_serial_outer*2) + .__thread_id_z)*2) + output.min.2) + 1)*input.stride.2) + t1823)]
                      vert_log[((((((vert_log.s0.c.c.c_serial_outer*2) + .__thread_id_z)*2) + t1245)*vert_log.stride.2) + t1826)] = input[(((((((vert_log.s0.c.c.c_serial_outer*2) + .__thread_id_z)*2) + output.min.2) + 1)*input.stride.2) + t1825)]
                      vert_log[((((((vert_log.s0.c.c.c_serial_outer*2) + .__thread_id_z)*2) + t1245)*vert_log.stride.2) + t1828)] = input[(((((((vert_log.s0.c.c.c_serial_outer*2) + .__thread_id_z)*2) + output.min.2) + 1)*input.stride.2) + t1827)]
                      vert_log[((((((vert_log.s0.c.c.c_serial_outer*2) + .__thread_id_z)*2) + t1245)*vert_log.stride.2) + t1830)] = input[(((((((vert_log.s0.c.c.c_serial_outer*2) + .__thread_id_z)*2) + output.min.2) + 1)*input.stride.2) + t1829)]
                    }
                  } else {
                    let vert_log.s0.x.xi.base.s = min(((vert_log.s0.x.x.__block_id_x*64) + 12), output.extent.0)
                    let vert_log.s0.c.c.c_serial_outer.new_max.s = min(((t1797 - .__thread_id_z)/2), t1795)
                    let t1301.s = (((vert_log.s0.y.yi.base.s + -44)*input.stride.1) + t1785)
                    let t1299.s = (((vert_log.s0.y.yi.base.s + -45)*input.stride.1) + t1785)
                    let t1297.s = (((vert_log.s0.y.yi.base.s + -46)*input.stride.1) + t1785)
                    let t1295.s = (((vert_log.s0.y.yi.base.s + -47)*input.stride.1) + t1785)
                    let t1293.s = (((vert_log.s0.y.yi.base.s + -48)*input.stride.1) + t1785)
                    let t1291.s = (((vert_log.s0.y.yi.base.s + -49)*input.stride.1) + t1785)
                    let t1289.s = (((vert_log.s0.y.yi.base.s + -50)*input.stride.1) + t1785)
                    let t1286.s = (((vert_log.s0.y.yi.base.s + -51)*input.stride.1) + t1785)
                    let t1302.s = (((t1786 + vert_log.s0.y.yi.base.s)*t1787) + ((.__thread_id_y + vert_log.s0.x.xi.base.s)*7))
                    let t1300.s = (((t1788 + vert_log.s0.y.yi.base.s)*t1787) + ((.__thread_id_y + vert_log.s0.x.xi.base.s)*7))
                    let t1298.s = (((t1789 + vert_log.s0.y.yi.base.s)*t1787) + ((.__thread_id_y + vert_log.s0.x.xi.base.s)*7))
                    let t1296.s = (((t1790 + vert_log.s0.y.yi.base.s)*t1787) + ((.__thread_id_y + vert_log.s0.x.xi.base.s)*7))
                    let t1294.s = (((t1791 + vert_log.s0.y.yi.base.s)*t1787) + ((.__thread_id_y + vert_log.s0.x.xi.base.s)*7))
                    let t1292.s = (((t1792 + vert_log.s0.y.yi.base.s)*t1787) + ((.__thread_id_y + vert_log.s0.x.xi.base.s)*7))
                    let t1290.s = (((t1793 + vert_log.s0.y.yi.base.s)*t1787) + ((.__thread_id_y + vert_log.s0.x.xi.base.s)*7))
                    let t1288.s = (((t1794 + vert_log.s0.y.yi.base.s)*t1787) + ((.__thread_id_y + vert_log.s0.x.xi.base.s)*7))
                    let t1847 = (((t1301.s + vert_log.s0.x.xi.base.s) + .__thread_id_y) + -38)
                    let t1845 = (((t1299.s + vert_log.s0.x.xi.base.s) + .__thread_id_y) + -38)
                    let t1843 = (((t1297.s + vert_log.s0.x.xi.base.s) + .__thread_id_y) + -38)
                    let t1841 = (((t1295.s + vert_log.s0.x.xi.base.s) + .__thread_id_y) + -38)
                    let t1839 = (((t1293.s + vert_log.s0.x.xi.base.s) + .__thread_id_y) + -38)
                    let t1837 = (((t1291.s + vert_log.s0.x.xi.base.s) + .__thread_id_y) + -38)
                    let t1835 = (((t1289.s + vert_log.s0.x.xi.base.s) + .__thread_id_y) + -38)
                    let t1832 = (((t1286.s + vert_log.s0.x.xi.base.s) + .__thread_id_y) + -38)
                    let t1848 = ((.__thread_id_x + t1302.s) + -84)
                    let t1846 = ((.__thread_id_x + t1300.s) + -84)
                    let t1844 = ((.__thread_id_x + t1298.s) + -84)
                    let t1842 = ((.__thread_id_x + t1296.s) + -84)
                    let t1840 = ((.__thread_id_x + t1294.s) + -84)
                    let t1838 = ((.__thread_id_x + t1292.s) + -84)
                    let t1836 = ((.__thread_id_x + t1290.s) + -84)
                    let t1834 = ((.__thread_id_x + t1288.s) + -84)
                    for (vert_log.s0.c.c.c_serial_outer, 0, vert_log.s0.c.c.c_serial_outer.new_max.s) {
                      let vert_log.s0.c.ci.base.s = min((((vert_log.s0.c.c.c_serial_outer*2) + .__thread_id_z)*2), t1798)
                      vert_log[(((t1236 + vert_log.s0.c.ci.base.s)*vert_log.stride.2) + t1834)] = input[((max(min((output.min.2 + vert_log.s0.c.ci.base.s), (t1812 + -1)), input.min.2)*input.stride.2) + t1832)]
                      vert_log[(((t1236 + vert_log.s0.c.ci.base.s)*vert_log.stride.2) + t1836)] = input[((max(min((output.min.2 + vert_log.s0.c.ci.base.s), (t1812 + -1)), input.min.2)*input.stride.2) + t1835)]
                      vert_log[(((t1236 + vert_log.s0.c.ci.base.s)*vert_log.stride.2) + t1838)] = input[((max(min((output.min.2 + vert_log.s0.c.ci.base.s), (t1812 + -1)), input.min.2)*input.stride.2) + t1837)]
                      vert_log[(((t1236 + vert_log.s0.c.ci.base.s)*vert_log.stride.2) + t1840)] = input[((max(min((output.min.2 + vert_log.s0.c.ci.base.s), (t1812 + -1)), input.min.2)*input.stride.2) + t1839)]
                      vert_log[(((t1236 + vert_log.s0.c.ci.base.s)*vert_log.stride.2) + t1842)] = input[((max(min((output.min.2 + vert_log.s0.c.ci.base.s), (t1812 + -1)), input.min.2)*input.stride.2) + t1841)]
                      vert_log[(((t1236 + vert_log.s0.c.ci.base.s)*vert_log.stride.2) + t1844)] = input[((max(min((output.min.2 + vert_log.s0.c.ci.base.s), (t1812 + -1)), input.min.2)*input.stride.2) + t1843)]
                      vert_log[(((t1236 + vert_log.s0.c.ci.base.s)*vert_log.stride.2) + t1846)] = input[((max(min((output.min.2 + vert_log.s0.c.ci.base.s), (t1812 + -1)), input.min.2)*input.stride.2) + t1845)]
                      vert_log[(((t1236 + vert_log.s0.c.ci.base.s)*vert_log.stride.2) + t1848)] = input[((max(min((output.min.2 + vert_log.s0.c.ci.base.s), (t1812 + -1)), input.min.2)*input.stride.2) + t1847)]
                      vert_log[(((t1245 + vert_log.s0.c.ci.base.s)*vert_log.stride.2) + t1834)] = input[((max((min(((output.min.2 + vert_log.s0.c.ci.base.s) + 2), t1812) + -1), input.min.2)*input.stride.2) + t1832)]
                      vert_log[(((t1245 + vert_log.s0.c.ci.base.s)*vert_log.stride.2) + t1836)] = input[((max((min(((output.min.2 + vert_log.s0.c.ci.base.s) + 2), t1812) + -1), input.min.2)*input.stride.2) + t1835)]
                      vert_log[(((t1245 + vert_log.s0.c.ci.base.s)*vert_log.stride.2) + t1838)] = input[((max((min(((output.min.2 + vert_log.s0.c.ci.base.s) + 2), t1812) + -1), input.min.2)*input.stride.2) + t1837)]
                      vert_log[(((t1245 + vert_log.s0.c.ci.base.s)*vert_log.stride.2) + t1840)] = input[((max((min(((output.min.2 + vert_log.s0.c.ci.base.s) + 2), t1812) + -1), input.min.2)*input.stride.2) + t1839)]
                      vert_log[(((t1245 + vert_log.s0.c.ci.base.s)*vert_log.stride.2) + t1842)] = input[((max((min(((output.min.2 + vert_log.s0.c.ci.base.s) + 2), t1812) + -1), input.min.2)*input.stride.2) + t1841)]
                      vert_log[(((t1245 + vert_log.s0.c.ci.base.s)*vert_log.stride.2) + t1844)] = input[((max((min(((output.min.2 + vert_log.s0.c.ci.base.s) + 2), t1812) + -1), input.min.2)*input.stride.2) + t1843)]
                      vert_log[(((t1245 + vert_log.s0.c.ci.base.s)*vert_log.stride.2) + t1846)] = input[((max((min(((output.min.2 + vert_log.s0.c.ci.base.s) + 2), t1812) + -1), input.min.2)*input.stride.2) + t1845)]
                      vert_log[(((t1245 + vert_log.s0.c.ci.base.s)*vert_log.stride.2) + t1848)] = input[((max((min(((output.min.2 + vert_log.s0.c.ci.base.s) + 2), t1812) + -1), input.min.2)*input.stride.2) + t1847)]
                    }
                  }
                } else {
                  let vert_log.s0.x.xi.base.s = min(((vert_log.s0.x.x.__block_id_x*64) + 12), output.extent.0)
                  let vert_log.s0.c.c.c_serial_outer.new_max$1.s = min(((t1797 - .__thread_id_z)/2), t1795)
                  let t1325 = max((min(((output.min.0 + vert_log.s0.x.xi.base.s) + .__thread_id_y), t1802) + -38), input.min.0)
                  let t1321.s = (((vert_log.s0.y.yi.base.s + -44)*input.stride.1) - t1803)
                  let t1319.s = (((vert_log.s0.y.yi.base.s + -45)*input.stride.1) - t1803)
                  let t1317.s = (((vert_log.s0.y.yi.base.s + -46)*input.stride.1) - t1803)
                  let t1315.s = (((vert_log.s0.y.yi.base.s + -47)*input.stride.1) - t1803)
                  let t1313.s = (((vert_log.s0.y.yi.base.s + -48)*input.stride.1) - t1803)
                  let t1311.s = (((vert_log.s0.y.yi.base.s + -49)*input.stride.1) - t1803)
                  let t1309.s = (((vert_log.s0.y.yi.base.s + -50)*input.stride.1) - t1803)
                  let t1306.s = (((vert_log.s0.y.yi.base.s + -51)*input.stride.1) - t1803)
                  let t1322.s = (((t1786 + vert_log.s0.y.yi.base.s)*t1787) + ((.__thread_id_y + vert_log.s0.x.xi.base.s)*7))
                  let t1320.s = (((t1788 + vert_log.s0.y.yi.base.s)*t1787) + ((.__thread_id_y + vert_log.s0.x.xi.base.s)*7))
                  let t1318.s = (((t1789 + vert_log.s0.y.yi.base.s)*t1787) + ((.__thread_id_y + vert_log.s0.x.xi.base.s)*7))
                  let t1316.s = (((t1790 + vert_log.s0.y.yi.base.s)*t1787) + ((.__thread_id_y + vert_log.s0.x.xi.base.s)*7))
                  let t1314.s = (((t1791 + vert_log.s0.y.yi.base.s)*t1787) + ((.__thread_id_y + vert_log.s0.x.xi.base.s)*7))
                  let t1312.s = (((t1792 + vert_log.s0.y.yi.base.s)*t1787) + ((.__thread_id_y + vert_log.s0.x.xi.base.s)*7))
                  let t1310.s = (((t1793 + vert_log.s0.y.yi.base.s)*t1787) + ((.__thread_id_y + vert_log.s0.x.xi.base.s)*7))
                  let t1308.s = (((t1794 + vert_log.s0.y.yi.base.s)*t1787) + ((.__thread_id_y + vert_log.s0.x.xi.base.s)*7))
                  let t1866 = ((.__thread_id_x + t1322.s) + -84)
                  let t1864 = ((.__thread_id_x + t1320.s) + -84)
                  let t1862 = ((.__thread_id_x + t1318.s) + -84)
                  let t1860 = ((.__thread_id_x + t1316.s) + -84)
                  let t1858 = ((.__thread_id_x + t1314.s) + -84)
                  let t1856 = ((.__thread_id_x + t1312.s) + -84)
                  let t1854 = ((.__thread_id_x + t1310.s) + -84)
                  let t1852 = ((.__thread_id_x + t1308.s) + -84)
                  let t1865 = (t1321.s + t1325)
                  let t1863 = (t1319.s + t1325)
                  let t1861 = (t1317.s + t1325)
                  let t1859 = (t1315.s + t1325)
                  let t1857 = (t1313.s + t1325)
                  let t1855 = (t1311.s + t1325)
                  let t1853 = (t1309.s + t1325)
                  let t1850 = (t1306.s + t1325)
                  for (vert_log.s0.c.c.c_serial_outer, 0, vert_log.s0.c.c.c_serial_outer.new_max$1.s) {
                    let vert_log.s0.c.ci.base.s = min((((vert_log.s0.c.c.c_serial_outer*2) + .__thread_id_z)*2), t1798)
                    vert_log[(((t1236 + vert_log.s0.c.ci.base.s)*vert_log.stride.2) + t1852)] = input[((max(min((output.min.2 + vert_log.s0.c.ci.base.s), (t1812 + -1)), input.min.2)*input.stride.2) + t1850)]
                    vert_log[(((t1236 + vert_log.s0.c.ci.base.s)*vert_log.stride.2) + t1854)] = input[((max(min((output.min.2 + vert_log.s0.c.ci.base.s), (t1812 + -1)), input.min.2)*input.stride.2) + t1853)]
                    vert_log[(((t1236 + vert_log.s0.c.ci.base.s)*vert_log.stride.2) + t1856)] = input[((max(min((output.min.2 + vert_log.s0.c.ci.base.s), (t1812 + -1)), input.min.2)*input.stride.2) + t1855)]
                    vert_log[(((t1236 + vert_log.s0.c.ci.base.s)*vert_log.stride.2) + t1858)] = input[((max(min((output.min.2 + vert_log.s0.c.ci.base.s), (t1812 + -1)), input.min.2)*input.stride.2) + t1857)]
                    vert_log[(((t1236 + vert_log.s0.c.ci.base.s)*vert_log.stride.2) + t1860)] = input[((max(min((output.min.2 + vert_log.s0.c.ci.base.s), (t1812 + -1)), input.min.2)*input.stride.2) + t1859)]
                    vert_log[(((t1236 + vert_log.s0.c.ci.base.s)*vert_log.stride.2) + t1862)] = input[((max(min((output.min.2 + vert_log.s0.c.ci.base.s), (t1812 + -1)), input.min.2)*input.stride.2) + t1861)]
                    vert_log[(((t1236 + vert_log.s0.c.ci.base.s)*vert_log.stride.2) + t1864)] = input[((max(min((output.min.2 + vert_log.s0.c.ci.base.s), (t1812 + -1)), input.min.2)*input.stride.2) + t1863)]
                    vert_log[(((t1236 + vert_log.s0.c.ci.base.s)*vert_log.stride.2) + t1866)] = input[((max(min((output.min.2 + vert_log.s0.c.ci.base.s), (t1812 + -1)), input.min.2)*input.stride.2) + t1865)]
                    vert_log[(((t1245 + vert_log.s0.c.ci.base.s)*vert_log.stride.2) + t1852)] = input[((max((min(((output.min.2 + vert_log.s0.c.ci.base.s) + 2), t1812) + -1), input.min.2)*input.stride.2) + t1850)]
                    vert_log[(((t1245 + vert_log.s0.c.ci.base.s)*vert_log.stride.2) + t1854)] = input[((max((min(((output.min.2 + vert_log.s0.c.ci.base.s) + 2), t1812) + -1), input.min.2)*input.stride.2) + t1853)]
                    vert_log[(((t1245 + vert_log.s0.c.ci.base.s)*vert_log.stride.2) + t1856)] = input[((max((min(((output.min.2 + vert_log.s0.c.ci.base.s) + 2), t1812) + -1), input.min.2)*input.stride.2) + t1855)]
                    vert_log[(((t1245 + vert_log.s0.c.ci.base.s)*vert_log.stride.2) + t1858)] = input[((max((min(((output.min.2 + vert_log.s0.c.ci.base.s) + 2), t1812) + -1), input.min.2)*input.stride.2) + t1857)]
                    vert_log[(((t1245 + vert_log.s0.c.ci.base.s)*vert_log.stride.2) + t1860)] = input[((max((min(((output.min.2 + vert_log.s0.c.ci.base.s) + 2), t1812) + -1), input.min.2)*input.stride.2) + t1859)]
                    vert_log[(((t1245 + vert_log.s0.c.ci.base.s)*vert_log.stride.2) + t1862)] = input[((max((min(((output.min.2 + vert_log.s0.c.ci.base.s) + 2), t1812) + -1), input.min.2)*input.stride.2) + t1861)]
                    vert_log[(((t1245 + vert_log.s0.c.ci.base.s)*vert_log.stride.2) + t1864)] = input[((max((min(((output.min.2 + vert_log.s0.c.ci.base.s) + 2), t1812) + -1), input.min.2)*input.stride.2) + t1863)]
                    vert_log[(((t1245 + vert_log.s0.c.ci.base.s)*vert_log.stride.2) + t1866)] = input[((max((min(((output.min.2 + vert_log.s0.c.ci.base.s) + 2), t1812) + -1), input.min.2)*input.stride.2) + t1865)]
                  }
                }
              } else {
                let vert_log.s0.y.yi.base.s = min(((vert_log.s0.y.y.__block_id_y*8) + t1781), t1782)
                let vert_log.s0.x.xi.base.s = min(((vert_log.s0.x.x.__block_id_x*64) + 12), output.extent.0)
                let vert_log.s0.c.c.c_serial_outer.new_max$2.s = min(((t1797 - .__thread_id_z)/2), t1795)
                let t1346 = max((min(((output.min.0 + vert_log.s0.x.xi.base.s) + .__thread_id_y), t1802) + -38), input.min.0)
                let t1342.s = ((max((min(t1804, vert_log.s0.y.yi.base.s) + -44), input.min.1)*input.stride.1) - t1803)
                let t1340.s = ((max((min(t1805, vert_log.s0.y.yi.base.s) + -45), input.min.1)*input.stride.1) - t1803)
                let t1338.s = ((max((min(t1806, vert_log.s0.y.yi.base.s) + -46), input.min.1)*input.stride.1) - t1803)
                let t1336.s = ((max((min(t1807, vert_log.s0.y.yi.base.s) + -47), input.min.1)*input.stride.1) - t1803)
                let t1334.s = ((max((min(t1808, vert_log.s0.y.yi.base.s) + -48), input.min.1)*input.stride.1) - t1803)
                let t1332.s = ((max((min(t1809, vert_log.s0.y.yi.base.s) + -49), input.min.1)*input.stride.1) - t1803)
                let t1330.s = ((max((min(t1810, vert_log.s0.y.yi.base.s) + -50), input.min.1)*input.stride.1) - t1803)
                let t1327.s = ((max((min(t1811, vert_log.s0.y.yi.base.s) + -51), input.min.1)*input.stride.1) - t1803)
                let t1343.s = (((t1786 + vert_log.s0.y.yi.base.s)*t1787) + ((.__thread_id_y + vert_log.s0.x.xi.base.s)*7))
                let t1341.s = (((t1788 + vert_log.s0.y.yi.base.s)*t1787) + ((.__thread_id_y + vert_log.s0.x.xi.base.s)*7))
                let t1339.s = (((t1789 + vert_log.s0.y.yi.base.s)*t1787) + ((.__thread_id_y + vert_log.s0.x.xi.base.s)*7))
                let t1337.s = (((t1790 + vert_log.s0.y.yi.base.s)*t1787) + ((.__thread_id_y + vert_log.s0.x.xi.base.s)*7))
                let t1335.s = (((t1791 + vert_log.s0.y.yi.base.s)*t1787) + ((.__thread_id_y + vert_log.s0.x.xi.base.s)*7))
                let t1333.s = (((t1792 + vert_log.s0.y.yi.base.s)*t1787) + ((.__thread_id_y + vert_log.s0.x.xi.base.s)*7))
                let t1331.s = (((t1793 + vert_log.s0.y.yi.base.s)*t1787) + ((.__thread_id_y + vert_log.s0.x.xi.base.s)*7))
                let t1329.s = (((t1794 + vert_log.s0.y.yi.base.s)*t1787) + ((.__thread_id_y + vert_log.s0.x.xi.base.s)*7))
                let t1884 = ((.__thread_id_x + t1343.s) + -84)
                let t1882 = ((.__thread_id_x + t1341.s) + -84)
                let t1880 = ((.__thread_id_x + t1339.s) + -84)
                let t1878 = ((.__thread_id_x + t1337.s) + -84)
                let t1876 = ((.__thread_id_x + t1335.s) + -84)
                let t1874 = ((.__thread_id_x + t1333.s) + -84)
                let t1872 = ((.__thread_id_x + t1331.s) + -84)
                let t1870 = ((.__thread_id_x + t1329.s) + -84)
                let t1883 = (t1342.s + t1346)
                let t1881 = (t1340.s + t1346)
                let t1879 = (t1338.s + t1346)
                let t1877 = (t1336.s + t1346)
                let t1875 = (t1334.s + t1346)
                let t1873 = (t1332.s + t1346)
                let t1871 = (t1330.s + t1346)
                let t1868 = (t1327.s + t1346)
                for (vert_log.s0.c.c.c_serial_outer, 0, vert_log.s0.c.c.c_serial_outer.new_max$2.s) {
                  let vert_log.s0.c.ci.base.s = min((((vert_log.s0.c.c.c_serial_outer*2) + .__thread_id_z)*2), t1798)
                  vert_log[(((t1236 + vert_log.s0.c.ci.base.s)*vert_log.stride.2) + t1870)] = input[((max(min((output.min.2 + vert_log.s0.c.ci.base.s), (t1812 + -1)), input.min.2)*input.stride.2) + t1868)]
                  vert_log[(((t1236 + vert_log.s0.c.ci.base.s)*vert_log.stride.2) + t1872)] = input[((max(min((output.min.2 + vert_log.s0.c.ci.base.s), (t1812 + -1)), input.min.2)*input.stride.2) + t1871)]
                  vert_log[(((t1236 + vert_log.s0.c.ci.base.s)*vert_log.stride.2) + t1874)] = input[((max(min((output.min.2 + vert_log.s0.c.ci.base.s), (t1812 + -1)), input.min.2)*input.stride.2) + t1873)]
                  vert_log[(((t1236 + vert_log.s0.c.ci.base.s)*vert_log.stride.2) + t1876)] = input[((max(min((output.min.2 + vert_log.s0.c.ci.base.s), (t1812 + -1)), input.min.2)*input.stride.2) + t1875)]
                  vert_log[(((t1236 + vert_log.s0.c.ci.base.s)*vert_log.stride.2) + t1878)] = input[((max(min((output.min.2 + vert_log.s0.c.ci.base.s), (t1812 + -1)), input.min.2)*input.stride.2) + t1877)]
                  vert_log[(((t1236 + vert_log.s0.c.ci.base.s)*vert_log.stride.2) + t1880)] = input[((max(min((output.min.2 + vert_log.s0.c.ci.base.s), (t1812 + -1)), input.min.2)*input.stride.2) + t1879)]
                  vert_log[(((t1236 + vert_log.s0.c.ci.base.s)*vert_log.stride.2) + t1882)] = input[((max(min((output.min.2 + vert_log.s0.c.ci.base.s), (t1812 + -1)), input.min.2)*input.stride.2) + t1881)]
                  vert_log[(((t1236 + vert_log.s0.c.ci.base.s)*vert_log.stride.2) + t1884)] = input[((max(min((output.min.2 + vert_log.s0.c.ci.base.s), (t1812 + -1)), input.min.2)*input.stride.2) + t1883)]
                  vert_log[(((t1245 + vert_log.s0.c.ci.base.s)*vert_log.stride.2) + t1870)] = input[((max((min(((output.min.2 + vert_log.s0.c.ci.base.s) + 2), t1812) + -1), input.min.2)*input.stride.2) + t1868)]
                  vert_log[(((t1245 + vert_log.s0.c.ci.base.s)*vert_log.stride.2) + t1872)] = input[((max((min(((output.min.2 + vert_log.s0.c.ci.base.s) + 2), t1812) + -1), input.min.2)*input.stride.2) + t1871)]
                  vert_log[(((t1245 + vert_log.s0.c.ci.base.s)*vert_log.stride.2) + t1874)] = input[((max((min(((output.min.2 + vert_log.s0.c.ci.base.s) + 2), t1812) + -1), input.min.2)*input.stride.2) + t1873)]
                  vert_log[(((t1245 + vert_log.s0.c.ci.base.s)*vert_log.stride.2) + t1876)] = input[((max((min(((output.min.2 + vert_log.s0.c.ci.base.s) + 2), t1812) + -1), input.min.2)*input.stride.2) + t1875)]
                  vert_log[(((t1245 + vert_log.s0.c.ci.base.s)*vert_log.stride.2) + t1878)] = input[((max((min(((output.min.2 + vert_log.s0.c.ci.base.s) + 2), t1812) + -1), input.min.2)*input.stride.2) + t1877)]
                  vert_log[(((t1245 + vert_log.s0.c.ci.base.s)*vert_log.stride.2) + t1880)] = input[((max((min(((output.min.2 + vert_log.s0.c.ci.base.s) + 2), t1812) + -1), input.min.2)*input.stride.2) + t1879)]
                  vert_log[(((t1245 + vert_log.s0.c.ci.base.s)*vert_log.stride.2) + t1882)] = input[((max((min(((output.min.2 + vert_log.s0.c.ci.base.s) + 2), t1812) + -1), input.min.2)*input.stride.2) + t1881)]
                  vert_log[(((t1245 + vert_log.s0.c.ci.base.s)*vert_log.stride.2) + t1884)] = input[((max((min(((output.min.2 + vert_log.s0.c.ci.base.s) + 2), t1812) + -1), input.min.2)*input.stride.2) + t1883)]
                }
              }
            }
          }
        }
      }
    }
    _halide_buffer_set_device_dirty(vert_log.buffer, (uint1)1)
    let t1352 = (2 - min(output.extent.2, 2))
    let t1888 = ((output.extent.2 + 3)/4)
    let t1889 = ((output.extent.2 + 1)/2)
    let t1886 = ((output.extent.0 + 115)/64)
    let t1891 = (115 - vert_log.y.min_realized.s)
    let t1892 = ((output.extent.0*7) + 364)
    let t1887 = (output.extent.0 + 52)
    let t1890 = (input.extent.1 + 26)
    gpu_block<CUDA> (vert_log.s1.x.x.__block_id_x, 0, t1886) {
      gpu_thread<CUDA> (.__thread_id_y, 0, 2) {
        gpu_thread<CUDA> (.__thread_id_x, 0, 64) {
          let t1355 = (((vert_log.s1.x.x.__block_id_x*64) + .__thread_id_x) < t1887)
          let t1893 = (((vert_log.s1.x.x.__block_id_x*64) + .__thread_id_x)*7)
          for (vert_log.s1.c.c.c_serial_outer, 0, t1888) {
            if ((((vert_log.s1.c.c.c_serial_outer*2) + .__thread_id_y) < t1889)) {
              if (t1355) {
                let vert_log.s1.c.ci.epilogue.s = (output.extent.2 - (((vert_log.s1.c.c.c_serial_outer*2) + .__thread_id_y)*2))
                let t1894 = max(min(vert_log.s1.c.ci.epilogue.s, 2), 0)
                let t1895 = ((((vert_log.s1.c.c.c_serial_outer*2) + .__thread_id_y)*2) + t1352)
                for (vert_log.s1.c.ci, 0, t1894) {
                  let t1365 = (((t1895 + vert_log.s1.c.ci)*vert_log.stride.2) + t1893)
                  for (vert_log.s1.r4$y, 1, 5) {
                    let t1367.s = shift_left(1, (vert_log.s1.r4$y + -1))
                    let t1900 = (t1365 + vert_log.s1.r4$y)
                    let t1898 = (max(min(t1367.s, 52), 0) + t1891)
                    for (vert_log.s1.r4$x, -26, t1890) {
                      vert_log[(((t1891 + vert_log.s1.r4$x)*t1892) + t1900)] = max(vert_log[((((t1891 + vert_log.s1.r4$x)*t1892) + t1900) + -1)], vert_log[((((t1898 + vert_log.s1.r4$x)*t1892) + t1900) + -1)])
                    }
                  }
                }
              }
            }
            gpu_thread_barrier()
          }
        }
      }
    }
  }
  let vert.stride.3 = (max(output.extent.1, 64)*((output.extent.0 + 52)*output.extent.2))
  allocate vert[float32 * (output.extent.0 + 52) * max(output.extent.1, 64) * output.extent.2 * 28] if (uint1)0
  let vert.buffer = _halide_buffer_init(alloca(size_of_halide_buffer_t()), make_struct((halide_dimension_t *), (output.min.0 + -26), (output.extent.0 + 52), output.extent.2, 0, ((min(output.extent.1, 64) + output.min.1) + -64), max(output.extent.1, 64), ((output.extent.0 + 52)*output.extent.2), 0, output.min.2, output.extent.2, 1, 0, 0, 28, vert.stride.3, 0), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 2, 32, 4, make_struct((halide_dimension_t *), (output.min.0 + -26), (output.extent.0 + 52), output.extent.2, 0, ((min(output.extent.1, 64) + output.min.1) + -64), max(output.extent.1, 64), ((output.extent.0 + 52)*output.extent.2), 0, output.min.2, output.extent.2, 1, 0, 0, 28, vert.stride.3, 0), (uint64)0)
  register_destructor("halide_device_free_as_destructor", vert.buffer)
  produce vert {
    consume vert_log {
      consume slice_for_radius {
        let halide_device_malloc_result$1 = halide_device_malloc(vert.buffer, halide_cuda_device_interface())
        assert((halide_device_malloc_result$1 == 0), halide_device_malloc_result$1)
        let halide_device_malloc_result$3 = halide_device_malloc(vert_log.buffer, halide_cuda_device_interface())
        assert((halide_device_malloc_result$3 == 0), halide_device_malloc_result$3)
        let halide_device_malloc_result$5 = halide_device_malloc(slice_for_radius.buffer, halide_cuda_device_interface())
        assert((halide_device_malloc_result$5 == 0), halide_device_malloc_result$5)
        let t1380 = (64 - min(output.extent.1, 64))
        let t1377 = (2 - min(output.extent.2, 2))
        let t1912 = (output.extent.2 + 2)
        let t1913 = (output.min.1 - vert_log.y.min_realized.s)
        let t1909 = (t1912/3)
        let t1901 = ((output.extent.1 + 63)/64)
        let t1902 = ((output.extent.0 + 53)/2)
        let t1907 = ((output.extent.0 + 52)*output.extent.2)
        let t1908 = ((output.extent.0*7) + 364)
        let t1904 = ((t1912 % 3) + 1)
        let t1903 = (output.extent.1 + -64)
        gpu_block<CUDA> (vert.s0.y.y.__block_id_y, 0, t1901) {
          gpu_block<CUDA> (vert.s0.x.x.__block_id_x, 0, t1902) {
            gpu_thread<CUDA> (.__thread_id_z, 0, 4) {
              gpu_thread<CUDA> (.__thread_id_y, 0, 64) {
                gpu_thread<CUDA> (.__thread_id_x, 0, 3) {
                  let vert.s0.y.yi.base.s = min((vert.s0.y.y.__block_id_y*64), t1903)
                  if ((.__thread_id_x < t1904)) {
                    let vert.s0.x.xi.base.s = min((vert.s0.x.x.__block_id_x*2), (output.extent.0 + 50))
                    let t1427 = ((.__thread_id_z*7) + (t1913 + vert.s0.y.yi.base.s))
                    let t1428 = (((t1380 + vert.s0.y.yi.base.s) + .__thread_id_y)*t1907)
                    let t1445.s = ((t1913 + vert.s0.y.yi.base.s) - (.__thread_id_z*7))
                    let t1396 = (((.__thread_id_y + t1445.s) + 114)*t1908)
                    let t1401 = (((.__thread_id_y + t1445.s) + 113)*t1908)
                    let t1406 = (((.__thread_id_y + t1445.s) + 112)*t1908)
                    let t1411 = (((.__thread_id_y + t1445.s) + 111)*t1908)
                    let t1416 = (((.__thread_id_y + t1445.s) + 110)*t1908)
                    let t1421 = (((.__thread_id_y + t1445.s) + 109)*t1908)
                    let t1394.s = (((vert.s0.x.xi.base.s + 1)*output.extent.2) + ((.__thread_id_z*vert.stride.3)*7))
                    let t1424.s = (((vert.s0.x.xi.base.s + 1)*output.extent.2) + (((.__thread_id_z*7) + 6)*vert.stride.3))
                    let t1419.s = (((vert.s0.x.xi.base.s + 1)*output.extent.2) + (((.__thread_id_z*7) + 5)*vert.stride.3))
                    let t1414.s = (((vert.s0.x.xi.base.s + 1)*output.extent.2) + (((.__thread_id_z*7) + 4)*vert.stride.3))
                    let t1409.s = (((vert.s0.x.xi.base.s + 1)*output.extent.2) + (((.__thread_id_z*7) + 3)*vert.stride.3))
                    let t1404.s = (((vert.s0.x.xi.base.s + 1)*output.extent.2) + (((.__thread_id_z*7) + 2)*vert.stride.3))
                    let t1399.s = (((vert.s0.x.xi.base.s + 1)*output.extent.2) + (((.__thread_id_z*7) + 1)*vert.stride.3))
                    let t1391.s = ((output.extent.2*vert.s0.x.xi.base.s) + ((.__thread_id_z*vert.stride.3)*7))
                    let t1423.s = ((output.extent.2*vert.s0.x.xi.base.s) + (((.__thread_id_z*7) + 6)*vert.stride.3))
                    let t1418.s = ((output.extent.2*vert.s0.x.xi.base.s) + (((.__thread_id_z*7) + 5)*vert.stride.3))
                    let t1413.s = ((output.extent.2*vert.s0.x.xi.base.s) + (((.__thread_id_z*7) + 4)*vert.stride.3))
                    let t1408.s = ((output.extent.2*vert.s0.x.xi.base.s) + (((.__thread_id_z*7) + 3)*vert.stride.3))
                    let t1403.s = ((output.extent.2*vert.s0.x.xi.base.s) + (((.__thread_id_z*7) + 2)*vert.stride.3))
                    let t1398.s = ((output.extent.2*vert.s0.x.xi.base.s) + (((.__thread_id_z*7) + 1)*vert.stride.3))
                    let t1947 = (.__thread_id_z*7)
                    let t1948 = (vert.s0.x.xi.base.s*7)
                    let t1949 = ((output.extent.0 + vert.s0.x.xi.base.s)*7)
                    let t1921 = (t1949 + 371)
                    let t1918 = (t1949 + 364)
                    let t1915 = ((t1913 + vert.s0.y.yi.base.s) + 115)
                    let t1946 = ((t1424.s + t1428) + .__thread_id_x)
                    let t1945 = ((t1423.s + t1428) + .__thread_id_x)
                    let t1942 = ((t1419.s + t1428) + .__thread_id_x)
                    let t1941 = ((t1418.s + t1428) + .__thread_id_x)
                    let t1938 = ((t1414.s + t1428) + .__thread_id_x)
                    let t1937 = ((t1413.s + t1428) + .__thread_id_x)
                    let t1934 = ((t1409.s + t1428) + .__thread_id_x)
                    let t1933 = ((t1408.s + t1428) + .__thread_id_x)
                    let t1930 = ((t1404.s + t1428) + .__thread_id_x)
                    let t1929 = ((t1403.s + t1428) + .__thread_id_x)
                    let t1926 = ((t1399.s + t1428) + .__thread_id_x)
                    let t1925 = ((t1398.s + t1428) + .__thread_id_x)
                    let t1922 = ((t1394.s + t1428) + .__thread_id_x)
                    let t1919 = ((t1391.s + t1428) + .__thread_id_x)
                    let t1944 = (t1427 + 121)
                    let t1940 = (t1427 + 120)
                    let t1936 = (t1427 + 119)
                    let t1932 = (t1427 + 118)
                    let t1928 = (t1427 + 117)
                    let t1924 = (t1427 + 116)
                    let t1916 = (.__thread_id_x + t1377)
                    for (vert.s0.c.c_serial_outer, 0, t1909) {
                      vert[((vert.s0.c.c_serial_outer*3) + t1919)] = (let t1713.s = slice_for_radius[t1947] in max(vert_log[((((vert.s0.c.c_serial_outer*3) + t1916)*vert_log.stride.2) + ((((t1915 - t1947) + .__thread_id_y)*t1908) + (max(min(t1713.s, 6), 0) + t1948)))], vert_log[((((vert.s0.c.c_serial_outer*3) + t1916)*vert_log.stride.2) + (((((t1915 + t1947) - max(min(shift_left(1, max(min(t1713.s, 6), 0)), 52), 0)) + .__thread_id_y)*t1908) + (max(min(t1713.s, 6), 0) + t1918)))]))
                      vert[((vert.s0.c.c_serial_outer*3) + t1922)] = (let t1716.s = slice_for_radius[t1947] in max(vert_log[(((((vert.s0.c.c_serial_outer*3) + t1916)*vert_log.stride.2) + ((((t1915 - t1947) + .__thread_id_y)*t1908) + (max(min(t1716.s, 6), 0) + t1948))) + 7)], vert_log[((((vert.s0.c.c_serial_outer*3) + t1916)*vert_log.stride.2) + (((((t1915 + t1947) - max(min(shift_left(1, max(min(t1716.s, 6), 0)), 52), 0)) + .__thread_id_y)*t1908) + (max(min(t1716.s, 6), 0) + t1921)))]))
                      vert[((vert.s0.c.c_serial_outer*3) + t1925)] = (let t1719.s = slice_for_radius[(t1947 + 1)] in max(vert_log[((((vert.s0.c.c_serial_outer*3) + t1916)*vert_log.stride.2) + ((max(min(t1719.s, 6), 0) + t1948) + t1396))], vert_log[((((vert.s0.c.c_serial_outer*3) + t1916)*vert_log.stride.2) + ((((t1924 - max(min(shift_left(1, max(min(t1719.s, 6), 0)), 52), 0)) + .__thread_id_y)*t1908) + (max(min(t1719.s, 6), 0) + t1918)))]))
                      vert[((vert.s0.c.c_serial_outer*3) + t1926)] = (let t1721.s = slice_for_radius[(t1947 + 1)] in max(vert_log[(((((vert.s0.c.c_serial_outer*3) + t1916)*vert_log.stride.2) + ((max(min(t1721.s, 6), 0) + t1948) + t1396)) + 7)], vert_log[((((vert.s0.c.c_serial_outer*3) + t1916)*vert_log.stride.2) + ((((t1924 - max(min(shift_left(1, max(min(t1721.s, 6), 0)), 52), 0)) + .__thread_id_y)*t1908) + (max(min(t1721.s, 6), 0) + t1921)))]))
                      vert[((vert.s0.c.c_serial_outer*3) + t1929)] = (let t1723.s = slice_for_radius[(t1947 + 2)] in max(vert_log[((((vert.s0.c.c_serial_outer*3) + t1916)*vert_log.stride.2) + ((max(min(t1723.s, 6), 0) + t1948) + t1401))], vert_log[((((vert.s0.c.c_serial_outer*3) + t1916)*vert_log.stride.2) + ((((t1928 - max(min(shift_left(1, max(min(t1723.s, 6), 0)), 52), 0)) + .__thread_id_y)*t1908) + (max(min(t1723.s, 6), 0) + t1918)))]))
                      vert[((vert.s0.c.c_serial_outer*3) + t1930)] = (let t1725.s = slice_for_radius[(t1947 + 2)] in max(vert_log[(((((vert.s0.c.c_serial_outer*3) + t1916)*vert_log.stride.2) + ((max(min(t1725.s, 6), 0) + t1948) + t1401)) + 7)], vert_log[((((vert.s0.c.c_serial_outer*3) + t1916)*vert_log.stride.2) + ((((t1928 - max(min(shift_left(1, max(min(t1725.s, 6), 0)), 52), 0)) + .__thread_id_y)*t1908) + (max(min(t1725.s, 6), 0) + t1921)))]))
                      vert[((vert.s0.c.c_serial_outer*3) + t1933)] = (let t1727.s = slice_for_radius[(t1947 + 3)] in max(vert_log[((((vert.s0.c.c_serial_outer*3) + t1916)*vert_log.stride.2) + ((max(min(t1727.s, 6), 0) + t1948) + t1406))], vert_log[((((vert.s0.c.c_serial_outer*3) + t1916)*vert_log.stride.2) + ((((t1932 - max(min(shift_left(1, max(min(t1727.s, 6), 0)), 52), 0)) + .__thread_id_y)*t1908) + (max(min(t1727.s, 6), 0) + t1918)))]))
                      vert[((vert.s0.c.c_serial_outer*3) + t1934)] = (let t1729.s = slice_for_radius[(t1947 + 3)] in max(vert_log[(((((vert.s0.c.c_serial_outer*3) + t1916)*vert_log.stride.2) + ((max(min(t1729.s, 6), 0) + t1948) + t1406)) + 7)], vert_log[((((vert.s0.c.c_serial_outer*3) + t1916)*vert_log.stride.2) + ((((t1932 - max(min(shift_left(1, max(min(t1729.s, 6), 0)), 52), 0)) + .__thread_id_y)*t1908) + (max(min(t1729.s, 6), 0) + t1921)))]))
                      vert[((vert.s0.c.c_serial_outer*3) + t1937)] = (let t1731.s = slice_for_radius[(t1947 + 4)] in max(vert_log[((((vert.s0.c.c_serial_outer*3) + t1916)*vert_log.stride.2) + ((max(min(t1731.s, 6), 0) + t1948) + t1411))], vert_log[((((vert.s0.c.c_serial_outer*3) + t1916)*vert_log.stride.2) + ((((t1936 - max(min(shift_left(1, max(min(t1731.s, 6), 0)), 52), 0)) + .__thread_id_y)*t1908) + (max(min(t1731.s, 6), 0) + t1918)))]))
                      vert[((vert.s0.c.c_serial_outer*3) + t1938)] = (let t1733.s = slice_for_radius[(t1947 + 4)] in max(vert_log[(((((vert.s0.c.c_serial_outer*3) + t1916)*vert_log.stride.2) + ((max(min(t1733.s, 6), 0) + t1948) + t1411)) + 7)], vert_log[((((vert.s0.c.c_serial_outer*3) + t1916)*vert_log.stride.2) + ((((t1936 - max(min(shift_left(1, max(min(t1733.s, 6), 0)), 52), 0)) + .__thread_id_y)*t1908) + (max(min(t1733.s, 6), 0) + t1921)))]))
                      vert[((vert.s0.c.c_serial_outer*3) + t1941)] = (let t1735.s = slice_for_radius[(t1947 + 5)] in max(vert_log[((((vert.s0.c.c_serial_outer*3) + t1916)*vert_log.stride.2) + ((max(min(t1735.s, 6), 0) + t1948) + t1416))], vert_log[((((vert.s0.c.c_serial_outer*3) + t1916)*vert_log.stride.2) + ((((t1940 - max(min(shift_left(1, max(min(t1735.s, 6), 0)), 52), 0)) + .__thread_id_y)*t1908) + (max(min(t1735.s, 6), 0) + t1918)))]))
                      vert[((vert.s0.c.c_serial_outer*3) + t1942)] = (let t1737.s = slice_for_radius[(t1947 + 5)] in max(vert_log[(((((vert.s0.c.c_serial_outer*3) + t1916)*vert_log.stride.2) + ((max(min(t1737.s, 6), 0) + t1948) + t1416)) + 7)], vert_log[((((vert.s0.c.c_serial_outer*3) + t1916)*vert_log.stride.2) + ((((t1940 - max(min(shift_left(1, max(min(t1737.s, 6), 0)), 52), 0)) + .__thread_id_y)*t1908) + (max(min(t1737.s, 6), 0) + t1921)))]))
                      vert[((vert.s0.c.c_serial_outer*3) + t1945)] = (let t1739.s = slice_for_radius[(t1947 + 6)] in max(vert_log[((((vert.s0.c.c_serial_outer*3) + t1916)*vert_log.stride.2) + ((max(min(t1739.s, 6), 0) + t1948) + t1421))], vert_log[((((vert.s0.c.c_serial_outer*3) + t1916)*vert_log.stride.2) + ((((t1944 - max(min(shift_left(1, max(min(t1739.s, 6), 0)), 52), 0)) + .__thread_id_y)*t1908) + (max(min(t1739.s, 6), 0) + t1918)))]))
                      vert[((vert.s0.c.c_serial_outer*3) + t1946)] = (let t1741.s = slice_for_radius[(t1947 + 6)] in max(vert_log[(((((vert.s0.c.c_serial_outer*3) + t1916)*vert_log.stride.2) + ((max(min(t1741.s, 6), 0) + t1948) + t1421)) + 7)], vert_log[((((vert.s0.c.c_serial_outer*3) + t1916)*vert_log.stride.2) + ((((t1944 - max(min(shift_left(1, max(min(t1741.s, 6), 0)), 52), 0)) + .__thread_id_y)*t1908) + (max(min(t1741.s, 6), 0) + t1921)))]))
                    }
                  } else {
                    let vert.s0.x.xi.base.s = min((vert.s0.x.x.__block_id_x*2), (output.extent.0 + 50))
                    let t1488 = ((.__thread_id_z*7) + (t1913 + vert.s0.y.yi.base.s))
                    let t1489 = (((t1380 + vert.s0.y.yi.base.s) + .__thread_id_y)*t1907)
                    let t1506.s = ((t1913 + vert.s0.y.yi.base.s) - (.__thread_id_z*7))
                    let t1457 = (((.__thread_id_y + t1506.s) + 114)*t1908)
                    let t1462 = (((.__thread_id_y + t1506.s) + 113)*t1908)
                    let t1467 = (((.__thread_id_y + t1506.s) + 112)*t1908)
                    let t1472 = (((.__thread_id_y + t1506.s) + 111)*t1908)
                    let t1477 = (((.__thread_id_y + t1506.s) + 110)*t1908)
                    let t1482 = (((.__thread_id_y + t1506.s) + 109)*t1908)
                    let t1455.s = (((vert.s0.x.xi.base.s + 1)*output.extent.2) + ((.__thread_id_z*vert.stride.3)*7))
                    let t1485.s = (((vert.s0.x.xi.base.s + 1)*output.extent.2) + (((.__thread_id_z*7) + 6)*vert.stride.3))
                    let t1480.s = (((vert.s0.x.xi.base.s + 1)*output.extent.2) + (((.__thread_id_z*7) + 5)*vert.stride.3))
                    let t1475.s = (((vert.s0.x.xi.base.s + 1)*output.extent.2) + (((.__thread_id_z*7) + 4)*vert.stride.3))
                    let t1470.s = (((vert.s0.x.xi.base.s + 1)*output.extent.2) + (((.__thread_id_z*7) + 3)*vert.stride.3))
                    let t1465.s = (((vert.s0.x.xi.base.s + 1)*output.extent.2) + (((.__thread_id_z*7) + 2)*vert.stride.3))
                    let t1460.s = (((vert.s0.x.xi.base.s + 1)*output.extent.2) + (((.__thread_id_z*7) + 1)*vert.stride.3))
                    let t1452.s = ((output.extent.2*vert.s0.x.xi.base.s) + ((.__thread_id_z*vert.stride.3)*7))
                    let t1484.s = ((output.extent.2*vert.s0.x.xi.base.s) + (((.__thread_id_z*7) + 6)*vert.stride.3))
                    let t1479.s = ((output.extent.2*vert.s0.x.xi.base.s) + (((.__thread_id_z*7) + 5)*vert.stride.3))
                    let t1474.s = ((output.extent.2*vert.s0.x.xi.base.s) + (((.__thread_id_z*7) + 4)*vert.stride.3))
                    let t1469.s = ((output.extent.2*vert.s0.x.xi.base.s) + (((.__thread_id_z*7) + 3)*vert.stride.3))
                    let t1464.s = ((output.extent.2*vert.s0.x.xi.base.s) + (((.__thread_id_z*7) + 2)*vert.stride.3))
                    let t1459.s = ((output.extent.2*vert.s0.x.xi.base.s) + (((.__thread_id_z*7) + 1)*vert.stride.3))
                    let t1984 = (.__thread_id_z*7)
                    let t1985 = (vert.s0.x.xi.base.s*7)
                    let t1986 = ((output.extent.0 + vert.s0.x.xi.base.s)*7)
                    let t1950 = ((t1912 - .__thread_id_x)/3)
                    let t1958 = (t1986 + 371)
                    let t1955 = (t1986 + 364)
                    let t1952 = ((t1913 + vert.s0.y.yi.base.s) + 115)
                    let t1983 = ((t1485.s + t1489) + .__thread_id_x)
                    let t1982 = ((t1484.s + t1489) + .__thread_id_x)
                    let t1979 = ((t1480.s + t1489) + .__thread_id_x)
                    let t1978 = ((t1479.s + t1489) + .__thread_id_x)
                    let t1975 = ((t1475.s + t1489) + .__thread_id_x)
                    let t1974 = ((t1474.s + t1489) + .__thread_id_x)
                    let t1971 = ((t1470.s + t1489) + .__thread_id_x)
                    let t1970 = ((t1469.s + t1489) + .__thread_id_x)
                    let t1967 = ((t1465.s + t1489) + .__thread_id_x)
                    let t1966 = ((t1464.s + t1489) + .__thread_id_x)
                    let t1963 = ((t1460.s + t1489) + .__thread_id_x)
                    let t1962 = ((t1459.s + t1489) + .__thread_id_x)
                    let t1959 = ((t1455.s + t1489) + .__thread_id_x)
                    let t1956 = ((t1452.s + t1489) + .__thread_id_x)
                    let t1981 = (t1488 + 121)
                    let t1977 = (t1488 + 120)
                    let t1973 = (t1488 + 119)
                    let t1969 = (t1488 + 118)
                    let t1965 = (t1488 + 117)
                    let t1961 = (t1488 + 116)
                    let t1953 = (.__thread_id_x + t1377)
                    for (vert.s0.c.c_serial_outer, 0, t1950) {
                      vert[((vert.s0.c.c_serial_outer*3) + t1956)] = (let t1743.s = slice_for_radius[t1984] in max(vert_log[((((vert.s0.c.c_serial_outer*3) + t1953)*vert_log.stride.2) + ((((t1952 - t1984) + .__thread_id_y)*t1908) + (max(min(t1743.s, 6), 0) + t1985)))], vert_log[((((vert.s0.c.c_serial_outer*3) + t1953)*vert_log.stride.2) + (((((t1952 + t1984) - max(min(shift_left(1, max(min(t1743.s, 6), 0)), 52), 0)) + .__thread_id_y)*t1908) + (max(min(t1743.s, 6), 0) + t1955)))]))
                      vert[((vert.s0.c.c_serial_outer*3) + t1959)] = (let t1746.s = slice_for_radius[t1984] in max(vert_log[(((((vert.s0.c.c_serial_outer*3) + t1953)*vert_log.stride.2) + ((((t1952 - t1984) + .__thread_id_y)*t1908) + (max(min(t1746.s, 6), 0) + t1985))) + 7)], vert_log[((((vert.s0.c.c_serial_outer*3) + t1953)*vert_log.stride.2) + (((((t1952 + t1984) - max(min(shift_left(1, max(min(t1746.s, 6), 0)), 52), 0)) + .__thread_id_y)*t1908) + (max(min(t1746.s, 6), 0) + t1958)))]))
                      vert[((vert.s0.c.c_serial_outer*3) + t1962)] = (let t1749.s = slice_for_radius[(t1984 + 1)] in max(vert_log[((((vert.s0.c.c_serial_outer*3) + t1953)*vert_log.stride.2) + ((max(min(t1749.s, 6), 0) + t1985) + t1457))], vert_log[((((vert.s0.c.c_serial_outer*3) + t1953)*vert_log.stride.2) + ((((t1961 - max(min(shift_left(1, max(min(t1749.s, 6), 0)), 52), 0)) + .__thread_id_y)*t1908) + (max(min(t1749.s, 6), 0) + t1955)))]))
                      vert[((vert.s0.c.c_serial_outer*3) + t1963)] = (let t1751.s = slice_for_radius[(t1984 + 1)] in max(vert_log[(((((vert.s0.c.c_serial_outer*3) + t1953)*vert_log.stride.2) + ((max(min(t1751.s, 6), 0) + t1985) + t1457)) + 7)], vert_log[((((vert.s0.c.c_serial_outer*3) + t1953)*vert_log.stride.2) + ((((t1961 - max(min(shift_left(1, max(min(t1751.s, 6), 0)), 52), 0)) + .__thread_id_y)*t1908) + (max(min(t1751.s, 6), 0) + t1958)))]))
                      vert[((vert.s0.c.c_serial_outer*3) + t1966)] = (let t1753.s = slice_for_radius[(t1984 + 2)] in max(vert_log[((((vert.s0.c.c_serial_outer*3) + t1953)*vert_log.stride.2) + ((max(min(t1753.s, 6), 0) + t1985) + t1462))], vert_log[((((vert.s0.c.c_serial_outer*3) + t1953)*vert_log.stride.2) + ((((t1965 - max(min(shift_left(1, max(min(t1753.s, 6), 0)), 52), 0)) + .__thread_id_y)*t1908) + (max(min(t1753.s, 6), 0) + t1955)))]))
                      vert[((vert.s0.c.c_serial_outer*3) + t1967)] = (let t1755.s = slice_for_radius[(t1984 + 2)] in max(vert_log[(((((vert.s0.c.c_serial_outer*3) + t1953)*vert_log.stride.2) + ((max(min(t1755.s, 6), 0) + t1985) + t1462)) + 7)], vert_log[((((vert.s0.c.c_serial_outer*3) + t1953)*vert_log.stride.2) + ((((t1965 - max(min(shift_left(1, max(min(t1755.s, 6), 0)), 52), 0)) + .__thread_id_y)*t1908) + (max(min(t1755.s, 6), 0) + t1958)))]))
                      vert[((vert.s0.c.c_serial_outer*3) + t1970)] = (let t1757.s = slice_for_radius[(t1984 + 3)] in max(vert_log[((((vert.s0.c.c_serial_outer*3) + t1953)*vert_log.stride.2) + ((max(min(t1757.s, 6), 0) + t1985) + t1467))], vert_log[((((vert.s0.c.c_serial_outer*3) + t1953)*vert_log.stride.2) + ((((t1969 - max(min(shift_left(1, max(min(t1757.s, 6), 0)), 52), 0)) + .__thread_id_y)*t1908) + (max(min(t1757.s, 6), 0) + t1955)))]))
                      vert[((vert.s0.c.c_serial_outer*3) + t1971)] = (let t1759.s = slice_for_radius[(t1984 + 3)] in max(vert_log[(((((vert.s0.c.c_serial_outer*3) + t1953)*vert_log.stride.2) + ((max(min(t1759.s, 6), 0) + t1985) + t1467)) + 7)], vert_log[((((vert.s0.c.c_serial_outer*3) + t1953)*vert_log.stride.2) + ((((t1969 - max(min(shift_left(1, max(min(t1759.s, 6), 0)), 52), 0)) + .__thread_id_y)*t1908) + (max(min(t1759.s, 6), 0) + t1958)))]))
                      vert[((vert.s0.c.c_serial_outer*3) + t1974)] = (let t1761.s = slice_for_radius[(t1984 + 4)] in max(vert_log[((((vert.s0.c.c_serial_outer*3) + t1953)*vert_log.stride.2) + ((max(min(t1761.s, 6), 0) + t1985) + t1472))], vert_log[((((vert.s0.c.c_serial_outer*3) + t1953)*vert_log.stride.2) + ((((t1973 - max(min(shift_left(1, max(min(t1761.s, 6), 0)), 52), 0)) + .__thread_id_y)*t1908) + (max(min(t1761.s, 6), 0) + t1955)))]))
                      vert[((vert.s0.c.c_serial_outer*3) + t1975)] = (let t1763.s = slice_for_radius[(t1984 + 4)] in max(vert_log[(((((vert.s0.c.c_serial_outer*3) + t1953)*vert_log.stride.2) + ((max(min(t1763.s, 6), 0) + t1985) + t1472)) + 7)], vert_log[((((vert.s0.c.c_serial_outer*3) + t1953)*vert_log.stride.2) + ((((t1973 - max(min(shift_left(1, max(min(t1763.s, 6), 0)), 52), 0)) + .__thread_id_y)*t1908) + (max(min(t1763.s, 6), 0) + t1958)))]))
                      vert[((vert.s0.c.c_serial_outer*3) + t1978)] = (let t1765.s = slice_for_radius[(t1984 + 5)] in max(vert_log[((((vert.s0.c.c_serial_outer*3) + t1953)*vert_log.stride.2) + ((max(min(t1765.s, 6), 0) + t1985) + t1477))], vert_log[((((vert.s0.c.c_serial_outer*3) + t1953)*vert_log.stride.2) + ((((t1977 - max(min(shift_left(1, max(min(t1765.s, 6), 0)), 52), 0)) + .__thread_id_y)*t1908) + (max(min(t1765.s, 6), 0) + t1955)))]))
                      vert[((vert.s0.c.c_serial_outer*3) + t1979)] = (let t1767.s = slice_for_radius[(t1984 + 5)] in max(vert_log[(((((vert.s0.c.c_serial_outer*3) + t1953)*vert_log.stride.2) + ((max(min(t1767.s, 6), 0) + t1985) + t1477)) + 7)], vert_log[((((vert.s0.c.c_serial_outer*3) + t1953)*vert_log.stride.2) + ((((t1977 - max(min(shift_left(1, max(min(t1767.s, 6), 0)), 52), 0)) + .__thread_id_y)*t1908) + (max(min(t1767.s, 6), 0) + t1958)))]))
                      vert[((vert.s0.c.c_serial_outer*3) + t1982)] = (let t1769.s = slice_for_radius[(t1984 + 6)] in max(vert_log[((((vert.s0.c.c_serial_outer*3) + t1953)*vert_log.stride.2) + ((max(min(t1769.s, 6), 0) + t1985) + t1482))], vert_log[((((vert.s0.c.c_serial_outer*3) + t1953)*vert_log.stride.2) + ((((t1981 - max(min(shift_left(1, max(min(t1769.s, 6), 0)), 52), 0)) + .__thread_id_y)*t1908) + (max(min(t1769.s, 6), 0) + t1955)))]))
                      vert[((vert.s0.c.c_serial_outer*3) + t1983)] = (let t1771.s = slice_for_radius[(t1984 + 6)] in max(vert_log[(((((vert.s0.c.c_serial_outer*3) + t1953)*vert_log.stride.2) + ((max(min(t1771.s, 6), 0) + t1985) + t1482)) + 7)], vert_log[((((vert.s0.c.c_serial_outer*3) + t1953)*vert_log.stride.2) + ((((t1981 - max(min(shift_left(1, max(min(t1771.s, 6), 0)), 52), 0)) + .__thread_id_y)*t1908) + (max(min(t1771.s, 6), 0) + t1958)))]))
                    }
                  }
                }
              }
            }
          }
        }
        let halide_device_free_result$3 = halide_device_free(slice_for_radius.buffer)
        assert((halide_device_free_result$3 == 0), halide_device_free_result$3)
        free slice_for_radius
        let halide_device_free_result$2 = halide_device_free(vert_log.buffer)
        assert((halide_device_free_result$2 == 0), halide_device_free_result$2)
        free vert_log
        _halide_buffer_set_device_dirty(vert.buffer, (uint1)1)
      }
    }
  }
  allocate maximum[float32 * output.extent.0 * max(output.extent.1, 512) * max(output.extent.2, 2)] if (uint1)0
  let maximum.buffer = _halide_buffer_init(alloca(size_of_halide_buffer_t()), make_struct((halide_dimension_t *), output.min.0, output.extent.0, 1, 0, ((min(output.extent.1, 512) + output.min.1) + -512), max(output.extent.1, 512), output.extent.0, 0, ((min(output.extent.2, 2) + output.min.2) + -2), max(output.extent.2, 2), (max(output.extent.1, 512)*output.extent.0), 0), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 2, 32, 3, make_struct((halide_dimension_t *), output.min.0, output.extent.0, 1, 0, ((min(output.extent.1, 512) + output.min.1) + -512), max(output.extent.1, 512), output.extent.0, 0, ((min(output.extent.2, 2) + output.min.2) + -2), max(output.extent.2, 2), (max(output.extent.1, 512)*output.extent.0), 0), (uint64)0)
  register_destructor("halide_device_free_as_destructor", maximum.buffer)
  produce maximum {
    let halide_device_malloc_result = halide_device_malloc(maximum.buffer, halide_cuda_device_interface())
    assert((halide_device_malloc_result == 0), halide_device_malloc_result)
    let t1515 = (512 - min(output.extent.1, 512))
    let t1514 = (2 - min(output.extent.2, 2))
    let t1987 = ((output.extent.2 + 1)/2)
    let t1988 = ((output.extent.1 + 511)/512)
    let t1989 = ((output.extent.0 + 31)/32)
    let t1993 = (max(output.extent.1, 512)*output.extent.0)
    let t1990 = (output.extent.2 + -2)
    let t1991 = (output.extent.1 + -512)
    gpu_block<CUDA> (maximum.s0.c.c.__block_id_z, 0, t1987) {
      gpu_block<CUDA> (maximum.s0.y.y.__block_id_y, 0, t1988) {
        gpu_block<CUDA> (maximum.s0.x.x.__block_id_x, 0, t1989) {
          gpu_thread<CUDA> (.__thread_id_y, 0, 64) {
            gpu_thread<CUDA> (.__thread_id_x, 0, 16) {
              let maximum.s0.c.ci.base.s = min((maximum.s0.c.c.__block_id_z*2), t1990)
              let maximum.s0.y.yi.base.s = min((maximum.s0.y.y.__block_id_y*512), t1991)
              let maximum.s0.x.xi.base.s = min((maximum.s0.x.x.__block_id_x*32), (output.extent.0 + -32))
              let t1518 = ((.__thread_id_y*8) + (maximum.s0.y.yi.base.s + t1515))
              let t1994 = ((.__thread_id_x*2) + maximum.s0.x.xi.base.s)
              let t1995 = (maximum.s0.c.ci.base.s + t1514)
              for (maximum.s0.c.ci, 0, 2) {
                let t1519 = (((maximum.s0.c.ci + t1995)*t1993) + t1994)
                for (maximum.s0.y.yi.yii, 0, 8) {
                  let t1996 = (((maximum.s0.y.yi.yii + t1518)*output.extent.0) + t1519)
                  for (maximum.s0.x.xi.xii, 0, 2) {
                    maximum[(maximum.s0.x.xi.xii + t1996)] = -inff
                  }
                }
              }
            }
          }
        }
      }
    }
    _halide_buffer_set_device_dirty(maximum.buffer, (uint1)1)
    consume vert {
      consume filter_height {
        let t1529 = (512 - min(output.extent.1, 512))
        let t1531 = (64 - min(output.extent.1, 64))
        let t1528 = (2 - min(output.extent.2, 2))
        let t1997 = ((output.extent.2 + 1)/2)
        let t1998 = ((output.extent.1 + 511)/512)
        let t1999 = ((output.extent.0 + 31)/32)
        let t2000 = (output.extent.2/2)
        let t2001 = (output.extent.1/512)
        let t2002 = (output.extent.0/32)
        let t2003 = (max(output.extent.1, 512)*output.extent.0)
        let t2004 = ((output.extent.0 + 52)*output.extent.2)
        gpu_block<CUDA> (maximum.s1.c.c.__block_id_z, 0, t1997) {
          gpu_block<CUDA> (maximum.s1.y.y.__block_id_y, 0, t1998) {
            gpu_block<CUDA> (maximum.s1.x.x.__block_id_x, 0, t1999) {
              gpu_thread<CUDA> (.__thread_id_y, 0, 64) {
                gpu_thread<CUDA> (.__thread_id_x, 0, 16) {
                  if ((maximum.s1.c.c.__block_id_z < t2000)) {
                    if ((maximum.s1.y.y.__block_id_y < t2001)) {
                      if ((maximum.s1.x.x.__block_id_x < t2002)) {
                        let t2011 = (maximum.s1.c.c.__block_id_z*2)
                        let t2012 = (((maximum.s1.x.x.__block_id_x*16) + .__thread_id_x)*2)
                        let t2013 = (((maximum.s1.y.y.__block_id_y*64) + .__thread_id_y)*8)
                        let t2007 = (t1531 + t2013)
                        let t2009 = (t1529 + t2013)
                        let t2005 = (t1528 + t2011)
                        for (maximum.s1.c.ci, 0, 2) {
                          let t1537 = ((maximum.s1.c.ci + t2005)*t2003)
                          let t2016 = (t2012 + 26)
                          let t2015 = (t1537 + t2012)
                          let t2014 = (maximum.s1.c.ci + t2011)
                          for (maximum.s1.y.yi.yii, 0, 8) {
                            let t1540 = (((maximum.s1.y.yi.yii + t2007)*t2004) + t2014)
                            let t2017 = (((maximum.s1.y.yi.yii + t2009)*output.extent.0) + t2015)
                            for (maximum.s1.x.xi.xii, 0, 2) {
                              let t1541 = (maximum.s1.x.xi.xii + t2017)
                              let t2018 = (maximum.s1.x.xi.xii + t2016)
                              for (maximum.s1.r22$x, -26, 53) {
                                maximum[t1541] = max(maximum[t1541], vert[((max(min(filter_height[(maximum.s1.r22$x + 26)], 27), 0)*vert.stride.3) + (((maximum.s1.r22$x + t2018)*output.extent.2) + t1540))])
                              }
                            }
                          }
                        }
                      } else {
                        let t2026 = (maximum.s1.c.c.__block_id_z*2)
                        let t2027 = (((maximum.s1.x.x.__block_id_x*16) + .__thread_id_x)*2)
                        let t2028 = (((maximum.s1.y.y.__block_id_y*64) + .__thread_id_y)*8)
                        let t2022 = (t1531 + t2028)
                        let t2024 = (t1529 + t2028)
                        let t2020 = (t1528 + t2026)
                        for (maximum.s1.c.ci, 0, 2) {
                          let t1551 = ((maximum.s1.c.ci + t2020)*t2003)
                          let t2030 = max(min((output.extent.0 - t2027), 2), 0)
                          let t2032 = (t2027 + 26)
                          let t2031 = (t1551 + t2027)
                          let t2029 = (maximum.s1.c.ci + t2026)
                          for (maximum.s1.y.yi.yii, 0, 8) {
                            let t1554 = (((maximum.s1.y.yi.yii + t2022)*t2004) + t2029)
                            let t2033 = (((maximum.s1.y.yi.yii + t2024)*output.extent.0) + t2031)
                            for (maximum.s1.x.xi.xii, 0, t2030) {
                              let t1555 = (maximum.s1.x.xi.xii + t2033)
                              let t2034 = (maximum.s1.x.xi.xii + t2032)
                              for (maximum.s1.r22$x, -26, 53) {
                                maximum[t1555] = max(maximum[t1555], vert[((max(min(filter_height[(maximum.s1.r22$x + 26)], 27), 0)*vert.stride.3) + (((maximum.s1.r22$x + t2034)*output.extent.2) + t1554))])
                              }
                            }
                          }
                        }
                      }
                    } else {
                      let t1557 = (output.extent.1 - (((maximum.s1.y.y.__block_id_y*64) + .__thread_id_y)*8))
                      let t2043 = (maximum.s1.c.c.__block_id_z*2)
                      let t2044 = (((maximum.s1.x.x.__block_id_x*16) + .__thread_id_x)*2)
                      let t2045 = (((maximum.s1.y.y.__block_id_y*64) + .__thread_id_y)*8)
                      let t2037 = max(min(t1557, 8), 0)
                      let t2039 = (t1531 + t2045)
                      let t2041 = (t1529 + t2045)
                      let t2036 = (t1528 + t2043)
                      for (maximum.s1.c.ci, 0, 2) {
                        let t1568 = ((maximum.s1.c.ci + t2036)*t2003)
                        let t2047 = max(min((output.extent.0 - t2044), 2), 0)
                        let t2049 = (t2044 + 26)
                        let t2048 = (t1568 + t2044)
                        let t2046 = (maximum.s1.c.ci + t2043)
                        for (maximum.s1.y.yi.yii, 0, t2037) {
                          let t1571 = (((maximum.s1.y.yi.yii + t2039)*t2004) + t2046)
                          let t2050 = (((maximum.s1.y.yi.yii + t2041)*output.extent.0) + t2048)
                          for (maximum.s1.x.xi.xii, 0, t2047) {
                            let t1572 = (maximum.s1.x.xi.xii + t2050)
                            let t2051 = (maximum.s1.x.xi.xii + t2049)
                            for (maximum.s1.r22$x, -26, 53) {
                              maximum[t1572] = max(maximum[t1572], vert[((max(min(filter_height[(maximum.s1.r22$x + 26)], 27), 0)*vert.stride.3) + (((maximum.s1.r22$x + t2051)*output.extent.2) + t1571))])
                            }
                          }
                        }
                      }
                    }
                  } else {
                    let maximum.s1.c.ci.new_max.s = (output.extent.2 - (maximum.s1.c.c.__block_id_z*2))
                    let t1575 = (output.extent.1 - (((maximum.s1.y.y.__block_id_y*64) + .__thread_id_y)*8))
                    let t2061 = (maximum.s1.c.c.__block_id_z*2)
                    let t2062 = (((maximum.s1.x.x.__block_id_x*16) + .__thread_id_x)*2)
                    let t2063 = (((maximum.s1.y.y.__block_id_y*64) + .__thread_id_y)*8)
                    let t2055 = max(min(t1575, 8), 0)
                    let t2052 = max(min(maximum.s1.c.ci.new_max.s, 2), 0)
                    let t2057 = (t1531 + t2063)
                    let t2059 = (t1529 + t2063)
                    let t2054 = (t1528 + t2061)
                    for (maximum.s1.c.ci, 0, t2052) {
                      let t1586 = ((maximum.s1.c.ci + t2054)*t2003)
                      let t2065 = max(min((output.extent.0 - t2062), 2), 0)
                      let t2067 = (t2062 + 26)
                      let t2066 = (t1586 + t2062)
                      let t2064 = (maximum.s1.c.ci + t2061)
                      for (maximum.s1.y.yi.yii, 0, t2055) {
                        let t1589 = (((maximum.s1.y.yi.yii + t2057)*t2004) + t2064)
                        let t2068 = (((maximum.s1.y.yi.yii + t2059)*output.extent.0) + t2066)
                        for (maximum.s1.x.xi.xii, 0, t2065) {
                          let t1590 = (maximum.s1.x.xi.xii + t2068)
                          let t2069 = (maximum.s1.x.xi.xii + t2067)
                          for (maximum.s1.r22$x, -26, 53) {
                            maximum[t1590] = max(maximum[t1590], vert[((max(min(filter_height[(maximum.s1.r22$x + 26)], 27), 0)*vert.stride.3) + (((maximum.s1.r22$x + t2069)*output.extent.2) + t1589))])
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        let halide_device_free_result$4 = halide_device_free(filter_height.buffer)
        assert((halide_device_free_result$4 == 0), halide_device_free_result$4)
        free filter_height
        let halide_device_free_result$1 = halide_device_free(vert.buffer)
        assert((halide_device_free_result$1 == 0), halide_device_free_result$1)
        free vert
      }
    }
  }
  produce output {
    consume maximum {
      let halide_copy_to_device_result$1 = halide_copy_to_device(output.buffer, halide_cuda_device_interface())
      assert((halide_copy_to_device_result$1 == 0), halide_copy_to_device_result$1)
      let t1599.s = ((output.min.0 - (output.min.2*output.stride.2)) - (output.min.1*output.stride.1))
      let t1596 = (512 - min(output.extent.1, 512))
      let t1598 = ((2 - min(output.extent.2, 2)) - output.min.2)
      let t2070 = ((output.extent.1 + 15)/16)
      let t2071 = ((output.extent.0 + 63)/64)
      let t2075 = (max(output.extent.1, 512)*output.extent.0)
      let t2074 = (t1599.s - output.min.0)
      let t2072 = (output.extent.1 + -16)
      gpu_block<CUDA> (output.s0.y.y.__block_id_y, 0, t2070) {
        gpu_block<CUDA> (output.s0.x.x.__block_id_x, 0, t2071) {
          gpu_thread<CUDA> (.__thread_id_y, 0, 16) {
            gpu_thread<CUDA> (.__thread_id_x, 0, 64) {
              let output.s0.y.yi.base.s = min((output.s0.y.y.__block_id_y*16), t2072)
              let output.s0.x.xi.base.s = min((output.s0.x.x.__block_id_x*64), (output.extent.0 + -64))
              let t1601.s = ((((output.min.1 + output.s0.y.yi.base.s) + .__thread_id_y)*output.stride.1) + (output.s0.x.xi.base.s + t2074))
              let t2076 = (((((output.s0.y.yi.base.s + t1596) + .__thread_id_y)*output.extent.0) + output.s0.x.xi.base.s) + .__thread_id_x)
              let t2077 = (.__thread_id_x + t1601.s)
              for (output.s0.c, output.min.2, output.extent.2) {
                output[((output.s0.c*output.stride.2) + t2077)] = maximum[(((output.s0.c + t1598)*t2075) + t2076)]
              }
            }
          }
        }
      }
      _halide_buffer_set_device_dirty(output.buffer, (uint1)1)
      let halide_device_free_result = halide_device_free(maximum.buffer)
      assert((halide_device_free_result == 0), halide_device_free_result)
      free maximum
    }
  }
}


Skipping Hexagon offload...
Module.compile(): stmt_name ./bin/max_filter_classic_auto_schedule.stmt
Constructing CUDA device codegen
Target triple of initial module: x86_64--linux-gnu
Generating llvm bitcode...
Generating llvm bitcode prolog for function max_filter_classic_auto_schedule...
Generating llvm bitcode for function max_filter_classic_auto_schedule...
Generating llvm bitcode for kernel...
Generating llvm bitcode for kernel...
Generating llvm bitcode for kernel...
Generating llvm bitcode for kernel...
Generating llvm bitcode for kernel...
Generating llvm bitcode for kernel...
Generating llvm bitcode for kernel...
Generating llvm bitcode for kernel...
Generating llvm bitcode for kernel...
Generating llvm bitcode for kernel...
PTX kernel:
//
// Generated by LLVM NVPTX Back-End
//

.version 3.2
.target sm_35
.address_size 64

	// .globl	kernel_sum_s0_x_x___block_id_x // -- Begin function kernel_sum_s0_x_x___block_id_x
                                        // @kernel_sum_s0_x_x___block_id_x
.visible .entry kernel_sum_s0_x_x___block_id_x(
	.param .u64 kernel_sum_s0_x_x___block_id_x_param_0
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<5>;

// %bb.0:                               // %entry
	ld.param.u64 	%rd1, [kernel_sum_s0_x_x___block_id_x_param_0];
	cvta.to.global.u64 	%rd2, %rd1;
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %tid.x;
	setp.eq.s32 	%p1, %r1, 0;
	add.s32 	%r3, %r2, 26;
	selp.b32 	%r4, %r2, %r3, %p1;
	mul.wide.u32 	%rd3, %r4, 4;
	add.s64 	%rd4, %rd2, %rd3;
	mov.u32 	%r5, 0;
	st.global.u32 	[%rd4], %r5;
	ret;
                                        // -- End function
}
	// .globl	kernel_sum_s1_x_x___block_id_x // -- Begin function kernel_sum_s1_x_x___block_id_x
.visible .entry kernel_sum_s1_x_x___block_id_x(
	.param .u64 kernel_sum_s1_x_x___block_id_x_param_0
)                                       // @kernel_sum_s1_x_x___block_id_x
{
	.reg .pred 	%p<30>;
	.reg .b32 	%r<67>;
	.reg .b64 	%rd<5>;

// %bb.0:                               // %entry
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r65, %tid.x;
	setp.ne.s32 	%p1, %r7, 0;
	@%p1 bra 	LBB1_4;
	bra.uni 	LBB1_1;
LBB1_4:                                 // %false_bb
	setp.lt.u32 	%p2, %r65, 26;
	@%p2 bra 	LBB1_5;
	bra.uni 	LBB1_3;
LBB1_5:                                 // %true_bb1
	add.s32 	%r8, %r65, 1;
	mul.lo.s32 	%r66, %r8, %r8;
	add.s32 	%r65, %r65, 27;
	bra.uni 	LBB1_2;
LBB1_1:                                 // %true_bb
	add.s32 	%r9, %r65, -26;
	mul.lo.s32 	%r66, %r9, %r9;
LBB1_2:                                 // %after_bb.sink.split
	ld.param.u64 	%rd2, [kernel_sum_s1_x_x___block_id_x_param_0];
	cvta.to.global.u64 	%rd1, %rd2;
	mul.wide.u32 	%rd3, %r65, 4;
	add.s64 	%rd4, %rd1, %rd3;
	ld.global.u32 	%r10, [%rd4];
	setp.lt.u32 	%p3, %r66, 690;
	selp.u32 	%r11, 1, 0, %p3;
	add.s32 	%r12, %r10, %r11;
	setp.lt.u32 	%p4, %r66, 689;
	selp.u32 	%r13, 1, 0, %p4;
	add.s32 	%r14, %r12, %r13;
	setp.lt.u32 	%p5, %r66, 686;
	selp.u32 	%r15, 1, 0, %p5;
	add.s32 	%r16, %r14, %r15;
	setp.lt.u32 	%p6, %r66, 681;
	selp.u32 	%r17, 1, 0, %p6;
	add.s32 	%r18, %r16, %r17;
	setp.lt.u32 	%p7, %r66, 674;
	selp.u32 	%r19, 1, 0, %p7;
	add.s32 	%r20, %r18, %r19;
	setp.lt.u32 	%p8, %r66, 665;
	selp.u32 	%r21, 1, 0, %p8;
	add.s32 	%r22, %r20, %r21;
	setp.lt.u32 	%p9, %r66, 654;
	selp.u32 	%r23, 1, 0, %p9;
	add.s32 	%r24, %r22, %r23;
	setp.lt.u32 	%p10, %r66, 641;
	selp.u32 	%r25, 1, 0, %p10;
	add.s32 	%r26, %r24, %r25;
	setp.lt.u32 	%p11, %r66, 626;
	selp.u32 	%r27, 1, 0, %p11;
	add.s32 	%r28, %r26, %r27;
	setp.lt.u32 	%p12, %r66, 609;
	selp.u32 	%r29, 1, 0, %p12;
	add.s32 	%r30, %r28, %r29;
	setp.lt.u32 	%p13, %r66, 590;
	selp.u32 	%r31, 1, 0, %p13;
	add.s32 	%r32, %r30, %r31;
	setp.lt.u32 	%p14, %r66, 569;
	selp.u32 	%r33, 1, 0, %p14;
	add.s32 	%r34, %r32, %r33;
	setp.lt.u32 	%p15, %r66, 546;
	selp.u32 	%r35, 1, 0, %p15;
	add.s32 	%r36, %r34, %r35;
	setp.lt.u32 	%p16, %r66, 521;
	selp.u32 	%r37, 1, 0, %p16;
	add.s32 	%r38, %r36, %r37;
	setp.lt.u32 	%p17, %r66, 494;
	selp.u32 	%r39, 1, 0, %p17;
	add.s32 	%r40, %r38, %r39;
	setp.lt.u32 	%p18, %r66, 465;
	selp.u32 	%r41, 1, 0, %p18;
	add.s32 	%r42, %r40, %r41;
	setp.lt.u32 	%p19, %r66, 434;
	selp.u32 	%r43, 1, 0, %p19;
	add.s32 	%r44, %r42, %r43;
	setp.lt.u32 	%p20, %r66, 401;
	selp.u32 	%r45, 1, 0, %p20;
	add.s32 	%r46, %r44, %r45;
	setp.lt.u32 	%p21, %r66, 366;
	selp.u32 	%r47, 1, 0, %p21;
	add.s32 	%r48, %r46, %r47;
	setp.lt.u32 	%p22, %r66, 329;
	selp.u32 	%r49, 1, 0, %p22;
	add.s32 	%r50, %r48, %r49;
	setp.lt.u32 	%p23, %r66, 290;
	selp.u32 	%r51, 1, 0, %p23;
	add.s32 	%r52, %r50, %r51;
	setp.lt.u32 	%p24, %r66, 249;
	selp.u32 	%r53, 1, 0, %p24;
	add.s32 	%r54, %r52, %r53;
	setp.lt.u32 	%p25, %r66, 206;
	selp.u32 	%r55, 1, 0, %p25;
	add.s32 	%r56, %r54, %r55;
	setp.lt.u32 	%p26, %r66, 161;
	selp.u32 	%r57, 1, 0, %p26;
	add.s32 	%r58, %r56, %r57;
	setp.lt.u32 	%p27, %r66, 114;
	selp.u32 	%r59, 1, 0, %p27;
	add.s32 	%r60, %r58, %r59;
	setp.lt.u32 	%p28, %r66, 65;
	selp.u32 	%r61, 1, 0, %p28;
	add.s32 	%r62, %r60, %r61;
	setp.lt.u32 	%p29, %r66, 14;
	selp.u32 	%r63, 1, 0, %p29;
	add.s32 	%r64, %r62, %r63;
	st.global.u32 	[%rd4], %r64;
LBB1_3:                                 // %after_bb
	ret;
                                        // -- End function
}
	// .globl	kernel_filter_height_s0_x_x_x_x_outer___block_id_x // -- Begin function kernel_filter_height_s0_x_x_x_x_outer___block_id_x
.visible .entry kernel_filter_height_s0_x_x_x_x_outer___block_id_x(
	.param .u64 kernel_filter_height_s0_x_x_x_x_outer___block_id_x_param_0,
	.param .u64 kernel_filter_height_s0_x_x_x_x_outer___block_id_x_param_1
)                                       // @kernel_filter_height_s0_x_x_x_x_outer___block_id_x
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<19>;
	.reg .b64 	%rd<8>;

// %bb.0:                               // %entry
	ld.param.u64 	%rd3, [kernel_filter_height_s0_x_x_x_x_outer___block_id_x_param_0];
	ld.param.u64 	%rd4, [kernel_filter_height_s0_x_x_x_x_outer___block_id_x_param_1];
	cvta.to.global.u64 	%rd1, %rd4;
	cvta.to.global.u64 	%rd2, %rd3;
	mov.u32 	%r1, %tid.x;
	setp.gt.u32 	%p1, %r1, 5;
	@%p1 bra 	LBB2_2;
// %bb.1:                               // %true_bb
	shl.b32 	%r10, %r1, 3;
	mul.wide.u32 	%rd5, %r10, 4;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.nc.u32 	%r11, [%rd6];
	add.s64 	%rd7, %rd2, %rd5;
	st.global.u32 	[%rd7], %r11;
	ld.global.nc.u32 	%r12, [%rd6+4];
	st.global.u32 	[%rd7+4], %r12;
	ld.global.nc.u32 	%r13, [%rd6+8];
	st.global.u32 	[%rd7+8], %r13;
	ld.global.nc.u32 	%r14, [%rd6+12];
	st.global.u32 	[%rd7+12], %r14;
	ld.global.nc.u32 	%r15, [%rd6+16];
	st.global.u32 	[%rd7+16], %r15;
	ld.global.nc.u32 	%r16, [%rd6+20];
	st.global.u32 	[%rd7+20], %r16;
	ld.global.nc.u32 	%r17, [%rd6+24];
	st.global.u32 	[%rd7+24], %r17;
	ld.global.nc.u32 	%r18, [%rd6+28];
	st.global.u32 	[%rd7+28], %r18;
	bra.uni 	LBB2_3;
LBB2_2:                                 // %false_bb
	ld.global.nc.u32 	%r2, [%rd1+180];
	st.global.u32 	[%rd2+180], %r2;
	ld.global.nc.u32 	%r3, [%rd1+184];
	st.global.u32 	[%rd2+184], %r3;
	ld.global.nc.u32 	%r4, [%rd1+188];
	st.global.u32 	[%rd2+188], %r4;
	ld.global.nc.u32 	%r5, [%rd1+192];
	st.global.u32 	[%rd2+192], %r5;
	ld.global.nc.u32 	%r6, [%rd1+196];
	st.global.u32 	[%rd2+196], %r6;
	ld.global.nc.u32 	%r7, [%rd1+200];
	st.global.u32 	[%rd2+200], %r7;
	ld.global.nc.u32 	%r8, [%rd1+204];
	st.global.u32 	[%rd2+204], %r8;
	ld.global.nc.u32 	%r9, [%rd1+208];
	st.global.u32 	[%rd2+208], %r9;
LBB2_3:                                 // %after_bb
	ret;
                                        // -- End function
}
	// .globl	kernel_slice_for_radius_s0_t_t_t_outer___block_id_x // -- Begin function kernel_slice_for_radius_s0_t_t_t_outer___block_id_x
.visible .entry kernel_slice_for_radius_s0_t_t_t_outer___block_id_x(
	.param .u64 kernel_slice_for_radius_s0_t_t_t_outer___block_id_x_param_0
)                                       // @kernel_slice_for_radius_s0_t_t_t_outer___block_id_x
{
	.reg .f32 	%f<20>;
	.reg .b32 	%r<14>;
	.reg .b64 	%rd<5>;

// %bb.0:                               // %entry
	ld.param.u64 	%rd1, [kernel_slice_for_radius_s0_t_t_t_outer___block_id_x_param_0];
	cvta.to.global.u64 	%rd2, %rd1;
	mov.u32 	%r1, %tid.x;
	shl.b32 	%r2, %r1, 1;
	or.b32  	%r3, %r2, 1;
	cvt.rn.f32.s32 	%f1, %r3;
	mov.b32 	%r4, %f1;
	and.b32  	%r5, %r4, -2139095041;
	shr.s32 	%r6, %r5, 22;
	mov.u32 	%r7, 127;
	sub.s32 	%r8, %r7, %r6;
	shl.b32 	%r9, %r8, 23;
	or.b32  	%r10, %r9, %r5;
	mov.b32 	%f2, %r10;
	add.ftz.f32 	%f3, %f2, 0fBF800000;
	neg.ftz.f32 	%f4, %f3;
	fma.rn.ftz.f32 	%f5, %f2, %f3, %f4;
	fma.rn.ftz.f32 	%f6, %f5, 0f3D5162F5, 0f3E19502F;
	fma.rn.ftz.f32 	%f7, %f5, %f6, 0f3E4C9A1F;
	fma.rn.ftz.f32 	%f8, %f5, %f7, 0f3EAAAACD;
	fma.rn.ftz.f32 	%f9, %f5, %f8, 0f3F800000;
	neg.ftz.f32 	%f10, %f9;
	fma.rn.ftz.f32 	%f11, %f2, %f9, %f10;
	fma.rn.ftz.f32 	%f12, %f5, 0fBDF18A20, 0fBE2CAABC;
	fma.rn.ftz.f32 	%f13, %f5, %f12, 0fBE7FE8F6;
	fma.rn.ftz.f32 	%f14, %f5, %f13, 0fBF000012;
	fma.rn.ftz.f32 	%f15, %f5, %f14, %f11;
	shr.s32 	%r11, %r4, 23;
	sub.s32 	%r12, %r11, %r8;
	cvt.rn.f32.s32 	%f16, %r12;
	fma.rn.ftz.f32 	%f17, %f16, 0f3F317218, %f15;
	mul.ftz.f32 	%f18, %f17, 0f3FB8AA3B;
	cvt.rmi.ftz.f32.f32 	%f19, %f18;
	cvt.rzi.ftz.s32.f32 	%r13, %f19;
	mul.wide.u32 	%rd3, %r1, 4;
	add.s64 	%rd4, %rd2, %rd3;
	st.global.u32 	[%rd4], %r13;
	ret;
                                        // -- End function
}
	// .globl	kernel_vert_log_s0_y_y___block_id_y // -- Begin function kernel_vert_log_s0_y_y___block_id_y
.visible .entry kernel_vert_log_s0_y_y___block_id_y(
	.param .u32 kernel_vert_log_s0_y_y___block_id_y_param_0,
	.param .u32 kernel_vert_log_s0_y_y___block_id_y_param_1,
	.param .u32 kernel_vert_log_s0_y_y___block_id_y_param_2,
	.param .u32 kernel_vert_log_s0_y_y___block_id_y_param_3,
	.param .u32 kernel_vert_log_s0_y_y___block_id_y_param_4,
	.param .u32 kernel_vert_log_s0_y_y___block_id_y_param_5,
	.param .u32 kernel_vert_log_s0_y_y___block_id_y_param_6,
	.param .u32 kernel_vert_log_s0_y_y___block_id_y_param_7,
	.param .u32 kernel_vert_log_s0_y_y___block_id_y_param_8,
	.param .u32 kernel_vert_log_s0_y_y___block_id_y_param_9,
	.param .u32 kernel_vert_log_s0_y_y___block_id_y_param_10,
	.param .u32 kernel_vert_log_s0_y_y___block_id_y_param_11,
	.param .u32 kernel_vert_log_s0_y_y___block_id_y_param_12,
	.param .u32 kernel_vert_log_s0_y_y___block_id_y_param_13,
	.param .u32 kernel_vert_log_s0_y_y___block_id_y_param_14,
	.param .u32 kernel_vert_log_s0_y_y___block_id_y_param_15,
	.param .u32 kernel_vert_log_s0_y_y___block_id_y_param_16,
	.param .u32 kernel_vert_log_s0_y_y___block_id_y_param_17,
	.param .u32 kernel_vert_log_s0_y_y___block_id_y_param_18,
	.param .u32 kernel_vert_log_s0_y_y___block_id_y_param_19,
	.param .u32 kernel_vert_log_s0_y_y___block_id_y_param_20,
	.param .u32 kernel_vert_log_s0_y_y___block_id_y_param_21,
	.param .u32 kernel_vert_log_s0_y_y___block_id_y_param_22,
	.param .u32 kernel_vert_log_s0_y_y___block_id_y_param_23,
	.param .u32 kernel_vert_log_s0_y_y___block_id_y_param_24,
	.param .u32 kernel_vert_log_s0_y_y___block_id_y_param_25,
	.param .u32 kernel_vert_log_s0_y_y___block_id_y_param_26,
	.param .u32 kernel_vert_log_s0_y_y___block_id_y_param_27,
	.param .u32 kernel_vert_log_s0_y_y___block_id_y_param_28,
	.param .u32 kernel_vert_log_s0_y_y___block_id_y_param_29,
	.param .u32 kernel_vert_log_s0_y_y___block_id_y_param_30,
	.param .u32 kernel_vert_log_s0_y_y___block_id_y_param_31,
	.param .u32 kernel_vert_log_s0_y_y___block_id_y_param_32,
	.param .u32 kernel_vert_log_s0_y_y___block_id_y_param_33,
	.param .u32 kernel_vert_log_s0_y_y___block_id_y_param_34,
	.param .u32 kernel_vert_log_s0_y_y___block_id_y_param_35,
	.param .u32 kernel_vert_log_s0_y_y___block_id_y_param_36,
	.param .u32 kernel_vert_log_s0_y_y___block_id_y_param_37,
	.param .u32 kernel_vert_log_s0_y_y___block_id_y_param_38,
	.param .u32 kernel_vert_log_s0_y_y___block_id_y_param_39,
	.param .u32 kernel_vert_log_s0_y_y___block_id_y_param_40,
	.param .u32 kernel_vert_log_s0_y_y___block_id_y_param_41,
	.param .u32 kernel_vert_log_s0_y_y___block_id_y_param_42,
	.param .u64 kernel_vert_log_s0_y_y___block_id_y_param_43,
	.param .u64 kernel_vert_log_s0_y_y___block_id_y_param_44
)                                       // @kernel_vert_log_s0_y_y___block_id_y
{
	.reg .pred 	%p<18>;
	.reg .b32 	%r<748>;
	.reg .b64 	%rd<261>;

// %bb.0:                               // %entry
	ld.param.u32 	%r227, [kernel_vert_log_s0_y_y___block_id_y_param_42];
	ld.param.u32 	%r226, [kernel_vert_log_s0_y_y___block_id_y_param_41];
	ld.param.u32 	%r225, [kernel_vert_log_s0_y_y___block_id_y_param_40];
	ld.param.u32 	%r224, [kernel_vert_log_s0_y_y___block_id_y_param_39];
	ld.param.u32 	%r223, [kernel_vert_log_s0_y_y___block_id_y_param_38];
	ld.param.u32 	%r222, [kernel_vert_log_s0_y_y___block_id_y_param_37];
	ld.param.u32 	%r218, [kernel_vert_log_s0_y_y___block_id_y_param_33];
	ld.param.u32 	%r217, [kernel_vert_log_s0_y_y___block_id_y_param_32];
	ld.param.u32 	%r216, [kernel_vert_log_s0_y_y___block_id_y_param_31];
	ld.param.u32 	%r215, [kernel_vert_log_s0_y_y___block_id_y_param_30];
	ld.param.u32 	%r214, [kernel_vert_log_s0_y_y___block_id_y_param_29];
	ld.param.u32 	%r213, [kernel_vert_log_s0_y_y___block_id_y_param_28];
	ld.param.u32 	%r212, [kernel_vert_log_s0_y_y___block_id_y_param_27];
	ld.param.u32 	%r211, [kernel_vert_log_s0_y_y___block_id_y_param_26];
	ld.param.u32 	%r210, [kernel_vert_log_s0_y_y___block_id_y_param_25];
	ld.param.u32 	%r209, [kernel_vert_log_s0_y_y___block_id_y_param_24];
	ld.param.u32 	%r208, [kernel_vert_log_s0_y_y___block_id_y_param_23];
	ld.param.u32 	%r207, [kernel_vert_log_s0_y_y___block_id_y_param_22];
	ld.param.u32 	%r206, [kernel_vert_log_s0_y_y___block_id_y_param_21];
	ld.param.u32 	%r203, [kernel_vert_log_s0_y_y___block_id_y_param_16];
	ld.param.u32 	%r194, [kernel_vert_log_s0_y_y___block_id_y_param_7];
	ld.param.u32 	%r193, [kernel_vert_log_s0_y_y___block_id_y_param_6];
	ld.param.u32 	%r192, [kernel_vert_log_s0_y_y___block_id_y_param_5];
	ld.param.u32 	%r191, [kernel_vert_log_s0_y_y___block_id_y_param_4];
	ld.param.u32 	%r190, [kernel_vert_log_s0_y_y___block_id_y_param_3];
	ld.param.u32 	%r189, [kernel_vert_log_s0_y_y___block_id_y_param_2];
	ld.param.u32 	%r188, [kernel_vert_log_s0_y_y___block_id_y_param_1];
	ld.param.u64 	%rd3, [kernel_vert_log_s0_y_y___block_id_y_param_44];
	cvta.to.global.u64 	%rd1, %rd3;
	ld.param.u64 	%rd4, [kernel_vert_log_s0_y_y___block_id_y_param_43];
	cvta.to.global.u64 	%rd2, %rd4;
	mov.u32 	%r228, %ctaid.y;
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %tid.z;
	mov.u32 	%r3, %tid.y;
	mov.u32 	%r4, %tid.x;
	ld.param.u32 	%r229, [kernel_vert_log_s0_y_y___block_id_y_param_20];
	setp.lt.s32 	%p1, %r228, %r229;
	ld.param.u32 	%r230, [kernel_vert_log_s0_y_y___block_id_y_param_19];
	setp.ge.s32 	%p2, %r228, %r230;
	shl.b32 	%r5, %r228, 3;
	add.s32 	%r231, %r5, %r217;
	min.s32 	%r6, %r231, %r218;
	or.pred  	%p3, %p1, %p2;
	@%p3 bra 	LBB4_6;
// %bb.1:                               // %true_bb
	ld.param.u32 	%r205, [kernel_vert_log_s0_y_y___block_id_y_param_18];
	ld.param.u32 	%r204, [kernel_vert_log_s0_y_y___block_id_y_param_17];
	setp.ge.s32 	%p6, %r1, %r204;
	setp.lt.s32 	%p7, %r1, %r205;
	and.pred  	%p8, %p6, %p7;
	@%p8 bra 	LBB4_2;
	bra.uni 	LBB4_8;
LBB4_2:                                 // %true_bb1
	ld.param.u32 	%r221, [kernel_vert_log_s0_y_y___block_id_y_param_36];
	ld.param.u32 	%r220, [kernel_vert_log_s0_y_y___block_id_y_param_35];
	ld.param.u32 	%r219, [kernel_vert_log_s0_y_y___block_id_y_param_34];
	setp.ge.s32 	%p11, %r2, %r219;
	setp.lt.s32 	%p12, %r2, %r220;
	and.pred  	%p13, %p11, %p12;
	shl.b32 	%r471, %r1, 6;
	or.b32  	%r26, %r471, 12;
	min.s32 	%r27, %r26, %r212;
	@%p13 bra 	LBB4_3;
	bra.uni 	LBB4_11;
LBB4_3:                                 // %true_bb4
	setp.lt.s32 	%p16, %r190, 1;
	@%p16 bra 	LBB4_15;
// %bb.4:                               // %"for vert_log.s0.c.c.c_serial_outer.preheader"
	add.s32 	%r566, %r6, -44;
	mul.lo.s32 	%r567, %r566, %r210;
	sub.s32 	%r47, %r567, %r210;
	sub.s32 	%r48, %r47, %r210;
	sub.s32 	%r49, %r48, %r210;
	sub.s32 	%r50, %r49, %r210;
	sub.s32 	%r51, %r50, %r210;
	sub.s32 	%r52, %r51, %r210;
	sub.s32 	%r53, %r52, %r210;
	mul.lo.s32 	%r54, %r3, 7;
	add.s32 	%r568, %r222, -1;
	not.b32 	%r569, %r217;
	sub.s32 	%r570, %r569, %r5;
	not.b32 	%r571, %r218;
	max.s32 	%r572, %r570, %r571;
	sub.s32 	%r573, %r568, %r572;
	mad.lo.s32 	%r574, %r223, %r573, %r4;
	shl.b32 	%r575, %r2, 1;
	add.s32 	%r576, %r216, %r575;
	mul.lo.s32 	%r577, %r206, %r576;
	add.s32 	%r578, %r574, %r577;
	add.s32 	%r579, %r578, -91;
	not.b32 	%r580, %r212;
	not.b32 	%r581, %r26;
	max.s32 	%r582, %r580, %r581;
	mul.lo.s32 	%r583, %r582, 7;
	sub.s32 	%r741, %r579, %r583;
	shl.b32 	%r56, %r206, 2;
	add.s32 	%r584, %r224, -1;
	sub.s32 	%r585, %r584, %r572;
	mad.lo.s32 	%r586, %r223, %r585, %r4;
	add.s32 	%r587, %r586, %r577;
	add.s32 	%r588, %r587, -91;
	sub.s32 	%r740, %r588, %r583;
	add.s32 	%r589, %r225, -1;
	sub.s32 	%r590, %r589, %r572;
	mad.lo.s32 	%r591, %r223, %r590, %r4;
	add.s32 	%r592, %r591, %r577;
	add.s32 	%r593, %r592, -91;
	sub.s32 	%r739, %r593, %r583;
	add.s32 	%r594, %r226, -1;
	sub.s32 	%r595, %r594, %r572;
	mad.lo.s32 	%r596, %r223, %r595, %r4;
	add.s32 	%r597, %r596, %r577;
	add.s32 	%r598, %r597, -91;
	sub.s32 	%r738, %r598, %r583;
	add.s32 	%r599, %r207, -1;
	sub.s32 	%r600, %r599, %r572;
	mad.lo.s32 	%r601, %r223, %r600, %r4;
	add.s32 	%r602, %r601, %r577;
	add.s32 	%r603, %r602, -91;
	sub.s32 	%r737, %r603, %r583;
	add.s32 	%r604, %r227, -1;
	sub.s32 	%r605, %r604, %r572;
	mad.lo.s32 	%r606, %r223, %r605, %r4;
	add.s32 	%r607, %r606, %r577;
	add.s32 	%r608, %r607, -91;
	sub.s32 	%r736, %r608, %r583;
	add.s32 	%r609, %r188, -1;
	sub.s32 	%r610, %r609, %r572;
	mad.lo.s32 	%r611, %r223, %r610, %r4;
	add.s32 	%r612, %r611, %r577;
	add.s32 	%r613, %r612, -91;
	sub.s32 	%r735, %r613, %r583;
	add.s32 	%r614, %r189, -1;
	sub.s32 	%r615, %r614, %r572;
	mad.lo.s32 	%r616, %r223, %r615, %r4;
	add.s32 	%r617, %r616, %r577;
	add.s32 	%r618, %r617, -91;
	sub.s32 	%r734, %r618, %r583;
	add.s32 	%r619, %r215, %r575;
	mul.lo.s32 	%r620, %r206, %r619;
	add.s32 	%r621, %r574, %r620;
	add.s32 	%r622, %r621, -91;
	sub.s32 	%r733, %r622, %r583;
	add.s32 	%r623, %r586, %r620;
	add.s32 	%r624, %r623, -91;
	sub.s32 	%r732, %r624, %r583;
	add.s32 	%r625, %r591, %r620;
	add.s32 	%r626, %r625, -91;
	sub.s32 	%r731, %r626, %r583;
	add.s32 	%r627, %r596, %r620;
	add.s32 	%r628, %r627, -91;
	sub.s32 	%r730, %r628, %r583;
	add.s32 	%r629, %r601, %r620;
	add.s32 	%r630, %r629, -91;
	sub.s32 	%r729, %r630, %r583;
	add.s32 	%r631, %r606, %r620;
	add.s32 	%r632, %r631, -91;
	sub.s32 	%r728, %r632, %r583;
	add.s32 	%r633, %r611, %r620;
	add.s32 	%r634, %r633, -91;
	sub.s32 	%r727, %r634, %r583;
	add.s32 	%r635, %r616, %r620;
	add.s32 	%r636, %r635, -91;
	sub.s32 	%r726, %r636, %r583;
	add.s32 	%r72, %r27, 1;
	add.s32 	%r637, %r3, %r221;
	add.s32 	%r638, %r214, %r575;
	mad.lo.s32 	%r639, %r211, %r638, %r637;
	mov.u32 	%r640, -45;
	sub.s32 	%r641, %r640, %r572;
	mul.lo.s32 	%r642, %r210, %r641;
	add.s32 	%r643, %r639, %r642;
	add.s32 	%r725, %r643, -39;
	shl.b32 	%r74, %r211, 2;
	add.s32 	%r644, %r639, %r47;
	add.s32 	%r724, %r644, -39;
	add.s32 	%r645, %r639, %r48;
	add.s32 	%r723, %r645, -39;
	add.s32 	%r646, %r639, %r49;
	add.s32 	%r722, %r646, -39;
	add.s32 	%r647, %r639, %r50;
	add.s32 	%r721, %r647, -39;
	add.s32 	%r648, %r639, %r51;
	add.s32 	%r720, %r648, -39;
	add.s32 	%r649, %r639, %r52;
	add.s32 	%r719, %r649, -39;
	add.s32 	%r650, %r639, %r53;
	add.s32 	%r718, %r650, -39;
	add.s32 	%r651, %r638, 1;
	mad.lo.s32 	%r652, %r211, %r651, %r637;
	add.s32 	%r653, %r652, %r642;
	add.s32 	%r717, %r653, -39;
	add.s32 	%r654, %r652, %r47;
	add.s32 	%r716, %r654, -39;
	add.s32 	%r655, %r652, %r48;
	add.s32 	%r715, %r655, -39;
	add.s32 	%r656, %r652, %r49;
	add.s32 	%r714, %r656, -39;
	add.s32 	%r657, %r652, %r50;
	add.s32 	%r713, %r657, -39;
	add.s32 	%r658, %r652, %r51;
	add.s32 	%r712, %r658, -39;
	add.s32 	%r659, %r652, %r52;
	add.s32 	%r711, %r659, -39;
	add.s32 	%r660, %r652, %r53;
	add.s32 	%r710, %r660, -39;
LBB4_5:                                 // %"for vert_log.s0.c.c.c_serial_outer"
                                        // =>This Inner Loop Header: Depth=1
	add.s32 	%r661, %r72, %r718;
	mul.wide.s32 	%rd197, %r661, 4;
	add.s64 	%rd198, %rd2, %rd197;
	ld.global.nc.u32 	%r662, [%rd198];
	add.s32 	%r663, %r54, %r726;
	mul.wide.s32 	%rd199, %r663, 4;
	add.s64 	%rd200, %rd1, %rd199;
	st.global.u32 	[%rd200], %r662;
	add.s32 	%r664, %r72, %r719;
	mul.wide.s32 	%rd201, %r664, 4;
	add.s64 	%rd202, %rd2, %rd201;
	ld.global.nc.u32 	%r665, [%rd202];
	add.s32 	%r666, %r54, %r727;
	mul.wide.s32 	%rd203, %r666, 4;
	add.s64 	%rd204, %rd1, %rd203;
	st.global.u32 	[%rd204], %r665;
	add.s32 	%r667, %r72, %r720;
	mul.wide.s32 	%rd205, %r667, 4;
	add.s64 	%rd206, %rd2, %rd205;
	ld.global.nc.u32 	%r668, [%rd206];
	add.s32 	%r669, %r54, %r728;
	mul.wide.s32 	%rd207, %r669, 4;
	add.s64 	%rd208, %rd1, %rd207;
	st.global.u32 	[%rd208], %r668;
	add.s32 	%r670, %r72, %r721;
	mul.wide.s32 	%rd209, %r670, 4;
	add.s64 	%rd210, %rd2, %rd209;
	ld.global.nc.u32 	%r671, [%rd210];
	add.s32 	%r672, %r54, %r729;
	mul.wide.s32 	%rd211, %r672, 4;
	add.s64 	%rd212, %rd1, %rd211;
	st.global.u32 	[%rd212], %r671;
	add.s32 	%r673, %r72, %r722;
	mul.wide.s32 	%rd213, %r673, 4;
	add.s64 	%rd214, %rd2, %rd213;
	ld.global.nc.u32 	%r674, [%rd214];
	add.s32 	%r675, %r54, %r730;
	mul.wide.s32 	%rd215, %r675, 4;
	add.s64 	%rd216, %rd1, %rd215;
	st.global.u32 	[%rd216], %r674;
	add.s32 	%r676, %r72, %r723;
	mul.wide.s32 	%rd217, %r676, 4;
	add.s64 	%rd218, %rd2, %rd217;
	ld.global.nc.u32 	%r677, [%rd218];
	add.s32 	%r678, %r54, %r731;
	mul.wide.s32 	%rd219, %r678, 4;
	add.s64 	%rd220, %rd1, %rd219;
	st.global.u32 	[%rd220], %r677;
	add.s32 	%r679, %r72, %r724;
	mul.wide.s32 	%rd221, %r679, 4;
	add.s64 	%rd222, %rd2, %rd221;
	ld.global.nc.u32 	%r680, [%rd222];
	add.s32 	%r681, %r54, %r732;
	mul.wide.s32 	%rd223, %r681, 4;
	add.s64 	%rd224, %rd1, %rd223;
	st.global.u32 	[%rd224], %r680;
	add.s32 	%r682, %r72, %r725;
	mul.wide.s32 	%rd225, %r682, 4;
	add.s64 	%rd226, %rd2, %rd225;
	ld.global.nc.u32 	%r683, [%rd226];
	add.s32 	%r684, %r54, %r733;
	mul.wide.s32 	%rd227, %r684, 4;
	add.s64 	%rd228, %rd1, %rd227;
	st.global.u32 	[%rd228], %r683;
	add.s32 	%r685, %r72, %r710;
	mul.wide.s32 	%rd229, %r685, 4;
	add.s64 	%rd230, %rd2, %rd229;
	ld.global.nc.u32 	%r686, [%rd230];
	add.s32 	%r687, %r54, %r734;
	mul.wide.s32 	%rd231, %r687, 4;
	add.s64 	%rd232, %rd1, %rd231;
	st.global.u32 	[%rd232], %r686;
	add.s32 	%r688, %r72, %r711;
	mul.wide.s32 	%rd233, %r688, 4;
	add.s64 	%rd234, %rd2, %rd233;
	ld.global.nc.u32 	%r689, [%rd234];
	add.s32 	%r690, %r54, %r735;
	mul.wide.s32 	%rd235, %r690, 4;
	add.s64 	%rd236, %rd1, %rd235;
	st.global.u32 	[%rd236], %r689;
	add.s32 	%r691, %r72, %r712;
	mul.wide.s32 	%rd237, %r691, 4;
	add.s64 	%rd238, %rd2, %rd237;
	ld.global.nc.u32 	%r692, [%rd238];
	add.s32 	%r693, %r54, %r736;
	mul.wide.s32 	%rd239, %r693, 4;
	add.s64 	%rd240, %rd1, %rd239;
	st.global.u32 	[%rd240], %r692;
	add.s32 	%r694, %r72, %r713;
	mul.wide.s32 	%rd241, %r694, 4;
	add.s64 	%rd242, %rd2, %rd241;
	ld.global.nc.u32 	%r695, [%rd242];
	add.s32 	%r696, %r54, %r737;
	mul.wide.s32 	%rd243, %r696, 4;
	add.s64 	%rd244, %rd1, %rd243;
	st.global.u32 	[%rd244], %r695;
	add.s32 	%r697, %r72, %r714;
	mul.wide.s32 	%rd245, %r697, 4;
	add.s64 	%rd246, %rd2, %rd245;
	ld.global.nc.u32 	%r698, [%rd246];
	add.s32 	%r699, %r54, %r738;
	mul.wide.s32 	%rd247, %r699, 4;
	add.s64 	%rd248, %rd1, %rd247;
	st.global.u32 	[%rd248], %r698;
	add.s32 	%r700, %r72, %r715;
	mul.wide.s32 	%rd249, %r700, 4;
	add.s64 	%rd250, %rd2, %rd249;
	ld.global.nc.u32 	%r701, [%rd250];
	add.s32 	%r702, %r54, %r739;
	mul.wide.s32 	%rd251, %r702, 4;
	add.s64 	%rd252, %rd1, %rd251;
	st.global.u32 	[%rd252], %r701;
	add.s32 	%r703, %r72, %r716;
	mul.wide.s32 	%rd253, %r703, 4;
	add.s64 	%rd254, %rd2, %rd253;
	ld.global.nc.u32 	%r704, [%rd254];
	add.s32 	%r705, %r54, %r740;
	mul.wide.s32 	%rd255, %r705, 4;
	add.s64 	%rd256, %rd1, %rd255;
	st.global.u32 	[%rd256], %r704;
	add.s32 	%r706, %r72, %r717;
	mul.wide.s32 	%rd257, %r706, 4;
	add.s64 	%rd258, %rd2, %rd257;
	ld.global.nc.u32 	%r707, [%rd258];
	add.s32 	%r708, %r54, %r741;
	mul.wide.s32 	%rd259, %r708, 4;
	add.s64 	%rd260, %rd1, %rd259;
	st.global.u32 	[%rd260], %r707;
	add.s32 	%r741, %r741, %r56;
	add.s32 	%r740, %r740, %r56;
	add.s32 	%r739, %r739, %r56;
	add.s32 	%r738, %r738, %r56;
	add.s32 	%r737, %r737, %r56;
	add.s32 	%r736, %r736, %r56;
	add.s32 	%r735, %r735, %r56;
	add.s32 	%r734, %r734, %r56;
	add.s32 	%r733, %r733, %r56;
	add.s32 	%r732, %r732, %r56;
	add.s32 	%r731, %r731, %r56;
	add.s32 	%r730, %r730, %r56;
	add.s32 	%r729, %r729, %r56;
	add.s32 	%r728, %r728, %r56;
	add.s32 	%r727, %r727, %r56;
	add.s32 	%r726, %r726, %r56;
	add.s32 	%r725, %r725, %r74;
	add.s32 	%r724, %r724, %r74;
	add.s32 	%r723, %r723, %r74;
	add.s32 	%r722, %r722, %r74;
	add.s32 	%r721, %r721, %r74;
	add.s32 	%r720, %r720, %r74;
	add.s32 	%r719, %r719, %r74;
	add.s32 	%r718, %r718, %r74;
	add.s32 	%r717, %r717, %r74;
	add.s32 	%r716, %r716, %r74;
	add.s32 	%r715, %r715, %r74;
	add.s32 	%r714, %r714, %r74;
	add.s32 	%r713, %r713, %r74;
	add.s32 	%r712, %r712, %r74;
	add.s32 	%r711, %r711, %r74;
	add.s32 	%r710, %r710, %r74;
	add.s32 	%r190, %r190, -1;
	setp.eq.s32 	%p17, %r190, 0;
	@%p17 bra 	LBB4_15;
	bra.uni 	LBB4_5;
LBB4_6:                                 // %false_bb
	sub.s32 	%r235, %r191, %r2;
	shr.s32 	%r236, %r235, 1;
	min.s32 	%r746, %r236, %r190;
	setp.lt.s32 	%p4, %r746, 1;
	@%p4 bra 	LBB4_15;
// %bb.7:                               // %"for vert_log.s0.c.c.c_serial_outer18.preheader"
	ld.param.u32 	%r202, [kernel_vert_log_s0_y_y___block_id_y_param_15];
	ld.param.u32 	%r201, [kernel_vert_log_s0_y_y___block_id_y_param_14];
	ld.param.u32 	%r200, [kernel_vert_log_s0_y_y___block_id_y_param_13];
	ld.param.u32 	%r199, [kernel_vert_log_s0_y_y___block_id_y_param_12];
	ld.param.u32 	%r198, [kernel_vert_log_s0_y_y___block_id_y_param_11];
	ld.param.u32 	%r197, [kernel_vert_log_s0_y_y___block_id_y_param_10];
	ld.param.u32 	%r196, [kernel_vert_log_s0_y_y___block_id_y_param_9];
	ld.param.u32 	%r195, [kernel_vert_log_s0_y_y___block_id_y_param_8];
	ld.param.u32 	%r187, [kernel_vert_log_s0_y_y___block_id_y_param_0];
	shl.b32 	%r232, %r1, 6;
	or.b32  	%r233, %r232, 12;
	min.s32 	%r234, %r233, %r212;
	add.s32 	%r237, %r3, %r213;
	add.s32 	%r238, %r237, %r234;
	min.s32 	%r239, %r238, %r193;
	add.s32 	%r240, %r239, -38;
	max.s32 	%r241, %r240, %r208;
	min.s32 	%r242, %r6, %r195;
	add.s32 	%r243, %r242, -44;
	max.s32 	%r244, %r243, %r198;
	mul.lo.s32 	%r245, %r244, %r210;
	sub.s32 	%r246, %r245, %r194;
	min.s32 	%r247, %r6, %r196;
	add.s32 	%r248, %r247, -45;
	max.s32 	%r249, %r248, %r198;
	mul.lo.s32 	%r250, %r249, %r210;
	sub.s32 	%r251, %r250, %r194;
	min.s32 	%r252, %r6, %r197;
	add.s32 	%r253, %r252, -46;
	max.s32 	%r254, %r253, %r198;
	mul.lo.s32 	%r255, %r254, %r210;
	sub.s32 	%r256, %r255, %r194;
	min.s32 	%r257, %r6, %r187;
	add.s32 	%r258, %r257, -47;
	max.s32 	%r259, %r258, %r198;
	mul.lo.s32 	%r260, %r259, %r210;
	sub.s32 	%r261, %r260, %r194;
	min.s32 	%r262, %r6, %r199;
	add.s32 	%r263, %r262, -48;
	max.s32 	%r264, %r263, %r198;
	mul.lo.s32 	%r265, %r264, %r210;
	sub.s32 	%r266, %r265, %r194;
	min.s32 	%r267, %r6, %r200;
	add.s32 	%r268, %r267, -49;
	max.s32 	%r269, %r268, %r198;
	mul.lo.s32 	%r270, %r269, %r210;
	sub.s32 	%r271, %r270, %r194;
	min.s32 	%r272, %r6, %r201;
	add.s32 	%r273, %r272, -50;
	max.s32 	%r274, %r273, %r198;
	mul.lo.s32 	%r275, %r274, %r210;
	sub.s32 	%r276, %r275, %r194;
	min.s32 	%r277, %r6, %r202;
	add.s32 	%r278, %r277, -51;
	max.s32 	%r279, %r278, %r198;
	mul.lo.s32 	%r280, %r279, %r210;
	sub.s32 	%r281, %r280, %r194;
	add.s32 	%r282, %r6, %r222;
	add.s32 	%r283, %r234, %r3;
	mul.lo.s32 	%r284, %r283, 7;
	add.s32 	%r285, %r6, %r224;
	add.s32 	%r286, %r6, %r225;
	add.s32 	%r287, %r6, %r226;
	add.s32 	%r288, %r6, %r207;
	add.s32 	%r289, %r6, %r227;
	add.s32 	%r290, %r6, %r188;
	add.s32 	%r291, %r6, %r189;
	add.s32 	%r292, %r4, -84;
	mad.lo.s32 	%r293, %r282, %r223, %r292;
	add.s32 	%r8, %r293, %r284;
	mad.lo.s32 	%r294, %r285, %r223, %r292;
	add.s32 	%r9, %r294, %r284;
	mad.lo.s32 	%r295, %r286, %r223, %r292;
	add.s32 	%r10, %r295, %r284;
	mad.lo.s32 	%r296, %r287, %r223, %r292;
	add.s32 	%r11, %r296, %r284;
	mad.lo.s32 	%r297, %r288, %r223, %r292;
	add.s32 	%r12, %r297, %r284;
	mad.lo.s32 	%r298, %r289, %r223, %r292;
	add.s32 	%r13, %r298, %r284;
	mad.lo.s32 	%r299, %r290, %r223, %r292;
	add.s32 	%r14, %r299, %r284;
	mad.lo.s32 	%r300, %r291, %r223, %r292;
	add.s32 	%r15, %r300, %r284;
	add.s32 	%r16, %r241, %r246;
	add.s32 	%r17, %r241, %r251;
	add.s32 	%r18, %r241, %r256;
	add.s32 	%r19, %r241, %r261;
	add.s32 	%r20, %r241, %r266;
	add.s32 	%r21, %r241, %r271;
	add.s32 	%r22, %r241, %r276;
	add.s32 	%r23, %r241, %r281;
	add.s32 	%r24, %r203, -1;
	shl.b32 	%r747, %r2, 1;
LBB4_14:                                // %"for vert_log.s0.c.c.c_serial_outer18"
                                        // =>This Inner Loop Header: Depth=1
	min.s32 	%r301, %r747, %r192;
	add.s32 	%r302, %r301, %r214;
	min.s32 	%r303, %r302, %r24;
	max.s32 	%r304, %r303, %r209;
	mul.lo.s32 	%r305, %r304, %r211;
	add.s32 	%r306, %r305, %r23;
	mul.wide.s32 	%rd5, %r306, 4;
	add.s64 	%rd6, %rd2, %rd5;
	ld.global.nc.u32 	%r307, [%rd6];
	add.s32 	%r308, %r301, %r215;
	mul.lo.s32 	%r309, %r308, %r206;
	add.s32 	%r310, %r309, %r15;
	mul.wide.s32 	%rd7, %r310, 4;
	add.s64 	%rd8, %rd1, %rd7;
	st.global.u32 	[%rd8], %r307;
	add.s32 	%r311, %r305, %r22;
	mul.wide.s32 	%rd9, %r311, 4;
	add.s64 	%rd10, %rd2, %rd9;
	ld.global.nc.u32 	%r312, [%rd10];
	add.s32 	%r313, %r309, %r14;
	mul.wide.s32 	%rd11, %r313, 4;
	add.s64 	%rd12, %rd1, %rd11;
	st.global.u32 	[%rd12], %r312;
	add.s32 	%r314, %r305, %r21;
	mul.wide.s32 	%rd13, %r314, 4;
	add.s64 	%rd14, %rd2, %rd13;
	ld.global.nc.u32 	%r315, [%rd14];
	add.s32 	%r316, %r309, %r13;
	mul.wide.s32 	%rd15, %r316, 4;
	add.s64 	%rd16, %rd1, %rd15;
	st.global.u32 	[%rd16], %r315;
	add.s32 	%r317, %r305, %r20;
	mul.wide.s32 	%rd17, %r317, 4;
	add.s64 	%rd18, %rd2, %rd17;
	ld.global.nc.u32 	%r318, [%rd18];
	add.s32 	%r319, %r309, %r12;
	mul.wide.s32 	%rd19, %r319, 4;
	add.s64 	%rd20, %rd1, %rd19;
	st.global.u32 	[%rd20], %r318;
	add.s32 	%r320, %r305, %r19;
	mul.wide.s32 	%rd21, %r320, 4;
	add.s64 	%rd22, %rd2, %rd21;
	ld.global.nc.u32 	%r321, [%rd22];
	add.s32 	%r322, %r309, %r11;
	mul.wide.s32 	%rd23, %r322, 4;
	add.s64 	%rd24, %rd1, %rd23;
	st.global.u32 	[%rd24], %r321;
	add.s32 	%r323, %r305, %r18;
	mul.wide.s32 	%rd25, %r323, 4;
	add.s64 	%rd26, %rd2, %rd25;
	ld.global.nc.u32 	%r324, [%rd26];
	add.s32 	%r325, %r309, %r10;
	mul.wide.s32 	%rd27, %r325, 4;
	add.s64 	%rd28, %rd1, %rd27;
	st.global.u32 	[%rd28], %r324;
	add.s32 	%r326, %r305, %r17;
	mul.wide.s32 	%rd29, %r326, 4;
	add.s64 	%rd30, %rd2, %rd29;
	ld.global.nc.u32 	%r327, [%rd30];
	add.s32 	%r328, %r309, %r9;
	mul.wide.s32 	%rd31, %r328, 4;
	add.s64 	%rd32, %rd1, %rd31;
	st.global.u32 	[%rd32], %r327;
	add.s32 	%r329, %r305, %r16;
	mul.wide.s32 	%rd33, %r329, 4;
	add.s64 	%rd34, %rd2, %rd33;
	ld.global.nc.u32 	%r330, [%rd34];
	add.s32 	%r331, %r309, %r8;
	mul.wide.s32 	%rd35, %r331, 4;
	add.s64 	%rd36, %rd1, %rd35;
	st.global.u32 	[%rd36], %r330;
	add.s32 	%r332, %r302, 2;
	min.s32 	%r333, %r332, %r203;
	add.s32 	%r334, %r333, -1;
	max.s32 	%r335, %r334, %r209;
	mul.lo.s32 	%r336, %r335, %r211;
	add.s32 	%r337, %r336, %r23;
	mul.wide.s32 	%rd37, %r337, 4;
	add.s64 	%rd38, %rd2, %rd37;
	ld.global.nc.u32 	%r338, [%rd38];
	add.s32 	%r339, %r301, %r216;
	mul.lo.s32 	%r340, %r339, %r206;
	add.s32 	%r341, %r340, %r15;
	mul.wide.s32 	%rd39, %r341, 4;
	add.s64 	%rd40, %rd1, %rd39;
	st.global.u32 	[%rd40], %r338;
	add.s32 	%r342, %r336, %r22;
	mul.wide.s32 	%rd41, %r342, 4;
	add.s64 	%rd42, %rd2, %rd41;
	ld.global.nc.u32 	%r343, [%rd42];
	add.s32 	%r344, %r340, %r14;
	mul.wide.s32 	%rd43, %r344, 4;
	add.s64 	%rd44, %rd1, %rd43;
	st.global.u32 	[%rd44], %r343;
	add.s32 	%r345, %r336, %r21;
	mul.wide.s32 	%rd45, %r345, 4;
	add.s64 	%rd46, %rd2, %rd45;
	ld.global.nc.u32 	%r346, [%rd46];
	add.s32 	%r347, %r340, %r13;
	mul.wide.s32 	%rd47, %r347, 4;
	add.s64 	%rd48, %rd1, %rd47;
	st.global.u32 	[%rd48], %r346;
	add.s32 	%r348, %r336, %r20;
	mul.wide.s32 	%rd49, %r348, 4;
	add.s64 	%rd50, %rd2, %rd49;
	ld.global.nc.u32 	%r349, [%rd50];
	add.s32 	%r350, %r340, %r12;
	mul.wide.s32 	%rd51, %r350, 4;
	add.s64 	%rd52, %rd1, %rd51;
	st.global.u32 	[%rd52], %r349;
	add.s32 	%r351, %r336, %r19;
	mul.wide.s32 	%rd53, %r351, 4;
	add.s64 	%rd54, %rd2, %rd53;
	ld.global.nc.u32 	%r352, [%rd54];
	add.s32 	%r353, %r340, %r11;
	mul.wide.s32 	%rd55, %r353, 4;
	add.s64 	%rd56, %rd1, %rd55;
	st.global.u32 	[%rd56], %r352;
	add.s32 	%r354, %r336, %r18;
	mul.wide.s32 	%rd57, %r354, 4;
	add.s64 	%rd58, %rd2, %rd57;
	ld.global.nc.u32 	%r355, [%rd58];
	add.s32 	%r356, %r340, %r10;
	mul.wide.s32 	%rd59, %r356, 4;
	add.s64 	%rd60, %rd1, %rd59;
	st.global.u32 	[%rd60], %r355;
	add.s32 	%r357, %r336, %r17;
	mul.wide.s32 	%rd61, %r357, 4;
	add.s64 	%rd62, %rd2, %rd61;
	ld.global.nc.u32 	%r358, [%rd62];
	add.s32 	%r359, %r340, %r9;
	mul.wide.s32 	%rd63, %r359, 4;
	add.s64 	%rd64, %rd1, %rd63;
	st.global.u32 	[%rd64], %r358;
	add.s32 	%r360, %r336, %r16;
	mul.wide.s32 	%rd65, %r360, 4;
	add.s64 	%rd66, %rd2, %rd65;
	ld.global.nc.u32 	%r361, [%rd66];
	add.s32 	%r362, %r340, %r8;
	mul.wide.s32 	%rd67, %r362, 4;
	add.s64 	%rd68, %rd1, %rd67;
	st.global.u32 	[%rd68], %r361;
	add.s32 	%r747, %r747, 4;
	add.s32 	%r746, %r746, -1;
	setp.eq.s32 	%p5, %r746, 0;
	@%p5 bra 	LBB4_15;
	bra.uni 	LBB4_14;
LBB4_8:                                 // %false_bb2
	sub.s32 	%r366, %r191, %r2;
	shr.s32 	%r367, %r366, 1;
	min.s32 	%r744, %r367, %r190;
	setp.lt.s32 	%p9, %r744, 1;
	@%p9 bra 	LBB4_15;
// %bb.9:                               // %"for vert_log.s0.c.c.c_serial_outer12.preheader"
	shl.b32 	%r363, %r1, 6;
	or.b32  	%r364, %r363, 12;
	min.s32 	%r365, %r364, %r212;
	add.s32 	%r368, %r3, %r213;
	add.s32 	%r369, %r368, %r365;
	min.s32 	%r370, %r369, %r193;
	add.s32 	%r371, %r370, -38;
	max.s32 	%r372, %r371, %r208;
	add.s32 	%r373, %r6, -44;
	mul.lo.s32 	%r374, %r373, %r210;
	sub.s32 	%r375, %r374, %r194;
	sub.s32 	%r376, %r374, %r210;
	sub.s32 	%r377, %r376, %r194;
	sub.s32 	%r378, %r376, %r210;
	sub.s32 	%r379, %r378, %r194;
	sub.s32 	%r380, %r378, %r210;
	sub.s32 	%r381, %r380, %r194;
	sub.s32 	%r382, %r380, %r210;
	sub.s32 	%r383, %r382, %r194;
	sub.s32 	%r384, %r382, %r210;
	sub.s32 	%r385, %r384, %r194;
	sub.s32 	%r386, %r384, %r210;
	sub.s32 	%r387, %r386, %r194;
	sub.s32 	%r388, %r386, %r210;
	sub.s32 	%r389, %r388, %r194;
	add.s32 	%r390, %r6, %r222;
	add.s32 	%r391, %r365, %r3;
	mul.lo.s32 	%r392, %r391, 7;
	add.s32 	%r393, %r6, %r224;
	add.s32 	%r394, %r6, %r225;
	add.s32 	%r395, %r6, %r226;
	add.s32 	%r396, %r6, %r207;
	add.s32 	%r397, %r6, %r227;
	add.s32 	%r398, %r6, %r188;
	add.s32 	%r399, %r6, %r189;
	add.s32 	%r400, %r4, -84;
	mad.lo.s32 	%r401, %r390, %r223, %r400;
	add.s32 	%r29, %r401, %r392;
	mad.lo.s32 	%r402, %r393, %r223, %r400;
	add.s32 	%r30, %r402, %r392;
	mad.lo.s32 	%r403, %r394, %r223, %r400;
	add.s32 	%r31, %r403, %r392;
	mad.lo.s32 	%r404, %r395, %r223, %r400;
	add.s32 	%r32, %r404, %r392;
	mad.lo.s32 	%r405, %r396, %r223, %r400;
	add.s32 	%r33, %r405, %r392;
	mad.lo.s32 	%r406, %r397, %r223, %r400;
	add.s32 	%r34, %r406, %r392;
	mad.lo.s32 	%r407, %r398, %r223, %r400;
	add.s32 	%r35, %r407, %r392;
	mad.lo.s32 	%r408, %r399, %r223, %r400;
	add.s32 	%r36, %r408, %r392;
	add.s32 	%r37, %r372, %r375;
	add.s32 	%r38, %r372, %r377;
	add.s32 	%r39, %r372, %r379;
	add.s32 	%r40, %r372, %r381;
	add.s32 	%r41, %r372, %r383;
	add.s32 	%r42, %r372, %r385;
	add.s32 	%r43, %r372, %r387;
	add.s32 	%r44, %r372, %r389;
	add.s32 	%r45, %r203, -1;
	shl.b32 	%r745, %r2, 1;
LBB4_10:                                // %"for vert_log.s0.c.c.c_serial_outer12"
                                        // =>This Inner Loop Header: Depth=1
	min.s32 	%r409, %r745, %r192;
	add.s32 	%r410, %r409, %r214;
	min.s32 	%r411, %r410, %r45;
	max.s32 	%r412, %r411, %r209;
	mul.lo.s32 	%r413, %r412, %r211;
	add.s32 	%r414, %r413, %r44;
	mul.wide.s32 	%rd69, %r414, 4;
	add.s64 	%rd70, %rd2, %rd69;
	ld.global.nc.u32 	%r415, [%rd70];
	add.s32 	%r416, %r409, %r215;
	mul.lo.s32 	%r417, %r416, %r206;
	add.s32 	%r418, %r417, %r36;
	mul.wide.s32 	%rd71, %r418, 4;
	add.s64 	%rd72, %rd1, %rd71;
	st.global.u32 	[%rd72], %r415;
	add.s32 	%r419, %r413, %r43;
	mul.wide.s32 	%rd73, %r419, 4;
	add.s64 	%rd74, %rd2, %rd73;
	ld.global.nc.u32 	%r420, [%rd74];
	add.s32 	%r421, %r417, %r35;
	mul.wide.s32 	%rd75, %r421, 4;
	add.s64 	%rd76, %rd1, %rd75;
	st.global.u32 	[%rd76], %r420;
	add.s32 	%r422, %r413, %r42;
	mul.wide.s32 	%rd77, %r422, 4;
	add.s64 	%rd78, %rd2, %rd77;
	ld.global.nc.u32 	%r423, [%rd78];
	add.s32 	%r424, %r417, %r34;
	mul.wide.s32 	%rd79, %r424, 4;
	add.s64 	%rd80, %rd1, %rd79;
	st.global.u32 	[%rd80], %r423;
	add.s32 	%r425, %r413, %r41;
	mul.wide.s32 	%rd81, %r425, 4;
	add.s64 	%rd82, %rd2, %rd81;
	ld.global.nc.u32 	%r426, [%rd82];
	add.s32 	%r427, %r417, %r33;
	mul.wide.s32 	%rd83, %r427, 4;
	add.s64 	%rd84, %rd1, %rd83;
	st.global.u32 	[%rd84], %r426;
	add.s32 	%r428, %r413, %r40;
	mul.wide.s32 	%rd85, %r428, 4;
	add.s64 	%rd86, %rd2, %rd85;
	ld.global.nc.u32 	%r429, [%rd86];
	add.s32 	%r430, %r417, %r32;
	mul.wide.s32 	%rd87, %r430, 4;
	add.s64 	%rd88, %rd1, %rd87;
	st.global.u32 	[%rd88], %r429;
	add.s32 	%r431, %r413, %r39;
	mul.wide.s32 	%rd89, %r431, 4;
	add.s64 	%rd90, %rd2, %rd89;
	ld.global.nc.u32 	%r432, [%rd90];
	add.s32 	%r433, %r417, %r31;
	mul.wide.s32 	%rd91, %r433, 4;
	add.s64 	%rd92, %rd1, %rd91;
	st.global.u32 	[%rd92], %r432;
	add.s32 	%r434, %r413, %r38;
	mul.wide.s32 	%rd93, %r434, 4;
	add.s64 	%rd94, %rd2, %rd93;
	ld.global.nc.u32 	%r435, [%rd94];
	add.s32 	%r436, %r417, %r30;
	mul.wide.s32 	%rd95, %r436, 4;
	add.s64 	%rd96, %rd1, %rd95;
	st.global.u32 	[%rd96], %r435;
	add.s32 	%r437, %r413, %r37;
	mul.wide.s32 	%rd97, %r437, 4;
	add.s64 	%rd98, %rd2, %rd97;
	ld.global.nc.u32 	%r438, [%rd98];
	add.s32 	%r439, %r417, %r29;
	mul.wide.s32 	%rd99, %r439, 4;
	add.s64 	%rd100, %rd1, %rd99;
	st.global.u32 	[%rd100], %r438;
	add.s32 	%r440, %r410, 2;
	min.s32 	%r441, %r440, %r203;
	add.s32 	%r442, %r441, -1;
	max.s32 	%r443, %r442, %r209;
	mul.lo.s32 	%r444, %r443, %r211;
	add.s32 	%r445, %r444, %r44;
	mul.wide.s32 	%rd101, %r445, 4;
	add.s64 	%rd102, %rd2, %rd101;
	ld.global.nc.u32 	%r446, [%rd102];
	add.s32 	%r447, %r409, %r216;
	mul.lo.s32 	%r448, %r447, %r206;
	add.s32 	%r449, %r448, %r36;
	mul.wide.s32 	%rd103, %r449, 4;
	add.s64 	%rd104, %rd1, %rd103;
	st.global.u32 	[%rd104], %r446;
	add.s32 	%r450, %r444, %r43;
	mul.wide.s32 	%rd105, %r450, 4;
	add.s64 	%rd106, %rd2, %rd105;
	ld.global.nc.u32 	%r451, [%rd106];
	add.s32 	%r452, %r448, %r35;
	mul.wide.s32 	%rd107, %r452, 4;
	add.s64 	%rd108, %rd1, %rd107;
	st.global.u32 	[%rd108], %r451;
	add.s32 	%r453, %r444, %r42;
	mul.wide.s32 	%rd109, %r453, 4;
	add.s64 	%rd110, %rd2, %rd109;
	ld.global.nc.u32 	%r454, [%rd110];
	add.s32 	%r455, %r448, %r34;
	mul.wide.s32 	%rd111, %r455, 4;
	add.s64 	%rd112, %rd1, %rd111;
	st.global.u32 	[%rd112], %r454;
	add.s32 	%r456, %r444, %r41;
	mul.wide.s32 	%rd113, %r456, 4;
	add.s64 	%rd114, %rd2, %rd113;
	ld.global.nc.u32 	%r457, [%rd114];
	add.s32 	%r458, %r448, %r33;
	mul.wide.s32 	%rd115, %r458, 4;
	add.s64 	%rd116, %rd1, %rd115;
	st.global.u32 	[%rd116], %r457;
	add.s32 	%r459, %r444, %r40;
	mul.wide.s32 	%rd117, %r459, 4;
	add.s64 	%rd118, %rd2, %rd117;
	ld.global.nc.u32 	%r460, [%rd118];
	add.s32 	%r461, %r448, %r32;
	mul.wide.s32 	%rd119, %r461, 4;
	add.s64 	%rd120, %rd1, %rd119;
	st.global.u32 	[%rd120], %r460;
	add.s32 	%r462, %r444, %r39;
	mul.wide.s32 	%rd121, %r462, 4;
	add.s64 	%rd122, %rd2, %rd121;
	ld.global.nc.u32 	%r463, [%rd122];
	add.s32 	%r464, %r448, %r31;
	mul.wide.s32 	%rd123, %r464, 4;
	add.s64 	%rd124, %rd1, %rd123;
	st.global.u32 	[%rd124], %r463;
	add.s32 	%r465, %r444, %r38;
	mul.wide.s32 	%rd125, %r465, 4;
	add.s64 	%rd126, %rd2, %rd125;
	ld.global.nc.u32 	%r466, [%rd126];
	add.s32 	%r467, %r448, %r30;
	mul.wide.s32 	%rd127, %r467, 4;
	add.s64 	%rd128, %rd1, %rd127;
	st.global.u32 	[%rd128], %r466;
	add.s32 	%r468, %r444, %r37;
	mul.wide.s32 	%rd129, %r468, 4;
	add.s64 	%rd130, %rd2, %rd129;
	ld.global.nc.u32 	%r469, [%rd130];
	add.s32 	%r470, %r448, %r29;
	mul.wide.s32 	%rd131, %r470, 4;
	add.s64 	%rd132, %rd1, %rd131;
	st.global.u32 	[%rd132], %r469;
	add.s32 	%r745, %r745, 4;
	add.s32 	%r744, %r744, -1;
	setp.eq.s32 	%p10, %r744, 0;
	@%p10 bra 	LBB4_15;
	bra.uni 	LBB4_10;
LBB4_11:                                // %false_bb5
	sub.s32 	%r472, %r191, %r2;
	shr.s32 	%r473, %r472, 1;
	min.s32 	%r742, %r473, %r190;
	setp.lt.s32 	%p14, %r742, 1;
	@%p14 bra 	LBB4_15;
// %bb.12:                              // %"for vert_log.s0.c.c.c_serial_outer8.preheader"
	add.s32 	%r474, %r6, -44;
	mul.lo.s32 	%r475, %r474, %r210;
	sub.s32 	%r476, %r475, %r210;
	sub.s32 	%r477, %r476, %r210;
	sub.s32 	%r478, %r477, %r210;
	sub.s32 	%r479, %r478, %r210;
	sub.s32 	%r480, %r479, %r210;
	sub.s32 	%r481, %r480, %r210;
	sub.s32 	%r482, %r481, %r210;
	add.s32 	%r483, %r6, %r222;
	add.s32 	%r484, %r27, %r3;
	mul.lo.s32 	%r485, %r484, 7;
	add.s32 	%r486, %r6, %r224;
	add.s32 	%r487, %r6, %r225;
	add.s32 	%r488, %r6, %r226;
	add.s32 	%r489, %r6, %r207;
	add.s32 	%r490, %r6, %r227;
	add.s32 	%r491, %r6, %r188;
	add.s32 	%r492, %r6, %r189;
	add.s32 	%r493, %r484, %r221;
	add.s32 	%r494, %r493, -38;
	add.s32 	%r91, %r494, %r475;
	add.s32 	%r92, %r494, %r476;
	add.s32 	%r93, %r494, %r477;
	add.s32 	%r94, %r494, %r478;
	add.s32 	%r95, %r494, %r479;
	add.s32 	%r96, %r494, %r480;
	add.s32 	%r97, %r494, %r481;
	add.s32 	%r98, %r494, %r482;
	add.s32 	%r495, %r4, -84;
	mad.lo.s32 	%r496, %r483, %r223, %r495;
	add.s32 	%r99, %r496, %r485;
	mad.lo.s32 	%r497, %r486, %r223, %r495;
	add.s32 	%r100, %r497, %r485;
	mad.lo.s32 	%r498, %r487, %r223, %r495;
	add.s32 	%r101, %r498, %r485;
	mad.lo.s32 	%r499, %r488, %r223, %r495;
	add.s32 	%r102, %r499, %r485;
	mad.lo.s32 	%r500, %r489, %r223, %r495;
	add.s32 	%r103, %r500, %r485;
	mad.lo.s32 	%r501, %r490, %r223, %r495;
	add.s32 	%r104, %r501, %r485;
	mad.lo.s32 	%r502, %r491, %r223, %r495;
	add.s32 	%r105, %r502, %r485;
	mad.lo.s32 	%r503, %r492, %r223, %r495;
	add.s32 	%r106, %r503, %r485;
	add.s32 	%r107, %r203, -1;
	shl.b32 	%r743, %r2, 1;
LBB4_13:                                // %"for vert_log.s0.c.c.c_serial_outer8"
                                        // =>This Inner Loop Header: Depth=1
	min.s32 	%r504, %r743, %r192;
	add.s32 	%r505, %r504, %r214;
	min.s32 	%r506, %r505, %r107;
	max.s32 	%r507, %r506, %r209;
	mul.lo.s32 	%r508, %r507, %r211;
	add.s32 	%r509, %r508, %r98;
	mul.wide.s32 	%rd133, %r509, 4;
	add.s64 	%rd134, %rd2, %rd133;
	ld.global.nc.u32 	%r510, [%rd134];
	add.s32 	%r511, %r504, %r215;
	mul.lo.s32 	%r512, %r511, %r206;
	add.s32 	%r513, %r512, %r106;
	mul.wide.s32 	%rd135, %r513, 4;
	add.s64 	%rd136, %rd1, %rd135;
	st.global.u32 	[%rd136], %r510;
	add.s32 	%r514, %r508, %r97;
	mul.wide.s32 	%rd137, %r514, 4;
	add.s64 	%rd138, %rd2, %rd137;
	ld.global.nc.u32 	%r515, [%rd138];
	add.s32 	%r516, %r512, %r105;
	mul.wide.s32 	%rd139, %r516, 4;
	add.s64 	%rd140, %rd1, %rd139;
	st.global.u32 	[%rd140], %r515;
	add.s32 	%r517, %r508, %r96;
	mul.wide.s32 	%rd141, %r517, 4;
	add.s64 	%rd142, %rd2, %rd141;
	ld.global.nc.u32 	%r518, [%rd142];
	add.s32 	%r519, %r512, %r104;
	mul.wide.s32 	%rd143, %r519, 4;
	add.s64 	%rd144, %rd1, %rd143;
	st.global.u32 	[%rd144], %r518;
	add.s32 	%r520, %r508, %r95;
	mul.wide.s32 	%rd145, %r520, 4;
	add.s64 	%rd146, %rd2, %rd145;
	ld.global.nc.u32 	%r521, [%rd146];
	add.s32 	%r522, %r512, %r103;
	mul.wide.s32 	%rd147, %r522, 4;
	add.s64 	%rd148, %rd1, %rd147;
	st.global.u32 	[%rd148], %r521;
	add.s32 	%r523, %r508, %r94;
	mul.wide.s32 	%rd149, %r523, 4;
	add.s64 	%rd150, %rd2, %rd149;
	ld.global.nc.u32 	%r524, [%rd150];
	add.s32 	%r525, %r512, %r102;
	mul.wide.s32 	%rd151, %r525, 4;
	add.s64 	%rd152, %rd1, %rd151;
	st.global.u32 	[%rd152], %r524;
	add.s32 	%r526, %r508, %r93;
	mul.wide.s32 	%rd153, %r526, 4;
	add.s64 	%rd154, %rd2, %rd153;
	ld.global.nc.u32 	%r527, [%rd154];
	add.s32 	%r528, %r512, %r101;
	mul.wide.s32 	%rd155, %r528, 4;
	add.s64 	%rd156, %rd1, %rd155;
	st.global.u32 	[%rd156], %r527;
	add.s32 	%r529, %r508, %r92;
	mul.wide.s32 	%rd157, %r529, 4;
	add.s64 	%rd158, %rd2, %rd157;
	ld.global.nc.u32 	%r530, [%rd158];
	add.s32 	%r531, %r512, %r100;
	mul.wide.s32 	%rd159, %r531, 4;
	add.s64 	%rd160, %rd1, %rd159;
	st.global.u32 	[%rd160], %r530;
	add.s32 	%r532, %r508, %r91;
	mul.wide.s32 	%rd161, %r532, 4;
	add.s64 	%rd162, %rd2, %rd161;
	ld.global.nc.u32 	%r533, [%rd162];
	add.s32 	%r534, %r512, %r99;
	mul.wide.s32 	%rd163, %r534, 4;
	add.s64 	%rd164, %rd1, %rd163;
	st.global.u32 	[%rd164], %r533;
	add.s32 	%r535, %r505, 2;
	min.s32 	%r536, %r535, %r203;
	add.s32 	%r537, %r536, -1;
	max.s32 	%r538, %r537, %r209;
	mul.lo.s32 	%r539, %r538, %r211;
	add.s32 	%r540, %r539, %r98;
	mul.wide.s32 	%rd165, %r540, 4;
	add.s64 	%rd166, %rd2, %rd165;
	ld.global.nc.u32 	%r541, [%rd166];
	add.s32 	%r542, %r504, %r216;
	mul.lo.s32 	%r543, %r542, %r206;
	add.s32 	%r544, %r543, %r106;
	mul.wide.s32 	%rd167, %r544, 4;
	add.s64 	%rd168, %rd1, %rd167;
	st.global.u32 	[%rd168], %r541;
	add.s32 	%r545, %r539, %r97;
	mul.wide.s32 	%rd169, %r545, 4;
	add.s64 	%rd170, %rd2, %rd169;
	ld.global.nc.u32 	%r546, [%rd170];
	add.s32 	%r547, %r543, %r105;
	mul.wide.s32 	%rd171, %r547, 4;
	add.s64 	%rd172, %rd1, %rd171;
	st.global.u32 	[%rd172], %r546;
	add.s32 	%r548, %r539, %r96;
	mul.wide.s32 	%rd173, %r548, 4;
	add.s64 	%rd174, %rd2, %rd173;
	ld.global.nc.u32 	%r549, [%rd174];
	add.s32 	%r550, %r543, %r104;
	mul.wide.s32 	%rd175, %r550, 4;
	add.s64 	%rd176, %rd1, %rd175;
	st.global.u32 	[%rd176], %r549;
	add.s32 	%r551, %r539, %r95;
	mul.wide.s32 	%rd177, %r551, 4;
	add.s64 	%rd178, %rd2, %rd177;
	ld.global.nc.u32 	%r552, [%rd178];
	add.s32 	%r553, %r543, %r103;
	mul.wide.s32 	%rd179, %r553, 4;
	add.s64 	%rd180, %rd1, %rd179;
	st.global.u32 	[%rd180], %r552;
	add.s32 	%r554, %r539, %r94;
	mul.wide.s32 	%rd181, %r554, 4;
	add.s64 	%rd182, %rd2, %rd181;
	ld.global.nc.u32 	%r555, [%rd182];
	add.s32 	%r556, %r543, %r102;
	mul.wide.s32 	%rd183, %r556, 4;
	add.s64 	%rd184, %rd1, %rd183;
	st.global.u32 	[%rd184], %r555;
	add.s32 	%r557, %r539, %r93;
	mul.wide.s32 	%rd185, %r557, 4;
	add.s64 	%rd186, %rd2, %rd185;
	ld.global.nc.u32 	%r558, [%rd186];
	add.s32 	%r559, %r543, %r101;
	mul.wide.s32 	%rd187, %r559, 4;
	add.s64 	%rd188, %rd1, %rd187;
	st.global.u32 	[%rd188], %r558;
	add.s32 	%r560, %r539, %r92;
	mul.wide.s32 	%rd189, %r560, 4;
	add.s64 	%rd190, %rd2, %rd189;
	ld.global.nc.u32 	%r561, [%rd190];
	add.s32 	%r562, %r543, %r100;
	mul.wide.s32 	%rd191, %r562, 4;
	add.s64 	%rd192, %rd1, %rd191;
	st.global.u32 	[%rd192], %r561;
	add.s32 	%r563, %r539, %r91;
	mul.wide.s32 	%rd193, %r563, 4;
	add.s64 	%rd194, %rd2, %rd193;
	ld.global.nc.u32 	%r564, [%rd194];
	add.s32 	%r565, %r543, %r99;
	mul.wide.s32 	%rd195, %r565, 4;
	add.s64 	%rd196, %rd1, %rd195;
	st.global.u32 	[%rd196], %r564;
	add.s32 	%r743, %r743, 4;
	add.s32 	%r742, %r742, -1;
	setp.eq.s32 	%p15, %r742, 0;
	@%p15 bra 	LBB4_15;
	bra.uni 	LBB4_13;
LBB4_15:                                // %after_bb
	ret;
                                        // -- End function
}
	// .globl	kernel_vert_log_s1_x_x___block_id_x // -- Begin function kernel_vert_log_s1_x_x___block_id_x
.visible .entry kernel_vert_log_s1_x_x___block_id_x(
	.param .u32 kernel_vert_log_s1_x_x___block_id_x_param_0,
	.param .u32 kernel_vert_log_s1_x_x___block_id_x_param_1,
	.param .u32 kernel_vert_log_s1_x_x___block_id_x_param_2,
	.param .u32 kernel_vert_log_s1_x_x___block_id_x_param_3,
	.param .u32 kernel_vert_log_s1_x_x___block_id_x_param_4,
	.param .u32 kernel_vert_log_s1_x_x___block_id_x_param_5,
	.param .u32 kernel_vert_log_s1_x_x___block_id_x_param_6,
	.param .u32 kernel_vert_log_s1_x_x___block_id_x_param_7,
	.param .u32 kernel_vert_log_s1_x_x___block_id_x_param_8,
	.param .u64 kernel_vert_log_s1_x_x___block_id_x_param_9
)                                       // @kernel_vert_log_s1_x_x___block_id_x
{
	.reg .pred 	%p<26>;
	.reg .f32 	%f<46>;
	.reg .b32 	%r<253>;
	.reg .b64 	%rd<102>;

// %bb.0:                               // %entry
	ld.param.u32 	%r105, [kernel_vert_log_s1_x_x___block_id_x_param_3];
	setp.lt.s32 	%p1, %r105, 1;
	@%p1 bra 	LBB5_4;
// %bb.1:                               // %"for vert_log.s1.c.c.c_serial_outer.preheader"
	ld.param.u32 	%r110, [kernel_vert_log_s1_x_x___block_id_x_param_8];
	ld.param.u32 	%r109, [kernel_vert_log_s1_x_x___block_id_x_param_7];
	ld.param.u32 	%r108, [kernel_vert_log_s1_x_x___block_id_x_param_6];
	ld.param.u32 	%r107, [kernel_vert_log_s1_x_x___block_id_x_param_5];
	ld.param.u32 	%r106, [kernel_vert_log_s1_x_x___block_id_x_param_4];
	ld.param.u32 	%r104, [kernel_vert_log_s1_x_x___block_id_x_param_2];
	ld.param.u32 	%r103, [kernel_vert_log_s1_x_x___block_id_x_param_1];
	ld.param.u32 	%r102, [kernel_vert_log_s1_x_x___block_id_x_param_0];
	ld.param.u64 	%rd17, [kernel_vert_log_s1_x_x___block_id_x_param_9];
	cvta.to.global.u64 	%rd1, %rd17;
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %tid.y;
	mov.u32 	%r3, %tid.x;
	shl.b32 	%r111, %r1, 6;
	add.s32 	%r4, %r3, %r111;
	mul.lo.s32 	%r5, %r4, 7;
	add.s32 	%r6, %r107, -1;
	and.b32  	%r7, %r107, 1;
	sub.s32 	%r8, %r107, %r7;
	add.s32 	%r113, %r108, -25;
	mul.lo.s32 	%r114, %r109, %r113;
	cvt.s64.s32 	%rd2, %r114;
	shl.b32 	%r115, %r2, 1;
	add.s32 	%r116, %r103, %r115;
	mul.lo.s32 	%r117, %r110, %r116;
	mul.lo.s32 	%r118, %r1, 448;
	add.s32 	%r119, %r117, %r118;
	mul.lo.s32 	%r120, %r3, 7;
	add.s32 	%r33, %r119, %r120;
	shl.b32 	%r10, %r110, 2;
	shl.b32 	%r11, %r109, 1;
	mul.wide.s32 	%rd3, %r11, 4;
	add.s32 	%r121, %r108, -24;
	mad.lo.s32 	%r122, %r109, %r121, %r117;
	add.s32 	%r123, %r122, %r118;
	add.s32 	%r12, %r123, %r120;
	add.s32 	%r124, %r117, %r114;
	add.s32 	%r125, %r124, %r118;
	add.s32 	%r13, %r125, %r120;
	add.s32 	%r126, %r108, -26;
	mul.lo.s32 	%r127, %r109, %r126;
	cvt.s64.s32 	%rd4, %r127;
	add.s32 	%r128, %r117, %r127;
	add.s32 	%r129, %r128, %r118;
	add.s32 	%r14, %r129, %r120;
	add.s32 	%r130, %r108, -23;
	mad.lo.s32 	%r131, %r109, %r130, %r117;
	add.s32 	%r132, %r131, %r118;
	add.s32 	%r133, %r132, %r120;
	add.s32 	%r31, %r133, 1;
	sub.s32 	%r16, %r7, %r107;
	add.s32 	%r30, %r12, 1;
	add.s32 	%r134, %r108, -21;
	mad.lo.s32 	%r135, %r109, %r134, %r117;
	add.s32 	%r136, %r135, %r118;
	add.s32 	%r137, %r136, %r120;
	add.s32 	%r29, %r137, 2;
	add.s32 	%r138, %r108, -22;
	mad.lo.s32 	%r139, %r109, %r138, %r117;
	add.s32 	%r140, %r139, %r118;
	add.s32 	%r141, %r140, %r120;
	add.s32 	%r28, %r141, 2;
	add.s32 	%r142, %r108, -17;
	mad.lo.s32 	%r143, %r109, %r142, %r117;
	add.s32 	%r144, %r143, %r118;
	add.s32 	%r145, %r144, %r120;
	add.s32 	%r27, %r145, 3;
	add.s32 	%r146, %r108, -18;
	mad.lo.s32 	%r147, %r109, %r146, %r117;
	add.s32 	%r148, %r147, %r118;
	add.s32 	%r149, %r148, %r120;
	add.s32 	%r26, %r149, 3;
	add.s32 	%r150, %r108, -9;
	mad.lo.s32 	%r151, %r109, %r150, %r117;
	add.s32 	%r152, %r151, %r118;
	add.s32 	%r153, %r152, %r120;
	add.s32 	%r25, %r153, 4;
	add.s32 	%r154, %r108, -10;
	mad.lo.s32 	%r155, %r109, %r154, %r117;
	add.s32 	%r156, %r155, %r118;
	add.s32 	%r157, %r156, %r120;
	add.s32 	%r24, %r157, 4;
	mov.u32 	%r32, 0;
	setp.ge.s32 	%p2, %r4, %r104;
	setp.lt.s32 	%p5, %r107, 1;
	setp.eq.s32 	%p9, %r6, 0;
	setp.eq.s32 	%p11, %r7, 0;
	mov.u32 	%r34, %r32;
LBB5_2:                                 // %"for vert_log.s1.c.c.c_serial_outer"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB5_7 Depth 2
                                        //       Child Loop BB5_9 Depth 3
                                        //       Child Loop BB5_15 Depth 3
                                        //       Child Loop BB5_20 Depth 3
                                        //       Child Loop BB5_25 Depth 3
                                        //       Child Loop BB5_30 Depth 3
	shl.b32 	%r158, %r34, 1;
	add.s32 	%r35, %r158, %r2;
	setp.ge.s32 	%p3, %r35, %r106;
	or.pred  	%p4, %p2, %p3;
	@%p4 bra 	LBB5_3;
// %bb.5:                               // %true_bb1
                                        //   in Loop: Header=BB5_2 Depth=1
	shl.b32 	%r159, %r35, 1;
	sub.s32 	%r160, %r102, %r159;
	setp.lt.s32 	%p6, %r160, 1;
	or.pred  	%p8, %p5, %p6;
	@%p8 bra 	LBB5_3;
// %bb.6:                               // %"for vert_log.s1.c.ci.us.preheader"
                                        //   in Loop: Header=BB5_2 Depth=1
	min.s32 	%r161, %r160, 2;
	setp.gt.s32 	%p7, %r160, 0;
	selp.b32 	%r47, %r161, 0, %p7;
	add.s32 	%r48, %r159, %r103;
	mov.u32 	%r237, 0;
	mov.u32 	%r227, %r24;
	mov.u32 	%r228, %r25;
	mov.u32 	%r229, %r26;
	mov.u32 	%r230, %r27;
	mov.u32 	%r231, %r28;
	mov.u32 	%r232, %r29;
	mov.u32 	%r233, %r30;
	mov.u32 	%r234, %r31;
	mov.u32 	%r235, %r32;
	mov.u32 	%r236, %r33;
LBB5_7:                                 // %"for vert_log.s1.c.ci.us"
                                        //   Parent Loop BB5_2 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB5_9 Depth 3
                                        //       Child Loop BB5_15 Depth 3
                                        //       Child Loop BB5_20 Depth 3
                                        //       Child Loop BB5_25 Depth 3
                                        //       Child Loop BB5_30 Depth 3
	cvt.s64.s32 	%rd18, %r236;
	add.s64 	%rd19, %rd2, %rd18;
	shl.b64 	%rd20, %rd19, 2;
	add.s64 	%rd5, %rd1, %rd20;
	add.s64 	%rd21, %rd4, %rd18;
	shl.b64 	%rd22, %rd21, 2;
	add.s64 	%rd6, %rd1, %rd22;
	add.s32 	%r164, %r48, %r237;
	mov.u32 	%r238, -26;
	@%p9 bra 	LBB5_11;
// %bb.8:                               // %"for vert_log.s1.r4$x.us.us.preheader"
                                        //   in Loop: Header=BB5_7 Depth=2
	mov.u64 	%rd97, 4;
	mov.u32 	%r239, 0;
	mov.u32 	%r240, %r235;
LBB5_9:                                 // %"for vert_log.s1.r4$x.us.us"
                                        //   Parent Loop BB5_2 Depth=1
                                        //     Parent Loop BB5_7 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	add.s32 	%r166, %r14, %r240;
	mul.wide.s32 	%rd24, %r166, 4;
	add.s64 	%rd25, %rd1, %rd24;
	ld.global.f32 	%f1, [%rd25];
	add.s32 	%r167, %r13, %r240;
	mul.wide.s32 	%rd26, %r167, 4;
	add.s64 	%rd27, %rd1, %rd26;
	ld.global.f32 	%f2, [%rd27];
	max.ftz.f32 	%f3, %f1, %f2;
	add.s64 	%rd28, %rd6, %rd97;
	st.global.f32 	[%rd28], %f3;
	ld.global.f32 	%f4, [%rd27];
	add.s32 	%r168, %r12, %r240;
	mul.wide.s32 	%rd29, %r168, 4;
	add.s64 	%rd30, %rd1, %rd29;
	ld.global.f32 	%f5, [%rd30];
	max.ftz.f32 	%f6, %f4, %f5;
	add.s64 	%rd31, %rd5, %rd97;
	st.global.f32 	[%rd31], %f6;
	add.s64 	%rd97, %rd97, %rd3;
	add.s32 	%r240, %r240, %r11;
	add.s32 	%r239, %r239, 2;
	setp.eq.s32 	%p10, %r8, %r239;
	@%p10 bra 	LBB5_10;
	bra.uni 	LBB5_9;
LBB5_10:                                // %"end for vert_log.s1.r4$x.loopexit.us.us.unr-lcssa.loopexit"
                                        //   in Loop: Header=BB5_7 Depth=2
	add.s32 	%r238, %r8, -26;
LBB5_11:                                // %"end for vert_log.s1.r4$x.loopexit.us.us.unr-lcssa"
                                        //   in Loop: Header=BB5_7 Depth=2
	mad.lo.s32 	%r60, %r164, %r110, %r5;
	@%p11 bra 	LBB5_13;
// %bb.12:                              // %"for vert_log.s1.r4$x.us.us.epil"
                                        //   in Loop: Header=BB5_7 Depth=2
	add.s32 	%r169, %r238, %r108;
	mul.lo.s32 	%r170, %r169, %r109;
	add.s32 	%r171, %r170, %r60;
	mul.wide.s32 	%rd32, %r171, 4;
	add.s64 	%rd33, %rd1, %rd32;
	ld.global.f32 	%f7, [%rd33];
	add.s32 	%r172, %r171, %r109;
	mul.wide.s32 	%rd34, %r172, 4;
	add.s64 	%rd35, %rd1, %rd34;
	ld.global.f32 	%f8, [%rd35];
	max.ftz.f32 	%f9, %f7, %f8;
	cvt.s64.s32 	%rd36, %r170;
	cvt.s64.s32 	%rd37, %r60;
	add.s64 	%rd38, %rd36, %rd37;
	shl.b64 	%rd39, %rd38, 2;
	add.s64 	%rd40, %rd1, %rd39;
	st.global.f32 	[%rd40+4], %f9;
LBB5_13:                                // %"end for vert_log.s1.r4$x.loopexit.us.us"
                                        //   in Loop: Header=BB5_7 Depth=2
	mov.u32 	%r243, -26;
	@%p9 bra 	LBB5_16;
// %bb.14:                              // %"for vert_log.s1.r4$x.us.us.1.preheader"
                                        //   in Loop: Header=BB5_7 Depth=2
	mov.u32 	%r243, -26;
	mov.u32 	%r241, 0;
	mov.u64 	%rd98, 4;
LBB5_15:                                // %"for vert_log.s1.r4$x.us.us.1"
                                        //   Parent Loop BB5_2 Depth=1
                                        //     Parent Loop BB5_7 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	add.s64 	%rd42, %rd6, %rd98;
	ld.global.f32 	%f10, [%rd42];
	add.s32 	%r176, %r233, %r241;
	mul.wide.s32 	%rd43, %r176, 4;
	add.s64 	%rd44, %rd1, %rd43;
	ld.global.f32 	%f11, [%rd44];
	max.ftz.f32 	%f12, %f10, %f11;
	st.global.f32 	[%rd42+4], %f12;
	add.s64 	%rd45, %rd5, %rd98;
	ld.global.f32 	%f13, [%rd45];
	add.s32 	%r177, %r234, %r241;
	mul.wide.s32 	%rd46, %r177, 4;
	add.s64 	%rd47, %rd1, %rd46;
	ld.global.f32 	%f14, [%rd47];
	max.ftz.f32 	%f15, %f13, %f14;
	st.global.f32 	[%rd45+4], %f15;
	add.s32 	%r243, %r243, 2;
	add.s32 	%r241, %r241, %r11;
	add.s32 	%r178, %r16, %r243;
	add.s64 	%rd98, %rd98, %rd3;
	setp.ne.s32 	%p13, %r178, -26;
	@%p13 bra 	LBB5_15;
LBB5_16:                                // %"end for vert_log.s1.r4$x.loopexit.us.us.1.unr-lcssa"
                                        //   in Loop: Header=BB5_7 Depth=2
	@%p11 bra 	LBB5_18;
// %bb.17:                              // %"for vert_log.s1.r4$x.us.us.1.epil"
                                        //   in Loop: Header=BB5_7 Depth=2
	add.s32 	%r63, %r60, 1;
	add.s32 	%r179, %r243, %r108;
	mul.lo.s32 	%r180, %r179, %r109;
	cvt.s64.s32 	%rd48, %r180;
	cvt.s64.s32 	%rd49, %r60;
	add.s64 	%rd50, %rd48, %rd49;
	shl.b64 	%rd51, %rd50, 2;
	add.s64 	%rd52, %rd1, %rd51;
	ld.global.f32 	%f16, [%rd52+4];
	add.s32 	%r181, %r180, %r11;
	add.s32 	%r182, %r63, %r181;
	mul.wide.s32 	%rd53, %r182, 4;
	add.s64 	%rd54, %rd1, %rd53;
	ld.global.f32 	%f17, [%rd54];
	max.ftz.f32 	%f18, %f16, %f17;
	st.global.f32 	[%rd52+8], %f18;
LBB5_18:                                // %"end for vert_log.s1.r4$x.loopexit.us.us.1"
                                        //   in Loop: Header=BB5_7 Depth=2
	mov.u32 	%r246, -26;
	@%p9 bra 	LBB5_21;
// %bb.19:                              // %"for vert_log.s1.r4$x.us.us.2.preheader"
                                        //   in Loop: Header=BB5_7 Depth=2
	mov.u32 	%r246, -26;
	mov.u32 	%r244, 0;
	mov.u64 	%rd99, 8;
LBB5_20:                                // %"for vert_log.s1.r4$x.us.us.2"
                                        //   Parent Loop BB5_2 Depth=1
                                        //     Parent Loop BB5_7 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	add.s64 	%rd56, %rd6, %rd99;
	ld.global.f32 	%f19, [%rd56];
	add.s32 	%r186, %r231, %r244;
	mul.wide.s32 	%rd57, %r186, 4;
	add.s64 	%rd58, %rd1, %rd57;
	ld.global.f32 	%f20, [%rd58];
	max.ftz.f32 	%f21, %f19, %f20;
	st.global.f32 	[%rd56+4], %f21;
	add.s64 	%rd59, %rd5, %rd99;
	ld.global.f32 	%f22, [%rd59];
	add.s32 	%r187, %r232, %r244;
	mul.wide.s32 	%rd60, %r187, 4;
	add.s64 	%rd61, %rd1, %rd60;
	ld.global.f32 	%f23, [%rd61];
	max.ftz.f32 	%f24, %f22, %f23;
	st.global.f32 	[%rd59+4], %f24;
	add.s32 	%r246, %r246, 2;
	add.s32 	%r244, %r244, %r11;
	add.s32 	%r188, %r16, %r246;
	add.s64 	%rd99, %rd99, %rd3;
	setp.ne.s32 	%p16, %r188, -26;
	@%p16 bra 	LBB5_20;
LBB5_21:                                // %"end for vert_log.s1.r4$x.loopexit.us.us.2.unr-lcssa"
                                        //   in Loop: Header=BB5_7 Depth=2
	@%p11 bra 	LBB5_23;
// %bb.22:                              // %"for vert_log.s1.r4$x.us.us.2.epil"
                                        //   in Loop: Header=BB5_7 Depth=2
	add.s32 	%r73, %r60, 2;
	add.s32 	%r189, %r246, %r108;
	mul.lo.s32 	%r190, %r189, %r109;
	cvt.s64.s32 	%rd62, %r190;
	cvt.s64.s32 	%rd63, %r60;
	add.s64 	%rd64, %rd62, %rd63;
	shl.b64 	%rd65, %rd64, 2;
	add.s64 	%rd66, %rd1, %rd65;
	ld.global.f32 	%f25, [%rd66+8];
	shl.b32 	%r191, %r109, 2;
	add.s32 	%r192, %r190, %r191;
	add.s32 	%r193, %r73, %r192;
	mul.wide.s32 	%rd67, %r193, 4;
	add.s64 	%rd68, %rd1, %rd67;
	ld.global.f32 	%f26, [%rd68];
	max.ftz.f32 	%f27, %f25, %f26;
	st.global.f32 	[%rd66+12], %f27;
LBB5_23:                                // %"end for vert_log.s1.r4$x.loopexit.us.us.2"
                                        //   in Loop: Header=BB5_7 Depth=2
	mov.u32 	%r249, -26;
	@%p9 bra 	LBB5_26;
// %bb.24:                              // %"for vert_log.s1.r4$x.us.us.3.preheader"
                                        //   in Loop: Header=BB5_7 Depth=2
	mov.u32 	%r249, -26;
	mov.u32 	%r247, 0;
	mov.u64 	%rd100, 12;
LBB5_25:                                // %"for vert_log.s1.r4$x.us.us.3"
                                        //   Parent Loop BB5_2 Depth=1
                                        //     Parent Loop BB5_7 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	add.s64 	%rd70, %rd6, %rd100;
	ld.global.f32 	%f28, [%rd70];
	add.s32 	%r197, %r229, %r247;
	mul.wide.s32 	%rd71, %r197, 4;
	add.s64 	%rd72, %rd1, %rd71;
	ld.global.f32 	%f29, [%rd72];
	max.ftz.f32 	%f30, %f28, %f29;
	st.global.f32 	[%rd70+4], %f30;
	add.s64 	%rd73, %rd5, %rd100;
	ld.global.f32 	%f31, [%rd73];
	add.s32 	%r198, %r230, %r247;
	mul.wide.s32 	%rd74, %r198, 4;
	add.s64 	%rd75, %rd1, %rd74;
	ld.global.f32 	%f32, [%rd75];
	max.ftz.f32 	%f33, %f31, %f32;
	st.global.f32 	[%rd73+4], %f33;
	add.s32 	%r249, %r249, 2;
	add.s32 	%r247, %r247, %r11;
	add.s32 	%r199, %r16, %r249;
	add.s64 	%rd100, %rd100, %rd3;
	setp.ne.s32 	%p19, %r199, -26;
	@%p19 bra 	LBB5_25;
LBB5_26:                                // %"end for vert_log.s1.r4$x.loopexit.us.us.3.unr-lcssa"
                                        //   in Loop: Header=BB5_7 Depth=2
	@%p11 bra 	LBB5_28;
// %bb.27:                              // %"for vert_log.s1.r4$x.us.us.3.epil"
                                        //   in Loop: Header=BB5_7 Depth=2
	add.s32 	%r79, %r60, 3;
	add.s32 	%r200, %r249, %r108;
	mul.lo.s32 	%r201, %r200, %r109;
	cvt.s64.s32 	%rd76, %r201;
	cvt.s64.s32 	%rd77, %r60;
	add.s64 	%rd78, %rd76, %rd77;
	shl.b64 	%rd79, %rd78, 2;
	add.s64 	%rd80, %rd1, %rd79;
	ld.global.f32 	%f34, [%rd80+12];
	shl.b32 	%r202, %r109, 3;
	add.s32 	%r203, %r201, %r202;
	add.s32 	%r204, %r79, %r203;
	mul.wide.s32 	%rd81, %r204, 4;
	add.s64 	%rd82, %rd1, %rd81;
	ld.global.f32 	%f35, [%rd82];
	max.ftz.f32 	%f36, %f34, %f35;
	st.global.f32 	[%rd80+16], %f36;
LBB5_28:                                // %"end for vert_log.s1.r4$x.loopexit.us.us.3"
                                        //   in Loop: Header=BB5_7 Depth=2
	mov.u32 	%r252, -26;
	@%p9 bra 	LBB5_31;
// %bb.29:                              // %"for vert_log.s1.r4$x.us.us.4.preheader"
                                        //   in Loop: Header=BB5_7 Depth=2
	mov.u32 	%r252, -26;
	mov.u32 	%r250, 0;
	mov.u64 	%rd101, 16;
LBB5_30:                                // %"for vert_log.s1.r4$x.us.us.4"
                                        //   Parent Loop BB5_2 Depth=1
                                        //     Parent Loop BB5_7 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	add.s64 	%rd84, %rd6, %rd101;
	ld.global.f32 	%f37, [%rd84];
	add.s32 	%r208, %r227, %r250;
	mul.wide.s32 	%rd85, %r208, 4;
	add.s64 	%rd86, %rd1, %rd85;
	ld.global.f32 	%f38, [%rd86];
	max.ftz.f32 	%f39, %f37, %f38;
	st.global.f32 	[%rd84+4], %f39;
	add.s64 	%rd87, %rd5, %rd101;
	ld.global.f32 	%f40, [%rd87];
	add.s32 	%r209, %r228, %r250;
	mul.wide.s32 	%rd88, %r209, 4;
	add.s64 	%rd89, %rd1, %rd88;
	ld.global.f32 	%f41, [%rd89];
	max.ftz.f32 	%f42, %f40, %f41;
	st.global.f32 	[%rd87+4], %f42;
	add.s32 	%r252, %r252, 2;
	add.s32 	%r250, %r250, %r11;
	add.s32 	%r210, %r16, %r252;
	add.s64 	%rd101, %rd101, %rd3;
	setp.ne.s32 	%p22, %r210, -26;
	@%p22 bra 	LBB5_30;
LBB5_31:                                // %"end for vert_log.s1.r4$x.loopexit.us.us.4.unr-lcssa"
                                        //   in Loop: Header=BB5_7 Depth=2
	@%p11 bra 	LBB5_33;
// %bb.32:                              // %"for vert_log.s1.r4$x.us.us.4.epil"
                                        //   in Loop: Header=BB5_7 Depth=2
	add.s32 	%r85, %r60, 4;
	add.s32 	%r211, %r252, %r108;
	mul.lo.s32 	%r212, %r211, %r109;
	cvt.s64.s32 	%rd90, %r212;
	cvt.s64.s32 	%rd91, %r60;
	add.s64 	%rd92, %rd90, %rd91;
	shl.b64 	%rd93, %rd92, 2;
	add.s64 	%rd94, %rd1, %rd93;
	ld.global.f32 	%f43, [%rd94+16];
	shl.b32 	%r213, %r109, 4;
	add.s32 	%r214, %r212, %r213;
	add.s32 	%r215, %r85, %r214;
	mul.wide.s32 	%rd95, %r215, 4;
	add.s64 	%rd96, %rd1, %rd95;
	ld.global.f32 	%f44, [%rd96];
	max.ftz.f32 	%f45, %f43, %f44;
	st.global.f32 	[%rd94+20], %f45;
LBB5_33:                                // %"end for vert_log.s1.r4$x.loopexit.us.us.4"
                                        //   in Loop: Header=BB5_7 Depth=2
	add.s32 	%r237, %r237, 1;
	add.s32 	%r236, %r236, %r110;
	add.s32 	%r235, %r235, %r110;
	add.s32 	%r234, %r234, %r110;
	add.s32 	%r233, %r233, %r110;
	add.s32 	%r232, %r232, %r110;
	add.s32 	%r231, %r231, %r110;
	add.s32 	%r230, %r230, %r110;
	add.s32 	%r229, %r229, %r110;
	add.s32 	%r228, %r228, %r110;
	add.s32 	%r227, %r227, %r110;
	setp.eq.s32 	%p24, %r237, %r47;
	@%p24 bra 	LBB5_3;
	bra.uni 	LBB5_7;
LBB5_3:                                 // %after_bb
                                        //   in Loop: Header=BB5_2 Depth=1
	bar.sync 	0;
	add.s32 	%r34, %r34, 1;
	add.s32 	%r33, %r33, %r10;
	add.s32 	%r32, %r32, %r10;
	add.s32 	%r31, %r31, %r10;
	add.s32 	%r30, %r30, %r10;
	add.s32 	%r29, %r29, %r10;
	add.s32 	%r28, %r28, %r10;
	add.s32 	%r27, %r27, %r10;
	add.s32 	%r26, %r26, %r10;
	add.s32 	%r25, %r25, %r10;
	add.s32 	%r24, %r24, %r10;
	setp.eq.s32 	%p25, %r34, %r105;
	@%p25 bra 	LBB5_4;
	bra.uni 	LBB5_2;
LBB5_4:                                 // %"end for vert_log.s1.c.c.c_serial_outer"
	ret;
                                        // -- End function
}
	// .globl	kernel_vert_s0_y_y___block_id_y // -- Begin function kernel_vert_s0_y_y___block_id_y
.visible .entry kernel_vert_s0_y_y___block_id_y(
	.param .u32 kernel_vert_s0_y_y___block_id_y_param_0,
	.param .u32 kernel_vert_s0_y_y___block_id_y_param_1,
	.param .u32 kernel_vert_s0_y_y___block_id_y_param_2,
	.param .u32 kernel_vert_s0_y_y___block_id_y_param_3,
	.param .u32 kernel_vert_s0_y_y___block_id_y_param_4,
	.param .u32 kernel_vert_s0_y_y___block_id_y_param_5,
	.param .u32 kernel_vert_s0_y_y___block_id_y_param_6,
	.param .u32 kernel_vert_s0_y_y___block_id_y_param_7,
	.param .u32 kernel_vert_s0_y_y___block_id_y_param_8,
	.param .u32 kernel_vert_s0_y_y___block_id_y_param_9,
	.param .u32 kernel_vert_s0_y_y___block_id_y_param_10,
	.param .u32 kernel_vert_s0_y_y___block_id_y_param_11,
	.param .u32 kernel_vert_s0_y_y___block_id_y_param_12,
	.param .u64 kernel_vert_s0_y_y___block_id_y_param_13,
	.param .u64 kernel_vert_s0_y_y___block_id_y_param_14,
	.param .u64 kernel_vert_s0_y_y___block_id_y_param_15
)                                       // @kernel_vert_s0_y_y___block_id_y
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<85>;
	.reg .b32 	%r<602>;
	.reg .b64 	%rd<153>;

// %bb.0:                               // %entry
	ld.param.u32 	%r212, [kernel_vert_s0_y_y___block_id_y_param_12];
	ld.param.u32 	%r211, [kernel_vert_s0_y_y___block_id_y_param_10];
	ld.param.u32 	%r208, [kernel_vert_s0_y_y___block_id_y_param_7];
	ld.param.u32 	%r207, [kernel_vert_s0_y_y___block_id_y_param_6];
	ld.param.u32 	%r206, [kernel_vert_s0_y_y___block_id_y_param_4];
	ld.param.u32 	%r205, [kernel_vert_s0_y_y___block_id_y_param_3];
	ld.param.u32 	%r204, [kernel_vert_s0_y_y___block_id_y_param_2];
	ld.param.u32 	%r203, [kernel_vert_s0_y_y___block_id_y_param_1];
	ld.param.u32 	%r202, [kernel_vert_s0_y_y___block_id_y_param_0];
	ld.param.u64 	%rd4, [kernel_vert_s0_y_y___block_id_y_param_15];
	cvta.to.global.u64 	%rd1, %rd4;
	ld.param.u64 	%rd5, [kernel_vert_s0_y_y___block_id_y_param_14];
	cvta.to.global.u64 	%rd2, %rd5;
	ld.param.u64 	%rd6, [kernel_vert_s0_y_y___block_id_y_param_13];
	cvta.to.global.u64 	%rd3, %rd6;
	mov.u32 	%r213, %ctaid.y;
	mov.u32 	%r214, %ctaid.x;
	ld.param.u32 	%r215, [kernel_vert_s0_y_y___block_id_y_param_5];
	mov.u32 	%r216, %tid.z;
	mov.u32 	%r1, %tid.y;
	mov.u32 	%r2, %tid.x;
	shl.b32 	%r3, %r213, 6;
	min.s32 	%r217, %r3, %r206;
	ld.param.u32 	%r218, [kernel_vert_s0_y_y___block_id_y_param_11];
	setp.ge.s32 	%p1, %r2, %r215;
	shl.b32 	%r4, %r214, 1;
	add.s32 	%r219, %r202, 50;
	min.s32 	%r5, %r4, %r219;
	mul.lo.s32 	%r6, %r216, 7;
	add.s32 	%r7, %r217, %r211;
	add.s32 	%r8, %r7, %r6;
	sub.s32 	%r220, %r7, %r6;
	add.s32 	%r221, %r220, %r1;
	add.s32 	%r222, %r221, 114;
	mul.lo.s32 	%r223, %r222, %r208;
	sub.s32 	%r9, %r223, %r208;
	sub.s32 	%r10, %r9, %r208;
	sub.s32 	%r11, %r10, %r208;
	sub.s32 	%r12, %r11, %r208;
	sub.s32 	%r13, %r12, %r208;
	mul.lo.s32 	%r14, %r6, %r218;
	mad.lo.s32 	%r15, %r218, 6, %r14;
	sub.s32 	%r16, %r15, %r218;
	sub.s32 	%r17, %r16, %r218;
	sub.s32 	%r18, %r17, %r218;
	sub.s32 	%r19, %r18, %r218;
	sub.s32 	%r20, %r19, %r218;
	@%p1 bra 	LBB6_4;
// %bb.1:                               // %true_bb
	ld.param.u32 	%r572, [kernel_vert_s0_y_y___block_id_y_param_8];
	setp.lt.s32 	%p4, %r572, 1;
	@%p4 bra 	LBB6_7;
// %bb.2:                               // %"for vert.s0.c.c_serial_outer.preheader"
	add.s32 	%r21, %r7, 115;
	add.s32 	%r386, %r8, %r1;
	mul.wide.u32 	%rd81, %r6, 4;
	add.s64 	%rd82, %rd3, %rd81;
	ld.global.nc.u32 	%r387, [%rd82];
	sub.s32 	%r388, %r1, %r6;
	add.s32 	%r389, %r388, %r21;
	min.s32 	%r390, %r387, 6;
	max.s32 	%r391, %r390, 0;
	mov.u32 	%r392, 1;
	shl.b32 	%r393, %r392, %r391;
	min.s32 	%r394, %r393, 52;
	max.s32 	%r395, %r394, 0;
	add.s32 	%r396, %r1, %r6;
	add.s32 	%r397, %r396, %r21;
	sub.s32 	%r398, %r397, %r395;
	ld.global.nc.u32 	%r399, [%rd82+4];
	min.s32 	%r400, %r399, 6;
	max.s32 	%r401, %r400, 0;
	shl.b32 	%r402, %r392, %r401;
	min.s32 	%r403, %r402, 52;
	max.s32 	%r404, %r403, 0;
	add.s32 	%r405, %r386, 116;
	sub.s32 	%r406, %r405, %r404;
	ld.global.nc.u32 	%r407, [%rd82+8];
	min.s32 	%r408, %r407, 6;
	max.s32 	%r409, %r408, 0;
	shl.b32 	%r410, %r392, %r409;
	min.s32 	%r411, %r410, 52;
	max.s32 	%r412, %r411, 0;
	add.s32 	%r413, %r386, 117;
	sub.s32 	%r414, %r413, %r412;
	ld.global.nc.u32 	%r415, [%rd82+12];
	min.s32 	%r416, %r415, 6;
	max.s32 	%r417, %r416, 0;
	shl.b32 	%r418, %r392, %r417;
	min.s32 	%r419, %r418, 52;
	max.s32 	%r420, %r419, 0;
	add.s32 	%r421, %r386, 118;
	sub.s32 	%r422, %r421, %r420;
	ld.global.nc.u32 	%r423, [%rd82+16];
	min.s32 	%r424, %r423, 6;
	max.s32 	%r425, %r424, 0;
	shl.b32 	%r426, %r392, %r425;
	min.s32 	%r427, %r426, 52;
	max.s32 	%r428, %r427, 0;
	add.s32 	%r429, %r386, 119;
	sub.s32 	%r430, %r429, %r428;
	ld.global.nc.u32 	%r431, [%rd82+20];
	min.s32 	%r432, %r431, 6;
	max.s32 	%r433, %r432, 0;
	shl.b32 	%r434, %r392, %r433;
	min.s32 	%r435, %r434, 52;
	max.s32 	%r436, %r435, 0;
	add.s32 	%r437, %r386, 120;
	sub.s32 	%r438, %r437, %r436;
	ld.global.nc.u32 	%r439, [%rd82+24];
	min.s32 	%r440, %r439, 6;
	max.s32 	%r441, %r440, 0;
	shl.b32 	%r442, %r392, %r441;
	min.s32 	%r443, %r442, 52;
	max.s32 	%r444, %r443, 0;
	add.s32 	%r445, %r386, 121;
	sub.s32 	%r446, %r445, %r444;
	add.s32 	%r447, %r1, %r205;
	add.s32 	%r448, %r447, -1;
	not.b32 	%r449, %r206;
	not.b32 	%r450, %r3;
	max.s32 	%r451, %r449, %r450;
	sub.s32 	%r452, %r448, %r451;
	mul.lo.s32 	%r22, %r207, %r452;
	add.s32 	%r453, %r2, %r15;
	not.b32 	%r454, %r4;
	mov.u32 	%r455, -51;
	sub.s32 	%r456, %r455, %r202;
	max.s32 	%r457, %r454, %r456;
	mul.lo.s32 	%r458, %r203, %r457;
	sub.s32 	%r571, %r453, %r458;
	mul.lo.s32 	%r459, %r203, %r5;
	add.s32 	%r460, %r2, %r459;
	add.s32 	%r570, %r460, %r15;
	add.s32 	%r461, %r2, %r16;
	sub.s32 	%r569, %r461, %r458;
	add.s32 	%r568, %r460, %r16;
	add.s32 	%r462, %r2, %r17;
	sub.s32 	%r567, %r462, %r458;
	add.s32 	%r566, %r460, %r17;
	add.s32 	%r463, %r2, %r18;
	sub.s32 	%r565, %r463, %r458;
	add.s32 	%r564, %r460, %r18;
	add.s32 	%r464, %r2, %r19;
	sub.s32 	%r563, %r464, %r458;
	add.s32 	%r562, %r460, %r19;
	add.s32 	%r465, %r2, %r20;
	sub.s32 	%r561, %r465, %r458;
	add.s32 	%r560, %r460, %r20;
	add.s32 	%r466, %r2, %r14;
	sub.s32 	%r559, %r466, %r458;
	add.s32 	%r558, %r466, %r459;
	mul.lo.s32 	%r37, %r457, -7;
	mad.lo.s32 	%r467, %r208, %r446, %r441;
	add.s32 	%r468, %r2, %r204;
	mul.lo.s32 	%r469, %r212, %r468;
	add.s32 	%r470, %r467, %r469;
	mul.lo.s32 	%r471, %r202, 7;
	add.s32 	%r557, %r470, %r471;
	mul.lo.s32 	%r39, %r212, 3;
	mad.lo.s32 	%r472, %r208, %r438, %r433;
	add.s32 	%r473, %r472, %r469;
	add.s32 	%r556, %r473, %r471;
	mad.lo.s32 	%r474, %r208, %r430, %r425;
	add.s32 	%r475, %r474, %r469;
	add.s32 	%r555, %r475, %r471;
	mad.lo.s32 	%r476, %r208, %r422, %r417;
	add.s32 	%r477, %r476, %r469;
	add.s32 	%r554, %r477, %r471;
	mad.lo.s32 	%r478, %r208, %r414, %r409;
	add.s32 	%r479, %r478, %r469;
	add.s32 	%r553, %r479, %r471;
	mad.lo.s32 	%r480, %r208, %r406, %r401;
	add.s32 	%r481, %r480, %r469;
	add.s32 	%r552, %r481, %r471;
	mad.lo.s32 	%r482, %r208, %r398, %r391;
	add.s32 	%r483, %r482, %r469;
	add.s32 	%r551, %r483, %r471;
	add.s32 	%r484, %r441, %r13;
	add.s32 	%r485, %r484, %r469;
	add.s32 	%r550, %r485, -7;
	add.s32 	%r486, %r433, %r12;
	add.s32 	%r487, %r486, %r469;
	add.s32 	%r549, %r487, -7;
	add.s32 	%r488, %r425, %r11;
	add.s32 	%r489, %r488, %r469;
	add.s32 	%r548, %r489, -7;
	add.s32 	%r490, %r417, %r10;
	add.s32 	%r491, %r490, %r469;
	add.s32 	%r547, %r491, -7;
	add.s32 	%r492, %r409, %r9;
	add.s32 	%r493, %r492, %r469;
	add.s32 	%r546, %r493, -7;
	add.s32 	%r494, %r1, %r211;
	add.s32 	%r495, %r494, 113;
	sub.s32 	%r496, %r495, %r451;
	sub.s32 	%r497, %r496, %r6;
	mad.lo.s32 	%r498, %r208, %r497, %r401;
	add.s32 	%r499, %r498, %r469;
	add.s32 	%r545, %r499, -7;
	mad.lo.s32 	%r500, %r208, %r389, %r391;
	add.s32 	%r501, %r500, %r469;
	add.s32 	%r544, %r501, -7;
LBB6_3:                                 // %"for vert.s0.c.c_serial_outer"
                                        // =>This Inner Loop Header: Depth=1
	add.s32 	%r502, %r37, %r544;
	mul.wide.s32 	%rd83, %r502, 4;
	add.s64 	%rd84, %rd1, %rd83;
	ld.global.nc.f32 	%f43, [%rd84];
	add.s32 	%r503, %r37, %r551;
	add.s32 	%r504, %r503, 357;
	mul.wide.s32 	%rd85, %r504, 4;
	add.s64 	%rd86, %rd1, %rd85;
	ld.global.nc.f32 	%f44, [%rd86];
	max.ftz.f32 	%f45, %f43, %f44;
	add.s32 	%r505, %r22, %r558;
	mul.wide.s32 	%rd87, %r505, 4;
	add.s64 	%rd88, %rd2, %rd87;
	st.global.f32 	[%rd88], %f45;
	ld.global.nc.f32 	%f46, [%rd84+28];
	add.s32 	%r506, %r503, 364;
	mul.wide.s32 	%rd89, %r506, 4;
	add.s64 	%rd90, %rd1, %rd89;
	ld.global.nc.f32 	%f47, [%rd90];
	max.ftz.f32 	%f48, %f46, %f47;
	add.s32 	%r507, %r22, %r559;
	mul.wide.s32 	%rd91, %r507, 4;
	add.s64 	%rd92, %rd2, %rd91;
	st.global.f32 	[%rd92], %f48;
	add.s32 	%r508, %r37, %r545;
	mul.wide.s32 	%rd93, %r508, 4;
	add.s64 	%rd94, %rd1, %rd93;
	ld.global.nc.f32 	%f49, [%rd94];
	add.s32 	%r509, %r37, %r552;
	add.s32 	%r510, %r509, 357;
	mul.wide.s32 	%rd95, %r510, 4;
	add.s64 	%rd96, %rd1, %rd95;
	ld.global.nc.f32 	%f50, [%rd96];
	max.ftz.f32 	%f51, %f49, %f50;
	add.s32 	%r511, %r22, %r560;
	mul.wide.s32 	%rd97, %r511, 4;
	add.s64 	%rd98, %rd2, %rd97;
	st.global.f32 	[%rd98], %f51;
	ld.global.nc.f32 	%f52, [%rd94+28];
	add.s32 	%r512, %r509, 364;
	mul.wide.s32 	%rd99, %r512, 4;
	add.s64 	%rd100, %rd1, %rd99;
	ld.global.nc.f32 	%f53, [%rd100];
	max.ftz.f32 	%f54, %f52, %f53;
	add.s32 	%r513, %r22, %r561;
	mul.wide.s32 	%rd101, %r513, 4;
	add.s64 	%rd102, %rd2, %rd101;
	st.global.f32 	[%rd102], %f54;
	add.s32 	%r514, %r37, %r546;
	mul.wide.s32 	%rd103, %r514, 4;
	add.s64 	%rd104, %rd1, %rd103;
	ld.global.nc.f32 	%f55, [%rd104];
	add.s32 	%r515, %r37, %r553;
	add.s32 	%r516, %r515, 357;
	mul.wide.s32 	%rd105, %r516, 4;
	add.s64 	%rd106, %rd1, %rd105;
	ld.global.nc.f32 	%f56, [%rd106];
	max.ftz.f32 	%f57, %f55, %f56;
	add.s32 	%r517, %r22, %r562;
	mul.wide.s32 	%rd107, %r517, 4;
	add.s64 	%rd108, %rd2, %rd107;
	st.global.f32 	[%rd108], %f57;
	ld.global.nc.f32 	%f58, [%rd104+28];
	add.s32 	%r518, %r515, 364;
	mul.wide.s32 	%rd109, %r518, 4;
	add.s64 	%rd110, %rd1, %rd109;
	ld.global.nc.f32 	%f59, [%rd110];
	max.ftz.f32 	%f60, %f58, %f59;
	add.s32 	%r519, %r22, %r563;
	mul.wide.s32 	%rd111, %r519, 4;
	add.s64 	%rd112, %rd2, %rd111;
	st.global.f32 	[%rd112], %f60;
	add.s32 	%r520, %r37, %r547;
	mul.wide.s32 	%rd113, %r520, 4;
	add.s64 	%rd114, %rd1, %rd113;
	ld.global.nc.f32 	%f61, [%rd114];
	add.s32 	%r521, %r37, %r554;
	add.s32 	%r522, %r521, 357;
	mul.wide.s32 	%rd115, %r522, 4;
	add.s64 	%rd116, %rd1, %rd115;
	ld.global.nc.f32 	%f62, [%rd116];
	max.ftz.f32 	%f63, %f61, %f62;
	add.s32 	%r523, %r22, %r564;
	mul.wide.s32 	%rd117, %r523, 4;
	add.s64 	%rd118, %rd2, %rd117;
	st.global.f32 	[%rd118], %f63;
	ld.global.nc.f32 	%f64, [%rd114+28];
	add.s32 	%r524, %r521, 364;
	mul.wide.s32 	%rd119, %r524, 4;
	add.s64 	%rd120, %rd1, %rd119;
	ld.global.nc.f32 	%f65, [%rd120];
	max.ftz.f32 	%f66, %f64, %f65;
	add.s32 	%r525, %r22, %r565;
	mul.wide.s32 	%rd121, %r525, 4;
	add.s64 	%rd122, %rd2, %rd121;
	st.global.f32 	[%rd122], %f66;
	add.s32 	%r526, %r37, %r548;
	mul.wide.s32 	%rd123, %r526, 4;
	add.s64 	%rd124, %rd1, %rd123;
	ld.global.nc.f32 	%f67, [%rd124];
	add.s32 	%r527, %r37, %r555;
	add.s32 	%r528, %r527, 357;
	mul.wide.s32 	%rd125, %r528, 4;
	add.s64 	%rd126, %rd1, %rd125;
	ld.global.nc.f32 	%f68, [%rd126];
	max.ftz.f32 	%f69, %f67, %f68;
	add.s32 	%r529, %r22, %r566;
	mul.wide.s32 	%rd127, %r529, 4;
	add.s64 	%rd128, %rd2, %rd127;
	st.global.f32 	[%rd128], %f69;
	ld.global.nc.f32 	%f70, [%rd124+28];
	add.s32 	%r530, %r527, 364;
	mul.wide.s32 	%rd129, %r530, 4;
	add.s64 	%rd130, %rd1, %rd129;
	ld.global.nc.f32 	%f71, [%rd130];
	max.ftz.f32 	%f72, %f70, %f71;
	add.s32 	%r531, %r22, %r567;
	mul.wide.s32 	%rd131, %r531, 4;
	add.s64 	%rd132, %rd2, %rd131;
	st.global.f32 	[%rd132], %f72;
	add.s32 	%r532, %r37, %r549;
	mul.wide.s32 	%rd133, %r532, 4;
	add.s64 	%rd134, %rd1, %rd133;
	ld.global.nc.f32 	%f73, [%rd134];
	add.s32 	%r533, %r37, %r556;
	add.s32 	%r534, %r533, 357;
	mul.wide.s32 	%rd135, %r534, 4;
	add.s64 	%rd136, %rd1, %rd135;
	ld.global.nc.f32 	%f74, [%rd136];
	max.ftz.f32 	%f75, %f73, %f74;
	add.s32 	%r535, %r22, %r568;
	mul.wide.s32 	%rd137, %r535, 4;
	add.s64 	%rd138, %rd2, %rd137;
	st.global.f32 	[%rd138], %f75;
	ld.global.nc.f32 	%f76, [%rd134+28];
	add.s32 	%r536, %r533, 364;
	mul.wide.s32 	%rd139, %r536, 4;
	add.s64 	%rd140, %rd1, %rd139;
	ld.global.nc.f32 	%f77, [%rd140];
	max.ftz.f32 	%f78, %f76, %f77;
	add.s32 	%r537, %r22, %r569;
	mul.wide.s32 	%rd141, %r537, 4;
	add.s64 	%rd142, %rd2, %rd141;
	st.global.f32 	[%rd142], %f78;
	add.s32 	%r538, %r37, %r550;
	mul.wide.s32 	%rd143, %r538, 4;
	add.s64 	%rd144, %rd1, %rd143;
	ld.global.nc.f32 	%f79, [%rd144];
	add.s32 	%r539, %r37, %r557;
	add.s32 	%r540, %r539, 357;
	mul.wide.s32 	%rd145, %r540, 4;
	add.s64 	%rd146, %rd1, %rd145;
	ld.global.nc.f32 	%f80, [%rd146];
	max.ftz.f32 	%f81, %f79, %f80;
	add.s32 	%r541, %r22, %r570;
	mul.wide.s32 	%rd147, %r541, 4;
	add.s64 	%rd148, %rd2, %rd147;
	st.global.f32 	[%rd148], %f81;
	ld.global.nc.f32 	%f82, [%rd144+28];
	add.s32 	%r542, %r539, 364;
	mul.wide.s32 	%rd149, %r542, 4;
	add.s64 	%rd150, %rd1, %rd149;
	ld.global.nc.f32 	%f83, [%rd150];
	max.ftz.f32 	%f84, %f82, %f83;
	add.s32 	%r543, %r22, %r571;
	mul.wide.s32 	%rd151, %r543, 4;
	add.s64 	%rd152, %rd2, %rd151;
	st.global.f32 	[%rd152], %f84;
	add.s32 	%r572, %r572, -1;
	add.s32 	%r571, %r571, 3;
	add.s32 	%r570, %r570, 3;
	add.s32 	%r569, %r569, 3;
	add.s32 	%r568, %r568, 3;
	add.s32 	%r567, %r567, 3;
	add.s32 	%r566, %r566, 3;
	add.s32 	%r565, %r565, 3;
	add.s32 	%r564, %r564, 3;
	add.s32 	%r563, %r563, 3;
	add.s32 	%r562, %r562, 3;
	add.s32 	%r561, %r561, 3;
	add.s32 	%r560, %r560, 3;
	add.s32 	%r559, %r559, 3;
	add.s32 	%r558, %r558, 3;
	add.s32 	%r557, %r557, %r39;
	add.s32 	%r556, %r556, %r39;
	add.s32 	%r555, %r555, %r39;
	add.s32 	%r554, %r554, %r39;
	add.s32 	%r553, %r553, %r39;
	add.s32 	%r552, %r552, %r39;
	add.s32 	%r551, %r551, %r39;
	add.s32 	%r550, %r550, %r39;
	add.s32 	%r549, %r549, %r39;
	add.s32 	%r548, %r548, %r39;
	add.s32 	%r547, %r547, %r39;
	add.s32 	%r546, %r546, %r39;
	add.s32 	%r545, %r545, %r39;
	add.s32 	%r544, %r544, %r39;
	setp.eq.s32 	%p5, %r572, 0;
	@%p5 bra 	LBB6_7;
	bra.uni 	LBB6_3;
LBB6_4:                                 // %false_bb
	ld.param.u32 	%r210, [kernel_vert_s0_y_y___block_id_y_param_9];
	sub.s32 	%r224, %r210, %r2;
	shr.s32 	%r225, %r224, 31;
	xor.b32  	%r226, %r225, %r224;
	mul.wide.u32 	%rd7, %r226, 1431655766;
	shr.u64 	%rd8, %rd7, 32;
	cvt.u32.u64 	%r227, %rd8;
	xor.b32  	%r601, %r225, %r227;
	setp.lt.s32 	%p2, %r601, 1;
	@%p2 bra 	LBB6_7;
// %bb.5:                               // %"for vert.s0.c.c_serial_outer2.preheader"
	add.s32 	%r54, %r7, 115;
	add.s32 	%r228, %r8, %r1;
	mul.wide.u32 	%rd9, %r6, 4;
	add.s64 	%rd10, %rd3, %rd9;
	ld.global.nc.u32 	%r229, [%rd10];
	sub.s32 	%r230, %r1, %r6;
	add.s32 	%r231, %r230, %r54;
	min.s32 	%r232, %r229, 6;
	max.s32 	%r233, %r232, 0;
	mov.u32 	%r234, 1;
	shl.b32 	%r235, %r234, %r233;
	min.s32 	%r236, %r235, 52;
	max.s32 	%r237, %r236, 0;
	add.s32 	%r238, %r1, %r6;
	add.s32 	%r239, %r238, %r54;
	sub.s32 	%r240, %r239, %r237;
	ld.global.nc.u32 	%r241, [%rd10+4];
	min.s32 	%r242, %r241, 6;
	max.s32 	%r243, %r242, 0;
	shl.b32 	%r244, %r234, %r243;
	min.s32 	%r245, %r244, 52;
	max.s32 	%r246, %r245, 0;
	add.s32 	%r247, %r228, 116;
	sub.s32 	%r248, %r247, %r246;
	ld.global.nc.u32 	%r249, [%rd10+8];
	min.s32 	%r250, %r249, 6;
	max.s32 	%r251, %r250, 0;
	shl.b32 	%r252, %r234, %r251;
	min.s32 	%r253, %r252, 52;
	max.s32 	%r254, %r253, 0;
	add.s32 	%r255, %r228, 117;
	sub.s32 	%r256, %r255, %r254;
	ld.global.nc.u32 	%r257, [%rd10+12];
	min.s32 	%r258, %r257, 6;
	max.s32 	%r259, %r258, 0;
	shl.b32 	%r260, %r234, %r259;
	min.s32 	%r261, %r260, 52;
	max.s32 	%r262, %r261, 0;
	add.s32 	%r263, %r228, 118;
	sub.s32 	%r264, %r263, %r262;
	ld.global.nc.u32 	%r265, [%rd10+16];
	min.s32 	%r266, %r265, 6;
	max.s32 	%r267, %r266, 0;
	shl.b32 	%r268, %r234, %r267;
	min.s32 	%r269, %r268, 52;
	max.s32 	%r270, %r269, 0;
	add.s32 	%r271, %r228, 119;
	sub.s32 	%r272, %r271, %r270;
	ld.global.nc.u32 	%r273, [%rd10+20];
	min.s32 	%r274, %r273, 6;
	max.s32 	%r275, %r274, 0;
	shl.b32 	%r276, %r234, %r275;
	min.s32 	%r277, %r276, 52;
	max.s32 	%r278, %r277, 0;
	add.s32 	%r279, %r228, 120;
	sub.s32 	%r280, %r279, %r278;
	ld.global.nc.u32 	%r281, [%rd10+24];
	min.s32 	%r282, %r281, 6;
	max.s32 	%r283, %r282, 0;
	shl.b32 	%r284, %r234, %r283;
	min.s32 	%r285, %r284, 52;
	max.s32 	%r286, %r285, 0;
	add.s32 	%r287, %r228, 121;
	sub.s32 	%r288, %r287, %r286;
	add.s32 	%r289, %r1, %r205;
	add.s32 	%r290, %r289, -1;
	not.b32 	%r291, %r206;
	not.b32 	%r292, %r3;
	max.s32 	%r293, %r291, %r292;
	sub.s32 	%r294, %r290, %r293;
	mul.lo.s32 	%r55, %r207, %r294;
	add.s32 	%r295, %r2, %r15;
	not.b32 	%r296, %r4;
	mov.u32 	%r297, -51;
	sub.s32 	%r298, %r297, %r202;
	max.s32 	%r299, %r296, %r298;
	mul.lo.s32 	%r300, %r203, %r299;
	sub.s32 	%r600, %r295, %r300;
	mul.lo.s32 	%r301, %r203, %r5;
	add.s32 	%r302, %r2, %r301;
	add.s32 	%r599, %r302, %r15;
	add.s32 	%r303, %r2, %r16;
	sub.s32 	%r598, %r303, %r300;
	add.s32 	%r597, %r302, %r16;
	add.s32 	%r304, %r2, %r17;
	sub.s32 	%r596, %r304, %r300;
	add.s32 	%r595, %r302, %r17;
	add.s32 	%r305, %r2, %r18;
	sub.s32 	%r594, %r305, %r300;
	add.s32 	%r593, %r302, %r18;
	add.s32 	%r306, %r2, %r19;
	sub.s32 	%r592, %r306, %r300;
	add.s32 	%r591, %r302, %r19;
	add.s32 	%r307, %r2, %r20;
	sub.s32 	%r590, %r307, %r300;
	add.s32 	%r589, %r302, %r20;
	add.s32 	%r308, %r2, %r14;
	sub.s32 	%r588, %r308, %r300;
	add.s32 	%r587, %r308, %r301;
	mul.lo.s32 	%r70, %r299, -7;
	mad.lo.s32 	%r309, %r208, %r288, %r283;
	add.s32 	%r310, %r2, %r204;
	mul.lo.s32 	%r311, %r212, %r310;
	add.s32 	%r312, %r309, %r311;
	mul.lo.s32 	%r313, %r202, 7;
	add.s32 	%r586, %r312, %r313;
	mul.lo.s32 	%r72, %r212, 3;
	mad.lo.s32 	%r314, %r208, %r280, %r275;
	add.s32 	%r315, %r314, %r311;
	add.s32 	%r585, %r315, %r313;
	mad.lo.s32 	%r316, %r208, %r272, %r267;
	add.s32 	%r317, %r316, %r311;
	add.s32 	%r584, %r317, %r313;
	mad.lo.s32 	%r318, %r208, %r264, %r259;
	add.s32 	%r319, %r318, %r311;
	add.s32 	%r583, %r319, %r313;
	mad.lo.s32 	%r320, %r208, %r256, %r251;
	add.s32 	%r321, %r320, %r311;
	add.s32 	%r582, %r321, %r313;
	mad.lo.s32 	%r322, %r208, %r248, %r243;
	add.s32 	%r323, %r322, %r311;
	add.s32 	%r581, %r323, %r313;
	mad.lo.s32 	%r324, %r208, %r240, %r233;
	add.s32 	%r325, %r324, %r311;
	add.s32 	%r580, %r325, %r313;
	add.s32 	%r326, %r283, %r13;
	add.s32 	%r327, %r326, %r311;
	add.s32 	%r579, %r327, -7;
	add.s32 	%r328, %r275, %r12;
	add.s32 	%r329, %r328, %r311;
	add.s32 	%r578, %r329, -7;
	add.s32 	%r330, %r267, %r11;
	add.s32 	%r331, %r330, %r311;
	add.s32 	%r577, %r331, -7;
	add.s32 	%r332, %r259, %r10;
	add.s32 	%r333, %r332, %r311;
	add.s32 	%r576, %r333, -7;
	add.s32 	%r334, %r251, %r9;
	add.s32 	%r335, %r334, %r311;
	add.s32 	%r575, %r335, -7;
	add.s32 	%r336, %r1, %r211;
	add.s32 	%r337, %r336, 113;
	sub.s32 	%r338, %r337, %r293;
	sub.s32 	%r339, %r338, %r6;
	mad.lo.s32 	%r340, %r208, %r339, %r243;
	add.s32 	%r341, %r340, %r311;
	add.s32 	%r574, %r341, -7;
	mad.lo.s32 	%r342, %r208, %r231, %r233;
	add.s32 	%r343, %r342, %r311;
	add.s32 	%r573, %r343, -7;
LBB6_6:                                 // %"for vert.s0.c.c_serial_outer2"
                                        // =>This Inner Loop Header: Depth=1
	add.s32 	%r344, %r70, %r573;
	mul.wide.s32 	%rd11, %r344, 4;
	add.s64 	%rd12, %rd1, %rd11;
	ld.global.nc.f32 	%f1, [%rd12];
	add.s32 	%r345, %r70, %r580;
	add.s32 	%r346, %r345, 357;
	mul.wide.s32 	%rd13, %r346, 4;
	add.s64 	%rd14, %rd1, %rd13;
	ld.global.nc.f32 	%f2, [%rd14];
	max.ftz.f32 	%f3, %f1, %f2;
	add.s32 	%r347, %r55, %r587;
	mul.wide.s32 	%rd15, %r347, 4;
	add.s64 	%rd16, %rd2, %rd15;
	st.global.f32 	[%rd16], %f3;
	ld.global.nc.f32 	%f4, [%rd12+28];
	add.s32 	%r348, %r345, 364;
	mul.wide.s32 	%rd17, %r348, 4;
	add.s64 	%rd18, %rd1, %rd17;
	ld.global.nc.f32 	%f5, [%rd18];
	max.ftz.f32 	%f6, %f4, %f5;
	add.s32 	%r349, %r55, %r588;
	mul.wide.s32 	%rd19, %r349, 4;
	add.s64 	%rd20, %rd2, %rd19;
	st.global.f32 	[%rd20], %f6;
	add.s32 	%r350, %r70, %r574;
	mul.wide.s32 	%rd21, %r350, 4;
	add.s64 	%rd22, %rd1, %rd21;
	ld.global.nc.f32 	%f7, [%rd22];
	add.s32 	%r351, %r70, %r581;
	add.s32 	%r352, %r351, 357;
	mul.wide.s32 	%rd23, %r352, 4;
	add.s64 	%rd24, %rd1, %rd23;
	ld.global.nc.f32 	%f8, [%rd24];
	max.ftz.f32 	%f9, %f7, %f8;
	add.s32 	%r353, %r55, %r589;
	mul.wide.s32 	%rd25, %r353, 4;
	add.s64 	%rd26, %rd2, %rd25;
	st.global.f32 	[%rd26], %f9;
	ld.global.nc.f32 	%f10, [%rd22+28];
	add.s32 	%r354, %r351, 364;
	mul.wide.s32 	%rd27, %r354, 4;
	add.s64 	%rd28, %rd1, %rd27;
	ld.global.nc.f32 	%f11, [%rd28];
	max.ftz.f32 	%f12, %f10, %f11;
	add.s32 	%r355, %r55, %r590;
	mul.wide.s32 	%rd29, %r355, 4;
	add.s64 	%rd30, %rd2, %rd29;
	st.global.f32 	[%rd30], %f12;
	add.s32 	%r356, %r70, %r575;
	mul.wide.s32 	%rd31, %r356, 4;
	add.s64 	%rd32, %rd1, %rd31;
	ld.global.nc.f32 	%f13, [%rd32];
	add.s32 	%r357, %r70, %r582;
	add.s32 	%r358, %r357, 357;
	mul.wide.s32 	%rd33, %r358, 4;
	add.s64 	%rd34, %rd1, %rd33;
	ld.global.nc.f32 	%f14, [%rd34];
	max.ftz.f32 	%f15, %f13, %f14;
	add.s32 	%r359, %r55, %r591;
	mul.wide.s32 	%rd35, %r359, 4;
	add.s64 	%rd36, %rd2, %rd35;
	st.global.f32 	[%rd36], %f15;
	ld.global.nc.f32 	%f16, [%rd32+28];
	add.s32 	%r360, %r357, 364;
	mul.wide.s32 	%rd37, %r360, 4;
	add.s64 	%rd38, %rd1, %rd37;
	ld.global.nc.f32 	%f17, [%rd38];
	max.ftz.f32 	%f18, %f16, %f17;
	add.s32 	%r361, %r55, %r592;
	mul.wide.s32 	%rd39, %r361, 4;
	add.s64 	%rd40, %rd2, %rd39;
	st.global.f32 	[%rd40], %f18;
	add.s32 	%r362, %r70, %r576;
	mul.wide.s32 	%rd41, %r362, 4;
	add.s64 	%rd42, %rd1, %rd41;
	ld.global.nc.f32 	%f19, [%rd42];
	add.s32 	%r363, %r70, %r583;
	add.s32 	%r364, %r363, 357;
	mul.wide.s32 	%rd43, %r364, 4;
	add.s64 	%rd44, %rd1, %rd43;
	ld.global.nc.f32 	%f20, [%rd44];
	max.ftz.f32 	%f21, %f19, %f20;
	add.s32 	%r365, %r55, %r593;
	mul.wide.s32 	%rd45, %r365, 4;
	add.s64 	%rd46, %rd2, %rd45;
	st.global.f32 	[%rd46], %f21;
	ld.global.nc.f32 	%f22, [%rd42+28];
	add.s32 	%r366, %r363, 364;
	mul.wide.s32 	%rd47, %r366, 4;
	add.s64 	%rd48, %rd1, %rd47;
	ld.global.nc.f32 	%f23, [%rd48];
	max.ftz.f32 	%f24, %f22, %f23;
	add.s32 	%r367, %r55, %r594;
	mul.wide.s32 	%rd49, %r367, 4;
	add.s64 	%rd50, %rd2, %rd49;
	st.global.f32 	[%rd50], %f24;
	add.s32 	%r368, %r70, %r577;
	mul.wide.s32 	%rd51, %r368, 4;
	add.s64 	%rd52, %rd1, %rd51;
	ld.global.nc.f32 	%f25, [%rd52];
	add.s32 	%r369, %r70, %r584;
	add.s32 	%r370, %r369, 357;
	mul.wide.s32 	%rd53, %r370, 4;
	add.s64 	%rd54, %rd1, %rd53;
	ld.global.nc.f32 	%f26, [%rd54];
	max.ftz.f32 	%f27, %f25, %f26;
	add.s32 	%r371, %r55, %r595;
	mul.wide.s32 	%rd55, %r371, 4;
	add.s64 	%rd56, %rd2, %rd55;
	st.global.f32 	[%rd56], %f27;
	ld.global.nc.f32 	%f28, [%rd52+28];
	add.s32 	%r372, %r369, 364;
	mul.wide.s32 	%rd57, %r372, 4;
	add.s64 	%rd58, %rd1, %rd57;
	ld.global.nc.f32 	%f29, [%rd58];
	max.ftz.f32 	%f30, %f28, %f29;
	add.s32 	%r373, %r55, %r596;
	mul.wide.s32 	%rd59, %r373, 4;
	add.s64 	%rd60, %rd2, %rd59;
	st.global.f32 	[%rd60], %f30;
	add.s32 	%r374, %r70, %r578;
	mul.wide.s32 	%rd61, %r374, 4;
	add.s64 	%rd62, %rd1, %rd61;
	ld.global.nc.f32 	%f31, [%rd62];
	add.s32 	%r375, %r70, %r585;
	add.s32 	%r376, %r375, 357;
	mul.wide.s32 	%rd63, %r376, 4;
	add.s64 	%rd64, %rd1, %rd63;
	ld.global.nc.f32 	%f32, [%rd64];
	max.ftz.f32 	%f33, %f31, %f32;
	add.s32 	%r377, %r55, %r597;
	mul.wide.s32 	%rd65, %r377, 4;
	add.s64 	%rd66, %rd2, %rd65;
	st.global.f32 	[%rd66], %f33;
	ld.global.nc.f32 	%f34, [%rd62+28];
	add.s32 	%r378, %r375, 364;
	mul.wide.s32 	%rd67, %r378, 4;
	add.s64 	%rd68, %rd1, %rd67;
	ld.global.nc.f32 	%f35, [%rd68];
	max.ftz.f32 	%f36, %f34, %f35;
	add.s32 	%r379, %r55, %r598;
	mul.wide.s32 	%rd69, %r379, 4;
	add.s64 	%rd70, %rd2, %rd69;
	st.global.f32 	[%rd70], %f36;
	add.s32 	%r380, %r70, %r579;
	mul.wide.s32 	%rd71, %r380, 4;
	add.s64 	%rd72, %rd1, %rd71;
	ld.global.nc.f32 	%f37, [%rd72];
	add.s32 	%r381, %r70, %r586;
	add.s32 	%r382, %r381, 357;
	mul.wide.s32 	%rd73, %r382, 4;
	add.s64 	%rd74, %rd1, %rd73;
	ld.global.nc.f32 	%f38, [%rd74];
	max.ftz.f32 	%f39, %f37, %f38;
	add.s32 	%r383, %r55, %r599;
	mul.wide.s32 	%rd75, %r383, 4;
	add.s64 	%rd76, %rd2, %rd75;
	st.global.f32 	[%rd76], %f39;
	ld.global.nc.f32 	%f40, [%rd72+28];
	add.s32 	%r384, %r381, 364;
	mul.wide.s32 	%rd77, %r384, 4;
	add.s64 	%rd78, %rd1, %rd77;
	ld.global.nc.f32 	%f41, [%rd78];
	max.ftz.f32 	%f42, %f40, %f41;
	add.s32 	%r385, %r55, %r600;
	mul.wide.s32 	%rd79, %r385, 4;
	add.s64 	%rd80, %rd2, %rd79;
	st.global.f32 	[%rd80], %f42;
	add.s32 	%r601, %r601, -1;
	add.s32 	%r600, %r600, 3;
	add.s32 	%r599, %r599, 3;
	add.s32 	%r598, %r598, 3;
	add.s32 	%r597, %r597, 3;
	add.s32 	%r596, %r596, 3;
	add.s32 	%r595, %r595, 3;
	add.s32 	%r594, %r594, 3;
	add.s32 	%r593, %r593, 3;
	add.s32 	%r592, %r592, 3;
	add.s32 	%r591, %r591, 3;
	add.s32 	%r590, %r590, 3;
	add.s32 	%r589, %r589, 3;
	add.s32 	%r588, %r588, 3;
	add.s32 	%r587, %r587, 3;
	add.s32 	%r586, %r586, %r72;
	add.s32 	%r585, %r585, %r72;
	add.s32 	%r584, %r584, %r72;
	add.s32 	%r583, %r583, %r72;
	add.s32 	%r582, %r582, %r72;
	add.s32 	%r581, %r581, %r72;
	add.s32 	%r580, %r580, %r72;
	add.s32 	%r579, %r579, %r72;
	add.s32 	%r578, %r578, %r72;
	add.s32 	%r577, %r577, %r72;
	add.s32 	%r576, %r576, %r72;
	add.s32 	%r575, %r575, %r72;
	add.s32 	%r574, %r574, %r72;
	add.s32 	%r573, %r573, %r72;
	setp.eq.s32 	%p3, %r601, 0;
	@%p3 bra 	LBB6_7;
	bra.uni 	LBB6_6;
LBB6_7:                                 // %after_bb
	ret;
                                        // -- End function
}
	// .globl	kernel_maximum_s0_c_c___block_id_z // -- Begin function kernel_maximum_s0_c_c___block_id_z
.visible .entry kernel_maximum_s0_c_c___block_id_z(
	.param .u32 kernel_maximum_s0_c_c___block_id_z_param_0,
	.param .u32 kernel_maximum_s0_c_c___block_id_z_param_1,
	.param .u32 kernel_maximum_s0_c_c___block_id_z_param_2,
	.param .u32 kernel_maximum_s0_c_c___block_id_z_param_3,
	.param .u32 kernel_maximum_s0_c_c___block_id_z_param_4,
	.param .u32 kernel_maximum_s0_c_c___block_id_z_param_5,
	.param .u64 kernel_maximum_s0_c_c___block_id_z_param_6
)                                       // @kernel_maximum_s0_c_c___block_id_z
{
	.reg .b32 	%r<53>;
	.reg .b64 	%rd<35>;

// %bb.0:                               // %entry
	ld.param.u32 	%r1, [kernel_maximum_s0_c_c___block_id_z_param_0];
	ld.param.u64 	%rd1, [kernel_maximum_s0_c_c___block_id_z_param_6];
	cvta.to.global.u64 	%rd2, %rd1;
	ld.param.u32 	%r2, [kernel_maximum_s0_c_c___block_id_z_param_1];
	ld.param.u32 	%r3, [kernel_maximum_s0_c_c___block_id_z_param_2];
	mov.u32 	%r4, %ctaid.z;
	mov.u32 	%r5, %ctaid.y;
	ld.param.u32 	%r6, [kernel_maximum_s0_c_c___block_id_z_param_3];
	mov.u32 	%r7, %ctaid.x;
	ld.param.u32 	%r8, [kernel_maximum_s0_c_c___block_id_z_param_4];
	ld.param.u32 	%r9, [kernel_maximum_s0_c_c___block_id_z_param_5];
	mov.u32 	%r10, %tid.y;
	mov.u32 	%r11, %tid.x;
	shl.b32 	%r12, %r4, 1;
	min.s32 	%r13, %r12, %r6;
	shl.b32 	%r14, %r5, 9;
	min.s32 	%r15, %r14, %r8;
	shl.b32 	%r16, %r7, 5;
	add.s32 	%r17, %r1, -32;
	min.s32 	%r18, %r16, %r17;
	shl.b32 	%r19, %r10, 3;
	add.s32 	%r20, %r15, %r3;
	add.s32 	%r21, %r20, %r19;
	shl.b32 	%r22, %r11, 1;
	add.s32 	%r23, %r22, %r18;
	add.s32 	%r24, %r13, %r2;
	mad.lo.s32 	%r25, %r24, %r9, %r23;
	mul.lo.s32 	%r26, %r21, %r1;
	add.s32 	%r27, %r25, %r26;
	mul.wide.s32 	%rd3, %r27, 4;
	add.s64 	%rd4, %rd2, %rd3;
	mov.u32 	%r28, -8388608;
	st.global.u32 	[%rd4], %r28;
	st.global.u32 	[%rd4+4], %r28;
	add.s32 	%r29, %r26, %r1;
	add.s32 	%r30, %r25, %r29;
	mul.wide.s32 	%rd5, %r30, 4;
	add.s64 	%rd6, %rd2, %rd5;
	st.global.u32 	[%rd6], %r28;
	st.global.u32 	[%rd6+4], %r28;
	add.s32 	%r31, %r29, %r1;
	add.s32 	%r32, %r25, %r31;
	mul.wide.s32 	%rd7, %r32, 4;
	add.s64 	%rd8, %rd2, %rd7;
	st.global.u32 	[%rd8], %r28;
	st.global.u32 	[%rd8+4], %r28;
	add.s32 	%r33, %r31, %r1;
	add.s32 	%r34, %r25, %r33;
	mul.wide.s32 	%rd9, %r34, 4;
	add.s64 	%rd10, %rd2, %rd9;
	st.global.u32 	[%rd10], %r28;
	st.global.u32 	[%rd10+4], %r28;
	add.s32 	%r35, %r33, %r1;
	add.s32 	%r36, %r25, %r35;
	mul.wide.s32 	%rd11, %r36, 4;
	add.s64 	%rd12, %rd2, %rd11;
	st.global.u32 	[%rd12], %r28;
	st.global.u32 	[%rd12+4], %r28;
	add.s32 	%r37, %r35, %r1;
	add.s32 	%r38, %r25, %r37;
	mul.wide.s32 	%rd13, %r38, 4;
	add.s64 	%rd14, %rd2, %rd13;
	st.global.u32 	[%rd14], %r28;
	st.global.u32 	[%rd14+4], %r28;
	add.s32 	%r39, %r37, %r1;
	add.s32 	%r40, %r25, %r39;
	mul.wide.s32 	%rd15, %r40, 4;
	add.s64 	%rd16, %rd2, %rd15;
	st.global.u32 	[%rd16], %r28;
	st.global.u32 	[%rd16+4], %r28;
	add.s32 	%r41, %r39, %r1;
	add.s32 	%r42, %r25, %r41;
	mul.wide.s32 	%rd17, %r42, 4;
	add.s64 	%rd18, %rd2, %rd17;
	st.global.u32 	[%rd18], %r28;
	st.global.u32 	[%rd18+4], %r28;
	add.s32 	%r43, %r24, 1;
	mad.lo.s32 	%r44, %r43, %r9, %r23;
	add.s32 	%r45, %r44, %r26;
	mul.wide.s32 	%rd19, %r45, 4;
	add.s64 	%rd20, %rd2, %rd19;
	st.global.u32 	[%rd20], %r28;
	st.global.u32 	[%rd20+4], %r28;
	add.s32 	%r46, %r44, %r29;
	mul.wide.s32 	%rd21, %r46, 4;
	add.s64 	%rd22, %rd2, %rd21;
	st.global.u32 	[%rd22], %r28;
	st.global.u32 	[%rd22+4], %r28;
	add.s32 	%r47, %r44, %r31;
	mul.wide.s32 	%rd23, %r47, 4;
	add.s64 	%rd24, %rd2, %rd23;
	st.global.u32 	[%rd24], %r28;
	st.global.u32 	[%rd24+4], %r28;
	add.s32 	%r48, %r44, %r33;
	mul.wide.s32 	%rd25, %r48, 4;
	add.s64 	%rd26, %rd2, %rd25;
	st.global.u32 	[%rd26], %r28;
	st.global.u32 	[%rd26+4], %r28;
	add.s32 	%r49, %r44, %r35;
	mul.wide.s32 	%rd27, %r49, 4;
	add.s64 	%rd28, %rd2, %rd27;
	st.global.u32 	[%rd28], %r28;
	st.global.u32 	[%rd28+4], %r28;
	add.s32 	%r50, %r44, %r37;
	mul.wide.s32 	%rd29, %r50, 4;
	add.s64 	%rd30, %rd2, %rd29;
	st.global.u32 	[%rd30], %r28;
	st.global.u32 	[%rd30+4], %r28;
	add.s32 	%r51, %r44, %r39;
	mul.wide.s32 	%rd31, %r51, 4;
	add.s64 	%rd32, %rd2, %rd31;
	st.global.u32 	[%rd32], %r28;
	st.global.u32 	[%rd32+4], %r28;
	add.s32 	%r52, %r44, %r41;
	mul.wide.s32 	%rd33, %r52, 4;
	add.s64 	%rd34, %rd2, %rd33;
	st.global.u32 	[%rd34], %r28;
	st.global.u32 	[%rd34+4], %r28;
	ret;
                                        // -- End function
}
	// .globl	kernel_maximum_s1_c_c___block_id_z // -- Begin function kernel_maximum_s1_c_c___block_id_z
.visible .entry kernel_maximum_s1_c_c___block_id_z(
	.param .u32 kernel_maximum_s1_c_c___block_id_z_param_0,
	.param .u32 kernel_maximum_s1_c_c___block_id_z_param_1,
	.param .u32 kernel_maximum_s1_c_c___block_id_z_param_2,
	.param .u32 kernel_maximum_s1_c_c___block_id_z_param_3,
	.param .u32 kernel_maximum_s1_c_c___block_id_z_param_4,
	.param .u32 kernel_maximum_s1_c_c___block_id_z_param_5,
	.param .u32 kernel_maximum_s1_c_c___block_id_z_param_6,
	.param .u32 kernel_maximum_s1_c_c___block_id_z_param_7,
	.param .u32 kernel_maximum_s1_c_c___block_id_z_param_8,
	.param .u32 kernel_maximum_s1_c_c___block_id_z_param_9,
	.param .u32 kernel_maximum_s1_c_c___block_id_z_param_10,
	.param .u32 kernel_maximum_s1_c_c___block_id_z_param_11,
	.param .u64 kernel_maximum_s1_c_c___block_id_z_param_12,
	.param .u64 kernel_maximum_s1_c_c___block_id_z_param_13,
	.param .u64 kernel_maximum_s1_c_c___block_id_z_param_14
)                                       // @kernel_maximum_s1_c_c___block_id_z
{
	.reg .pred 	%p<36>;
	.reg .f32 	%f<64>;
	.reg .b32 	%r<436>;
	.reg .b64 	%rd<154>;

// %bb.0:                               // %entry
	ld.param.u32 	%r164, [kernel_maximum_s1_c_c___block_id_z_param_11];
	ld.param.u32 	%r163, [kernel_maximum_s1_c_c___block_id_z_param_10];
	ld.param.u32 	%r162, [kernel_maximum_s1_c_c___block_id_z_param_9];
	ld.param.u32 	%r159, [kernel_maximum_s1_c_c___block_id_z_param_5];
	ld.param.u32 	%r158, [kernel_maximum_s1_c_c___block_id_z_param_4];
	ld.param.u32 	%r157, [kernel_maximum_s1_c_c___block_id_z_param_3];
	ld.param.u32 	%r156, [kernel_maximum_s1_c_c___block_id_z_param_2];
	ld.param.u32 	%r155, [kernel_maximum_s1_c_c___block_id_z_param_1];
	ld.param.u32 	%r154, [kernel_maximum_s1_c_c___block_id_z_param_0];
	ld.param.u64 	%rd49, [kernel_maximum_s1_c_c___block_id_z_param_14];
	cvta.to.global.u64 	%rd1, %rd49;
	ld.param.u64 	%rd50, [kernel_maximum_s1_c_c___block_id_z_param_13];
	cvta.to.global.u64 	%rd2, %rd50;
	ld.param.u64 	%rd51, [kernel_maximum_s1_c_c___block_id_z_param_12];
	cvta.to.global.u64 	%rd3, %rd51;
	mov.u32 	%r1, %ctaid.z;
	mov.u32 	%r2, %ctaid.y;
	mov.u32 	%r3, %ctaid.x;
	ld.param.u32 	%r165, [kernel_maximum_s1_c_c___block_id_z_param_6];
	mov.u32 	%r4, %tid.y;
	mov.u32 	%r5, %tid.x;
	setp.ge.s32 	%p2, %r1, %r165;
	@%p2 bra 	LBB8_3;
// %bb.1:                               // %true_bb
	ld.param.u32 	%r160, [kernel_maximum_s1_c_c___block_id_z_param_7];
	setp.lt.s32 	%p11, %r2, %r160;
	@%p11 bra 	LBB8_6;
	bra.uni 	LBB8_2;
LBB8_6:                                 // %true_bb1
	ld.param.u32 	%r161, [kernel_maximum_s1_c_c___block_id_z_param_8];
	setp.lt.s32 	%p21, %r3, %r161;
	shl.b32 	%r16, %r1, 1;
	shl.b32 	%r269, %r3, 4;
	add.s32 	%r270, %r5, %r269;
	shl.b32 	%r17, %r270, 1;
	shl.b32 	%r271, %r2, 6;
	add.s32 	%r272, %r4, %r271;
	shl.b32 	%r273, %r272, 3;
	add.s32 	%r18, %r273, %r159;
	add.s32 	%r19, %r273, %r158;
	add.s32 	%r20, %r16, %r157;
	@%p21 bra 	LBB8_17;
	bra.uni 	LBB8_7;
LBB8_17:                                // %"for maximum.s1.c.ci.preheader"
	mul.lo.s32 	%r321, %r20, %r162;
	add.s32 	%r44, %r17, %r321;
	or.b32  	%r45, %r17, 1;
	add.s32 	%r46, %r45, %r321;
	shl.b32 	%r322, %r2, 9;
	add.s32 	%r323, %r159, %r322;
	shl.b32 	%r324, %r4, 3;
	add.s32 	%r325, %r323, %r324;
	mul.lo.s32 	%r326, %r163, %r325;
	mad.lo.s32 	%r327, %r156, %r45, %r326;
	add.s32 	%r67, %r327, %r16;
	shl.b32 	%r48, %r156, 1;
	shl.b32 	%r328, %r3, 5;
	shl.b32 	%r329, %r5, 1;
	add.s32 	%r49, %r328, %r329;
	mul.lo.s32 	%r50, %r156, %r49;
	add.s32 	%r330, %r326, %r50;
	add.s32 	%r66, %r330, %r16;
	add.s32 	%r331, %r49, 2;
	mul.lo.s32 	%r52, %r156, %r331;
	add.s32 	%r332, %r326, %r52;
	add.s32 	%r65, %r332, %r16;
	mov.u32 	%r320, 0;
	mov.u64 	%rd102, 0;
	mov.u32 	%r68, %r320;
LBB8_18:                                // %"for maximum.s1.y.yi.yii"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB8_19 Depth 2
                                        //     Child Loop BB8_39 Depth 2
	add.s32 	%r334, %r68, %r19;
	mul.lo.s32 	%r69, %r334, %r154;
	add.s32 	%r335, %r44, %r69;
	mul.wide.s32 	%rd103, %r335, 4;
	add.s64 	%rd9, %rd2, %rd103;
	ld.global.f32 	%f56, [%rd9];
	mov.u32 	%r403, %r320;
	mov.u64 	%rd145, %rd102;
	bra.uni 	LBB8_19;
LBB8_57:                                // %"for maximum.s1.r22$x.1158"
                                        //   in Loop: Header=BB8_19 Depth=2
	ld.global.nc.u32 	%r342, [%rd11+4];
	min.s32 	%r343, %r342, 27;
	max.s32 	%r344, %r343, 0;
	add.s32 	%r345, %r67, %r403;
	mad.lo.s32 	%r346, %r164, %r344, %r345;
	mul.wide.s32 	%rd106, %r346, 4;
	add.s64 	%rd107, %rd1, %rd106;
	ld.global.nc.f32 	%f48, [%rd107];
	max.ftz.f32 	%f56, %f6, %f48;
	add.s64 	%rd145, %rd145, 8;
	add.s32 	%r403, %r403, %r48;
LBB8_19:                                // %"for maximum.s1.r22$x"
                                        //   Parent Loop BB8_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add.s64 	%rd11, %rd3, %rd145;
	ld.global.nc.u32 	%r336, [%rd11];
	min.s32 	%r337, %r336, 27;
	max.s32 	%r338, %r337, 0;
	add.s32 	%r339, %r66, %r403;
	mad.lo.s32 	%r340, %r164, %r338, %r339;
	mul.wide.s32 	%rd104, %r340, 4;
	add.s64 	%rd105, %rd1, %rd104;
	ld.global.nc.f32 	%f47, [%rd105];
	max.ftz.f32 	%f6, %f56, %f47;
	cvt.u32.u64 	%r341, %rd145;
	setp.ne.s32 	%p30, %r341, 208;
	@%p30 bra 	LBB8_57;
// %bb.20:                              // %"end for maximum.s1.r22$x"
                                        //   in Loop: Header=BB8_18 Depth=1
	st.global.f32 	[%rd9], %f6;
	add.s32 	%r348, %r46, %r69;
	mul.wide.s32 	%rd109, %r348, 4;
	add.s64 	%rd12, %rd2, %rd109;
	ld.global.f32 	%f59, [%rd12];
	mov.u32 	%r421, 0;
	mov.u64 	%rd148, %rd102;
	bra.uni 	LBB8_39;
LBB8_38:                                // %"for maximum.s1.r22$x.1.1163"
                                        //   in Loop: Header=BB8_39 Depth=2
	ld.global.nc.u32 	%r355, [%rd20+4];
	min.s32 	%r356, %r355, 27;
	max.s32 	%r357, %r356, 0;
	add.s32 	%r358, %r65, %r421;
	mad.lo.s32 	%r359, %r164, %r357, %r358;
	mul.wide.s32 	%rd112, %r359, 4;
	add.s64 	%rd113, %rd1, %rd112;
	ld.global.nc.f32 	%f50, [%rd113];
	max.ftz.f32 	%f59, %f15, %f50;
	add.s64 	%rd148, %rd148, 8;
	add.s32 	%r421, %r421, %r48;
LBB8_39:                                // %"for maximum.s1.r22$x.1"
                                        //   Parent Loop BB8_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add.s64 	%rd20, %rd3, %rd148;
	ld.global.nc.u32 	%r349, [%rd20];
	min.s32 	%r350, %r349, 27;
	max.s32 	%r351, %r350, 0;
	add.s32 	%r352, %r67, %r421;
	mad.lo.s32 	%r353, %r164, %r351, %r352;
	mul.wide.s32 	%rd110, %r353, 4;
	add.s64 	%rd111, %rd1, %rd110;
	ld.global.nc.f32 	%f49, [%rd111];
	max.ftz.f32 	%f15, %f59, %f49;
	cvt.u32.u64 	%r354, %rd148;
	setp.ne.s32 	%p31, %r354, 208;
	@%p31 bra 	LBB8_38;
// %bb.40:                              // %"end for maximum.s1.r22$x.1"
                                        //   in Loop: Header=BB8_18 Depth=1
	st.global.f32 	[%rd12], %f15;
	add.s32 	%r68, %r68, 1;
	add.s32 	%r67, %r67, %r163;
	add.s32 	%r66, %r66, %r163;
	add.s32 	%r65, %r65, %r163;
	setp.eq.s32 	%p32, %r68, 8;
	@%p32 bra 	LBB8_41;
	bra.uni 	LBB8_18;
LBB8_41:                                // %"end for maximum.s1.y.yi.yii"
	add.s32 	%r361, %r20, 1;
	mul.lo.s32 	%r362, %r361, %r162;
	add.s32 	%r70, %r17, %r362;
	add.s32 	%r71, %r45, %r362;
	add.s32 	%r363, %r49, 1;
	mul.lo.s32 	%r72, %r156, %r363;
	mov.u32 	%r360, 0;
	mov.u64 	%rd114, 0;
	cvt.u64.u32 	%rd119, %r16;
	mov.u32 	%r422, %r360;
LBB8_42:                                // %"for maximum.s1.y.yi.yii.1"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB8_43 Depth 2
                                        //     Child Loop BB8_45 Depth 2
	add.s32 	%r365, %r422, %r18;
	mul.lo.s32 	%r116, %r365, %r163;
	add.s32 	%r366, %r422, %r19;
	mul.lo.s32 	%r117, %r366, %r154;
	add.s32 	%r367, %r70, %r117;
	mul.wide.s32 	%rd115, %r367, 4;
	add.s64 	%rd21, %rd2, %rd115;
	ld.global.f32 	%f60, [%rd21];
	mov.u32 	%r423, %r360;
	mov.u64 	%rd149, %rd114;
	bra.uni 	LBB8_43;
LBB8_55:                                // %"for maximum.s1.r22$x.1104.1"
                                        //   in Loop: Header=BB8_43 Depth=2
	ld.global.nc.u32 	%r374, [%rd23+4];
	min.s32 	%r375, %r374, 27;
	max.s32 	%r376, %r375, 0;
	mul.lo.s32 	%r377, %r376, %r164;
	add.s32 	%r378, %r72, %r423;
	cvt.s64.s32 	%rd124, %r377;
	cvt.s64.s32 	%rd125, %r378;
	add.s64 	%rd126, %rd24, %rd125;
	add.s64 	%rd127, %rd126, %rd124;
	shl.b64 	%rd128, %rd127, 2;
	add.s64 	%rd129, %rd1, %rd128;
	ld.global.nc.f32 	%f52, [%rd129+4];
	max.ftz.f32 	%f60, %f18, %f52;
	add.s64 	%rd149, %rd149, 8;
	add.s32 	%r423, %r423, %r48;
LBB8_43:                                // %"for maximum.s1.r22$x.1104"
                                        //   Parent Loop BB8_42 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add.s64 	%rd23, %rd3, %rd149;
	ld.global.nc.u32 	%r368, [%rd23];
	min.s32 	%r369, %r368, 27;
	max.s32 	%r370, %r369, 0;
	mul.lo.s32 	%r371, %r370, %r164;
	add.s32 	%r372, %r50, %r423;
	cvt.s64.s32 	%rd116, %r371;
	cvt.s64.s32 	%rd117, %r372;
	cvt.s64.s32 	%rd118, %r116;
	add.s64 	%rd24, %rd119, %rd118;
	add.s64 	%rd120, %rd24, %rd117;
	add.s64 	%rd121, %rd120, %rd116;
	shl.b64 	%rd122, %rd121, 2;
	add.s64 	%rd123, %rd1, %rd122;
	ld.global.nc.f32 	%f51, [%rd123+4];
	max.ftz.f32 	%f18, %f60, %f51;
	cvt.u32.u64 	%r373, %rd149;
	setp.ne.s32 	%p33, %r373, 208;
	@%p33 bra 	LBB8_55;
// %bb.44:                              // %"end for maximum.s1.r22$x.1106"
                                        //   in Loop: Header=BB8_42 Depth=1
	st.global.f32 	[%rd21], %f18;
	add.s32 	%r380, %r71, %r117;
	mul.wide.s32 	%rd131, %r380, 4;
	add.s64 	%rd25, %rd2, %rd131;
	ld.global.f32 	%f61, [%rd25];
	mov.u64 	%rd150, 0;
	mov.u32 	%r424, 0;
	bra.uni 	LBB8_45;
LBB8_56:                                // %"for maximum.s1.r22$x.1.1.1"
                                        //   in Loop: Header=BB8_45 Depth=2
	ld.global.nc.u32 	%r387, [%rd27+4];
	min.s32 	%r388, %r387, 27;
	max.s32 	%r389, %r388, 0;
	mul.lo.s32 	%r390, %r389, %r164;
	add.s32 	%r391, %r52, %r424;
	cvt.s64.s32 	%rd138, %r390;
	cvt.s64.s32 	%rd139, %r391;
	add.s64 	%rd140, %rd24, %rd139;
	add.s64 	%rd141, %rd140, %rd138;
	shl.b64 	%rd142, %rd141, 2;
	add.s64 	%rd143, %rd1, %rd142;
	ld.global.nc.f32 	%f54, [%rd143+4];
	max.ftz.f32 	%f61, %f21, %f54;
	add.s64 	%rd150, %rd150, 8;
	add.s32 	%r424, %r424, %r48;
LBB8_45:                                // %"for maximum.s1.r22$x.1.1"
                                        //   Parent Loop BB8_42 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add.s64 	%rd27, %rd3, %rd150;
	ld.global.nc.u32 	%r381, [%rd27];
	min.s32 	%r382, %r381, 27;
	max.s32 	%r383, %r382, 0;
	mul.lo.s32 	%r384, %r383, %r164;
	add.s32 	%r385, %r72, %r424;
	cvt.s64.s32 	%rd132, %r384;
	cvt.s64.s32 	%rd133, %r385;
	add.s64 	%rd134, %rd24, %rd133;
	add.s64 	%rd135, %rd134, %rd132;
	shl.b64 	%rd136, %rd135, 2;
	add.s64 	%rd137, %rd1, %rd136;
	ld.global.nc.f32 	%f53, [%rd137+4];
	max.ftz.f32 	%f21, %f61, %f53;
	cvt.u32.u64 	%r386, %rd150;
	setp.ne.s32 	%p34, %r386, 208;
	@%p34 bra 	LBB8_56;
// %bb.46:                              // %"end for maximum.s1.r22$x.1.1"
                                        //   in Loop: Header=BB8_42 Depth=1
	st.global.f32 	[%rd25], %f21;
	add.s32 	%r422, %r422, 1;
	setp.eq.s32 	%p35, %r422, 8;
	@%p35 bra 	LBB8_37;
	bra.uni 	LBB8_42;
LBB8_3:                                 // %false_bb
	shl.b32 	%r6, %r1, 1;
	sub.s32 	%r166, %r156, %r6;
	setp.lt.s32 	%p3, %r166, 1;
	@%p3 bra 	LBB8_37;
// %bb.4:                               // %"for maximum.s1.c.ci31.preheader"
	shl.b32 	%r167, %r2, 6;
	add.s32 	%r168, %r4, %r167;
	shl.b32 	%r7, %r168, 3;
	sub.s32 	%r8, %r155, %r7;
	shl.b32 	%r169, %r3, 4;
	add.s32 	%r170, %r5, %r169;
	shl.b32 	%r9, %r170, 1;
	min.s32 	%r171, %r8, 8;
	max.s32 	%r10, %r171, 0;
	min.s32 	%r172, %r166, 2;
	setp.gt.s32 	%p4, %r166, 0;
	selp.b32 	%r11, %r172, 0, %p4;
	setp.gt.s32 	%p5, %r8, 0;
	sub.s32 	%r174, %r154, %r9;
	min.s32 	%r175, %r174, 2;
	setp.gt.s32 	%p6, %r174, 0;
	selp.b32 	%r12, %r175, 0, %p6;
	and.pred  	%p1, %p5, %p6;
	shl.b32 	%r176, %r2, 9;
	add.s32 	%r177, %r159, %r176;
	shl.b32 	%r178, %r4, 3;
	add.s32 	%r179, %r177, %r178;
	mul.lo.s32 	%r180, %r163, %r179;
	shl.b32 	%r181, %r3, 5;
	shl.b32 	%r182, %r5, 1;
	add.s32 	%r183, %r181, %r182;
	or.b32  	%r184, %r183, 1;
	mad.lo.s32 	%r185, %r156, %r184, %r180;
	add.s32 	%r412, %r185, %r6;
	shl.b32 	%r14, %r156, 1;
	mad.lo.s32 	%r186, %r156, %r183, %r180;
	add.s32 	%r411, %r186, %r6;
	mov.u32 	%r413, 0;
	mov.u64 	%rd52, 0;
LBB8_5:                                 // %"for maximum.s1.c.ci31"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB8_31 Depth 2
                                        //       Child Loop BB8_32 Depth 3
                                        //         Child Loop BB8_33 Depth 4
	@!%p1 bra 	LBB8_36;
	bra.uni 	LBB8_30;
LBB8_30:                                // %"for maximum.s1.y.yi.yii34.us.preheader"
                                        //   in Loop: Header=BB8_5 Depth=1
	add.s32 	%r187, %r413, %r6;
	add.s32 	%r188, %r187, %r157;
	mul.lo.s32 	%r92, %r188, %r162;
	mov.u32 	%r189, 0;
	mov.u32 	%r414, %r411;
	mov.u32 	%r415, %r412;
	mov.u32 	%r416, %r189;
LBB8_31:                                // %"for maximum.s1.y.yi.yii34.us"
                                        //   Parent Loop BB8_5 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB8_32 Depth 3
                                        //         Child Loop BB8_33 Depth 4
	add.s32 	%r191, %r416, %r7;
	add.s32 	%r192, %r191, %r158;
	mul.lo.s32 	%r96, %r192, %r154;
	mov.u32 	%r417, %r414;
	mov.u32 	%r418, %r415;
	mov.u32 	%r419, %r189;
LBB8_32:                                // %"for maximum.s1.x.xi.xii37.us"
                                        //   Parent Loop BB8_5 Depth=1
                                        //     Parent Loop BB8_31 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB8_33 Depth 4
	add.s32 	%r194, %r419, %r9;
	add.s32 	%r195, %r194, %r92;
	add.s32 	%r196, %r195, %r96;
	mul.wide.s32 	%rd53, %r196, 4;
	add.s64 	%rd16, %rd2, %rd53;
	ld.global.f32 	%f58, [%rd16];
	mov.u32 	%r420, %r189;
	mov.u64 	%rd147, %rd52;
	bra.uni 	LBB8_33;
LBB8_60:                                // %"for maximum.s1.r22$x40.us.1"
                                        //   in Loop: Header=BB8_33 Depth=4
	ld.global.nc.u32 	%r203, [%rd18+4];
	min.s32 	%r204, %r203, 27;
	max.s32 	%r205, %r204, 0;
	add.s32 	%r206, %r418, %r420;
	mad.lo.s32 	%r207, %r164, %r205, %r206;
	mul.wide.s32 	%rd56, %r207, 4;
	add.s64 	%rd57, %rd1, %rd56;
	ld.global.nc.f32 	%f38, [%rd57];
	max.ftz.f32 	%f58, %f13, %f38;
	add.s64 	%rd147, %rd147, 8;
	add.s32 	%r420, %r420, %r14;
LBB8_33:                                // %"for maximum.s1.r22$x40.us"
                                        //   Parent Loop BB8_5 Depth=1
                                        //     Parent Loop BB8_31 Depth=2
                                        //       Parent Loop BB8_32 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	add.s64 	%rd18, %rd3, %rd147;
	ld.global.nc.u32 	%r197, [%rd18];
	min.s32 	%r198, %r197, 27;
	max.s32 	%r199, %r198, 0;
	add.s32 	%r200, %r417, %r420;
	mad.lo.s32 	%r201, %r164, %r199, %r200;
	mul.wide.s32 	%rd54, %r201, 4;
	add.s64 	%rd55, %rd1, %rd54;
	ld.global.nc.f32 	%f37, [%rd55];
	max.ftz.f32 	%f13, %f58, %f37;
	cvt.u32.u64 	%r202, %rd147;
	setp.ne.s32 	%p7, %r202, 208;
	@%p7 bra 	LBB8_60;
// %bb.34:                              // %"end for maximum.s1.r22$x41.us"
                                        //   in Loop: Header=BB8_32 Depth=3
	st.global.f32 	[%rd16], %f13;
	add.s32 	%r419, %r419, 1;
	add.s32 	%r418, %r418, %r156;
	add.s32 	%r417, %r417, %r156;
	setp.ne.s32 	%p8, %r419, %r12;
	@%p8 bra 	LBB8_32;
// %bb.35:                              // %"end for maximum.s1.x.xi.xii38.loopexit.us"
                                        //   in Loop: Header=BB8_31 Depth=2
	add.s32 	%r416, %r416, 1;
	add.s32 	%r415, %r415, %r163;
	add.s32 	%r414, %r414, %r163;
	setp.ne.s32 	%p9, %r416, %r10;
	@%p9 bra 	LBB8_31;
LBB8_36:                                // %"end for maximum.s1.y.yi.yii35"
                                        //   in Loop: Header=BB8_5 Depth=1
	add.s32 	%r413, %r413, 1;
	add.s32 	%r412, %r412, 1;
	add.s32 	%r411, %r411, 1;
	setp.eq.s32 	%p10, %r413, %r11;
	@%p10 bra 	LBB8_37;
	bra.uni 	LBB8_5;
LBB8_2:                                 // %false_bb2
	shl.b32 	%r208, %r2, 6;
	add.s32 	%r209, %r4, %r208;
	shl.b32 	%r54, %r209, 3;
	sub.s32 	%r210, %r155, %r54;
	shl.b32 	%r211, %r3, 4;
	add.s32 	%r212, %r5, %r211;
	shl.b32 	%r56, %r212, 1;
	setp.gt.s32 	%p12, %r210, 0;
	sub.s32 	%r214, %r154, %r56;
	setp.gt.s32 	%p13, %r214, 0;
	and.pred  	%p14, %p12, %p13;
	@!%p14 bra 	LBB8_37;
	bra.uni 	LBB8_21;
LBB8_21:                                // %"for maximum.s1.y.yi.yii22.us.preheader"
	shl.b32 	%r55, %r1, 1;
	min.s32 	%r213, %r210, 8;
	selp.b32 	%r57, %r213, 0, %p12;
	min.s32 	%r215, %r214, 2;
	selp.b32 	%r58, %r215, 0, %p13;
	add.s32 	%r216, %r55, %r157;
	mul.lo.s32 	%r59, %r216, %r162;
	shl.b32 	%r218, %r2, 9;
	add.s32 	%r219, %r159, %r218;
	shl.b32 	%r220, %r4, 3;
	add.s32 	%r221, %r219, %r220;
	mul.lo.s32 	%r222, %r163, %r221;
	shl.b32 	%r223, %r3, 5;
	shl.b32 	%r224, %r5, 1;
	add.s32 	%r225, %r223, %r224;
	or.b32  	%r226, %r225, 1;
	mul.lo.s32 	%r60, %r156, %r226;
	add.s32 	%r227, %r222, %r60;
	add.s32 	%r405, %r227, %r55;
	shl.b32 	%r62, %r156, 1;
	mul.lo.s32 	%r63, %r156, %r225;
	add.s32 	%r228, %r222, %r63;
	add.s32 	%r404, %r228, %r55;
	mov.u32 	%r217, 0;
	mov.u64 	%rd58, 0;
	mov.u32 	%r406, %r217;
LBB8_22:                                // %"for maximum.s1.y.yi.yii22.us"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB8_23 Depth 2
                                        //       Child Loop BB8_24 Depth 3
	add.s32 	%r230, %r406, %r54;
	add.s32 	%r231, %r230, %r158;
	mul.lo.s32 	%r77, %r231, %r154;
	mov.u32 	%r407, %r404;
	mov.u32 	%r408, %r405;
	mov.u32 	%r409, %r217;
LBB8_23:                                // %"for maximum.s1.x.xi.xii25.us"
                                        //   Parent Loop BB8_22 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB8_24 Depth 3
	add.s32 	%r233, %r409, %r56;
	add.s32 	%r234, %r233, %r59;
	add.s32 	%r235, %r234, %r77;
	mul.wide.s32 	%rd59, %r235, 4;
	add.s64 	%rd13, %rd2, %rd59;
	ld.global.f32 	%f57, [%rd13];
	mov.u32 	%r410, %r217;
	mov.u64 	%rd146, %rd58;
	bra.uni 	LBB8_24;
LBB8_59:                                // %"for maximum.s1.r22$x28.us.1173"
                                        //   in Loop: Header=BB8_24 Depth=3
	ld.global.nc.u32 	%r242, [%rd15+4];
	min.s32 	%r243, %r242, 27;
	max.s32 	%r244, %r243, 0;
	add.s32 	%r245, %r408, %r410;
	mad.lo.s32 	%r246, %r164, %r244, %r245;
	mul.wide.s32 	%rd62, %r246, 4;
	add.s64 	%rd63, %rd1, %rd62;
	ld.global.nc.f32 	%f40, [%rd63];
	max.ftz.f32 	%f57, %f10, %f40;
	add.s64 	%rd146, %rd146, 8;
	add.s32 	%r410, %r410, %r62;
LBB8_24:                                // %"for maximum.s1.r22$x28.us"
                                        //   Parent Loop BB8_22 Depth=1
                                        //     Parent Loop BB8_23 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	add.s64 	%rd15, %rd3, %rd146;
	ld.global.nc.u32 	%r236, [%rd15];
	min.s32 	%r237, %r236, 27;
	max.s32 	%r238, %r237, 0;
	add.s32 	%r239, %r407, %r410;
	mad.lo.s32 	%r240, %r164, %r238, %r239;
	mul.wide.s32 	%rd60, %r240, 4;
	add.s64 	%rd61, %rd1, %rd60;
	ld.global.nc.f32 	%f39, [%rd61];
	max.ftz.f32 	%f10, %f57, %f39;
	cvt.u32.u64 	%r241, %rd146;
	setp.ne.s32 	%p15, %r241, 208;
	@%p15 bra 	LBB8_59;
// %bb.25:                              // %"end for maximum.s1.r22$x29.us"
                                        //   in Loop: Header=BB8_23 Depth=2
	st.global.f32 	[%rd13], %f10;
	add.s32 	%r409, %r409, 1;
	add.s32 	%r408, %r408, %r156;
	add.s32 	%r407, %r407, %r156;
	setp.ne.s32 	%p16, %r409, %r58;
	@%p16 bra 	LBB8_23;
// %bb.26:                              // %"end for maximum.s1.x.xi.xii26.loopexit.us"
                                        //   in Loop: Header=BB8_22 Depth=1
	add.s32 	%r406, %r406, 1;
	add.s32 	%r405, %r405, %r163;
	add.s32 	%r404, %r404, %r163;
	setp.ne.s32 	%p17, %r406, %r57;
	@%p17 bra 	LBB8_22;
// %bb.27:                              // %"end for maximum.s1.y.yi.yii23"
	or.b32  	%r248, %r55, 1;
	add.s32 	%r249, %r248, %r157;
	mul.lo.s32 	%r88, %r249, %r162;
	mov.u32 	%r247, 0;
	mov.u64 	%rd64, 0;
	cvt.u64.u32 	%rd69, %r55;
	mov.u32 	%r431, %r247;
LBB8_28:                                // %"for maximum.s1.y.yi.yii22.us.1"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB8_29 Depth 2
                                        //       Child Loop BB8_52 Depth 3
	add.s32 	%r251, %r431, %r54;
	add.s32 	%r252, %r251, %r159;
	mul.lo.s32 	%r135, %r252, %r163;
	add.s32 	%r253, %r251, %r158;
	mul.lo.s32 	%r136, %r253, %r154;
	mov.u32 	%r432, %r63;
	mov.u32 	%r433, %r60;
	mov.u32 	%r434, %r247;
LBB8_29:                                // %"for maximum.s1.x.xi.xii25.us.1"
                                        //   Parent Loop BB8_28 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB8_52 Depth 3
	add.s32 	%r255, %r434, %r56;
	add.s32 	%r256, %r255, %r88;
	add.s32 	%r257, %r256, %r136;
	mul.wide.s32 	%rd65, %r257, 4;
	add.s64 	%rd35, %rd2, %rd65;
	ld.global.f32 	%f63, [%rd35];
	mov.u32 	%r435, %r247;
	mov.u64 	%rd153, %rd64;
	bra.uni 	LBB8_52;
LBB8_51:                                // %"for maximum.s1.r22$x28.us.1.1"
                                        //   in Loop: Header=BB8_52 Depth=3
	ld.global.nc.u32 	%r264, [%rd37+4];
	min.s32 	%r265, %r264, 27;
	max.s32 	%r266, %r265, 0;
	mul.lo.s32 	%r267, %r266, %r164;
	add.s32 	%r268, %r433, %r435;
	cvt.s64.s32 	%rd74, %r267;
	cvt.s64.s32 	%rd75, %r268;
	add.s64 	%rd76, %rd38, %rd75;
	add.s64 	%rd77, %rd76, %rd74;
	shl.b64 	%rd78, %rd77, 2;
	add.s64 	%rd79, %rd1, %rd78;
	ld.global.nc.f32 	%f42, [%rd79+4];
	max.ftz.f32 	%f63, %f27, %f42;
	add.s64 	%rd153, %rd153, 8;
	add.s32 	%r435, %r435, %r62;
LBB8_52:                                // %"for maximum.s1.r22$x28.us.1"
                                        //   Parent Loop BB8_28 Depth=1
                                        //     Parent Loop BB8_29 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	add.s64 	%rd37, %rd3, %rd153;
	ld.global.nc.u32 	%r258, [%rd37];
	min.s32 	%r259, %r258, 27;
	max.s32 	%r260, %r259, 0;
	mul.lo.s32 	%r261, %r260, %r164;
	add.s32 	%r262, %r432, %r435;
	cvt.s64.s32 	%rd66, %r261;
	cvt.s64.s32 	%rd67, %r262;
	cvt.s64.s32 	%rd68, %r135;
	add.s64 	%rd38, %rd69, %rd68;
	add.s64 	%rd70, %rd38, %rd67;
	add.s64 	%rd71, %rd70, %rd66;
	shl.b64 	%rd72, %rd71, 2;
	add.s64 	%rd73, %rd1, %rd72;
	ld.global.nc.f32 	%f41, [%rd73+4];
	max.ftz.f32 	%f27, %f63, %f41;
	cvt.u32.u64 	%r263, %rd153;
	setp.ne.s32 	%p18, %r263, 208;
	@%p18 bra 	LBB8_51;
// %bb.53:                              // %"end for maximum.s1.r22$x29.us.1"
                                        //   in Loop: Header=BB8_29 Depth=2
	st.global.f32 	[%rd35], %f27;
	add.s32 	%r434, %r434, 1;
	add.s32 	%r433, %r433, %r156;
	add.s32 	%r432, %r432, %r156;
	setp.ne.s32 	%p19, %r434, %r58;
	@%p19 bra 	LBB8_29;
// %bb.54:                              // %"end for maximum.s1.x.xi.xii26.loopexit.us.1"
                                        //   in Loop: Header=BB8_28 Depth=1
	add.s32 	%r431, %r431, 1;
	setp.eq.s32 	%p20, %r431, %r57;
	@%p20 bra 	LBB8_37;
	bra.uni 	LBB8_28;
LBB8_7:                                 // %"for maximum.s1.c.ci7.preheader"
	sub.s32 	%r274, %r154, %r17;
	setp.lt.s32 	%p22, %r274, 1;
	@%p22 bra 	LBB8_37;
// %bb.8:                               // %"for maximum.s1.c.ci7.us.preheader"
	min.s32 	%r275, %r274, 2;
	setp.gt.s32 	%p23, %r274, 0;
	selp.b32 	%r21, %r275, 0, %p23;
	mul.lo.s32 	%r22, %r20, %r162;
	shl.b32 	%r277, %r2, 9;
	add.s32 	%r278, %r159, %r277;
	shl.b32 	%r279, %r4, 3;
	add.s32 	%r280, %r278, %r279;
	mul.lo.s32 	%r425, %r163, %r280;
	shl.b32 	%r281, %r3, 5;
	shl.b32 	%r282, %r5, 1;
	add.s32 	%r283, %r281, %r282;
	or.b32  	%r284, %r283, 1;
	mul.lo.s32 	%r24, %r156, %r284;
	add.s32 	%r285, %r425, %r24;
	add.s32 	%r30, %r285, %r16;
	shl.b32 	%r26, %r156, 1;
	mul.lo.s32 	%r27, %r156, %r283;
	add.s32 	%r286, %r425, %r27;
	add.s32 	%r29, %r286, %r16;
	mov.u32 	%r276, 0;
	mov.u64 	%rd80, 0;
	mov.u32 	%r31, %r276;
LBB8_9:                                 // %"for maximum.s1.y.yi.yii10.us.us"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB8_10 Depth 2
                                        //       Child Loop BB8_11 Depth 3
	add.s32 	%r288, %r31, %r19;
	mul.lo.s32 	%r32, %r288, %r154;
	mov.u32 	%r36, %r29;
	mov.u32 	%r37, %r30;
	mov.u32 	%r38, %r276;
LBB8_10:                                // %"for maximum.s1.x.xi.xii13.us.us"
                                        //   Parent Loop BB8_9 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB8_11 Depth 3
	add.s32 	%r290, %r38, %r17;
	add.s32 	%r291, %r290, %r22;
	add.s32 	%r292, %r291, %r32;
	mul.wide.s32 	%rd81, %r292, 4;
	add.s64 	%rd4, %rd2, %rd81;
	ld.global.f32 	%f55, [%rd4];
	mov.u32 	%r398, %r276;
	mov.u64 	%rd144, %rd80;
	bra.uni 	LBB8_11;
LBB8_58:                                // %"for maximum.s1.r22$x16.us.us.1168"
                                        //   in Loop: Header=BB8_11 Depth=3
	ld.global.nc.u32 	%r299, [%rd6+4];
	min.s32 	%r300, %r299, 27;
	max.s32 	%r301, %r300, 0;
	add.s32 	%r302, %r37, %r398;
	mad.lo.s32 	%r303, %r164, %r301, %r302;
	mul.wide.s32 	%rd84, %r303, 4;
	add.s64 	%rd85, %rd1, %rd84;
	ld.global.nc.f32 	%f44, [%rd85];
	max.ftz.f32 	%f55, %f3, %f44;
	add.s64 	%rd144, %rd144, 8;
	add.s32 	%r398, %r398, %r26;
LBB8_11:                                // %"for maximum.s1.r22$x16.us.us"
                                        //   Parent Loop BB8_9 Depth=1
                                        //     Parent Loop BB8_10 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	add.s64 	%rd6, %rd3, %rd144;
	ld.global.nc.u32 	%r293, [%rd6];
	min.s32 	%r294, %r293, 27;
	max.s32 	%r295, %r294, 0;
	add.s32 	%r296, %r36, %r398;
	mad.lo.s32 	%r297, %r164, %r295, %r296;
	mul.wide.s32 	%rd82, %r297, 4;
	add.s64 	%rd83, %rd1, %rd82;
	ld.global.nc.f32 	%f43, [%rd83];
	max.ftz.f32 	%f3, %f55, %f43;
	cvt.u32.u64 	%r298, %rd144;
	setp.eq.s32 	%p24, %r298, 208;
	@%p24 bra 	LBB8_12;
	bra.uni 	LBB8_58;
LBB8_12:                                // %"end for maximum.s1.r22$x17.us.us"
                                        //   in Loop: Header=BB8_10 Depth=2
	st.global.f32 	[%rd4], %f3;
	add.s32 	%r38, %r38, 1;
	add.s32 	%r37, %r37, %r156;
	add.s32 	%r36, %r36, %r156;
	setp.eq.s32 	%p25, %r38, %r21;
	@%p25 bra 	LBB8_13;
	bra.uni 	LBB8_10;
LBB8_13:                                // %"end for maximum.s1.x.xi.xii14.loopexit.us.us"
                                        //   in Loop: Header=BB8_9 Depth=1
	add.s32 	%r31, %r31, 1;
	add.s32 	%r30, %r30, %r163;
	add.s32 	%r29, %r29, %r163;
	setp.eq.s32 	%p26, %r31, 8;
	@%p26 bra 	LBB8_14;
	bra.uni 	LBB8_9;
LBB8_14:                                // %"end for maximum.s1.y.yi.yii11.us-lcssa.us.us"
	add.s32 	%r43, %r22, %r162;
	mul.wide.u32 	%rd7, %r1, 2;
	cvt.s64.s32 	%rd8, %r26;
	mov.u32 	%r304, 0;
	mov.u64 	%rd87, 0;
	cvt.u64.u32 	%rd92, %r16;
	mov.u32 	%r426, %r304;
LBB8_15:                                // %"for maximum.s1.y.yi.yii10.us.us.1"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB8_16 Depth 2
                                        //       Child Loop BB8_48 Depth 3
	cvt.s64.s32 	%rd86, %r425;
	add.s32 	%r306, %r426, %r18;
	mul.lo.s32 	%r123, %r306, %r163;
	add.s32 	%r307, %r426, %r19;
	mul.lo.s32 	%r124, %r307, %r154;
	add.s64 	%rd28, %rd7, %rd86;
	mov.u32 	%r427, %r27;
	mov.u32 	%r428, %r24;
	mov.u32 	%r429, %r304;
LBB8_16:                                // %"for maximum.s1.x.xi.xii13.us.us.1"
                                        //   Parent Loop BB8_15 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB8_48 Depth 3
	cvt.s64.s32 	%rd88, %r427;
	add.s64 	%rd151, %rd28, %rd88;
	add.s32 	%r308, %r429, %r17;
	add.s32 	%r309, %r308, %r43;
	add.s32 	%r310, %r309, %r124;
	mul.wide.s32 	%rd89, %r310, 4;
	add.s64 	%rd30, %rd2, %rd89;
	ld.global.f32 	%f62, [%rd30];
	mov.u32 	%r430, %r428;
	mov.u64 	%rd152, %rd87;
	bra.uni 	LBB8_48;
LBB8_47:                                // %"for maximum.s1.r22$x16.us.us.1.1"
                                        //   in Loop: Header=BB8_48 Depth=3
	cvt.s64.s32 	%rd91, %r123;
	add.s64 	%rd34, %rd92, %rd91;
	ld.global.nc.u32 	%r316, [%rd33+4];
	min.s32 	%r317, %r316, 27;
	max.s32 	%r318, %r317, 0;
	mul.lo.s32 	%r319, %r318, %r164;
	cvt.s64.s32 	%rd96, %r319;
	cvt.s64.s32 	%rd97, %r430;
	add.s64 	%rd98, %rd34, %rd97;
	add.s64 	%rd99, %rd98, %rd96;
	shl.b64 	%rd100, %rd99, 2;
	add.s64 	%rd101, %rd1, %rd100;
	ld.global.nc.f32 	%f46, [%rd101+4];
	max.ftz.f32 	%f62, %f24, %f46;
	add.s64 	%rd152, %rd152, 8;
	add.s32 	%r430, %r430, %r26;
	add.s64 	%rd151, %rd151, %rd8;
LBB8_48:                                // %"for maximum.s1.r22$x16.us.us.1"
                                        //   Parent Loop BB8_15 Depth=1
                                        //     Parent Loop BB8_16 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	add.s64 	%rd33, %rd3, %rd152;
	ld.global.nc.u32 	%r311, [%rd33];
	min.s32 	%r312, %r311, 27;
	max.s32 	%r313, %r312, 0;
	mul.lo.s32 	%r314, %r313, %r164;
	cvt.s64.s32 	%rd90, %r314;
	add.s64 	%rd93, %rd151, %rd90;
	shl.b64 	%rd94, %rd93, 2;
	add.s64 	%rd95, %rd1, %rd94;
	ld.global.nc.f32 	%f45, [%rd95+4];
	max.ftz.f32 	%f24, %f62, %f45;
	cvt.u32.u64 	%r315, %rd152;
	setp.ne.s32 	%p27, %r315, 208;
	@%p27 bra 	LBB8_47;
// %bb.49:                              // %"end for maximum.s1.r22$x17.us.us.1"
                                        //   in Loop: Header=BB8_16 Depth=2
	st.global.f32 	[%rd30], %f24;
	add.s32 	%r429, %r429, 1;
	add.s32 	%r428, %r428, %r156;
	add.s32 	%r427, %r427, %r156;
	setp.ne.s32 	%p28, %r429, %r21;
	@%p28 bra 	LBB8_16;
// %bb.50:                              // %"end for maximum.s1.x.xi.xii14.loopexit.us.us.1"
                                        //   in Loop: Header=BB8_15 Depth=1
	add.s32 	%r426, %r426, 1;
	add.s32 	%r425, %r425, %r163;
	setp.eq.s32 	%p29, %r426, 8;
	@%p29 bra 	LBB8_37;
	bra.uni 	LBB8_15;
LBB8_37:                                // %after_bb
	ret;
                                        // -- End function
}
	// .globl	kernel_output_s0_y_y___block_id_y // -- Begin function kernel_output_s0_y_y___block_id_y
.visible .entry kernel_output_s0_y_y___block_id_y(
	.param .u32 kernel_output_s0_y_y___block_id_y_param_0,
	.param .u32 kernel_output_s0_y_y___block_id_y_param_1,
	.param .u32 kernel_output_s0_y_y___block_id_y_param_2,
	.param .u32 kernel_output_s0_y_y___block_id_y_param_3,
	.param .u32 kernel_output_s0_y_y___block_id_y_param_4,
	.param .u32 kernel_output_s0_y_y___block_id_y_param_5,
	.param .u32 kernel_output_s0_y_y___block_id_y_param_6,
	.param .u32 kernel_output_s0_y_y___block_id_y_param_7,
	.param .u32 kernel_output_s0_y_y___block_id_y_param_8,
	.param .u32 kernel_output_s0_y_y___block_id_y_param_9,
	.param .u32 kernel_output_s0_y_y___block_id_y_param_10,
	.param .u64 kernel_output_s0_y_y___block_id_y_param_11,
	.param .u64 kernel_output_s0_y_y___block_id_y_param_12
)                                       // @kernel_output_s0_y_y___block_id_y
{
	.reg .pred 	%p<6>;
	.reg .b32 	%r<128>;
	.reg .b64 	%rd<25>;

// %bb.0:                               // %entry
	ld.param.u32 	%r53, [kernel_output_s0_y_y___block_id_y_param_1];
	setp.lt.s32 	%p1, %r53, 1;
	@%p1 bra 	LBB9_7;
// %bb.1:                               // %"for output.s0.c.preheader"
	ld.param.u32 	%r62, [kernel_output_s0_y_y___block_id_y_param_10];
	ld.param.u32 	%r61, [kernel_output_s0_y_y___block_id_y_param_9];
	ld.param.u32 	%r60, [kernel_output_s0_y_y___block_id_y_param_8];
	ld.param.u32 	%r59, [kernel_output_s0_y_y___block_id_y_param_7];
	ld.param.u32 	%r58, [kernel_output_s0_y_y___block_id_y_param_6];
	ld.param.u32 	%r57, [kernel_output_s0_y_y___block_id_y_param_5];
	ld.param.u32 	%r56, [kernel_output_s0_y_y___block_id_y_param_4];
	ld.param.u32 	%r55, [kernel_output_s0_y_y___block_id_y_param_3];
	ld.param.u32 	%r54, [kernel_output_s0_y_y___block_id_y_param_2];
	ld.param.u32 	%r52, [kernel_output_s0_y_y___block_id_y_param_0];
	ld.param.u64 	%rd3, [kernel_output_s0_y_y___block_id_y_param_12];
	cvta.to.global.u64 	%rd1, %rd3;
	ld.param.u64 	%rd4, [kernel_output_s0_y_y___block_id_y_param_11];
	cvta.to.global.u64 	%rd2, %rd4;
	mov.u32 	%r63, %ctaid.y;
	mov.u32 	%r64, %ctaid.x;
	shl.b32 	%r1, %r63, 4;
	shl.b32 	%r2, %r64, 6;
	min.s32 	%r65, %r1, %r60;
	mov.u32 	%r5, %tid.x;
	mov.u32 	%r66, %tid.y;
	add.s32 	%r67, %r65, %r66;
	add.s32 	%r6, %r67, %r58;
	add.s32 	%r7, %r67, %r54;
	add.s32 	%r8, %r53, -1;
	and.b32  	%r9, %r53, 3;
	setp.eq.s32 	%p2, %r9, 0;
	mov.u32 	%r118, %r55;
	@%p2 bra 	LBB9_4;
// %bb.2:                               // %"for output.s0.c.prol.preheader"
	add.s32 	%r68, %r5, %r61;
	mad.lo.s32 	%r69, %r57, %r55, %r68;
	mad.lo.s32 	%r70, %r56, %r7, %r69;
	add.s32 	%r71, %r70, -1;
	not.b32 	%r72, %r2;
	mov.u32 	%r73, 63;
	sub.s32 	%r74, %r73, %r52;
	max.s32 	%r75, %r72, %r74;
	sub.s32 	%r116, %r71, %r75;
	mad.lo.s32 	%r76, %r52, %r6, %r5;
	add.s32 	%r77, %r59, %r55;
	mad.lo.s32 	%r78, %r62, %r77, %r76;
	add.s32 	%r79, %r78, -1;
	sub.s32 	%r115, %r79, %r75;
	neg.s32 	%r114, %r9;
	mov.u32 	%r118, %r55;
LBB9_3:                                 // %"for output.s0.c.prol"
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.wide.s32 	%rd5, %r115, 4;
	add.s64 	%rd6, %rd2, %rd5;
	ld.global.nc.u32 	%r80, [%rd6];
	mul.wide.s32 	%rd7, %r116, 4;
	add.s64 	%rd8, %rd1, %rd7;
	st.global.u32 	[%rd8], %r80;
	add.s32 	%r118, %r118, 1;
	add.s32 	%r116, %r116, %r57;
	add.s32 	%r115, %r115, %r62;
	add.s32 	%r114, %r114, 1;
	setp.ne.s32 	%p3, %r114, 0;
	@%p3 bra 	LBB9_3;
LBB9_4:                                 // %"for output.s0.c.prol.loopexit"
	setp.lt.u32 	%p4, %r8, 3;
	@%p4 bra 	LBB9_7;
// %bb.5:                               // %"for output.s0.c.preheader5"
	add.s32 	%r3, %r52, -64;
	min.s32 	%r4, %r2, %r3;
	add.s32 	%r81, %r55, %r53;
	sub.s32 	%r127, %r81, %r118;
	add.s32 	%r23, %r4, 1;
	add.s32 	%r82, %r5, %r61;
	mul.lo.s32 	%r83, %r56, %r7;
	add.s32 	%r84, %r82, %r83;
	add.s32 	%r85, %r118, 1;
	mad.lo.s32 	%r86, %r57, %r85, %r84;
	add.s32 	%r126, %r86, -1;
	shl.b32 	%r25, %r57, 2;
	add.s32 	%r87, %r118, 2;
	mad.lo.s32 	%r88, %r57, %r87, %r84;
	add.s32 	%r125, %r88, -1;
	add.s32 	%r89, %r118, 3;
	mad.lo.s32 	%r90, %r57, %r89, %r84;
	add.s32 	%r124, %r90, -1;
	mad.lo.s32 	%r91, %r118, %r57, %r82;
	add.s32 	%r92, %r91, %r83;
	add.s32 	%r123, %r92, -1;
	mad.lo.s32 	%r93, %r52, %r6, %r5;
	add.s32 	%r94, %r118, %r59;
	add.s32 	%r95, %r94, 3;
	mad.lo.s32 	%r96, %r62, %r95, %r93;
	add.s32 	%r122, %r96, -1;
	shl.b32 	%r30, %r62, 2;
	add.s32 	%r97, %r94, 2;
	mad.lo.s32 	%r98, %r62, %r97, %r93;
	add.s32 	%r121, %r98, -1;
	add.s32 	%r99, %r94, 1;
	mad.lo.s32 	%r100, %r62, %r99, %r93;
	add.s32 	%r120, %r100, -1;
	mad.lo.s32 	%r101, %r62, %r94, %r93;
	add.s32 	%r119, %r101, -1;
LBB9_6:                                 // %"for output.s0.c"
                                        // =>This Inner Loop Header: Depth=1
	add.s32 	%r102, %r23, %r119;
	mul.wide.s32 	%rd9, %r102, 4;
	add.s64 	%rd10, %rd2, %rd9;
	ld.global.nc.u32 	%r103, [%rd10];
	add.s32 	%r104, %r23, %r123;
	mul.wide.s32 	%rd11, %r104, 4;
	add.s64 	%rd12, %rd1, %rd11;
	st.global.u32 	[%rd12], %r103;
	add.s32 	%r105, %r23, %r120;
	mul.wide.s32 	%rd13, %r105, 4;
	add.s64 	%rd14, %rd2, %rd13;
	ld.global.nc.u32 	%r106, [%rd14];
	add.s32 	%r107, %r23, %r126;
	mul.wide.s32 	%rd15, %r107, 4;
	add.s64 	%rd16, %rd1, %rd15;
	st.global.u32 	[%rd16], %r106;
	add.s32 	%r108, %r23, %r121;
	mul.wide.s32 	%rd17, %r108, 4;
	add.s64 	%rd18, %rd2, %rd17;
	ld.global.nc.u32 	%r109, [%rd18];
	add.s32 	%r110, %r23, %r125;
	mul.wide.s32 	%rd19, %r110, 4;
	add.s64 	%rd20, %rd1, %rd19;
	st.global.u32 	[%rd20], %r109;
	add.s32 	%r111, %r23, %r122;
	mul.wide.s32 	%rd21, %r111, 4;
	add.s64 	%rd22, %rd2, %rd21;
	ld.global.nc.u32 	%r112, [%rd22];
	add.s32 	%r113, %r23, %r124;
	mul.wide.s32 	%rd23, %r113, 4;
	add.s64 	%rd24, %rd1, %rd23;
	st.global.u32 	[%rd24], %r112;
	add.s32 	%r127, %r127, -4;
	add.s32 	%r126, %r126, %r25;
	add.s32 	%r125, %r125, %r25;
	add.s32 	%r124, %r124, %r25;
	add.s32 	%r123, %r123, %r25;
	add.s32 	%r122, %r122, %r30;
	add.s32 	%r121, %r121, %r30;
	add.s32 	%r120, %r120, %r30;
	add.s32 	%r119, %r119, %r30;
	setp.ne.s32 	%p5, %r127, 0;
	@%p5 bra 	LBB9_6;
LBB9_7:                                 // %"end for output.s0.c"
	ret;
                                        // -- End function
}


add_temp_object_file: /tmp/2rjpS2/max_filter_classic_auto_schedule.a.o
Module.compile(): temporary object_name /tmp/2rjpS2/max_filter_classic_auto_schedule.a.o
emit_file.Compiling to native code...
Module.compile(): static_library_name ./bin/max_filter_classic_auto_schedule.a
file_unlink: /tmp/2rjpS2/max_filter_classic_auto_schedule.a.o
dir_rmdir: /tmp/2rjpS2
Module.compile(): assembly_name ./bin/max_filter_classic_auto_schedule.s
emit_file.Compiling to native code...
Module.compile(): c_header_name ./bin/max_filter_classic_auto_schedule.h
